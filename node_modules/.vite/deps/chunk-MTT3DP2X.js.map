{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-a11y-mixin.js", "../../@vaadin/grid/src/array-data-provider.js", "../../@vaadin/grid/src/vaadin-grid-array-data-provider-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-auto-width-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-reordering-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-resizing-mixin.js", "../../@vaadin/grid/src/vaadin-grid-data-provider-mixin.js", "../../@vaadin/grid/src/vaadin-grid-drag-and-drop-mixin.js", "../../@vaadin/grid/src/vaadin-grid-dynamic-columns-mixin.js", "../../@vaadin/grid/src/vaadin-grid-event-context-mixin.js", "../../@vaadin/grid/src/vaadin-grid-filter-mixin.js", "../../@vaadin/grid/src/vaadin-grid-keyboard-navigation-mixin.js", "../../@vaadin/grid/src/vaadin-grid-row-details-mixin.js", "../../@vaadin/grid/src/vaadin-grid-scroll-mixin.js", "../../@vaadin/grid/src/vaadin-grid-selection-mixin.js", "../../@vaadin/grid/src/vaadin-grid-sort-mixin.js", "../../@vaadin/grid/src/vaadin-grid-styling-mixin.js", "../../@vaadin/grid/src/vaadin-grid-mixin.js", "../../@vaadin/grid/src/vaadin-grid-styles.js", "../../@vaadin/grid/src/vaadin-grid.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { iterateChildren, iterateRowCells } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const A11yMixin = (superClass) =>\r\n  class A11yMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * String used to label the grid to screen reader users.\r\n         * @attr {string} accessible-name\r\n         */\r\n        accessibleName: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n    static get observers() {\r\n      return ['_a11yUpdateGridSize(size, _columnTree)'];\r\n    }\r\n\r\n    /** @private */\r\n    _a11yGetHeaderRowCount(_columnTree) {\r\n      return _columnTree.filter((level) =>\r\n        level.some((col) => col.headerRenderer || (col.path && col.header !== null) || col.header),\r\n      ).length;\r\n    }\r\n\r\n    /** @private */\r\n    _a11yGetFooterRowCount(_columnTree) {\r\n      return _columnTree.filter((level) => level.some((col) => col.headerRenderer)).length;\r\n    }\r\n\r\n    /** @private */\r\n    _a11yUpdateGridSize(size, _columnTree) {\r\n      if (size === undefined || _columnTree === undefined) {\r\n        return;\r\n      }\r\n\r\n      const bodyColumns = _columnTree[_columnTree.length - 1];\r\n      this.$.table.setAttribute(\r\n        'aria-rowcount',\r\n        size + this._a11yGetHeaderRowCount(_columnTree) + this._a11yGetFooterRowCount(_columnTree),\r\n      );\r\n      this.$.table.setAttribute('aria-colcount', (bodyColumns && bodyColumns.length) || 0);\r\n\r\n      this._a11yUpdateHeaderRows();\r\n      this._a11yUpdateFooterRows();\r\n    }\r\n\r\n    /** @protected */\r\n    _a11yUpdateHeaderRows() {\r\n      iterateChildren(this.$.header, (headerRow, index) => {\r\n        headerRow.setAttribute('aria-rowindex', index + 1);\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _a11yUpdateFooterRows() {\r\n      iterateChildren(this.$.footer, (footerRow, index) => {\r\n        footerRow.setAttribute('aria-rowindex', this._a11yGetHeaderRowCount(this._columnTree) + this.size + index + 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {number} index\r\n     * @protected\r\n     */\r\n    _a11yUpdateRowRowindex(row, index) {\r\n      row.setAttribute('aria-rowindex', index + this._a11yGetHeaderRowCount(this._columnTree) + 1);\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {boolean} selected\r\n     * @protected\r\n     */\r\n    _a11yUpdateRowSelected(row, selected) {\r\n      // Jaws reads selection only for rows, NVDA only for cells\r\n      row.setAttribute('aria-selected', Boolean(selected));\r\n      iterateRowCells(row, (cell) => {\r\n        cell.setAttribute('aria-selected', Boolean(selected));\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @protected\r\n     */\r\n    _a11yUpdateRowExpanded(row) {\r\n      if (this.__isRowExpandable(row)) {\r\n        row.setAttribute('aria-expanded', 'false');\r\n      } else if (this.__isRowCollapsible(row)) {\r\n        row.setAttribute('aria-expanded', 'true');\r\n      } else {\r\n        row.removeAttribute('aria-expanded');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {number} level\r\n     * @protected\r\n     */\r\n    _a11yUpdateRowLevel(row, level) {\r\n      // Set level for the expandable rows itself, and all the nested rows.\r\n      if (level > 0 || this.__isRowCollapsible(row) || this.__isRowExpandable(row)) {\r\n        row.setAttribute('aria-level', level + 1);\r\n      } else {\r\n        row.removeAttribute('aria-level');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {!HTMLElement} detailsCell\r\n     * @protected\r\n     */\r\n    _a11ySetRowDetailsCell(row, detailsCell) {\r\n      iterateRowCells(row, (cell) => {\r\n        if (cell !== detailsCell) {\r\n          cell.setAttribute('aria-controls', detailsCell.id);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {number} colspan\r\n     * @protected\r\n     */\r\n    _a11yUpdateCellColspan(cell, colspan) {\r\n      cell.setAttribute('aria-colspan', Number(colspan));\r\n    }\r\n\r\n    /** @protected */\r\n    _a11yUpdateSorters() {\r\n      Array.from(this.querySelectorAll('vaadin-grid-sorter')).forEach((sorter) => {\r\n        let cellContent = sorter.parentNode;\r\n        while (cellContent && cellContent.localName !== 'vaadin-grid-cell-content') {\r\n          cellContent = cellContent.parentNode;\r\n        }\r\n        if (cellContent && cellContent.assignedSlot) {\r\n          const cell = cellContent.assignedSlot.parentNode;\r\n          cell.setAttribute(\r\n            'aria-sort',\r\n            {\r\n              asc: 'ascending',\r\n              desc: 'descending',\r\n            }[String(sorter.direction)] || 'none',\r\n          );\r\n        }\r\n      });\r\n    }\r\n  };\r\n", "/**\r\n * Returns a sub-property of an object\r\n *\r\n * @param {string} path dot-separated path to the sub property\r\n * @param {*} object\r\n * @returns {*}\r\n */\r\nfunction get(path, object) {\r\n  return path.split('.').reduce((obj, property) => obj[property], object);\r\n}\r\n\r\n/**\r\n * Check array of filters/sorters for paths validity, console.warn invalid items\r\n * @param {!Array<!GridFilterDefinition | !GridSorterDefinition>} arrayToCheck The array of filters/sorters to check\r\n * @param {string} action The name of action to include in warning (filtering, sorting)\r\n * @param {!Array<!GridItem>} items\r\n */\r\nfunction checkPaths(arrayToCheck, action, items) {\r\n  if (items.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  let result = true;\r\n\r\n  arrayToCheck.forEach(({ path }) => {\r\n    // Skip simple paths\r\n    if (!path || path.indexOf('.') === -1) {\r\n      return;\r\n    }\r\n\r\n    const parentProperty = path.replace(/\\.[^.]*$/u, ''); // A.b.c -> a.b\r\n    if (get(parentProperty, items[0]) === undefined) {\r\n      console.warn(`Path \"${path}\" used for ${action} does not exist in all of the items, ${action} is disabled.`);\r\n      result = false;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @return {string}\r\n */\r\nfunction normalizeEmptyValue(value) {\r\n  if ([undefined, null].indexOf(value) >= 0) {\r\n    return '';\r\n  } else if (isNaN(value)) {\r\n    return value.toString();\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {unknown} a\r\n * @param {unknown} b\r\n * @return {number}\r\n */\r\nfunction compare(a, b) {\r\n  a = normalizeEmptyValue(a);\r\n  b = normalizeEmptyValue(b);\r\n\r\n  if (a < b) {\r\n    return -1;\r\n  }\r\n  if (a > b) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Sorts the given array of items based on the sorting rules and returns the result.\r\n *\r\n * @param {Array<any>} items\r\n * @param {Array<GridSorterDefinition>} items\r\n * @return {Array<any>}\r\n */\r\nfunction multiSort(items, sortOrders) {\r\n  return items.sort((a, b) => {\r\n    return sortOrders\r\n      .map((sortOrder) => {\r\n        if (sortOrder.direction === 'asc') {\r\n          return compare(get(sortOrder.path, a), get(sortOrder.path, b));\r\n        } else if (sortOrder.direction === 'desc') {\r\n          return compare(get(sortOrder.path, b), get(sortOrder.path, a));\r\n        }\r\n        return 0;\r\n      })\r\n      .reduce((p, n) => {\r\n        return p !== 0 ? p : n;\r\n      }, 0);\r\n  });\r\n}\r\n\r\n/**\r\n * @param {!Array<!GridItem>} items\r\n * @return {!Array<!GridItem>}\r\n */\r\nfunction filter(items, filters) {\r\n  return items.filter((item) => {\r\n    return filters.every((filter) => {\r\n      const value = normalizeEmptyValue(get(filter.path, item));\r\n      const filterValueLowercase = normalizeEmptyValue(filter.value).toString().toLowerCase();\r\n      return value.toString().toLowerCase().includes(filterValueLowercase);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * WARNING: This API is still intended for internal purposes only and\r\n * may change any time.\r\n *\r\n * Creates a new grid compatible data provider that serves the items\r\n * from the given array as data when requested by the grid.\r\n *\r\n * @param {Array<any>} items\r\n * @return {GridDataProvider<any>}\r\n */\r\nexport const createArrayDataProvider = (allItems) => {\r\n  return (params, callback) => {\r\n    let items = allItems ? [...allItems] : [];\r\n\r\n    if (params.filters && checkPaths(params.filters, 'filtering', items)) {\r\n      items = filter(items, params.filters);\r\n    }\r\n\r\n    if (\r\n      Array.isArray(params.sortOrders) &&\r\n      params.sortOrders.length &&\r\n      checkPaths(params.sortOrders, 'sorting', items)\r\n    ) {\r\n      items = multiSort(items, params.sortOrders);\r\n    }\r\n\r\n    const count = Math.min(items.length, params.pageSize);\r\n    const start = params.page * count;\r\n    const end = start + count;\r\n    const slice = items.slice(start, end);\r\n    callback(slice, items.length);\r\n  };\r\n};\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { createArrayDataProvider } from './array-data-provider.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ArrayDataProviderMixin = (superClass) =>\r\n  class ArrayDataProviderMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * An array containing the items which will be passed to renderer functions.\r\n         *\r\n         * @type {Array<!GridItem> | undefined}\r\n         */\r\n        items: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__dataProviderOrItemsChanged(dataProvider, items, isAttached, items.*)'];\r\n    }\r\n\r\n    /** @private */\r\n    __setArrayDataProvider(items) {\r\n      const arrayDataProvider = createArrayDataProvider(this.items, {});\r\n      arrayDataProvider.__items = items;\r\n      this._arrayDataProvider = arrayDataProvider;\r\n      this.size = items.length;\r\n      this.dataProvider = arrayDataProvider;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @protected\r\n     */\r\n    _onDataProviderPageReceived() {\r\n      super._onDataProviderPageReceived();\r\n\r\n      if (this._arrayDataProvider) {\r\n        this.size = this._flatSize;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __dataProviderOrItemsChanged(dataProvider, items, isAttached) {\r\n      if (!isAttached) {\r\n        return;\r\n      }\r\n\r\n      if (this._arrayDataProvider) {\r\n        // Has an items array data provider beforehand\r\n\r\n        if (dataProvider !== this._arrayDataProvider) {\r\n          // A custom data provider was set externally\r\n          this._arrayDataProvider = undefined;\r\n          this.items = undefined;\r\n        } else if (!items) {\r\n          // The items array was unset\r\n          this._arrayDataProvider = undefined;\r\n          this.dataProvider = undefined;\r\n          this.size = 0;\r\n          this.clearCache();\r\n        } else if (this._arrayDataProvider.__items === items) {\r\n          // The items array was modified\r\n          this.clearCache();\r\n        } else {\r\n          // The items array was replaced\r\n          this.__setArrayDataProvider(items);\r\n        }\r\n      } else if (items) {\r\n        // There was no array data provider before items was set\r\n        this.__setArrayDataProvider(items);\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isElementHidden } from '@vaadin/a11y-base/src/focus-utils.js';\r\n\r\n/**\r\n * A mixin providing grid column auto-width functionality.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const ColumnAutoWidthMixin = (superClass) =>\r\n  class extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /** @private */\r\n        __pendingRecalculateColumnWidths: {\r\n          type: Boolean,\r\n          value: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__dataProviderChangedAutoWidth(dataProvider)',\r\n        '__columnTreeChangedAutoWidth(_columnTree)',\r\n        '__flatSizeChangedAutoWidth(_flatSize)',\r\n      ];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.addEventListener('animationend', this.__onAnimationEndAutoWidth);\r\n    }\r\n\r\n    /** @private */\r\n    __onAnimationEndAutoWidth(e) {\r\n      if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\r\n        this.__tryToRecalculateColumnWidthsIfPending();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __dataProviderChangedAutoWidth(_dataProvider) {\r\n      if (this.__hasHadRenderedRowsForColumnWidthCalculation) {\r\n        return;\r\n      }\r\n      // Recalculate column widths when the data provider changes if the grid has not yet had any rendered rows\r\n      // during previous column width calculations\r\n      this.recalculateColumnWidths();\r\n    }\r\n\r\n    /** @private */\r\n    __columnTreeChangedAutoWidth(_columnTree) {\r\n      // Column tree changed, recalculate column widths\r\n      queueMicrotask(() => this.recalculateColumnWidths());\r\n    }\r\n\r\n    /** @private */\r\n    __flatSizeChangedAutoWidth() {\r\n      // Flat size changed, recalculate column widths if pending (asynchronously, to allow grid to render row elements first)\r\n      requestAnimationFrame(() => this.__tryToRecalculateColumnWidthsIfPending());\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onDataProviderPageLoaded() {\r\n      super._onDataProviderPageLoaded();\r\n      // Data provider page loaded, recalculate column widths if there's a pending recalculation\r\n      this.__tryToRecalculateColumnWidthsIfPending();\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _updateFrozenColumn() {\r\n      super._updateFrozenColumn();\r\n      // Frozen columns updated, recalculate column widths if there's a pending recalculation\r\n      this.__tryToRecalculateColumnWidthsIfPending();\r\n    }\r\n\r\n    /** @private */\r\n    __getIntrinsicWidth(col) {\r\n      if (!this.__intrinsicWidthCache.has(col)) {\r\n        this.__calculateAndCacheIntrinsicWidths([col]);\r\n      }\r\n      return this.__intrinsicWidthCache.get(col);\r\n    }\r\n\r\n    /** @private */\r\n    __getDistributedWidth(col, innerColumn) {\r\n      if (col == null || col === this) {\r\n        return 0;\r\n      }\r\n\r\n      const columnWidth = Math.max(\r\n        this.__getIntrinsicWidth(col),\r\n        this.__getDistributedWidth((col.assignedSlot || col).parentElement, col),\r\n      );\r\n\r\n      // We're processing a regular grid-column and not a grid-column-group\r\n      if (!innerColumn) {\r\n        return columnWidth;\r\n      }\r\n\r\n      // At the end, the width of each vaadin-grid-column-group is determined by the sum of the width of its children.\r\n      // Here we determine how much space the vaadin-grid-column-group actually needs to render properly and then we distribute that space\r\n      // to its children, so when we actually do the summation it will be rendered properly.\r\n      // Check out vaadin-grid-column-group:_updateFlexAndWidth\r\n      const columnGroup = col;\r\n      const columnGroupWidth = columnWidth;\r\n      const sumOfWidthOfAllChildColumns = columnGroup._visibleChildColumns\r\n        .map((col) => this.__getIntrinsicWidth(col))\r\n        .reduce((sum, curr) => sum + curr, 0);\r\n\r\n      const extraNecessarySpaceForGridColumnGroup = Math.max(0, columnGroupWidth - sumOfWidthOfAllChildColumns);\r\n\r\n      // The distribution of the extra necessary space is done according to the intrinsic width of each child column.\r\n      // Lets say we need 100 pixels of extra space for the grid-column-group to render properly\r\n      // it has two grid-column children, |100px|300px| in total 400px\r\n      // the first column gets 25px of the additional space (100/400)*100 = 25\r\n      // the second column gets the 75px of the additional space (300/400)*100 = 75\r\n      const proportionOfExtraSpace = this.__getIntrinsicWidth(innerColumn) / sumOfWidthOfAllChildColumns;\r\n      const shareOfInnerColumnFromNecessaryExtraSpace = proportionOfExtraSpace * extraNecessarySpaceForGridColumnGroup;\r\n\r\n      return this.__getIntrinsicWidth(innerColumn) + shareOfInnerColumnFromNecessaryExtraSpace;\r\n    }\r\n\r\n    /**\r\n     * @param {!Array<!GridColumn>} cols the columns to auto size based on their content width\r\n     * @private\r\n     */\r\n    _recalculateColumnWidths() {\r\n      // Flush to make sure DOM is up-to-date when measuring the column widths\r\n      this.__virtualizer.flush();\r\n      [...this.$.header.children, ...this.$.footer.children].forEach((row) => {\r\n        if (row.__debounceUpdateHeaderFooterRowVisibility) {\r\n          row.__debounceUpdateHeaderFooterRowVisibility.flush();\r\n        }\r\n      });\r\n\r\n      this.__hasHadRenderedRowsForColumnWidthCalculation ||= this._getRenderedRows().length > 0;\r\n\r\n      this.__intrinsicWidthCache = new Map();\r\n      // Cache the viewport rows to avoid unnecessary reflows while measuring the column widths\r\n      const fvi = this._firstVisibleIndex;\r\n      const lvi = this._lastVisibleIndex;\r\n      this.__viewportRowsCache = this._getRenderedRows().filter((row) => row.index >= fvi && row.index <= lvi);\r\n\r\n      // Pre-cache the intrinsic width of each column\r\n      const cols = this.__getAutoWidthColumns();\r\n      this.__calculateAndCacheIntrinsicWidths(cols);\r\n\r\n      cols.forEach((col) => {\r\n        col.width = `${this.__getDistributedWidth(col)}px`;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Toggles the cell content for the given column to use or not use auto width.\r\n     *\r\n     * While content for all the column cells uses auto width (instead of the default 100%),\r\n     * their offsetWidth can be used to calculate the collective intrinsic width of the column.\r\n     *\r\n     * @private\r\n     */\r\n    __setVisibleCellContentAutoWidth(col, autoWidth) {\r\n      col._allCells\r\n        .filter((cell) => {\r\n          if (this.$.items.contains(cell)) {\r\n            return this.__viewportRowsCache.includes(cell.parentElement);\r\n          }\r\n          return true;\r\n        })\r\n        .forEach((cell) => {\r\n          cell.__measuringAutoWidth = autoWidth;\r\n\r\n          if (cell.__measuringAutoWidth) {\r\n            // Store the original inline width of the cell to restore it later\r\n            cell.__originalWidth = cell.style.width;\r\n            // Prepare the cell for having its intrinsic width measured\r\n            cell.style.width = 'auto';\r\n            cell.style.position = 'absolute';\r\n          } else {\r\n            // Restore the original width\r\n            cell.style.width = cell.__originalWidth;\r\n            delete cell.__originalWidth;\r\n            cell.style.position = '';\r\n          }\r\n        });\r\n\r\n      if (autoWidth) {\r\n        this.$.scroller.setAttribute('measuring-auto-width', '');\r\n      } else {\r\n        this.$.scroller.removeAttribute('measuring-auto-width');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum intrinsic width of the cell content in the given column.\r\n     * Only cells which are marked for measuring auto width are considered.\r\n     *\r\n     * @private\r\n     */\r\n    __getAutoWidthCellsMaxWidth(col) {\r\n      // Note: _allCells only contains cells which are currently rendered in DOM\r\n      return col._allCells.reduce((width, cell) => {\r\n        // Add 1px buffer to the offset width to avoid too narrow columns (sub-pixel rendering)\r\n        return cell.__measuringAutoWidth ? Math.max(width, cell.offsetWidth + 1) : width;\r\n      }, 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates and caches the intrinsic width of each given column.\r\n     *\r\n     * @private\r\n     */\r\n    __calculateAndCacheIntrinsicWidths(cols) {\r\n      // Make all the columns use auto width at once before measuring to\r\n      // avoid reflows in between the measurements\r\n      cols.forEach((col) => this.__setVisibleCellContentAutoWidth(col, true));\r\n      // Measure and cache\r\n      cols.forEach((col) => {\r\n        const width = this.__getAutoWidthCellsMaxWidth(col);\r\n        this.__intrinsicWidthCache.set(col, width);\r\n      });\r\n      // Reset the columns to use 100% width\r\n      cols.forEach((col) => this.__setVisibleCellContentAutoWidth(col, false));\r\n    }\r\n\r\n    /**\r\n     * Updates the `width` of all columns which have `autoWidth` set to `true`.\r\n     */\r\n    recalculateColumnWidths() {\r\n      if (!this.__isReadyForColumnWidthCalculation()) {\r\n        this.__pendingRecalculateColumnWidths = true;\r\n        return;\r\n      }\r\n      this._recalculateColumnWidths();\r\n    }\r\n\r\n    /**\r\n     * This internal method should be called whenever a condition that may have prevented\r\n     * previous column width calculation is resolved.\r\n     * @private\r\n     */\r\n    __tryToRecalculateColumnWidthsIfPending() {\r\n      if (!this.__pendingRecalculateColumnWidths) {\r\n        return;\r\n      }\r\n      this.__pendingRecalculateColumnWidths = false;\r\n      this.recalculateColumnWidths();\r\n    }\r\n\r\n    /** @private */\r\n    __getAutoWidthColumns() {\r\n      return this._getColumns().filter((col) => !col.hidden && col.autoWidth);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the grid is ready for column width calculation, false otherwise.\r\n     * @private\r\n     */\r\n    __isReadyForColumnWidthCalculation() {\r\n      if (!this._columnTree) {\r\n        return false;\r\n      }\r\n\r\n      const undefinedCols = this.__getAutoWidthColumns().filter((col) => !customElements.get(col.localName));\r\n      if (undefinedCols.length) {\r\n        // Some of the columns are not defined yet, wait for them to be defined before measuring\r\n        Promise.all(undefinedCols.map((col) => customElements.whenDefined(col.localName))).then(() => {\r\n          this.__tryToRecalculateColumnWidthsIfPending();\r\n        });\r\n        return false;\r\n      }\r\n\r\n      // Delay recalculation if any rows are missing an index.\r\n      // This can happen during the grid's initialization if the recalculation is triggered\r\n      // as a result of the data provider responding synchronously to a page request created\r\n      // in the middle of the virtualizer update loop. In this case, rows after the one that\r\n      // triggered the page request may not have an index property yet. The lack of index\r\n      // prevents _onDataProviderPageReceived from requesting children for these rows,\r\n      // resulting in loading state being set to false and the recalculation beginning\r\n      // before all the data is loaded. Note, rows without index get updated in later iterations\r\n      // of the virtualizer update loop, ensuring the grid eventually reaches a stable state.\r\n      const hasRowsWithUndefinedIndex = [...this.$.items.children].some((row) => row.index === undefined);\r\n\r\n      const debouncingHiddenChanged = this._debouncerHiddenChanged && this._debouncerHiddenChanged.isActive();\r\n\r\n      const debouncingUpdateFrozenColumn =\r\n        this.__debounceUpdateFrozenColumn && this.__debounceUpdateFrozenColumn.isActive();\r\n\r\n      return (\r\n        !this._dataProviderController.isLoading() &&\r\n        !hasRowsWithUndefinedIndex &&\r\n        !isElementHidden(this) &&\r\n        !debouncingHiddenChanged &&\r\n        !debouncingUpdateFrozenColumn\r\n      );\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\r\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\r\nimport { iterateChildren, updateColumnOrders } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ColumnReorderingMixin = (superClass) =>\r\n  class ColumnReorderingMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Set to true to allow column reordering.\r\n         * @attr {boolean} column-reordering-allowed\r\n         * @type {boolean}\r\n         */\r\n        columnReorderingAllowed: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /** @private */\r\n        _orderBaseScope: {\r\n          type: Number,\r\n          value: 10000000,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_updateOrders(_columnTree)'];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      addListener(this, 'track', this._onTrackEvent);\r\n      this._reorderGhost = this.shadowRoot.querySelector('[part=\"reorder-ghost\"]');\r\n\r\n      this.addEventListener('touchstart', this._onTouchStart.bind(this));\r\n      this.addEventListener('touchmove', this._onTouchMove.bind(this));\r\n      this.addEventListener('touchend', this._onTouchEnd.bind(this));\r\n      this.addEventListener('contextmenu', this._onContextMenu.bind(this));\r\n    }\r\n\r\n    /** @private */\r\n    _onContextMenu(e) {\r\n      if (this.hasAttribute('reordering')) {\r\n        e.preventDefault();\r\n\r\n        // A contextmenu event is fired on mobile Chrome on long-press\r\n        // (which should start reordering). Don't end the reorder on touch devices.\r\n        if (!isTouch) {\r\n          // Context menu cancels the track gesture on desktop without firing an end event.\r\n          // End the reorder manually.\r\n          this._onTrackEnd();\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onTouchStart(e) {\r\n      // Touch event, delay activation by 100ms\r\n      this._startTouchReorderTimeout = setTimeout(() => {\r\n        this._onTrackStart({\r\n          detail: {\r\n            x: e.touches[0].clientX,\r\n            y: e.touches[0].clientY,\r\n          },\r\n        });\r\n      }, 100);\r\n    }\r\n\r\n    /** @private */\r\n    _onTouchMove(e) {\r\n      if (this._draggedColumn) {\r\n        e.preventDefault();\r\n      }\r\n      clearTimeout(this._startTouchReorderTimeout);\r\n    }\r\n\r\n    /** @private */\r\n    _onTouchEnd() {\r\n      clearTimeout(this._startTouchReorderTimeout);\r\n      this._onTrackEnd();\r\n    }\r\n\r\n    /** @private */\r\n    _onTrackEvent(e) {\r\n      if (e.detail.state === 'start') {\r\n        const path = e.composedPath();\r\n        const headerCell = path[path.indexOf(this.$.header) - 2];\r\n        if (!headerCell || !headerCell._content) {\r\n          // Not a header column\r\n          return;\r\n        }\r\n\r\n        if (headerCell._content.contains(this.getRootNode().activeElement)) {\r\n          // Something was focused inside the cell\r\n          return;\r\n        }\r\n\r\n        if (this.$.scroller.hasAttribute('column-resizing')) {\r\n          // Resizing is in progress\r\n          return;\r\n        }\r\n\r\n        if (!this._touchDevice) {\r\n          // Not a touch device\r\n          this._onTrackStart(e);\r\n        }\r\n      } else if (e.detail.state === 'track') {\r\n        this._onTrack(e);\r\n      } else if (e.detail.state === 'end') {\r\n        this._onTrackEnd(e);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onTrackStart(e) {\r\n      if (!this.columnReorderingAllowed) {\r\n        return;\r\n      }\r\n\r\n      // Cancel reordering if there are draggable nodes on the event path\r\n      const path = e.composedPath && e.composedPath();\r\n      if (path && path.some((node) => node.hasAttribute && node.hasAttribute('draggable'))) {\r\n        return;\r\n      }\r\n\r\n      const headerCell = this._cellFromPoint(e.detail.x, e.detail.y);\r\n      if (!headerCell || !headerCell.getAttribute('part').includes('header-cell')) {\r\n        return;\r\n      }\r\n\r\n      this.toggleAttribute('reordering', true);\r\n      this._draggedColumn = headerCell._column;\r\n      while (this._draggedColumn.parentElement.childElementCount === 1) {\r\n        // This is the only column in the group, drag the whole group instead\r\n        this._draggedColumn = this._draggedColumn.parentElement;\r\n      }\r\n      this._setSiblingsReorderStatus(this._draggedColumn, 'allowed');\r\n      this._draggedColumn._reorderStatus = 'dragging';\r\n\r\n      this._updateGhost(headerCell);\r\n      this._reorderGhost.style.visibility = 'visible';\r\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\r\n      this._autoScroller();\r\n    }\r\n\r\n    /** @private */\r\n    _onTrack(e) {\r\n      if (!this._draggedColumn) {\r\n        // Reordering didn't start. Skip this event.\r\n        return;\r\n      }\r\n\r\n      const targetCell = this._cellFromPoint(e.detail.x, e.detail.y);\r\n      if (!targetCell) {\r\n        return;\r\n      }\r\n\r\n      const targetColumn = this._getTargetColumn(targetCell, this._draggedColumn);\r\n      if (\r\n        this._isSwapAllowed(this._draggedColumn, targetColumn) &&\r\n        this._isSwappableByPosition(targetColumn, e.detail.x)\r\n      ) {\r\n        // Get the header level of the target column (and the dragged column)\r\n        const columnTreeLevel = this._columnTree.findIndex((level) => level.includes(targetColumn));\r\n        // Get the columns on that level in visual order\r\n        const levelColumnsInOrder = this._getColumnsInOrder(columnTreeLevel);\r\n\r\n        // Index of the column being dragged\r\n        const startIndex = levelColumnsInOrder.indexOf(this._draggedColumn);\r\n        // Index of the column being dragged over\r\n        const endIndex = levelColumnsInOrder.indexOf(targetColumn);\r\n\r\n        // Direction of iteration\r\n        const direction = startIndex < endIndex ? 1 : -1;\r\n\r\n        // Iteratively swap all the columns from the dragged column to the target column\r\n        for (let i = startIndex; i !== endIndex; i += direction) {\r\n          this._swapColumnOrders(this._draggedColumn, levelColumnsInOrder[i + direction]);\r\n        }\r\n      }\r\n\r\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\r\n      this._lastDragClientX = e.detail.x;\r\n    }\r\n\r\n    /** @private */\r\n    _onTrackEnd() {\r\n      if (!this._draggedColumn) {\r\n        // Reordering didn't start. Skip this event.\r\n        return;\r\n      }\r\n\r\n      this.toggleAttribute('reordering', false);\r\n      this._draggedColumn._reorderStatus = '';\r\n      this._setSiblingsReorderStatus(this._draggedColumn, '');\r\n      this._draggedColumn = null;\r\n      this._lastDragClientX = null;\r\n      this._reorderGhost.style.visibility = 'hidden';\r\n\r\n      this.dispatchEvent(\r\n        new CustomEvent('column-reorder', {\r\n          detail: {\r\n            columns: this._getColumnsInOrder(),\r\n          },\r\n        }),\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Returns the columns (or column groups) on the specified header level in visual order.\r\n     * By default, the bottom level is used.\r\n     *\r\n     * @return {!Array<!GridColumn>}\r\n     * @protected\r\n     */\r\n    _getColumnsInOrder(headerLevel = this._columnTree.length - 1) {\r\n      return this._columnTree[headerLevel].filter((c) => !c.hidden).sort((b, a) => b._order - a._order);\r\n    }\r\n\r\n    /**\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {HTMLElement | undefined}\r\n     * @protected\r\n     */\r\n    _cellFromPoint(x = 0, y = 0) {\r\n      if (!this._draggedColumn) {\r\n        this.$.scroller.toggleAttribute('no-content-pointer-events', true);\r\n      }\r\n      const elementFromPoint = this.shadowRoot.elementFromPoint(x, y);\r\n      this.$.scroller.toggleAttribute('no-content-pointer-events', false);\r\n\r\n      return this._getCellFromElement(elementFromPoint);\r\n    }\r\n\r\n    /** @private */\r\n    _getCellFromElement(element) {\r\n      if (element) {\r\n        // Check if element is a cell\r\n        if (element._column) {\r\n          return element;\r\n        }\r\n        // Check if element is the cell of a focus button mode column\r\n        const { parentElement } = element;\r\n        if (parentElement && parentElement._focusButton === element) {\r\n          return parentElement;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * @param {number} eventClientX\r\n     * @param {number} eventClientY\r\n     * @protected\r\n     */\r\n    _updateGhostPosition(eventClientX, eventClientY) {\r\n      const ghostRect = this._reorderGhost.getBoundingClientRect();\r\n      // // This is where we want to position the ghost\r\n      const targetLeft = eventClientX - ghostRect.width / 2;\r\n      const targetTop = eventClientY - ghostRect.height / 2;\r\n      // Current position\r\n      const _left = parseInt(this._reorderGhost._left || 0);\r\n      const _top = parseInt(this._reorderGhost._top || 0);\r\n      // Reposition the ghost\r\n      this._reorderGhost._left = _left - (ghostRect.left - targetLeft);\r\n      this._reorderGhost._top = _top - (ghostRect.top - targetTop);\r\n      this._reorderGhost.style.transform = `translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`;\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} cell\r\n     * @return {!HTMLElement}\r\n     * @protected\r\n     */\r\n    _updateGhost(cell) {\r\n      const ghost = this._reorderGhost;\r\n      ghost.textContent = cell._content.innerText;\r\n      const style = window.getComputedStyle(cell);\r\n      [\r\n        'boxSizing',\r\n        'display',\r\n        'width',\r\n        'height',\r\n        'background',\r\n        'alignItems',\r\n        'padding',\r\n        'border',\r\n        'flex-direction',\r\n        'overflow',\r\n      ].forEach((propertyName) => {\r\n        ghost.style[propertyName] = style[propertyName];\r\n      });\r\n      return ghost;\r\n    }\r\n\r\n    /** @private */\r\n    _updateOrders(columnTree) {\r\n      if (columnTree === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Reset all column orders\r\n      columnTree[0].forEach((column) => {\r\n        column._order = 0;\r\n      });\r\n      // Set order numbers to top-level columns\r\n      updateColumnOrders(columnTree[0], this._orderBaseScope, 0);\r\n    }\r\n\r\n    /**\r\n     * @param {!GridColumn} column\r\n     * @param {string} status\r\n     * @protected\r\n     */\r\n    _setSiblingsReorderStatus(column, status) {\r\n      iterateChildren(column.parentNode, (sibling) => {\r\n        if (/column/u.test(sibling.localName) && this._isSwapAllowed(sibling, column)) {\r\n          sibling._reorderStatus = status;\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _autoScroller() {\r\n      if (this._lastDragClientX) {\r\n        const rightDiff = this._lastDragClientX - this.getBoundingClientRect().right + 50;\r\n        const leftDiff = this.getBoundingClientRect().left - this._lastDragClientX + 50;\r\n\r\n        if (rightDiff > 0) {\r\n          this.$.table.scrollLeft += rightDiff / 10;\r\n        } else if (leftDiff > 0) {\r\n          this.$.table.scrollLeft -= leftDiff / 10;\r\n        }\r\n      }\r\n\r\n      if (this._draggedColumn) {\r\n        setTimeout(() => this._autoScroller(), 10);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {GridColumn | undefined} column1\r\n     * @param {GridColumn | undefined} column2\r\n     * @return {boolean | undefined}\r\n     * @protected\r\n     */\r\n    _isSwapAllowed(column1, column2) {\r\n      if (column1 && column2) {\r\n        const differentColumns = column1 !== column2;\r\n        const sameParent = column1.parentElement === column2.parentElement;\r\n        const sameFrozen =\r\n          (column1.frozen && column2.frozen) || // Both columns are frozen\r\n          (column1.frozenToEnd && column2.frozenToEnd) || // Both columns are frozen to end\r\n          (!column1.frozen && !column1.frozenToEnd && !column2.frozen && !column2.frozenToEnd);\r\n        return differentColumns && sameParent && sameFrozen;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!GridColumn} targetColumn\r\n     * @param {number} clientX\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isSwappableByPosition(targetColumn, clientX) {\r\n      const targetCell = Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~=\"cell\"]')).find((cell) =>\r\n        targetColumn.contains(cell._column),\r\n      );\r\n      const sourceCellRect = this.$.header\r\n        .querySelector('tr:not([hidden]) [reorder-status=dragging]')\r\n        .getBoundingClientRect();\r\n      const targetRect = targetCell.getBoundingClientRect();\r\n      if (targetRect.left > sourceCellRect.left) {\r\n        return clientX > targetRect.right - sourceCellRect.width;\r\n      }\r\n      return clientX < targetRect.left + sourceCellRect.width;\r\n    }\r\n\r\n    /**\r\n     * @param {!GridColumn} column1\r\n     * @param {!GridColumn} column2\r\n     * @protected\r\n     */\r\n    _swapColumnOrders(column1, column2) {\r\n      [column1._order, column2._order] = [column2._order, column1._order];\r\n      this._debounceUpdateFrozenColumn();\r\n      this._updateFirstAndLastColumn();\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement | undefined} targetCell\r\n     * @param {GridColumn} draggedColumn\r\n     * @return {GridColumn | undefined}\r\n     * @protected\r\n     */\r\n    _getTargetColumn(targetCell, draggedColumn) {\r\n      if (targetCell && draggedColumn) {\r\n        let candidate = targetCell._column;\r\n        while (candidate.parentElement !== draggedColumn.parentElement && candidate !== this) {\r\n          candidate = candidate.parentElement;\r\n        }\r\n        if (candidate.parentElement === draggedColumn.parentElement) {\r\n          return candidate;\r\n        }\r\n        return targetCell._column;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fired when the columns in the grid are reordered.\r\n     *\r\n     * @event column-reorder\r\n     * @param {Object} detail\r\n     * @param {Object} detail.columns the columns in the new order\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ColumnResizingMixin = (superClass) =>\r\n  class ColumnResizingMixin extends superClass {\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      const scroller = this.$.scroller;\r\n      addListener(scroller, 'track', this._onHeaderTrack.bind(this));\r\n\r\n      // Disallow scrolling while resizing\r\n      scroller.addEventListener('touchmove', (e) => scroller.hasAttribute('column-resizing') && e.preventDefault());\r\n\r\n      // Disable contextmenu on any resize separator.\r\n      scroller.addEventListener(\r\n        'contextmenu',\r\n        (e) => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault(),\r\n      );\r\n\r\n      // Disable native cell focus when resizing\r\n      scroller.addEventListener(\r\n        'mousedown',\r\n        (e) => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault(),\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    _onHeaderTrack(e) {\r\n      const handle = e.target;\r\n      if (handle.getAttribute('part') === 'resize-handle') {\r\n        const cell = handle.parentElement;\r\n        let column = cell._column;\r\n\r\n        this.$.scroller.toggleAttribute('column-resizing', true);\r\n\r\n        // Get the target column to resize\r\n        while (column.localName === 'vaadin-grid-column-group') {\r\n          column = column._childColumns\r\n            .slice(0)\r\n            .sort((a, b) => a._order - b._order)\r\n            .filter((column) => !column.hidden)\r\n            .pop();\r\n        }\r\n\r\n        const isRTL = this.__isRTL;\r\n        const eventX = e.detail.x;\r\n        const columnRowCells = Array.from(this.$.header.querySelectorAll('[part~=\"row\"]:last-child [part~=\"cell\"]'));\r\n        const targetCell = columnRowCells.find((cell) => cell._column === column);\r\n        // Resize the target column\r\n        if (targetCell.offsetWidth) {\r\n          const style = getComputedStyle(targetCell._content);\r\n          const minWidth =\r\n            10 +\r\n            parseInt(style.paddingLeft) +\r\n            parseInt(style.paddingRight) +\r\n            parseInt(style.borderLeftWidth) +\r\n            parseInt(style.borderRightWidth) +\r\n            parseInt(style.marginLeft) +\r\n            parseInt(style.marginRight);\r\n\r\n          let maxWidth;\r\n\r\n          const cellWidth = targetCell.offsetWidth;\r\n          const cellRect = targetCell.getBoundingClientRect();\r\n\r\n          // For cells frozen to end, resize handle is flipped horizontally.\r\n          if (targetCell.hasAttribute('frozen-to-end')) {\r\n            maxWidth = cellWidth + (isRTL ? eventX - cellRect.right : cellRect.left - eventX);\r\n          } else {\r\n            maxWidth = cellWidth + (isRTL ? cellRect.left - eventX : eventX - cellRect.right);\r\n          }\r\n\r\n          column.width = `${Math.max(minWidth, maxWidth)}px`;\r\n          column.flexGrow = 0;\r\n        }\r\n        // Fix width and flex-grow for all preceding columns\r\n        columnRowCells\r\n          .sort((a, b) => a._column._order - b._column._order)\r\n          .forEach((cell, index, array) => {\r\n            if (index < array.indexOf(targetCell)) {\r\n              cell._column.width = `${cell.offsetWidth}px`;\r\n              cell._column.flexGrow = 0;\r\n            }\r\n          });\r\n\r\n        const cellFrozenToEnd = this._frozenToEndCells[0];\r\n\r\n        // When handle moves below the cell frozen to end, scroll into view.\r\n        if (cellFrozenToEnd && this.$.table.scrollWidth > this.$.table.offsetWidth) {\r\n          const frozenRect = cellFrozenToEnd.getBoundingClientRect();\r\n          const offset = eventX - (isRTL ? frozenRect.right : frozenRect.left);\r\n\r\n          if ((isRTL && offset <= 0) || (!isRTL && offset >= 0)) {\r\n            this.$.table.scrollLeft += offset;\r\n          }\r\n        }\r\n\r\n        if (e.detail.state === 'end') {\r\n          this.$.scroller.toggleAttribute('column-resizing', false);\r\n          this.dispatchEvent(\r\n            new CustomEvent('column-resize', {\r\n              detail: { resizedColumn: column },\r\n            }),\r\n          );\r\n        }\r\n\r\n        // Notify resize\r\n        this._resizeHandler();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fired when a column in the grid is resized by the user.\r\n     *\r\n     * @event column-resize\r\n     * @param {Object} detail\r\n     * @param {Object} detail.resizedColumn the column that was resized\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { microTask, timeOut } from '@vaadin/component-base/src/async.js';\r\nimport { DataProviderController } from '@vaadin/component-base/src/data-provider-controller/data-provider-controller.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\nimport { getBodyRowCells, updateCellsPart, updateState } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const DataProviderMixin = (superClass) =>\r\n  class DataProviderMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The number of root-level items in the grid.\r\n         * @attr {number} size\r\n         * @type {number}\r\n         */\r\n        size: {\r\n          type: Number,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {number}\r\n         * @protected\r\n         */\r\n        _flatSize: {\r\n          type: Number,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Number of items fetched at a time from the dataprovider.\r\n         * @attr {number} page-size\r\n         * @type {number}\r\n         */\r\n        pageSize: {\r\n          type: Number,\r\n          value: 50,\r\n          observer: '_pageSizeChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Function that provides items lazily. Receives arguments `params`, `callback`\r\n         *\r\n         * `params.page` Requested page index\r\n         *\r\n         * `params.pageSize` Current page size\r\n         *\r\n         * `params.filters` Currently applied filters\r\n         *\r\n         * `params.sortOrders` Currently applied sorting orders\r\n         *\r\n         * `params.parentItem` When tree is used, and sublevel items\r\n         * are requested, reference to parent item of the requested sublevel.\r\n         * Otherwise `undefined`.\r\n         *\r\n         * `callback(items, size)` Callback function with arguments:\r\n         *   - `items` Current page of items\r\n         *   - `size` Total number of items. When tree sublevel items\r\n         *     are requested, total number of items in the requested sublevel.\r\n         *     Optional when tree is not used, required for tree.\r\n         *\r\n         * @type {GridDataProvider | null | undefined}\r\n         */\r\n        dataProvider: {\r\n          type: Object,\r\n          notify: true,\r\n          observer: '_dataProviderChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * `true` while data is being requested from the data provider.\r\n         */\r\n        loading: {\r\n          type: Boolean,\r\n          notify: true,\r\n          readOnly: true,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * @protected\r\n         */\r\n        _hasData: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path to an item sub-property that indicates whether the item has child items.\r\n         * @attr {string} item-has-children-path\r\n         */\r\n        itemHasChildrenPath: {\r\n          type: String,\r\n          value: 'children',\r\n          observer: '__itemHasChildrenPathChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path to an item sub-property that identifies the item.\r\n         * @attr {string} item-id-path\r\n         */\r\n        itemIdPath: {\r\n          type: String,\r\n          value: null,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * An array that contains the expanded items.\r\n         * @type {!Array<!GridItem>}\r\n         */\r\n        expandedItems: {\r\n          type: Object,\r\n          notify: true,\r\n          value: () => [],\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        __expandedKeys: {\r\n          type: Object,\r\n          computed: '__computeExpandedKeys(itemIdPath, expandedItems)',\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_sizeChanged(size)', '_expandedItemsChanged(expandedItems)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      /** @type {DataProviderController} */\r\n      this._dataProviderController = new DataProviderController(this, {\r\n        size: this.size || 0,\r\n        pageSize: this.pageSize,\r\n        getItemId: this.getItemId.bind(this),\r\n        isExpanded: this._isExpanded.bind(this),\r\n        dataProvider: this.dataProvider ? this.dataProvider.bind(this) : null,\r\n        dataProviderParams: () => {\r\n          return {\r\n            sortOrders: this._mapSorters(),\r\n            filters: this._mapFilters(),\r\n          };\r\n        },\r\n      });\r\n\r\n      this._dataProviderController.addEventListener('page-requested', this._onDataProviderPageRequested.bind(this));\r\n      this._dataProviderController.addEventListener('page-received', this._onDataProviderPageReceived.bind(this));\r\n      this._dataProviderController.addEventListener('page-loaded', this._onDataProviderPageLoaded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n     */\r\n    get _cache() {\r\n      console.warn('<vaadin-grid> The `_cache` property is deprecated and will be removed in Vaadin 25.');\r\n      return this._dataProviderController.rootCache;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n     */\r\n    get _effectiveSize() {\r\n      console.warn('<vaadin-grid> The `_effectiveSize` property is deprecated and will be removed in Vaadin 25.');\r\n      return this._flatSize;\r\n    }\r\n\r\n    /** @private */\r\n    _sizeChanged(size) {\r\n      this._dataProviderController.rootCache.size = size;\r\n      this._dataProviderController.recalculateFlatSize();\r\n      this._flatSize = this._dataProviderController.flatSize;\r\n    }\r\n\r\n    /** @private */\r\n    __itemHasChildrenPathChanged(value, oldValue) {\r\n      if (!oldValue && value === 'children') {\r\n        // Avoid an unnecessary content update on init.\r\n        return;\r\n      }\r\n      this.requestContentUpdate();\r\n    }\r\n\r\n    /**\r\n     * @param {number} index\r\n     * @param {HTMLElement} el\r\n     * @protected\r\n     */\r\n    _getItem(index, el) {\r\n      el.index = index;\r\n\r\n      const { item } = this._dataProviderController.getFlatIndexContext(index);\r\n      if (item) {\r\n        this.__updateLoading(el, false);\r\n        this._updateItem(el, item);\r\n        if (this._isExpanded(item)) {\r\n          this._dataProviderController.ensureFlatIndexHierarchy(index);\r\n        }\r\n      } else {\r\n        this.__updateLoading(el, true);\r\n        this._dataProviderController.ensureFlatIndexLoaded(index);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {boolean} loading\r\n     * @private\r\n     */\r\n    __updateLoading(row, loading) {\r\n      const cells = getBodyRowCells(row);\r\n\r\n      // Row state attribute\r\n      updateState(row, 'loading', loading);\r\n\r\n      // Cells part attribute\r\n      updateCellsPart(cells, 'loading-row-cell', loading);\r\n\r\n      if (loading) {\r\n        // Run style generators for the loading row to have custom names cleared\r\n        this._generateCellClassNames(row);\r\n        this._generateCellPartNames(row);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns a value that identifies the item. Uses `itemIdPath` if available.\r\n     * Can be customized by overriding.\r\n     * @param {!GridItem} item\r\n     * @return {!GridItem | !unknown}\r\n     */\r\n    getItemId(item) {\r\n      return this.itemIdPath ? get(this.itemIdPath, item) : item;\r\n    }\r\n\r\n    /**\r\n     * @param {!GridItem} item\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isExpanded(item) {\r\n      return this.__expandedKeys && this.__expandedKeys.has(this.getItemId(item));\r\n    }\r\n\r\n    /** @private */\r\n    _expandedItemsChanged() {\r\n      this._dataProviderController.recalculateFlatSize();\r\n      this._flatSize = this._dataProviderController.flatSize;\r\n      this.__updateVisibleRows();\r\n    }\r\n\r\n    /** @private */\r\n    __computeExpandedKeys(_itemIdPath, expandedItems) {\r\n      const expanded = expandedItems || [];\r\n      const expandedKeys = new Set();\r\n      expanded.forEach((item) => {\r\n        expandedKeys.add(this.getItemId(item));\r\n      });\r\n\r\n      return expandedKeys;\r\n    }\r\n\r\n    /**\r\n     * Expands the given item tree.\r\n     * @param {!GridItem} item\r\n     */\r\n    expandItem(item) {\r\n      if (!this._isExpanded(item)) {\r\n        this.expandedItems = [...this.expandedItems, item];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Collapses the given item tree.\r\n     * @param {!GridItem} item\r\n     */\r\n    collapseItem(item) {\r\n      if (this._isExpanded(item)) {\r\n        this.expandedItems = this.expandedItems.filter((i) => !this._itemsEqual(i, item));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {number} index\r\n     * @return {number}\r\n     * @protected\r\n     */\r\n    _getIndexLevel(index = 0) {\r\n      const { level } = this._dataProviderController.getFlatIndexContext(index);\r\n      return level;\r\n    }\r\n\r\n    /**\r\n     * @param {number} page\r\n     * @param {ItemCache} cache\r\n     * @protected\r\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n     */\r\n    _loadPage(page, cache) {\r\n      console.warn('<vaadin-grid> The `_loadPage` method is deprecated and will be removed in Vaadin 25.');\r\n      this._dataProviderController.__loadCachePage(cache, page);\r\n    }\r\n\r\n    /** @protected */\r\n    _onDataProviderPageRequested() {\r\n      this._setLoading(true);\r\n    }\r\n\r\n    /** @protected */\r\n    _onDataProviderPageReceived() {\r\n      // If the page response affected the flat size\r\n      if (this._flatSize !== this._dataProviderController.flatSize) {\r\n        // Schedule an update of all rendered rows by _debouncerApplyCachedData,\r\n        // to ensure that all pages associated with the rendered rows are loaded.\r\n        this._shouldUpdateAllRenderedRowsAfterPageLoad = true;\r\n\r\n        // TODO: Updating the flat size property can still result in a synchonous virtualizer update\r\n        // if the size change requires the virtualizer to increase the amount of physical elements\r\n        // to display new items e.g. the viewport fits 10 items and the size changes from 1 to 10.\r\n        // This is something to be optimized in the future.\r\n        this._flatSize = this._dataProviderController.flatSize;\r\n      }\r\n\r\n      // After updating the cache, check if some of the expanded items should have sub-caches loaded\r\n      this._getRenderedRows().forEach((row) => {\r\n        this._dataProviderController.ensureFlatIndexHierarchy(row.index);\r\n      });\r\n\r\n      this._hasData = true;\r\n    }\r\n\r\n    /** @protected */\r\n    _onDataProviderPageLoaded() {\r\n      // Schedule a debouncer to update the visible rows\r\n      this._debouncerApplyCachedData = Debouncer.debounce(this._debouncerApplyCachedData, timeOut.after(0), () => {\r\n        this._setLoading(false);\r\n\r\n        const shouldUpdateAllRenderedRowsAfterPageLoad = this._shouldUpdateAllRenderedRowsAfterPageLoad;\r\n        this._shouldUpdateAllRenderedRowsAfterPageLoad = false;\r\n\r\n        this._getRenderedRows().forEach((row) => {\r\n          const { item } = this._dataProviderController.getFlatIndexContext(row.index);\r\n          if (item || shouldUpdateAllRenderedRowsAfterPageLoad) {\r\n            this._getItem(row.index, row);\r\n          }\r\n        });\r\n\r\n        this.__scrollToPendingIndexes();\r\n        this.__dispatchPendingBodyCellFocus();\r\n      });\r\n\r\n      // If the grid is not loading anything, flush the debouncer immediately\r\n      if (!this._dataProviderController.isLoading()) {\r\n        this._debouncerApplyCachedData.flush();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __debounceClearCache() {\r\n      this.__clearCacheDebouncer = Debouncer.debounce(this.__clearCacheDebouncer, microTask, () => this.clearCache());\r\n    }\r\n\r\n    /**\r\n     * Clears the cached pages and reloads data from dataprovider when needed.\r\n     */\r\n    clearCache() {\r\n      this._dataProviderController.clearCache();\r\n      this._dataProviderController.rootCache.size = this.size || 0;\r\n      this._dataProviderController.recalculateFlatSize();\r\n      this._hasData = false;\r\n      this.__updateVisibleRows();\r\n\r\n      if (!this.__virtualizer || !this.__virtualizer.size) {\r\n        this._dataProviderController.loadFirstPage();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _pageSizeChanged(pageSize, oldPageSize) {\r\n      this._dataProviderController.setPageSize(pageSize);\r\n\r\n      if (oldPageSize !== undefined && pageSize !== oldPageSize) {\r\n        this.clearCache();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _checkSize() {\r\n      if (this.size === undefined && this._flatSize === 0) {\r\n        console.warn(\r\n          'The <vaadin-grid> needs the total number of items in' +\r\n            ' order to display rows, which you can specify either by setting' +\r\n            ' the `size` property, or by providing it to the second argument' +\r\n            ' of the `dataProvider` function `callback` call.',\r\n        );\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _dataProviderChanged(dataProvider, oldDataProvider) {\r\n      this._dataProviderController.setDataProvider(dataProvider ? dataProvider.bind(this) : null);\r\n\r\n      if (oldDataProvider !== undefined) {\r\n        this.clearCache();\r\n      }\r\n\r\n      this._ensureFirstPageLoaded();\r\n\r\n      this._debouncerCheckSize = Debouncer.debounce(\r\n        this._debouncerCheckSize,\r\n        timeOut.after(2000),\r\n        this._checkSize.bind(this),\r\n      );\r\n    }\r\n\r\n    /** @protected */\r\n    _ensureFirstPageLoaded() {\r\n      if (!this._hasData) {\r\n        // Load data before adding rows to make sure they have content when\r\n        // rendered for the first time.\r\n        this._dataProviderController.loadFirstPage();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!GridItem} item1\r\n     * @param {!GridItem} item2\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _itemsEqual(item1, item2) {\r\n      return this.getItemId(item1) === this.getItemId(item2);\r\n    }\r\n\r\n    /**\r\n     * @param {!GridItem} item\r\n     * @param {!Array<!GridItem>} array\r\n     * @return {number}\r\n     * @protected\r\n     */\r\n    _getItemIndexInArray(item, array) {\r\n      let result = -1;\r\n      array.forEach((i, idx) => {\r\n        if (this._itemsEqual(i, item)) {\r\n          result = idx;\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Scroll to a specific row index in the virtual list. Note that the row index is\r\n     * not always the same for any particular item. For example, sorting or filtering\r\n     * items can affect the row index related to an item.\r\n     *\r\n     * The `indexes` parameter can be either a single number or multiple numbers.\r\n     * The grid will first try to scroll to the item at the first index on the top level.\r\n     * In case the item at the first index is expanded, the grid will then try scroll to the\r\n     * item at the second index within the children of the expanded first item, and so on.\r\n     * Each given index points to a child of the item at the previous index.\r\n     *\r\n     * Using `Infinity` as an index will point to the last item on the level.\r\n     *\r\n     * @param indexes {...number} Row indexes to scroll to\r\n     */\r\n    scrollToIndex(...indexes) {\r\n      // Synchronous data provider may cause changes to the cache on scroll without\r\n      // ending up in a loading state. Try scrolling to the index until the target\r\n      // index stabilizes.\r\n      let targetIndex;\r\n      while (targetIndex !== (targetIndex = this._dataProviderController.getFlatIndexByPath(indexes))) {\r\n        this._scrollToFlatIndex(targetIndex);\r\n      }\r\n\r\n      if (this._dataProviderController.isLoading() || !this.clientHeight || !this._columnTree) {\r\n        this.__pendingScrollToIndexes = indexes;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __scrollToPendingIndexes() {\r\n      if (this.__pendingScrollToIndexes && this.$.items.children.length) {\r\n        const indexes = this.__pendingScrollToIndexes;\r\n        delete this.__pendingScrollToIndexes;\r\n        this.scrollToIndex(...indexes);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fired when the `expandedItems` property changes.\r\n     *\r\n     * @event expanded-items-changed\r\n     */\r\n\r\n    /**\r\n     * Fired when the `loading` property changes.\r\n     *\r\n     * @event loading-changed\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isChrome, isSafari } from '@vaadin/component-base/src/browser-utils.js';\r\nimport {\r\n  iterateChildren,\r\n  iterateRowCells,\r\n  updateBooleanRowStates,\r\n  updateStringRowStates,\r\n} from './vaadin-grid-helpers.js';\r\n\r\nconst DropMode = {\r\n  BETWEEN: 'between',\r\n  ON_TOP: 'on-top',\r\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\r\n  ON_GRID: 'on-grid',\r\n};\r\n\r\nconst DropLocation = {\r\n  ON_TOP: 'on-top',\r\n  ABOVE: 'above',\r\n  BELOW: 'below',\r\n  EMPTY: 'empty',\r\n};\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const DragAndDropMixin = (superClass) =>\r\n  class DragAndDropMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Defines the locations within the Grid row where an element can be dropped.\r\n         *\r\n         * Possible values are:\r\n         * - `between`: The drop event can happen between Grid rows.\r\n         * - `on-top`: The drop event can happen on top of Grid rows.\r\n         * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\r\n         * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\r\n         * @attr {between|on-top|on-top-or-between|on-grid} drop-mode\r\n         * @type {GridDropMode | null | undefined}\r\n         */\r\n        dropMode: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Marks the grid's rows to be available for dragging.\r\n         * @attr {boolean} rows-draggable\r\n         */\r\n        rowsDraggable: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function that filters dragging of specific grid rows. The return value should be false\r\n         * if dragging of the row should be disabled.\r\n         *\r\n         * Receives one argument:\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.expanded` Sublevel toggle state.\r\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\r\n         *   - `model.selected` Selected state.\r\n         *\r\n         * @type {GridDragAndDropFilter | null | undefined}\r\n         */\r\n        dragFilter: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function that filters dropping on specific grid rows. The return value should be false\r\n         * if dropping on the row should be disabled.\r\n         *\r\n         * Receives one argument:\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.expanded` Sublevel toggle state.\r\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\r\n         *   - `model.selected` Selected state.\r\n         *\r\n         * @type {GridDragAndDropFilter | null | undefined}\r\n         */\r\n        dropFilter: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        __dndAutoScrollThreshold: {\r\n          value: 50,\r\n        },\r\n\r\n        /** @private  */\r\n        __draggedItems: {\r\n          value: () => [],\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter, loading)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.__onDocumentDragStart = this.__onDocumentDragStart.bind(this);\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\r\n      this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\r\n      this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\r\n      this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\r\n      this.$.table.addEventListener('drop', this._onDrop.bind(this));\r\n      this.$.table.addEventListener('dragenter', (e) => {\r\n        if (this.dropMode) {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      document.addEventListener('dragstart', this.__onDocumentDragStart, { capture: true });\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      document.removeEventListener('dragstart', this.__onDocumentDragStart, { capture: true });\r\n    }\r\n\r\n    /** @private */\r\n    _onDragStart(e) {\r\n      if (this.rowsDraggable) {\r\n        let row = e.target;\r\n        if (row.localName === 'vaadin-grid-cell-content') {\r\n          // The draggable node is the cell content element on browsers that support native shadow\r\n          row = row.assignedSlot.parentNode.parentNode;\r\n        }\r\n        if (row.parentNode !== this.$.items) {\r\n          return;\r\n        }\r\n\r\n        e.stopPropagation();\r\n        this.toggleAttribute('dragging-rows', true);\r\n\r\n        if (this._safari) {\r\n          // Safari doesn't position drag images from transformed\r\n          // elements properly so we need to switch to use top temporarily\r\n          const transform = row.style.transform;\r\n          row.style.top = /translateY\\((.*)\\)/u.exec(transform)[1];\r\n          row.style.transform = 'none';\r\n          requestAnimationFrame(() => {\r\n            row.style.top = '';\r\n            row.style.transform = transform;\r\n          });\r\n        }\r\n\r\n        const rowRect = row.getBoundingClientRect();\r\n\r\n        // The native drag image needs to be shifted manually to compensate for the touch position offset\r\n        e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\r\n\r\n        let rows = [row];\r\n        if (this._isSelected(row._item)) {\r\n          rows = this.__getViewportRows()\r\n            .filter((row) => this._isSelected(row._item))\r\n            .filter((row) => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\r\n        }\r\n\r\n        this.__draggedItems = rows.map((row) => row._item);\r\n\r\n        // Set the default transfer data\r\n        e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\r\n\r\n        updateBooleanRowStates(row, { dragstart: rows.length > 1 ? `${rows.length}` : '' });\r\n        this.style.setProperty('--_grid-drag-start-x', `${e.clientX - rowRect.left + 20}px`);\r\n        this.style.setProperty('--_grid-drag-start-y', `${e.clientY - rowRect.top + 10}px`);\r\n\r\n        requestAnimationFrame(() => {\r\n          updateBooleanRowStates(row, { dragstart: false });\r\n          this.style.setProperty('--_grid-drag-start-x', '');\r\n          this.style.setProperty('--_grid-drag-start-y', '');\r\n          this.requestContentUpdate();\r\n        });\r\n\r\n        const event = new CustomEvent('grid-dragstart', {\r\n          detail: {\r\n            draggedItems: [...this.__draggedItems],\r\n            setDragData: (type, data) => e.dataTransfer.setData(type, data),\r\n            setDraggedItemsCount: (count) => row.setAttribute('dragstart', count),\r\n          },\r\n        });\r\n        event.originalEvent = e;\r\n        this.dispatchEvent(event);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onDragEnd(e) {\r\n      this.toggleAttribute('dragging-rows', false);\r\n      e.stopPropagation();\r\n      const event = new CustomEvent('grid-dragend');\r\n      event.originalEvent = e;\r\n      this.dispatchEvent(event);\r\n\r\n      this.__draggedItems = [];\r\n      this.requestContentUpdate();\r\n    }\r\n\r\n    /** @private */\r\n    _onDragLeave(e) {\r\n      if (!this.dropMode) {\r\n        return;\r\n      }\r\n      e.stopPropagation();\r\n      this._clearDragStyles();\r\n    }\r\n\r\n    /** @private */\r\n    _onDragOver(e) {\r\n      if (this.dropMode) {\r\n        this._dropLocation = undefined;\r\n        this._dragOverItem = undefined;\r\n\r\n        if (this.__dndAutoScroll(e.clientY)) {\r\n          this._clearDragStyles();\r\n          return;\r\n        }\r\n\r\n        let row = e.composedPath().find((node) => node.localName === 'tr');\r\n\r\n        if (!this._flatSize || this.dropMode === DropMode.ON_GRID) {\r\n          // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\r\n          this._dropLocation = DropLocation.EMPTY;\r\n        } else if (!row || row.parentNode !== this.$.items) {\r\n          // The dragover didn't occur on a body row but the grid has items\r\n          if (row) {\r\n            // The dragover occurred over a header/footer row\r\n            return;\r\n          } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\r\n            // The drop mode allows setting the last row as the drag over item\r\n            row = Array.from(this.$.items.children)\r\n              .filter((row) => !row.hidden)\r\n              .pop();\r\n            this._dropLocation = DropLocation.BELOW;\r\n          } else {\r\n            // Drop mode on-top used but the dragover didn't occur over one of the existing rows\r\n            return;\r\n          }\r\n        } else {\r\n          // The dragover occurred on a body row, determine the drop location from coordinates\r\n          const rowRect = row.getBoundingClientRect();\r\n\r\n          this._dropLocation = DropLocation.ON_TOP;\r\n\r\n          if (this.dropMode === DropMode.BETWEEN) {\r\n            const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\r\n            this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\r\n          } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\r\n            if (e.clientY - rowRect.top < rowRect.height / 3) {\r\n              this._dropLocation = DropLocation.ABOVE;\r\n            } else if (e.clientY - rowRect.top > (rowRect.height / 3) * 2) {\r\n              this._dropLocation = DropLocation.BELOW;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (row && row.hasAttribute('drop-disabled')) {\r\n          this._dropLocation = undefined;\r\n          return;\r\n        }\r\n\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (this._dropLocation === DropLocation.EMPTY) {\r\n          this.toggleAttribute('dragover', true);\r\n        } else if (row) {\r\n          this._dragOverItem = row._item;\r\n          if (row.getAttribute('dragover') !== this._dropLocation) {\r\n            updateStringRowStates(row, { dragover: this._dropLocation });\r\n          }\r\n        } else {\r\n          this._clearDragStyles();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Webkit-based browsers have issues with generating drag images\r\n     * for elements that have children with massive heights. Chromium\r\n     * browsers crash, while Safari experiences significant performance\r\n     * issues. To mitigate these issues, we hide the scroller element\r\n     * when drag starts to remove it from the drag image.\r\n     *\r\n     * Grids with fewer rows also have issues on Chromium and Safari\r\n     * where the drag image is not properly clipped and may include\r\n     * content outside the grid. Temporary inline styles are applied\r\n     * to mitigate this issue.\r\n     *\r\n     * Related issues:\r\n     * - https://github.com/vaadin/web-components/issues/7985\r\n     * - https://issues.chromium.org/issues/383356871\r\n     * - https://github.com/vaadin/web-components/issues/8386\r\n     *\r\n     * @private\r\n     */\r\n    __onDocumentDragStart(e) {\r\n      if (e.target.contains(this)) {\r\n        // Record the original inline styles to restore them later\r\n        const elements = [e.target, this.$.items, this.$.scroller];\r\n        const originalInlineStyles = elements.map((element) => element.style.cssText);\r\n\r\n        // With a large number of rows, hide the scroller\r\n        if (this.$.table.scrollHeight > 20000) {\r\n          this.$.scroller.style.display = 'none';\r\n        }\r\n\r\n        // Workaround content outside the grid ending up in the drag image on Chromium\r\n        if (isChrome) {\r\n          e.target.style.willChange = 'transform';\r\n        }\r\n\r\n        // Workaround text content outside the grid ending up in the drag image on Safari\r\n        if (isSafari) {\r\n          this.$.items.style.flexShrink = 1;\r\n        }\r\n\r\n        requestAnimationFrame(() => {\r\n          elements.forEach((element, index) => {\r\n            element.style.cssText = originalInlineStyles[index];\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __dndAutoScroll(clientY) {\r\n      if (this.__dndAutoScrolling) {\r\n        return true;\r\n      }\r\n\r\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\r\n      const footerTop = this.$.footer.getBoundingClientRect().top;\r\n      const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\r\n      const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\r\n      let scrollTopDelta = 0;\r\n\r\n      if (bottomDiff > 0) {\r\n        scrollTopDelta = bottomDiff * 2;\r\n      } else if (topDiff > 0) {\r\n        scrollTopDelta = -topDiff * 2;\r\n      }\r\n\r\n      if (scrollTopDelta) {\r\n        const scrollTop = this.$.table.scrollTop;\r\n        this.$.table.scrollTop += scrollTopDelta;\r\n        const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\r\n        if (scrollTopChanged) {\r\n          this.__dndAutoScrolling = true;\r\n          // Disallow more auto-scrolls within 20ms\r\n          setTimeout(() => {\r\n            this.__dndAutoScrolling = false;\r\n          }, 20);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __getViewportRows() {\r\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\r\n      const footerTop = this.$.footer.getBoundingClientRect().top;\r\n      return Array.from(this.$.items.children).filter((row) => {\r\n        const rowRect = row.getBoundingClientRect();\r\n        return rowRect.bottom > headerBottom && rowRect.top < footerTop;\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _clearDragStyles() {\r\n      this.removeAttribute('dragover');\r\n      iterateChildren(this.$.items, (row) => {\r\n        updateStringRowStates(row, { dragover: null });\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __updateDragSourceParts(row, model) {\r\n      updateBooleanRowStates(row, { 'drag-source': this.__draggedItems.includes(model.item) });\r\n    }\r\n\r\n    /** @private */\r\n    _onDrop(e) {\r\n      if (this.dropMode) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        const dragData =\r\n          e.dataTransfer.types &&\r\n          Array.from(e.dataTransfer.types).map((type) => {\r\n            return {\r\n              type,\r\n              data: e.dataTransfer.getData(type),\r\n            };\r\n          });\r\n\r\n        this._clearDragStyles();\r\n\r\n        const event = new CustomEvent('grid-drop', {\r\n          bubbles: e.bubbles,\r\n          cancelable: e.cancelable,\r\n          detail: {\r\n            dropTargetItem: this._dragOverItem,\r\n            dropLocation: this._dropLocation,\r\n            dragData,\r\n          },\r\n        });\r\n        event.originalEvent = e;\r\n        this.dispatchEvent(event);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __formatDefaultTransferData(rows) {\r\n      return rows\r\n        .map((row) => {\r\n          return Array.from(row.children)\r\n            .filter((cell) => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1)\r\n            .sort((a, b) => {\r\n              return a._column._order > b._column._order ? 1 : -1;\r\n            })\r\n            .map((cell) => cell._content.textContent.trim())\r\n            .filter((content) => content)\r\n            .join('\\t');\r\n        })\r\n        .join('\\n');\r\n    }\r\n\r\n    /** @private */\r\n    _dragDropAccessChanged() {\r\n      this.filterDragAndDrop();\r\n    }\r\n\r\n    /**\r\n     * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\r\n     * If the filter depends on varying conditions, you may need to\r\n     * call this function manually in order to update the draggability when\r\n     * the conditions change.\r\n     */\r\n    filterDragAndDrop() {\r\n      iterateChildren(this.$.items, (row) => {\r\n        if (!row.hidden) {\r\n          this._filterDragAndDrop(row, this.__getRowModel(row));\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {!GridItemModel} model\r\n     * @protected\r\n     */\r\n    _filterDragAndDrop(row, model) {\r\n      const loading = this.loading || row.hasAttribute('loading');\r\n      const dragDisabled = !this.rowsDraggable || loading || (this.dragFilter && !this.dragFilter(model));\r\n      const dropDisabled = !this.dropMode || loading || (this.dropFilter && !this.dropFilter(model));\r\n\r\n      iterateRowCells(row, (cell) => {\r\n        if (dragDisabled) {\r\n          cell._content.removeAttribute('draggable');\r\n        } else {\r\n          cell._content.setAttribute('draggable', true);\r\n        }\r\n      });\r\n\r\n      updateBooleanRowStates(row, {\r\n        'drag-disabled': !!dragDisabled,\r\n        'drop-disabled': !!dropDisabled,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Fired when starting to drag grid rows.\r\n     *\r\n     * @event grid-dragstart\r\n     * @param {Object} originalEvent The native dragstart event\r\n     * @param {Object} detail\r\n     * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\r\n     * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\r\n     * Parameter is of type number.\r\n     * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\r\n     * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\r\n     * The function takes two parameters:\r\n     * - type:string The type of the data\r\n     * - data:string The data\r\n     */\r\n\r\n    /**\r\n     * Fired when the dragging of the rows ends.\r\n     *\r\n     * @event grid-dragend\r\n     * @param {Object} originalEvent The native dragend event\r\n     */\r\n\r\n    /**\r\n     * Fired when a drop occurs on top of the grid.\r\n     *\r\n     * @event grid-drop\r\n     * @param {Object} originalEvent The native drop event\r\n     * @param {Object} detail\r\n     * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\r\n     * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\r\n     * Depending on the dropMode value, the drop location can be one of the following\r\n     * - `on-top`: when the drop occurred on top of the row\r\n     * - `above`: when the drop occurred above the row\r\n     * - `below`: when the drop occurred below the row\r\n     * - `empty`: when the drop occurred over the grid, not relative to any specific row\r\n     * @param {string} detail.dragData An array of items with the payload as a string representation as the\r\n     * `data` property and the type of the data as `type` property.\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { microTask, timeOut } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { ColumnObserver, updateCellState } from './vaadin-grid-helpers.js';\r\n\r\nfunction arrayEquals(arr1, arr2) {\r\n  if (!arr1 || !arr2 || arr1.length !== arr2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0, l = arr1.length; i < l; i++) {\r\n    // Check if we have nested arrays\r\n    if (arr1[i] instanceof Array && arr2[i] instanceof Array) {\r\n      // Recurse into the nested arrays\r\n      if (!arrayEquals(arr1[i], arr2[i])) {\r\n        return false;\r\n      }\r\n    } else if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const DynamicColumnsMixin = (superClass) =>\r\n  class DynamicColumnsMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * @protected\r\n         */\r\n        _columnTree: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      this._addNodeObserver();\r\n    }\r\n\r\n    /** @private */\r\n    _hasColumnGroups(columns) {\r\n      return columns.some((column) => column.localName === 'vaadin-grid-column-group');\r\n    }\r\n\r\n    /**\r\n     * @param {!GridColumnGroup} el\r\n     * @return {!Array<!GridColumn>}\r\n     * @protected\r\n     */\r\n    _getChildColumns(el) {\r\n      return ColumnObserver.getColumns(el);\r\n    }\r\n\r\n    /** @private */\r\n    _flattenColumnGroups(columns) {\r\n      return columns\r\n        .map((col) => {\r\n          if (col.localName === 'vaadin-grid-column-group') {\r\n            return this._getChildColumns(col);\r\n          }\r\n          return [col];\r\n        })\r\n        .reduce((prev, curr) => {\r\n          return prev.concat(curr);\r\n        }, []);\r\n    }\r\n\r\n    /** @private */\r\n    _getColumnTree() {\r\n      const rootColumns = ColumnObserver.getColumns(this);\r\n      const columnTree = [rootColumns];\r\n\r\n      let c = rootColumns;\r\n      while (this._hasColumnGroups(c)) {\r\n        c = this._flattenColumnGroups(c);\r\n        columnTree.push(c);\r\n      }\r\n\r\n      return columnTree;\r\n    }\r\n\r\n    /** @protected */\r\n    _debounceUpdateColumnTree() {\r\n      this.__updateColumnTreeDebouncer = Debouncer.debounce(this.__updateColumnTreeDebouncer, microTask, () =>\r\n        this._updateColumnTree(),\r\n      );\r\n    }\r\n\r\n    /** @protected */\r\n    _updateColumnTree() {\r\n      const columnTree = this._getColumnTree();\r\n\r\n      if (!arrayEquals(columnTree, this._columnTree)) {\r\n        this._columnTree = columnTree;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _addNodeObserver() {\r\n      this._observer = new ColumnObserver(this, (_addedColumns, removedColumns) => {\r\n        const allRemovedCells = removedColumns.flatMap((c) => c._allCells);\r\n        const filterNotConnected = (element) =>\r\n          allRemovedCells.filter((cell) => cell && cell._content.contains(element)).length;\r\n\r\n        this.__removeSorters(this._sorters.filter(filterNotConnected));\r\n        this.__removeFilters(this._filters.filter(filterNotConnected));\r\n        this._debounceUpdateColumnTree();\r\n\r\n        this._debouncerCheckImports = Debouncer.debounce(\r\n          this._debouncerCheckImports,\r\n          timeOut.after(2000),\r\n          this._checkImports.bind(this),\r\n        );\r\n\r\n        this._ensureFirstPageLoaded();\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _checkImports() {\r\n      [\r\n        'vaadin-grid-column-group',\r\n        'vaadin-grid-filter',\r\n        'vaadin-grid-filter-column',\r\n        'vaadin-grid-tree-toggle',\r\n        'vaadin-grid-selection-column',\r\n        'vaadin-grid-sort-column',\r\n        'vaadin-grid-sorter',\r\n      ].forEach((elementName) => {\r\n        const element = this.querySelector(elementName);\r\n        if (element && !customElements.get(elementName)) {\r\n          console.warn(`Make sure you have imported the required module for <${elementName}> element.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _updateFirstAndLastColumn() {\r\n      Array.from(this.shadowRoot.querySelectorAll('tr')).forEach((row) => this._updateFirstAndLastColumnForRow(row));\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @protected\r\n     */\r\n    _updateFirstAndLastColumnForRow(row) {\r\n      Array.from(row.querySelectorAll('[part~=\"cell\"]:not([part~=\"details-cell\"])'))\r\n        .sort((a, b) => {\r\n          return a._column._order - b._column._order;\r\n        })\r\n        .forEach((cell, cellIndex, children) => {\r\n          updateCellState(cell, 'first-column', cellIndex === 0);\r\n          updateCellState(cell, 'last-column', cellIndex === children.length - 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {!Node} node\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isColumnElement(node) {\r\n      return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/u.test(node.localName);\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const EventContextMixin = (superClass) =>\r\n  class EventContextMixin extends superClass {\r\n    /**\r\n     * Returns an object with context information about the event target:\r\n     * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)\r\n     * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)\r\n     * - `section`: whether the event targeted the body, header, footer or details of the grid\r\n     *\r\n     * These additional properties are included when `item` is specified:\r\n     * - `index`: the index of the item\r\n     * - `selected`: the selected state of the item\r\n     * - `detailsOpened`: whether the row details are open for the item\r\n     * - `expanded`: the expanded state of the tree toggle\r\n     * - `level`: the tree hierarchy level\r\n     *\r\n     * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.\r\n     * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.\r\n     * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if\r\n     * the event targets the empty part of the grid body.\r\n     *\r\n     * @param {!Event} event\r\n     * @return {GridEventContext}\r\n     */\r\n    getEventContext(event) {\r\n      const context = {};\r\n\r\n      const { cell } = this._getGridEventLocation(event);\r\n\r\n      if (!cell) {\r\n        return context;\r\n      }\r\n\r\n      context.section = ['body', 'header', 'footer', 'details'].find(\r\n        (section) => cell.getAttribute('part').indexOf(section) > -1,\r\n      );\r\n\r\n      if (cell._column) {\r\n        context.column = cell._column;\r\n      }\r\n\r\n      if (context.section === 'body' || context.section === 'details') {\r\n        Object.assign(context, this.__getRowModel(cell.parentElement));\r\n      }\r\n\r\n      return context;\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const FilterMixin = (superClass) =>\r\n  class FilterMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /** @private */\r\n        _filters: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this._filterChanged = this._filterChanged.bind(this);\r\n      this.addEventListener('filter-changed', this._filterChanged);\r\n    }\r\n\r\n    /** @private */\r\n    _filterChanged(e) {\r\n      e.stopPropagation();\r\n\r\n      this.__addFilter(e.target);\r\n      this.__applyFilters();\r\n    }\r\n\r\n    /** @private */\r\n    __removeFilters(filtersToRemove) {\r\n      if (filtersToRemove.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this._filters = this._filters.filter((filter) => filtersToRemove.indexOf(filter) < 0);\r\n      this.__applyFilters();\r\n    }\r\n\r\n    /** @private */\r\n    __addFilter(filter) {\r\n      const filterIndex = this._filters.indexOf(filter);\r\n\r\n      if (filterIndex === -1) {\r\n        this._filters.push(filter);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __applyFilters() {\r\n      if (this.dataProvider && this.isAttached) {\r\n        this.clearCache();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @return {!Array<!GridFilterDefinition>}\r\n     * @protected\r\n     */\r\n    _mapFilters() {\r\n      return this._filters.map((filter) => {\r\n        return {\r\n          path: filter.path,\r\n          value: filter.value,\r\n        };\r\n      });\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isKeyboardActive } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\n\r\nfunction isRow(element) {\r\n  return element instanceof HTMLTableRowElement;\r\n}\r\n\r\nfunction isCell(element) {\r\n  return element instanceof HTMLTableCellElement;\r\n}\r\n\r\nfunction isDetailsCell(element) {\r\n  return element.matches('[part~=\"details-cell\"]');\r\n}\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const KeyboardNavigationMixin = (superClass) =>\r\n  class KeyboardNavigationMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /** @private */\r\n        _headerFocusable: {\r\n          type: Object,\r\n          observer: '_focusableChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {!HTMLElement | undefined}\r\n         * @protected\r\n         */\r\n        _itemsFocusable: {\r\n          type: Object,\r\n          observer: '_focusableChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _footerFocusable: {\r\n          type: Object,\r\n          observer: '_focusableChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _navigatingIsHidden: Boolean,\r\n\r\n        /**\r\n         * @type {number}\r\n         * @protected\r\n         */\r\n        _focusedItemIndex: {\r\n          type: Number,\r\n          value: 0,\r\n        },\r\n\r\n        /** @private */\r\n        _focusedColumnOrder: Number,\r\n\r\n        /** @private */\r\n        _focusedCell: {\r\n          type: Object,\r\n          observer: '_focusedCellChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Indicates whether the grid is currently in interaction mode.\r\n         * In interaction mode the user is currently interacting with a control,\r\n         * such as an input or a select, within a cell.\r\n         * In interaction mode keyboard navigation between cells is disabled.\r\n         * Interaction mode also prevents the focus target cell of that section of\r\n         * the grid from receiving focus, allowing the user to switch focus to\r\n         * controls in adjacent cells, rather than focussing the outer cell\r\n         * itself.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        interacting: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          readOnly: true,\r\n          observer: '_interactingChanged',\r\n        },\r\n      };\r\n    }\r\n\r\n    /** @private */\r\n    get __rowFocusMode() {\r\n      return [this._headerFocusable, this._itemsFocusable, this._footerFocusable].some(isRow);\r\n    }\r\n\r\n    set __rowFocusMode(value) {\r\n      ['_itemsFocusable', '_footerFocusable', '_headerFocusable'].forEach((prop) => {\r\n        const focusable = this[prop];\r\n        if (value) {\r\n          const parent = focusable && focusable.parentElement;\r\n          if (isCell(focusable)) {\r\n            // Cell itself focusable (default)\r\n            this[prop] = parent;\r\n          } else if (isCell(parent)) {\r\n            // Focus button mode is enabled for the column,\r\n            // button element inside the cell is focusable.\r\n            this[prop] = parent.parentElement;\r\n          }\r\n        } else if (!value && isRow(focusable)) {\r\n          const cell = focusable.firstElementChild;\r\n          this[prop] = cell._focusButton || cell;\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    get _visibleItemsCount() {\r\n      return this._lastVisibleIndex - this._firstVisibleIndex - 1;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      if (this._ios || this._android) {\r\n        // Disable keyboard navigation on mobile devices\r\n        return;\r\n      }\r\n\r\n      this.addEventListener('keydown', this._onKeyDown);\r\n      this.addEventListener('keyup', this._onKeyUp);\r\n\r\n      this.addEventListener('focusin', this._onFocusIn);\r\n      this.addEventListener('focusout', this._onFocusOut);\r\n\r\n      // When focus goes from cell to another cell, focusin/focusout events do\r\n      // not escape the grid's shadowRoot, thus listening inside the shadowRoot.\r\n      this.$.table.addEventListener('focusin', this._onContentFocusIn.bind(this));\r\n\r\n      this.addEventListener('mousedown', () => {\r\n        this.toggleAttribute('navigating', false);\r\n        this._isMousedown = true;\r\n\r\n        // Reset stored order when moving focus with mouse.\r\n        this._focusedColumnOrder = undefined;\r\n      });\r\n      this.addEventListener('mouseup', () => {\r\n        this._isMousedown = false;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _focusableChanged(focusable, oldFocusable) {\r\n      if (oldFocusable) {\r\n        oldFocusable.setAttribute('tabindex', '-1');\r\n      }\r\n      if (focusable) {\r\n        this._updateGridSectionFocusTarget(focusable);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _focusedCellChanged(focusedCell, oldFocusedCell) {\r\n      if (oldFocusedCell) {\r\n        removeValueFromAttribute(oldFocusedCell, 'part', 'focused-cell');\r\n      }\r\n\r\n      if (focusedCell) {\r\n        addValueToAttribute(focusedCell, 'part', 'focused-cell');\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _interactingChanged() {\r\n      // Update focus targets when entering / exiting interaction mode\r\n      this._updateGridSectionFocusTarget(this._headerFocusable);\r\n      this._updateGridSectionFocusTarget(this._itemsFocusable);\r\n      this._updateGridSectionFocusTarget(this._footerFocusable);\r\n    }\r\n\r\n    /**\r\n     * Since the focused cell/row state is stored as an element reference, the reference may get\r\n     * out of sync when the virtual indexes for elements update due to effective size change.\r\n     * This function updates the reference to the correct element after a possible index change.\r\n     * @private\r\n     */\r\n    __updateItemsFocusable() {\r\n      if (!this._itemsFocusable) {\r\n        return;\r\n      }\r\n\r\n      const wasFocused = this.shadowRoot.activeElement === this._itemsFocusable;\r\n\r\n      this._getRenderedRows().forEach((row) => {\r\n        if (row.index === this._focusedItemIndex) {\r\n          if (this.__rowFocusMode) {\r\n            // Row focus mode\r\n            this._itemsFocusable = row;\r\n          } else {\r\n            // Cell focus mode\r\n            let parent = this._itemsFocusable.parentElement;\r\n            let cell = this._itemsFocusable;\r\n\r\n            if (parent) {\r\n              // Focus button mode is enabled for the column,\r\n              // button element inside the cell is focusable.\r\n              if (isCell(parent)) {\r\n                cell = parent;\r\n                parent = parent.parentElement;\r\n              }\r\n\r\n              const cellIndex = [...parent.children].indexOf(cell);\r\n              this._itemsFocusable = this.__getFocusable(row, row.children[cellIndex]);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (wasFocused) {\r\n        this._itemsFocusable.focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!KeyboardEvent} e\r\n     * @protected\r\n     */\r\n    _onKeyDown(e) {\r\n      const key = e.key;\r\n\r\n      let keyGroup;\r\n      switch (key) {\r\n        case 'ArrowUp':\r\n        case 'ArrowDown':\r\n        case 'ArrowLeft':\r\n        case 'ArrowRight':\r\n        case 'PageUp':\r\n        case 'PageDown':\r\n        case 'Home':\r\n        case 'End':\r\n          keyGroup = 'Navigation';\r\n          break;\r\n        case 'Enter':\r\n        case 'Escape':\r\n        case 'F2':\r\n          keyGroup = 'Interaction';\r\n          break;\r\n        case 'Tab':\r\n          keyGroup = 'Tab';\r\n          break;\r\n        case ' ':\r\n          keyGroup = 'Space';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      this._detectInteracting(e);\r\n      if (this.interacting && keyGroup !== 'Interaction') {\r\n        // When in the interacting mode, only the \"Interaction\" keys are handled.\r\n        keyGroup = undefined;\r\n      }\r\n\r\n      if (keyGroup) {\r\n        this[`_on${keyGroup}KeyDown`](e, key);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __ensureFlatIndexInViewport(index) {\r\n      const targetRowInDom = [...this.$.items.children].find((child) => child.index === index);\r\n      if (!targetRowInDom) {\r\n        this._scrollToFlatIndex(index);\r\n      } else {\r\n        this.__scrollIntoViewport(index);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __isRowExpandable(row) {\r\n      if (this.itemHasChildrenPath) {\r\n        const item = row._item;\r\n        return !!(item && get(this.itemHasChildrenPath, item) && !this._isExpanded(item));\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __isRowCollapsible(row) {\r\n      return this._isExpanded(row._item);\r\n    }\r\n\r\n    /** @private */\r\n    _onNavigationKeyDown(e, key) {\r\n      e.preventDefault();\r\n\r\n      const isRTL = this.__isRTL;\r\n      const activeRow = e.composedPath().find(isRow);\r\n      const activeCell = e.composedPath().find(isCell);\r\n\r\n      // Handle keyboard interaction as defined in:\r\n      // https://w3c.github.io/aria-practices/#keyboard-interaction-24\r\n\r\n      let dx = 0,\r\n        dy = 0;\r\n      switch (key) {\r\n        case 'ArrowRight':\r\n          dx = isRTL ? -1 : 1;\r\n          break;\r\n        case 'ArrowLeft':\r\n          dx = isRTL ? 1 : -1;\r\n          break;\r\n        case 'Home':\r\n          if (this.__rowFocusMode) {\r\n            // \"If focus is on a row, moves focus to the first row. If focus is in the first row, focus does not move.\"\r\n            dy = -Infinity;\r\n          } else if (e.ctrlKey) {\r\n            // \"If focus is on a cell, moves focus to the first cell in the column. If focus is in the first row, focus does not move.\"\r\n            dy = -Infinity;\r\n          } else {\r\n            // \"If focus is on a cell, moves focus to the first cell in the row. If focus is in the first cell of the row, focus does not move.\"\r\n            dx = -Infinity;\r\n          }\r\n          break;\r\n        case 'End':\r\n          if (this.__rowFocusMode) {\r\n            // \"If focus is on a row, moves focus to the last row. If focus is in the last row, focus does not move.\"\r\n            dy = Infinity;\r\n          } else if (e.ctrlKey) {\r\n            // \"If focus is on a cell, moves focus to the last cell in the column. If focus is in the last row, focus does not move.\"\r\n            dy = Infinity;\r\n          } else {\r\n            // \"If focus is on a cell, moves focus to the last cell in the row. If focus is in the last cell of the row, focus does not move.\"\r\n            dx = Infinity;\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          dy = 1;\r\n          break;\r\n        case 'ArrowUp':\r\n          dy = -1;\r\n          break;\r\n        case 'PageDown':\r\n          // Check if the active group is body\r\n          if (this.$.items.contains(activeRow)) {\r\n            const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\r\n            // Scroll the current row to the top...\r\n            this._scrollToFlatIndex(currentRowIndex);\r\n          }\r\n          // ...only then measure the visible items count\r\n          dy = this._visibleItemsCount;\r\n          break;\r\n        case 'PageUp':\r\n          dy = -this._visibleItemsCount;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      if ((this.__rowFocusMode && !activeRow) || (!this.__rowFocusMode && !activeCell)) {\r\n        // When using a screen reader, it's possible that neither a cell nor a row is focused.\r\n        return;\r\n      }\r\n\r\n      const forwardsKey = isRTL ? 'ArrowLeft' : 'ArrowRight';\r\n      const backwardsKey = isRTL ? 'ArrowRight' : 'ArrowLeft';\r\n      if (key === forwardsKey) {\r\n        // \"Right Arrow:\"\r\n        if (this.__rowFocusMode) {\r\n          // In row focus mode\r\n          if (this.__isRowExpandable(activeRow)) {\r\n            // \"If focus is on a collapsed row, expands the row.\"\r\n            this.expandItem(activeRow._item);\r\n            return;\r\n          }\r\n          // \"If focus is on an expanded row or is on a row that does not have child rows,\r\n          // moves focus to the first cell in the row.\"\r\n          this.__rowFocusMode = false;\r\n          this._onCellNavigation(activeRow.firstElementChild, 0, 0);\r\n          return;\r\n        }\r\n      } else if (key === backwardsKey) {\r\n        // \"Left Arrow:\"\r\n        if (this.__rowFocusMode) {\r\n          // In row focus mode\r\n          if (this.__isRowCollapsible(activeRow)) {\r\n            // \"If focus is on an expanded row, collapses the row.\"\r\n            this.collapseItem(activeRow._item);\r\n            return;\r\n          }\r\n        } else {\r\n          // In cell focus mode\r\n          const activeRowCells = [...activeRow.children].sort((a, b) => a._order - b._order);\r\n          if (activeCell === activeRowCells[0] || isDetailsCell(activeCell)) {\r\n            // \"If focus is on the first cell in a row and row focus is supported, moves focus to the row.\"\r\n            this.__rowFocusMode = true;\r\n            this._onRowNavigation(activeRow, 0);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Navigate\r\n      if (this.__rowFocusMode) {\r\n        // Navigate the rows\r\n        this._onRowNavigation(activeRow, dy);\r\n      } else {\r\n        // Navigate the cells\r\n        this._onCellNavigation(activeCell, dx, dy);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Focuses the target row after navigating by the given dy offset.\r\n     * If the row is not in the viewport, it is first scrolled to.\r\n     * @private\r\n     */\r\n    _onRowNavigation(activeRow, dy) {\r\n      const { dstRow } = this.__navigateRows(dy, activeRow);\r\n\r\n      if (dstRow) {\r\n        dstRow.focus();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __getIndexInGroup(row, bodyFallbackIndex) {\r\n      const rowGroup = row.parentNode;\r\n      // Body rows have index property, otherwise DOM child index of the row is used.\r\n      if (rowGroup === this.$.items) {\r\n        return bodyFallbackIndex !== undefined ? bodyFallbackIndex : row.index;\r\n      }\r\n      return [...rowGroup.children].indexOf(row);\r\n    }\r\n\r\n    /**\r\n     * Returns the target row after navigating by the given dy offset.\r\n     * Also returns information whether the details cell should be the target on the target row.\r\n     * If the row is not in the viewport, it is first scrolled to.\r\n     * @private\r\n     */\r\n    __navigateRows(dy, activeRow, activeCell) {\r\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\r\n      const activeRowGroup = activeRow.parentNode;\r\n      const maxRowIndex = (activeRowGroup === this.$.items ? this._flatSize : activeRowGroup.children.length) - 1;\r\n\r\n      // Index of the destination row\r\n      let dstRowIndex = Math.max(0, Math.min(currentRowIndex + dy, maxRowIndex));\r\n\r\n      if (activeRowGroup !== this.$.items) {\r\n        // Navigating header/footer rows\r\n\r\n        // Header and footer could have hidden rows, e. g., if none of the columns\r\n        // or groups on the given column tree level define template. Skip them\r\n        // in vertical keyboard navigation.\r\n        if (dstRowIndex > currentRowIndex) {\r\n          while (dstRowIndex < maxRowIndex && activeRowGroup.children[dstRowIndex].hidden) {\r\n            dstRowIndex += 1;\r\n          }\r\n        } else if (dstRowIndex < currentRowIndex) {\r\n          while (dstRowIndex > 0 && activeRowGroup.children[dstRowIndex].hidden) {\r\n            dstRowIndex -= 1;\r\n          }\r\n        }\r\n\r\n        this.toggleAttribute('navigating', true);\r\n\r\n        return { dstRow: activeRowGroup.children[dstRowIndex] };\r\n      }\r\n      // Navigating body rows\r\n\r\n      let dstIsRowDetails = false;\r\n      if (activeCell) {\r\n        const isRowDetails = isDetailsCell(activeCell);\r\n        // Row details navigation logic\r\n        if (activeRowGroup === this.$.items) {\r\n          const item = activeRow._item;\r\n          const { item: dstItem } = this._dataProviderController.getFlatIndexContext(dstRowIndex);\r\n          // Should we navigate to row details?\r\n          if (isRowDetails) {\r\n            dstIsRowDetails = dy === 0;\r\n          } else {\r\n            dstIsRowDetails =\r\n              (dy === 1 && this._isDetailsOpened(item)) ||\r\n              (dy === -1 && dstRowIndex !== currentRowIndex && this._isDetailsOpened(dstItem));\r\n          }\r\n          // Should we navigate between details and regular cells of the same row?\r\n          if (dstIsRowDetails !== isRowDetails && ((dy === 1 && dstIsRowDetails) || (dy === -1 && !dstIsRowDetails))) {\r\n            dstRowIndex = currentRowIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Ensure correct vertical scroll position, destination row is visible\r\n      this.__ensureFlatIndexInViewport(dstRowIndex);\r\n\r\n      // When scrolling with repeated keydown, sometimes FocusEvent listeners\r\n      // are too late to update _focusedItemIndex. Ensure next keydown\r\n      // listener invocation gets updated _focusedItemIndex value.\r\n      this._focusedItemIndex = dstRowIndex;\r\n\r\n      // Reapply navigating state in case it was removed due to previous item\r\n      // being focused with the mouse.\r\n      this.toggleAttribute('navigating', true);\r\n\r\n      return {\r\n        dstRow: [...activeRowGroup.children].find((el) => !el.hidden && el.index === dstRowIndex),\r\n        dstIsRowDetails,\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Focuses the target cell after navigating by the given dx and dy offset.\r\n     * If the cell is not in the viewport, it is first scrolled to.\r\n     * @private\r\n     */\r\n    _onCellNavigation(activeCell, dx, dy) {\r\n      const activeRow = activeCell.parentNode;\r\n      const { dstRow, dstIsRowDetails } = this.__navigateRows(dy, activeRow, activeCell);\r\n      if (!dstRow) {\r\n        return;\r\n      }\r\n\r\n      let columnIndex = [...activeRow.children].indexOf(activeCell);\r\n      if (this.$.items.contains(activeCell)) {\r\n        // lazy column rendering may be enabled, so we need use the always visible sizer cells to find the column index\r\n        columnIndex = [...this.$.sizer.children].findIndex((sizerCell) => sizerCell._column === activeCell._column);\r\n      }\r\n\r\n      const isCurrentCellRowDetails = isDetailsCell(activeCell);\r\n      const activeRowGroup = activeRow.parentNode;\r\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\r\n\r\n      // _focusedColumnOrder is memoized - this is to ensure predictable\r\n      // navigation when entering and leaving detail and column group cells.\r\n      if (this._focusedColumnOrder === undefined) {\r\n        if (isCurrentCellRowDetails) {\r\n          this._focusedColumnOrder = 0;\r\n        } else {\r\n          this._focusedColumnOrder = this._getColumns(activeRowGroup, currentRowIndex).filter((c) => !c.hidden)[\r\n            columnIndex\r\n          ]._order;\r\n        }\r\n      }\r\n\r\n      if (dstIsRowDetails) {\r\n        // Focusing a row details cell on the destination row\r\n        const dstCell = [...dstRow.children].find(isDetailsCell);\r\n        dstCell.focus();\r\n      } else {\r\n        // Focusing a regular cell on the destination row\r\n\r\n        // Find orderedColumnIndex - the index of order closest matching the\r\n        // original _focusedColumnOrder in the sorted array of orders\r\n        // of the visible columns on the destination row.\r\n        const dstRowIndex = this.__getIndexInGroup(dstRow, this._focusedItemIndex);\r\n        const dstColumns = this._getColumns(activeRowGroup, dstRowIndex).filter((c) => !c.hidden);\r\n        const dstSortedColumnOrders = dstColumns.map((c) => c._order).sort((b, a) => b - a);\r\n        const maxOrderedColumnIndex = dstSortedColumnOrders.length - 1;\r\n        const orderedColumnIndex = dstSortedColumnOrders.indexOf(\r\n          dstSortedColumnOrders\r\n            .slice(0)\r\n            .sort((b, a) => Math.abs(b - this._focusedColumnOrder) - Math.abs(a - this._focusedColumnOrder))[0],\r\n        );\r\n\r\n        // Index of the destination column order\r\n        const dstOrderedColumnIndex =\r\n          dy === 0 && isCurrentCellRowDetails\r\n            ? orderedColumnIndex\r\n            : Math.max(0, Math.min(orderedColumnIndex + dx, maxOrderedColumnIndex));\r\n\r\n        if (dstOrderedColumnIndex !== orderedColumnIndex) {\r\n          // Horizontal movement invalidates stored _focusedColumnOrder\r\n          this._focusedColumnOrder = undefined;\r\n        }\r\n\r\n        const columnIndexByOrder = dstColumns.reduce((acc, col, i) => {\r\n          acc[col._order] = i;\r\n          return acc;\r\n        }, {});\r\n        const dstColumnIndex = columnIndexByOrder[dstSortedColumnOrders[dstOrderedColumnIndex]];\r\n\r\n        let dstCell;\r\n        if (this.$.items.contains(activeCell)) {\r\n          const dstSizerCell = this.$.sizer.children[dstColumnIndex];\r\n          if (this._lazyColumns) {\r\n            // If the column is not in the viewport, scroll it into view.\r\n            if (!this.__isColumnInViewport(dstSizerCell._column)) {\r\n              dstSizerCell.scrollIntoView();\r\n            }\r\n            this.__updateColumnsBodyContentHidden();\r\n            this.__updateHorizontalScrollPosition();\r\n          }\r\n\r\n          dstCell = [...dstRow.children].find((cell) => cell._column === dstSizerCell._column);\r\n          // Ensure correct horizontal scroll position once the destination cell is available.\r\n          this._scrollHorizontallyToCell(dstCell);\r\n        } else {\r\n          dstCell = dstRow.children[dstColumnIndex];\r\n          this._scrollHorizontallyToCell(dstCell);\r\n        }\r\n\r\n        dstCell.focus();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onInteractionKeyDown(e, key) {\r\n      const localTarget = e.composedPath()[0];\r\n      const localTargetIsTextInput =\r\n        localTarget.localName === 'input' &&\r\n        !/^(button|checkbox|color|file|image|radio|range|reset|submit)$/iu.test(localTarget.type);\r\n\r\n      let wantInteracting;\r\n      switch (key) {\r\n        case 'Enter':\r\n          wantInteracting = this.interacting ? !localTargetIsTextInput : true;\r\n          break;\r\n        case 'Escape':\r\n          wantInteracting = false;\r\n          break;\r\n        case 'F2':\r\n          wantInteracting = !this.interacting;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const { cell } = this._getGridEventLocation(e);\r\n\r\n      if (this.interacting !== wantInteracting && cell !== null) {\r\n        if (wantInteracting) {\r\n          const focusTarget =\r\n            cell._content.querySelector('[focus-target]') ||\r\n            // If a child element hasn't been explicitly marked as a focus target,\r\n            // fall back to any focusable element inside the cell.\r\n            [...cell._content.querySelectorAll('*')].find((node) => this._isFocusable(node));\r\n          if (focusTarget) {\r\n            e.preventDefault();\r\n            focusTarget.focus();\r\n            this._setInteracting(true);\r\n            this.toggleAttribute('navigating', false);\r\n          }\r\n        } else {\r\n          e.preventDefault();\r\n          this._focusedColumnOrder = undefined;\r\n          cell.focus();\r\n          this._setInteracting(false);\r\n          this.toggleAttribute('navigating', true);\r\n        }\r\n      }\r\n\r\n      if (key === 'Escape') {\r\n        this._hideTooltip(true);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _predictFocusStepTarget(srcElement, step) {\r\n      const tabOrder = [\r\n        this.$.table,\r\n        this._headerFocusable,\r\n        this.__emptyState ? this.$.emptystatecell : this._itemsFocusable,\r\n        this._footerFocusable,\r\n        this.$.focusexit,\r\n      ];\r\n\r\n      let index = tabOrder.indexOf(srcElement);\r\n\r\n      index += step;\r\n      while (index >= 0 && index <= tabOrder.length - 1) {\r\n        let rowElement = tabOrder[index];\r\n        if (rowElement && !this.__rowFocusMode) {\r\n          rowElement = tabOrder[index].parentNode;\r\n        }\r\n\r\n        if (!rowElement || rowElement.hidden) {\r\n          index += step;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      let focusStepTarget = tabOrder[index];\r\n\r\n      // If the target focusable is tied to a column that is not visible,\r\n      // find the first visible column and update the target in order to\r\n      // prevent scrolling to the start of the row.\r\n      if (focusStepTarget && !this.__isHorizontallyInViewport(focusStepTarget)) {\r\n        const firstVisibleColumn = this._getColumnsInOrder().find((column) => this.__isColumnInViewport(column));\r\n        if (firstVisibleColumn) {\r\n          if (focusStepTarget === this._headerFocusable) {\r\n            focusStepTarget = firstVisibleColumn._headerCell;\r\n          } else if (focusStepTarget === this._itemsFocusable) {\r\n            const rowIndex = focusStepTarget._column._cells.indexOf(focusStepTarget);\r\n            focusStepTarget = firstVisibleColumn._cells[rowIndex];\r\n          } else if (focusStepTarget === this._footerFocusable) {\r\n            focusStepTarget = firstVisibleColumn._footerCell;\r\n          }\r\n        }\r\n      }\r\n\r\n      return focusStepTarget;\r\n    }\r\n\r\n    /** @private */\r\n    _onTabKeyDown(e) {\r\n      let focusTarget = this._predictFocusStepTarget(e.composedPath()[0], e.shiftKey ? -1 : 1);\r\n\r\n      // Can be undefined if grid has tabindex\r\n      if (!focusTarget) {\r\n        return;\r\n      }\r\n\r\n      // Prevent focus-trap logic from intercepting the event.\r\n      e.stopPropagation();\r\n\r\n      if (focusTarget === this._itemsFocusable) {\r\n        this.__ensureFlatIndexInViewport(this._focusedItemIndex);\r\n\r\n        // Ensure the correct element is set as focusable after scrolling.\r\n        // The virtualizer may use a different element to render the item.\r\n        this.__updateItemsFocusable();\r\n\r\n        focusTarget = this._itemsFocusable;\r\n      }\r\n\r\n      focusTarget.focus();\r\n\r\n      // If the next element is the table or focusexit, it indicates the user\r\n      // intends to leave the grid. In this case, we move focus to these elements\r\n      // without preventing the default Tab behavior. The default behavior then\r\n      // starts from these elements and moves focus outside the grid.\r\n      if (focusTarget !== this.$.table && focusTarget !== this.$.focusexit) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      this.toggleAttribute('navigating', true);\r\n    }\r\n\r\n    /** @private */\r\n    _onSpaceKeyDown(e) {\r\n      e.preventDefault();\r\n\r\n      const element = e.composedPath()[0];\r\n      const isElementRow = isRow(element);\r\n      if (isElementRow || !element._content || !element._content.firstElementChild) {\r\n        this.dispatchEvent(\r\n          new CustomEvent(isElementRow ? 'row-activate' : 'cell-activate', {\r\n            detail: {\r\n              model: this.__getRowModel(isElementRow ? element : element.parentElement),\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onKeyUp(e) {\r\n      if (!/^( |SpaceBar)$/u.test(e.key) || this.interacting) {\r\n        return;\r\n      }\r\n\r\n      e.preventDefault();\r\n\r\n      const cell = e.composedPath()[0];\r\n      if (cell._content && cell._content.firstElementChild) {\r\n        const wasNavigating = this.hasAttribute('navigating');\r\n        cell._content.firstElementChild.dispatchEvent(\r\n          new MouseEvent('click', {\r\n            shiftKey: e.shiftKey,\r\n            bubbles: true,\r\n            composed: true,\r\n            cancelable: true,\r\n          }),\r\n        );\r\n        this.toggleAttribute('navigating', wasNavigating);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!FocusEvent} e\r\n     * @protected\r\n     */\r\n    _onFocusIn(e) {\r\n      if (!this._isMousedown) {\r\n        this.toggleAttribute('navigating', true);\r\n      }\r\n\r\n      const rootTarget = e.composedPath()[0];\r\n\r\n      if (rootTarget === this.$.table || rootTarget === this.$.focusexit) {\r\n        if (!this._isMousedown) {\r\n          // The focus enters the top (bottom) of the grid, meaning that user has\r\n          // tabbed (shift-tabbed) into the grid. Move the focus to\r\n          // the first (the last) focusable.\r\n          this._predictFocusStepTarget(rootTarget, rootTarget === this.$.table ? 1 : -1).focus();\r\n        }\r\n        this._setInteracting(false);\r\n      } else {\r\n        this._detectInteracting(e);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!FocusEvent} e\r\n     * @protected\r\n     */\r\n    _onFocusOut(e) {\r\n      this.toggleAttribute('navigating', false);\r\n      this._detectInteracting(e);\r\n      this._hideTooltip();\r\n      this._focusedCell = null;\r\n    }\r\n\r\n    /** @private */\r\n    _onContentFocusIn(e) {\r\n      const { section, cell, row } = this._getGridEventLocation(e);\r\n\r\n      if (!cell && !this.__rowFocusMode) {\r\n        return;\r\n      }\r\n\r\n      this._detectInteracting(e);\r\n\r\n      if (section && (cell || row)) {\r\n        this._activeRowGroup = section;\r\n\r\n        if (section === this.$.header) {\r\n          this._headerFocusable = this.__getFocusable(row, cell);\r\n        } else if (section === this.$.items) {\r\n          this._itemsFocusable = this.__getFocusable(row, cell);\r\n          this._focusedItemIndex = row.index;\r\n        } else if (section === this.$.footer) {\r\n          this._footerFocusable = this.__getFocusable(row, cell);\r\n        }\r\n\r\n        if (cell) {\r\n          const context = this.getEventContext(e);\r\n          this.__pendingBodyCellFocus = this.loading && context.section === 'body';\r\n          if (!this.__pendingBodyCellFocus && cell !== this.$.emptystatecell) {\r\n            // Fire a cell-focus event for the cell\r\n            cell.dispatchEvent(new CustomEvent('cell-focus', { bubbles: true, composed: true, detail: { context } }));\r\n          }\r\n          this._focusedCell = cell._focusButton || cell;\r\n\r\n          if (isKeyboardActive() && e.target === cell) {\r\n            this._showTooltip(e);\r\n          }\r\n        } else {\r\n          this._focusedCell = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    __dispatchPendingBodyCellFocus() {\r\n      // If the body cell focus was pending, dispatch the event once loading is done\r\n      if (this.__pendingBodyCellFocus && this.shadowRoot.activeElement === this._itemsFocusable) {\r\n        this._itemsFocusable.dispatchEvent(new Event('focusin', { bubbles: true, composed: true }));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the focusable element depending on the current focus mode.\r\n     * It can be a row, a cell, or a focusable div inside a cell.\r\n     *\r\n     * @param {HTMLElement} row\r\n     * @param {HTMLElement} cell\r\n     * @return {HTMLElement}\r\n     * @private\r\n     */\r\n    __getFocusable(row, cell) {\r\n      return this.__rowFocusMode ? row : cell._focusButton || cell;\r\n    }\r\n\r\n    /**\r\n     * Enables interaction mode if a cells descendant receives focus or keyboard\r\n     * input. Disables it if the event is not related to cell content.\r\n     * @param {!KeyboardEvent|!FocusEvent} e\r\n     * @private\r\n     */\r\n    _detectInteracting(e) {\r\n      const isInteracting = e.composedPath().some((el) => el.localName === 'slot' && this.shadowRoot.contains(el));\r\n      this._setInteracting(isInteracting);\r\n      this.__updateHorizontalScrollPosition();\r\n    }\r\n\r\n    /**\r\n     * Enables or disables the focus target of the containing section of the\r\n     * grid from receiving focus, based on whether the user is interacting with\r\n     * that section of the grid.\r\n     * @param {HTMLElement} focusTarget\r\n     * @private\r\n     */\r\n    _updateGridSectionFocusTarget(focusTarget) {\r\n      if (!focusTarget) {\r\n        return;\r\n      }\r\n\r\n      const section = this._getGridSectionFromFocusTarget(focusTarget);\r\n      const isInteractingWithinActiveSection = this.interacting && section === this._activeRowGroup;\r\n\r\n      focusTarget.tabIndex = isInteractingWithinActiveSection ? -1 : 0;\r\n    }\r\n\r\n    /** @protected */\r\n    _preventScrollerRotatingCellFocus() {\r\n      if (this._activeRowGroup !== this.$.items) {\r\n        return;\r\n      }\r\n\r\n      this.__preventScrollerRotatingCellFocusDebouncer = Debouncer.debounce(\r\n        this.__preventScrollerRotatingCellFocusDebouncer,\r\n        animationFrame,\r\n        () => {\r\n          const isItemsRowGroupActive = this._activeRowGroup === this.$.items;\r\n          const isFocusedItemRendered = this._getRenderedRows().some((row) => row.index === this._focusedItemIndex);\r\n          if (isFocusedItemRendered) {\r\n            // Ensure the correct element is focused, as the virtualizer\r\n            // may use different elements when re-rendering visible items.\r\n            this.__updateItemsFocusable();\r\n\r\n            // The focused item is visible, so restore the cell focus outline\r\n            // and navigation mode.\r\n            if (isItemsRowGroupActive && !this.__rowFocusMode) {\r\n              this._focusedCell = this._itemsFocusable;\r\n            }\r\n\r\n            if (this._navigatingIsHidden) {\r\n              this.toggleAttribute('navigating', true);\r\n              this._navigatingIsHidden = false;\r\n            }\r\n          } else if (isItemsRowGroupActive) {\r\n            // The focused item was scrolled out of view and focus is still inside body,\r\n            // so remove the cell focus outline and hide navigation mode.\r\n            this._focusedCell = null;\r\n\r\n            if (this.hasAttribute('navigating')) {\r\n              this._navigatingIsHidden = true;\r\n              this.toggleAttribute('navigating', false);\r\n            }\r\n          }\r\n        },\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableSectionElement=} rowGroup\r\n     * @param {number=} rowIndex\r\n     * @return {!Array<!GridColumn>}\r\n     * @protected\r\n     */\r\n    _getColumns(rowGroup, rowIndex) {\r\n      let columnTreeLevel = this._columnTree.length - 1;\r\n      if (rowGroup === this.$.header) {\r\n        columnTreeLevel = rowIndex;\r\n      } else if (rowGroup === this.$.footer) {\r\n        columnTreeLevel = this._columnTree.length - 1 - rowIndex;\r\n      }\r\n      return this._columnTree[columnTreeLevel];\r\n    }\r\n\r\n    /** @private */\r\n    __isValidFocusable(element) {\r\n      return this.$.table.contains(element) && element.offsetHeight;\r\n    }\r\n\r\n    /** @protected */\r\n    _resetKeyboardNavigation() {\r\n      if (!this.$ && this.performUpdate) {\r\n        this.performUpdate();\r\n      }\r\n      // Header / footer\r\n      ['header', 'footer'].forEach((section) => {\r\n        if (!this.__isValidFocusable(this[`_${section}Focusable`])) {\r\n          const firstVisibleRow = [...this.$[section].children].find((row) => row.offsetHeight);\r\n          const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\r\n          if (firstVisibleRow && firstVisibleCell) {\r\n            this[`_${section}Focusable`] = this.__getFocusable(firstVisibleRow, firstVisibleCell);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Body\r\n      if (!this.__isValidFocusable(this._itemsFocusable) && this.$.items.firstElementChild) {\r\n        const firstVisibleRow = this.__getFirstVisibleItem();\r\n        const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\r\n\r\n        if (firstVisibleCell && firstVisibleRow) {\r\n          // Reset memoized column\r\n          this._focusedColumnOrder = undefined;\r\n          this._itemsFocusable = this.__getFocusable(firstVisibleRow, firstVisibleCell);\r\n        }\r\n      } else {\r\n        this.__updateItemsFocusable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} dstCell\r\n     * @protected\r\n     */\r\n    _scrollHorizontallyToCell(dstCell) {\r\n      if (dstCell.hasAttribute('frozen') || dstCell.hasAttribute('frozen-to-end') || isDetailsCell(dstCell)) {\r\n        // These cells are, by design, always visible, no need to scroll.\r\n        return;\r\n      }\r\n\r\n      const dstCellRect = dstCell.getBoundingClientRect();\r\n      const dstRow = dstCell.parentNode;\r\n      const dstCellIndex = Array.from(dstRow.children).indexOf(dstCell);\r\n      const tableRect = this.$.table.getBoundingClientRect();\r\n      let leftBoundary = tableRect.left,\r\n        rightBoundary = tableRect.right;\r\n      for (let i = dstCellIndex - 1; i >= 0; i--) {\r\n        const cell = dstRow.children[i];\r\n        if (cell.hasAttribute('hidden') || isDetailsCell(cell)) {\r\n          continue;\r\n        }\r\n        if (cell.hasAttribute('frozen') || cell.hasAttribute('frozen-to-end')) {\r\n          leftBoundary = cell.getBoundingClientRect().right;\r\n          break;\r\n        }\r\n      }\r\n      for (let i = dstCellIndex + 1; i < dstRow.children.length; i++) {\r\n        const cell = dstRow.children[i];\r\n        if (cell.hasAttribute('hidden') || isDetailsCell(cell)) {\r\n          continue;\r\n        }\r\n        if (cell.hasAttribute('frozen') || cell.hasAttribute('frozen-to-end')) {\r\n          rightBoundary = cell.getBoundingClientRect().left;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (dstCellRect.left < leftBoundary) {\r\n        this.$.table.scrollLeft += Math.round(dstCellRect.left - leftBoundary);\r\n      }\r\n      if (dstCellRect.right > rightBoundary) {\r\n        this.$.table.scrollLeft += Math.round(dstCellRect.right - rightBoundary);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @typedef {Object} GridEventLocation\r\n     * @property {HTMLTableSectionElement | null} section - The table section element that the event occurred in (header, body, or footer), or null if the event did not occur in a section\r\n     * @property {HTMLTableRowElement | null} row - The row element that the event occurred in, or null if the event did not occur in a row\r\n     * @property {HTMLTableCellElement | null} cell - The cell element that the event occurred in, or null if the event did not occur in a cell\r\n     * @private\r\n     */\r\n    /**\r\n     * Takes an event and returns a location object describing in which part of the grid the event occurred.\r\n     * The event may either target table section, a row, a cell or contents of a cell.\r\n     * @param {Event} e\r\n     * @returns {GridEventLocation}\r\n     * @protected\r\n     */\r\n    _getGridEventLocation(e) {\r\n      // Use `composedPath()` stored by vaadin-context-menu gesture\r\n      // to avoid problem when accessing it after a timeout on iOS\r\n      const path = e.__composedPath || e.composedPath();\r\n      const tableIndex = path.indexOf(this.$.table);\r\n      // Assuming ascending path to table is: [...,] th|td, tr, thead|tbody, table [,...]\r\n      const section = tableIndex >= 1 ? path[tableIndex - 1] : null;\r\n      const row = tableIndex >= 2 ? path[tableIndex - 2] : null;\r\n      const cell = tableIndex >= 3 ? path[tableIndex - 3] : null;\r\n\r\n      return {\r\n        section,\r\n        row,\r\n        cell,\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Helper method that maps a focus target cell to the containing grid section\r\n     * @param {HTMLElement} focusTarget\r\n     * @returns {HTMLTableSectionElement | null}\r\n     * @private\r\n     */\r\n    _getGridSectionFromFocusTarget(focusTarget) {\r\n      if (focusTarget === this._headerFocusable) {\r\n        return this.$.header;\r\n      }\r\n      if (focusTarget === this._itemsFocusable) {\r\n        return this.$.items;\r\n      }\r\n      if (focusTarget === this._footerFocusable) {\r\n        return this.$.footer;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * Fired when a cell is focused with click or keyboard navigation.\r\n     *\r\n     * Use context property of @see {@link GridCellFocusEvent} to get detail information about the event.\r\n     *\r\n     * @event cell-focus\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { iterateChildren } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const RowDetailsMixin = (superClass) =>\r\n  class RowDetailsMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * An array containing references to items with open row details.\r\n         * @type {!Array<!GridItem>}\r\n         */\r\n        detailsOpenedItems: {\r\n          type: Array,\r\n          value: () => [],\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the content of the row details.\r\n         * Receives three arguments:\r\n         *\r\n         * - `root` The row details content DOM element. Append your content to it.\r\n         * - `grid` The `<vaadin-grid>` element.\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.level` The number of the item's tree sublevel, starts from 0.\r\n         *   - `model.expanded` True if the item's tree sublevel is expanded.\r\n         *   - `model.selected` True if the item is selected.\r\n         *\r\n         * @type {GridRowDetailsRenderer | null | undefined}\r\n         */\r\n        rowDetailsRenderer: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {!Array<!HTMLElement> | undefined}\r\n         * @protected\r\n         */\r\n        _detailsCells: {\r\n          type: Array,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '_detailsOpenedItemsChanged(detailsOpenedItems, rowDetailsRenderer)',\r\n        '_rowDetailsRendererChanged(rowDetailsRenderer)',\r\n      ];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this._detailsCellResizeObserver = new ResizeObserver((entries) => {\r\n        entries.forEach(({ target: cell }) => {\r\n          this._updateDetailsCellHeight(cell.parentElement);\r\n        });\r\n\r\n        // This workaround is needed until Safari also supports\r\n        // ResizeObserver.observe with {box: 'border-box'}\r\n        this.__virtualizer.__adapter._resizeHandler();\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _rowDetailsRendererChanged(rowDetailsRenderer) {\r\n      if (!rowDetailsRenderer) {\r\n        return;\r\n      }\r\n\r\n      if (this._columnTree) {\r\n        // Only update the rows if the column tree has already been initialized\r\n        iterateChildren(this.$.items, (row) => {\r\n          if (!row.querySelector('[part~=details-cell]')) {\r\n            this._updateRow(row, this._columnTree[this._columnTree.length - 1]);\r\n            const isDetailsOpened = this._isDetailsOpened(row._item);\r\n            this._toggleDetailsCell(row, isDetailsOpened);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _detailsOpenedItemsChanged(_detailsOpenedItems, rowDetailsRenderer) {\r\n      iterateChildren(this.$.items, (row) => {\r\n        // Re-renders the row to possibly close the previously opened details.\r\n        if (row.hasAttribute('details-opened')) {\r\n          this._updateItem(row, row._item);\r\n          return;\r\n        }\r\n\r\n        // Re-renders the row to open the details when a row details renderer is provided.\r\n        if (rowDetailsRenderer && this._isDetailsOpened(row._item)) {\r\n          this._updateItem(row, row._item);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} cell\r\n     * @protected\r\n     */\r\n    _configureDetailsCell(cell) {\r\n      cell.setAttribute('part', 'cell details-cell');\r\n      // Freeze the details cell, so that it does not scroll horizontally\r\n      // with the normal cells. This way it looks less weird.\r\n      cell.toggleAttribute('frozen', true);\r\n\r\n      this._detailsCellResizeObserver.observe(cell);\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {!GridItem} item\r\n     * @protected\r\n     */\r\n    _toggleDetailsCell(row, detailsOpened) {\r\n      const cell = row.querySelector('[part~=\"details-cell\"]');\r\n      if (!cell) {\r\n        return;\r\n      }\r\n\r\n      cell.hidden = !detailsOpened;\r\n\r\n      if (cell.hidden) {\r\n        return;\r\n      }\r\n\r\n      // Assigns a renderer when the details cell is opened.\r\n      // The details cell content is rendered later in the `_updateItem` method.\r\n      if (this.rowDetailsRenderer) {\r\n        cell._renderer = this.rowDetailsRenderer;\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _updateDetailsCellHeight(row) {\r\n      const cell = row.querySelector('[part~=\"details-cell\"]');\r\n      if (!cell) {\r\n        return;\r\n      }\r\n\r\n      this.__updateDetailsRowPadding(row, cell);\r\n      // Ensure the row has correct padding after frame (the resize observer might miss it)\r\n      requestAnimationFrame(() => this.__updateDetailsRowPadding(row, cell));\r\n    }\r\n\r\n    /** @private */\r\n    __updateDetailsRowPadding(row, cell) {\r\n      if (cell.hidden) {\r\n        row.style.removeProperty('padding-bottom');\r\n      } else {\r\n        row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _updateDetailsCellHeights() {\r\n      iterateChildren(this.$.items, (row) => {\r\n        this._updateDetailsCellHeight(row);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!GridItem} item\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isDetailsOpened(item) {\r\n      return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Open the details row of a given item.\r\n     * @param {!GridItem} item\r\n     */\r\n    openItemDetails(item) {\r\n      if (!this._isDetailsOpened(item)) {\r\n        this.detailsOpenedItems = [...this.detailsOpenedItems, item];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Close the details row of a given item.\r\n     * @param {!GridItem} item\r\n     */\r\n    closeItemDetails(item) {\r\n      if (this._isDetailsOpened(item)) {\r\n        this.detailsOpenedItems = this.detailsOpenedItems.filter((i) => !this._itemsEqual(i, item));\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isElementHidden } from '@vaadin/a11y-base';\r\nimport { animationFrame, microTask, timeOut } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { getNormalizedScrollLeft } from '@vaadin/component-base/src/dir-utils.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\n\r\nconst timeouts = {\r\n  SCROLLING: 500,\r\n  UPDATE_CONTENT_VISIBILITY: 100,\r\n};\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ScrollMixin = (superClass) =>\r\n  class ScrollMixin extends ResizeMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Allows you to choose between modes for rendering columns in the grid:\r\n         *\r\n         * \"eager\" (default): All columns are rendered upfront, regardless of their visibility within the viewport.\r\n         * This mode should generally be preferred, as it avoids the limitations imposed by the \"lazy\" mode.\r\n         * Use this mode unless the grid has a large number of columns and performance outweighs the limitations\r\n         * in priority.\r\n         *\r\n         * \"lazy\": Optimizes the rendering of cells when there are multiple columns in the grid by virtualizing\r\n         * horizontal scrolling. In this mode, body cells are rendered only when their corresponding columns are\r\n         * inside the visible viewport.\r\n         *\r\n         * Using \"lazy\" rendering should be used only if you're dealing with a large number of columns and performance\r\n         * is your highest priority. For most use cases, the default \"eager\" mode is recommended due to the\r\n         * limitations imposed by the \"lazy\" mode.\r\n         *\r\n         * When using the \"lazy\" mode, keep the following limitations in mind:\r\n         *\r\n         * - Row Height: When only a number of columns are visible at once, the height of a row can only be that of\r\n         * the highest cell currently visible on that row. Make sure each cell on a single row has the same height\r\n         * as all other cells on that row. If row cells have different heights, users may experience jumpiness when\r\n         * scrolling the grid horizontally as lazily rendered cells with different heights are scrolled into view.\r\n         *\r\n         * - Auto-width Columns: For the columns that are initially outside the visible viewport but still use auto-width,\r\n         * only the header content is taken into account when calculating the column width because the body cells\r\n         * of the columns outside the viewport are not initially rendered.\r\n         *\r\n         * - Screen Reader Compatibility: Screen readers may not be able to associate the focused cells with the correct\r\n         * headers when only a subset of the body cells on a row is rendered.\r\n         *\r\n         * - Keyboard Navigation: Tabbing through focusable elements inside the grid body may not work as expected because\r\n         * some of the columns that would include focusable elements in the body cells may be outside the visible viewport\r\n         * and thus not rendered.\r\n         *\r\n         * @attr {eager|lazy} column-rendering\r\n         * @type {!ColumnRendering}\r\n         */\r\n        columnRendering: {\r\n          type: String,\r\n          value: 'eager',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Cached array of frozen cells\r\n         * @private\r\n         */\r\n        _frozenCells: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n\r\n        /**\r\n         * Cached array of cells frozen to end\r\n         * @private\r\n         */\r\n        _frozenToEndCells: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__columnRenderingChanged(_columnTree, columnRendering)'];\r\n    }\r\n\r\n    /** @private */\r\n    get _scrollLeft() {\r\n      return this.$.table.scrollLeft;\r\n    }\r\n\r\n    /** @private */\r\n    get _scrollTop() {\r\n      return this.$.table.scrollTop;\r\n    }\r\n\r\n    /**\r\n     * Override (from iron-scroll-target-behavior) to avoid document scroll\r\n     * @private\r\n     */\r\n    set _scrollTop(top) {\r\n      this.$.table.scrollTop = top;\r\n    }\r\n\r\n    /** @protected */\r\n    get _lazyColumns() {\r\n      return this.columnRendering === 'lazy';\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.scrollTarget = this.$.table;\r\n\r\n      this.$.items.addEventListener('focusin', (e) => {\r\n        const composedPath = e.composedPath();\r\n        const row = composedPath[composedPath.indexOf(this.$.items) - 1];\r\n\r\n        if (row) {\r\n          // Make sure the row with the focused element is fully inside the visible viewport\r\n          // Don't change scroll position if the user is interacting with the mouse\r\n          if (!this._isMousedown) {\r\n            this.__scrollIntoViewport(row.index);\r\n          }\r\n\r\n          if (!this.$.table.contains(e.relatedTarget)) {\r\n            // Virtualizer can't catch the event because if orginates from the light DOM.\r\n            // Dispatch a virtualizer-element-focused event for virtualizer to catch.\r\n            this.$.table.dispatchEvent(new CustomEvent('virtualizer-element-focused', { detail: { element: row } }));\r\n          }\r\n        }\r\n      });\r\n\r\n      this.$.table.addEventListener('scroll', () => this._afterScroll());\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onResize() {\r\n      this._updateOverflow();\r\n      this.__updateHorizontalScrollPosition();\r\n\r\n      // For Firefox, manually restore last scroll position when grid becomes\r\n      // visible again. This solves an issue where switching visibility of two\r\n      // grids causes Firefox trying to synchronize the scroll positions between\r\n      // the two grid's table elements.\r\n      // See https://github.com/vaadin/web-components/issues/5796\r\n      if (this._firefox) {\r\n        const isVisible = !isElementHidden(this);\r\n        if (isVisible && this.__previousVisible === false) {\r\n          this._scrollTop = this.__memorizedScrollTop || 0;\r\n        }\r\n        this.__previousVisible = isVisible;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Scroll to a flat index in the grid. The method doesn't take into account\r\n     * the hierarchy of the items.\r\n     *\r\n     * @param {number} index Row index to scroll to\r\n     * @protected\r\n     */\r\n    _scrollToFlatIndex(index) {\r\n      index = Math.min(this._flatSize - 1, Math.max(0, index));\r\n      this.__virtualizer.scrollToIndex(index);\r\n      this.__scrollIntoViewport(index);\r\n    }\r\n\r\n    /**\r\n     * Makes sure the row with the given index (if found in the DOM) is fully\r\n     * inside the visible viewport, taking header/footer into account.\r\n     * @private\r\n     */\r\n    __scrollIntoViewport(index) {\r\n      const rowElement = [...this.$.items.children].find((child) => child.index === index);\r\n      if (rowElement) {\r\n        const dstRect = rowElement.getBoundingClientRect();\r\n        const footerTop = this.$.footer.getBoundingClientRect().top;\r\n        const headerBottom = this.$.header.getBoundingClientRect().bottom;\r\n        if (dstRect.bottom > footerTop) {\r\n          this.$.table.scrollTop += dstRect.bottom - footerTop;\r\n        } else if (dstRect.top < headerBottom) {\r\n          this.$.table.scrollTop -= headerBottom - dstRect.top;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _scheduleScrolling() {\r\n      if (!this._scrollingFrame) {\r\n        // Defer setting state attributes to avoid Edge hiccups\r\n        this._scrollingFrame = requestAnimationFrame(() => this.$.scroller.toggleAttribute('scrolling', true));\r\n      }\r\n      this._debounceScrolling = Debouncer.debounce(this._debounceScrolling, timeOut.after(timeouts.SCROLLING), () => {\r\n        cancelAnimationFrame(this._scrollingFrame);\r\n        delete this._scrollingFrame;\r\n        this.$.scroller.toggleAttribute('scrolling', false);\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _afterScroll() {\r\n      this.__updateHorizontalScrollPosition();\r\n\r\n      if (!this.hasAttribute('reordering')) {\r\n        this._scheduleScrolling();\r\n      }\r\n      if (!this.hasAttribute('navigating')) {\r\n        this._hideTooltip(true);\r\n      }\r\n\r\n      this._updateOverflow();\r\n\r\n      this._debounceColumnContentVisibility = Debouncer.debounce(\r\n        this._debounceColumnContentVisibility,\r\n        timeOut.after(timeouts.UPDATE_CONTENT_VISIBILITY),\r\n        () => {\r\n          // If horizontal scroll position changed and lazy column rendering is enabled,\r\n          // update the visible columns.\r\n          if (this._lazyColumns && this.__cachedScrollLeft !== this._scrollLeft) {\r\n            this.__cachedScrollLeft = this._scrollLeft;\r\n            this.__updateColumnsBodyContentHidden();\r\n          }\r\n        },\r\n      );\r\n\r\n      // Memorize last scroll position in Firefox\r\n      if (this._firefox) {\r\n        const isVisible = !isElementHidden(this);\r\n        if (isVisible && this.__previousVisible !== false) {\r\n          this.__memorizedScrollTop = this._scrollTop;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateColumnsBodyContentHidden() {\r\n      if (!this._columnTree || !this._areSizerCellsAssigned()) {\r\n        return;\r\n      }\r\n\r\n      const columnsInOrder = this._getColumnsInOrder();\r\n      let bodyContentHiddenChanged = false;\r\n\r\n      // Remove the column cells from the DOM if the column is outside the viewport.\r\n      // Add the column cells to the DOM if the column is inside the viewport.\r\n      //\r\n      // Update the _bodyContentHidden property of the column to reflect the current\r\n      // visibility state and make it run renderers for the cells if necessary.\r\n      columnsInOrder.forEach((column) => {\r\n        const bodyContentHidden = this._lazyColumns && !this.__isColumnInViewport(column);\r\n\r\n        if (column._bodyContentHidden !== bodyContentHidden) {\r\n          bodyContentHiddenChanged = true;\r\n          column._cells.forEach((cell) => {\r\n            if (cell !== column._sizerCell) {\r\n              if (bodyContentHidden) {\r\n                cell.remove();\r\n              } else if (cell.__parentRow) {\r\n                // Add the cell to the correct DOM position in the row\r\n                const followingColumnCell = [...cell.__parentRow.children].find(\r\n                  (child) => columnsInOrder.indexOf(child._column) > columnsInOrder.indexOf(column),\r\n                );\r\n                cell.__parentRow.insertBefore(cell, followingColumnCell);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        column._bodyContentHidden = bodyContentHidden;\r\n      });\r\n\r\n      if (bodyContentHiddenChanged) {\r\n        // Frozen columns may have changed their visibility\r\n        this._frozenCellsChanged();\r\n      }\r\n\r\n      if (this._lazyColumns) {\r\n        // Calculate the offset to apply to the body cells\r\n        const lastFrozenColumn = [...columnsInOrder].reverse().find((column) => column.frozen);\r\n        const lastFrozenColumnEnd = this.__getColumnEnd(lastFrozenColumn);\r\n        const firstVisibleColumn = columnsInOrder.find((column) => !column.frozen && !column._bodyContentHidden);\r\n        this.__lazyColumnsStart = this.__getColumnStart(firstVisibleColumn) - lastFrozenColumnEnd;\r\n        this.$.items.style.setProperty('--_grid-lazy-columns-start', `${this.__lazyColumnsStart}px`);\r\n\r\n        // Make sure the body has a focusable element in lazy columns mode\r\n        this._resetKeyboardNavigation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __getColumnEnd(column) {\r\n      if (!column) {\r\n        return this.__isRTL ? this.$.table.clientWidth : 0;\r\n      }\r\n      return column._sizerCell.offsetLeft + (this.__isRTL ? 0 : column._sizerCell.offsetWidth);\r\n    }\r\n\r\n    /** @private */\r\n    __getColumnStart(column) {\r\n      if (!column) {\r\n        return this.__isRTL ? this.$.table.clientWidth : 0;\r\n      }\r\n      return column._sizerCell.offsetLeft + (this.__isRTL ? column._sizerCell.offsetWidth : 0);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given column is horizontally inside the viewport.\r\n     * @private\r\n     */\r\n    __isColumnInViewport(column) {\r\n      if (column.frozen || column.frozenToEnd) {\r\n        // Assume frozen columns to always be inside the viewport\r\n        return true;\r\n      }\r\n\r\n      // Check if the column's sizer cell is inside the viewport\r\n      return this.__isHorizontallyInViewport(column._sizerCell);\r\n    }\r\n\r\n    /** @private */\r\n    __isHorizontallyInViewport(element) {\r\n      return (\r\n        element.offsetLeft + element.offsetWidth >= this._scrollLeft &&\r\n        element.offsetLeft <= this._scrollLeft + this.clientWidth\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    __columnRenderingChanged(_columnTree, columnRendering) {\r\n      if (columnRendering === 'eager') {\r\n        this.$.scroller.removeAttribute('column-rendering');\r\n      } else {\r\n        this.$.scroller.setAttribute('column-rendering', columnRendering);\r\n      }\r\n\r\n      this.__updateColumnsBodyContentHidden();\r\n    }\r\n\r\n    /** @private */\r\n    _updateOverflow() {\r\n      this._debounceOverflow = Debouncer.debounce(this._debounceOverflow, animationFrame, () => {\r\n        this.__doUpdateOverflow();\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __doUpdateOverflow() {\r\n      // Set overflow styling attributes\r\n      let overflow = '';\r\n      const table = this.$.table;\r\n      if (table.scrollTop < table.scrollHeight - table.clientHeight) {\r\n        overflow += ' bottom';\r\n      }\r\n\r\n      if (table.scrollTop > 0) {\r\n        overflow += ' top';\r\n      }\r\n\r\n      const scrollLeft = getNormalizedScrollLeft(table, this.getAttribute('dir'));\r\n      if (scrollLeft > 0) {\r\n        overflow += ' start';\r\n      }\r\n\r\n      if (scrollLeft < table.scrollWidth - table.clientWidth) {\r\n        overflow += ' end';\r\n      }\r\n\r\n      if (this.__isRTL) {\r\n        overflow = overflow.replace(/start|end/giu, (matched) => {\r\n          return matched === 'start' ? 'end' : 'start';\r\n        });\r\n      }\r\n\r\n      // TODO: Remove \"right\" and \"left\" values in the next major.\r\n      if (table.scrollLeft < table.scrollWidth - table.clientWidth) {\r\n        overflow += ' right';\r\n      }\r\n\r\n      if (table.scrollLeft > 0) {\r\n        overflow += ' left';\r\n      }\r\n\r\n      const value = overflow.trim();\r\n      if (value.length > 0 && this.getAttribute('overflow') !== value) {\r\n        this.setAttribute('overflow', value);\r\n      } else if (value.length === 0 && this.hasAttribute('overflow')) {\r\n        this.removeAttribute('overflow');\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _frozenCellsChanged() {\r\n      this._debouncerCacheElements = Debouncer.debounce(this._debouncerCacheElements, microTask, () => {\r\n        Array.from(this.shadowRoot.querySelectorAll('[part~=\"cell\"]')).forEach((cell) => {\r\n          cell.style.transform = '';\r\n        });\r\n        this._frozenCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen]'));\r\n        this._frozenToEndCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen-to-end]'));\r\n        this.__updateHorizontalScrollPosition();\r\n      });\r\n      this._debounceUpdateFrozenColumn();\r\n    }\r\n\r\n    /** @protected */\r\n    _debounceUpdateFrozenColumn() {\r\n      this.__debounceUpdateFrozenColumn = Debouncer.debounce(this.__debounceUpdateFrozenColumn, microTask, () =>\r\n        this._updateFrozenColumn(),\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    _updateFrozenColumn() {\r\n      if (!this._columnTree) {\r\n        return;\r\n      }\r\n\r\n      const columnsRow = this._columnTree[this._columnTree.length - 1].slice(0);\r\n      columnsRow.sort((a, b) => {\r\n        return a._order - b._order;\r\n      });\r\n\r\n      let lastFrozen;\r\n      let firstFrozenToEnd;\r\n\r\n      // Use for loop to only iterate columns once\r\n      for (let i = 0; i < columnsRow.length; i++) {\r\n        const col = columnsRow[i];\r\n\r\n        col._lastFrozen = false;\r\n        col._firstFrozenToEnd = false;\r\n\r\n        if (firstFrozenToEnd === undefined && col.frozenToEnd && !col.hidden) {\r\n          firstFrozenToEnd = i;\r\n        }\r\n\r\n        if (col.frozen && !col.hidden) {\r\n          lastFrozen = i;\r\n        }\r\n      }\r\n\r\n      if (lastFrozen !== undefined) {\r\n        columnsRow[lastFrozen]._lastFrozen = true;\r\n      }\r\n\r\n      if (firstFrozenToEnd !== undefined) {\r\n        columnsRow[firstFrozenToEnd]._firstFrozenToEnd = true;\r\n      }\r\n\r\n      this.__updateColumnsBodyContentHidden();\r\n    }\r\n\r\n    /** @private */\r\n    __updateHorizontalScrollPosition() {\r\n      if (!this._columnTree) {\r\n        return;\r\n      }\r\n      const scrollWidth = this.$.table.scrollWidth;\r\n      const clientWidth = this.$.table.clientWidth;\r\n      const scrollLeft = Math.max(0, this.$.table.scrollLeft);\r\n      const normalizedScrollLeft = getNormalizedScrollLeft(this.$.table, this.getAttribute('dir'));\r\n\r\n      // Position header, footer and items container\r\n      const transform = `translate(${-scrollLeft}px, 0)`;\r\n      this.$.header.style.transform = transform;\r\n      this.$.footer.style.transform = transform;\r\n      this.$.items.style.transform = transform;\r\n\r\n      // Position frozen cells\r\n      const x = this.__isRTL ? normalizedScrollLeft + clientWidth - scrollWidth : scrollLeft;\r\n      const transformFrozen = `translate(${x}px, 0)`;\r\n      this._frozenCells.forEach((cell) => {\r\n        cell.style.transform = transformFrozen;\r\n      });\r\n\r\n      // Position cells frozen to end\r\n      const remaining = this.__isRTL ? normalizedScrollLeft : scrollLeft + clientWidth - scrollWidth;\r\n      const transformFrozenToEnd = `translate(${remaining}px, 0)`;\r\n\r\n      let transformFrozenToEndBody = transformFrozenToEnd;\r\n\r\n      if (this._lazyColumns && this._areSizerCellsAssigned()) {\r\n        // Lazy column rendering is used, calculate the offset to apply to the frozen to end cells\r\n        const columnsInOrder = this._getColumnsInOrder();\r\n\r\n        const lastVisibleColumn = [...columnsInOrder]\r\n          .reverse()\r\n          .find((column) => !column.frozenToEnd && !column._bodyContentHidden);\r\n        const lastVisibleColumnEnd = this.__getColumnEnd(lastVisibleColumn);\r\n\r\n        const firstFrozenToEndColumn = columnsInOrder.find((column) => column.frozenToEnd);\r\n        const firstFrozenToEndColumnStart = this.__getColumnStart(firstFrozenToEndColumn);\r\n\r\n        const translateX = remaining + (firstFrozenToEndColumnStart - lastVisibleColumnEnd) + this.__lazyColumnsStart;\r\n        transformFrozenToEndBody = `translate(${translateX}px, 0)`;\r\n      }\r\n\r\n      this._frozenToEndCells.forEach((cell) => {\r\n        if (this.$.items.contains(cell)) {\r\n          cell.style.transform = transformFrozenToEndBody;\r\n        } else {\r\n          cell.style.transform = transformFrozenToEnd;\r\n        }\r\n      });\r\n\r\n      // Only update the --_grid-horizontal-scroll-position custom property when navigating\r\n      // on row focus mode to avoid performance issues.\r\n      if (this.hasAttribute('navigating') && this.__rowFocusMode) {\r\n        this.$.table.style.setProperty('--_grid-horizontal-scroll-position', `${-x}px`);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _areSizerCellsAssigned() {\r\n      return this._getColumnsInOrder().every((column) => column._sizerCell);\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const SelectionMixin = (superClass) =>\r\n  class SelectionMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * An array that contains the selected items.\r\n         * @type {!Array<!GridItem>}\r\n         */\r\n        selectedItems: {\r\n          type: Object,\r\n          notify: true,\r\n          value: () => [],\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function to check whether a specific item in the grid may be\r\n         * selected or deselected by the user. Used by the selection column to\r\n         * conditionally enable to disable checkboxes for individual items. This\r\n         * function does not prevent programmatic selection/deselection of\r\n         * items. Changing the function does not modify the currently selected\r\n         * items.\r\n         *\r\n         * Configuring this function hides the select all checkbox of the grid\r\n         * selection column, which means users can not select or deselect all\r\n         * items anymore, nor do they get feedback on whether all items are\r\n         * selected or not.\r\n         *\r\n         * Receives an item instance and should return a boolean indicating\r\n         * whether users may change the selection state of that item.\r\n         *\r\n         * @type {(item: !GridItem) => boolean}\r\n         */\r\n        isItemSelectable: {\r\n          type: Function,\r\n          notify: (() => true)(), // prevent Polymer analyzer from documenting a changed event\r\n        },\r\n\r\n        /**\r\n         * Set of selected item ids\r\n         * @private\r\n         */\r\n        __selectedKeys: {\r\n          type: Object,\r\n          computed: '__computeSelectedKeys(itemIdPath, selectedItems)',\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__selectedItemsChanged(itemIdPath, selectedItems, isItemSelectable)'];\r\n    }\r\n\r\n    /**\r\n     * @param {!GridItem} item\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isSelected(item) {\r\n      return this.__selectedKeys.has(this.getItemId(item));\r\n    }\r\n\r\n    /**\r\n     * Determines whether the selection state of an item may be changed by the\r\n     * user.\r\n     *\r\n     * @private\r\n     */\r\n    __isItemSelectable(item) {\r\n      // Item is selectable by default if isItemSelectable is not configured\r\n      if (!this.isItemSelectable || !item) {\r\n        return true;\r\n      }\r\n\r\n      // Otherwise, check isItemSelectable function\r\n      return this.isItemSelectable(item);\r\n    }\r\n\r\n    /**\r\n     * Selects the given item.\r\n     *\r\n     * @method selectItem\r\n     * @param {!GridItem} item The item object\r\n     */\r\n    selectItem(item) {\r\n      if (!this._isSelected(item)) {\r\n        this.selectedItems = [...this.selectedItems, item];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Deselects the given item if it is already selected.\r\n     *\r\n     * @method deselect\r\n     * @param {!GridItem} item The item object\r\n     */\r\n    deselectItem(item) {\r\n      if (this._isSelected(item)) {\r\n        this.selectedItems = this.selectedItems.filter((i) => !this._itemsEqual(i, item));\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __selectedItemsChanged() {\r\n      this.requestContentUpdate();\r\n    }\r\n\r\n    /** @private */\r\n    __computeSelectedKeys(_itemIdPath, selectedItems) {\r\n      const selected = selectedItems || [];\r\n      const selectedKeys = new Set();\r\n      selected.forEach((item) => {\r\n        selectedKeys.add(this.getItemId(item));\r\n      });\r\n\r\n      return selectedKeys;\r\n    }\r\n\r\n    /**\r\n     * Fired when the `selectedItems` property changes.\r\n     *\r\n     * @event selected-items-changed\r\n     */\r\n\r\n    /**\r\n     * Fired when the user selects or deselects an item through the selection column.\r\n     *\r\n     * @event item-toggle\r\n     * @param {Object} detail\r\n     * @param {GridItem} detail.item the item that was selected or deselected\r\n     * @param {boolean} detail.selected true if the item was selected\r\n     * @param {boolean} detail.shiftKey true if the shift key was pressed\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\nlet defaultMultiSortPriority = 'prepend';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const SortMixin = (superClass) =>\r\n  class SortMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\r\n         * @attr {boolean} multi-sort\r\n         * @type {boolean}\r\n         */\r\n        multiSort: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * Controls how columns are added to the sort order when using multi-sort.\r\n         * The sort order is visually indicated by numbers in grid sorters placed in column headers.\r\n         *\r\n         * By default, whenever an unsorted column is sorted, or the sort-direction of a column is\r\n         * changed, that column gets sort priority 1, thus affecting the priority for all the other\r\n         * sorted columns. This is identical to using `multi-sort-priority=\"prepend\"`.\r\n         *\r\n         * Using this property allows to change this behavior so that sorting an unsorted column\r\n         * would add it to the \"end\" of the sort, and changing column's sort direction would retain\r\n         * it's previous priority. To set this, use `multi-sort-priority=\"append\"`.\r\n         *\r\n         * @attr {string} multi-sort-priority\r\n         */\r\n        multiSortPriority: {\r\n          type: String,\r\n          value: () => defaultMultiSortPriority,\r\n        },\r\n\r\n        /**\r\n         * When `true`, Shift-clicking an unsorted column's sorter adds it to the multi-sort.\r\n         * Shift + Space does the same action via keyboard. This property has precedence over the\r\n         * `multiSort` property. If `multiSortOnShiftClick` is true, the multiSort property is effectively ignored.\r\n         *\r\n         * @attr {boolean} multi-sort-on-shift-click\r\n         * @type {boolean}\r\n         */\r\n        multiSortOnShiftClick: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * @type {!Array<!GridSorterDefinition>}\r\n         * @protected\r\n         */\r\n        _sorters: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n\r\n        /** @private */\r\n        _previousSorters: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Sets the default multi-sort priority to use for all grid instances.\r\n     * This method should be called before creating any grid instances.\r\n     * Changing this setting does not affect the default for existing grids.\r\n     *\r\n     * @param {string} priority\r\n     */\r\n    static setDefaultMultiSortPriority(priority) {\r\n      defaultMultiSortPriority = ['append', 'prepend'].includes(priority) ? priority : 'prepend';\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      this.addEventListener('sorter-changed', this._onSorterChanged);\r\n    }\r\n\r\n    /** @private */\r\n    _onSorterChanged(e) {\r\n      const sorter = e.target;\r\n      e.stopPropagation();\r\n      sorter._grid = this;\r\n      this.__updateSorter(sorter, e.detail.shiftClick, e.detail.fromSorterClick);\r\n      this.__applySorters();\r\n    }\r\n\r\n    /** @private */\r\n    __removeSorters(sortersToRemove) {\r\n      if (sortersToRemove.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this._sorters = this._sorters.filter((sorter) => !sortersToRemove.includes(sorter));\r\n      this.__applySorters();\r\n    }\r\n\r\n    /** @private */\r\n    __updateSortOrders() {\r\n      this._sorters.forEach((sorter) => {\r\n        sorter._order = null;\r\n      });\r\n\r\n      const activeSorters = this._getActiveSorters();\r\n      if (activeSorters.length > 1) {\r\n        activeSorters.forEach((sorter, index) => {\r\n          sorter._order = index;\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateSorter(sorter, shiftClick, fromSorterClick) {\r\n      if (!sorter.direction && !this._sorters.includes(sorter)) {\r\n        return;\r\n      }\r\n\r\n      sorter._order = null;\r\n\r\n      const restSorters = this._sorters.filter((s) => s !== sorter);\r\n      if (\r\n        (this.multiSort && (!this.multiSortOnShiftClick || !fromSorterClick)) ||\r\n        (this.multiSortOnShiftClick && shiftClick)\r\n      ) {\r\n        if (this.multiSortPriority === 'append') {\r\n          this._sorters = [...restSorters, sorter];\r\n        } else {\r\n          this._sorters = [sorter, ...restSorters];\r\n        }\r\n      } else if (sorter.direction || this.multiSortOnShiftClick) {\r\n        this._sorters = sorter.direction ? [sorter] : [];\r\n        restSorters.forEach((sorter) => {\r\n          sorter._order = null;\r\n          sorter.direction = null;\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __applySorters() {\r\n      this.__updateSortOrders();\r\n\r\n      if (\r\n        this.dataProvider &&\r\n        // No need to clear cache if sorters didn't change and grid is attached\r\n        this.isAttached &&\r\n        JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())\r\n      ) {\r\n        this.__debounceClearCache();\r\n      }\r\n\r\n      this._a11yUpdateSorters();\r\n\r\n      this._previousSorters = this._mapSorters();\r\n    }\r\n\r\n    /**\r\n     * @type {GridSorterDefinition[]}\r\n     * @protected\r\n     */\r\n    _getActiveSorters() {\r\n      return this._sorters.filter((sorter) => sorter.direction && sorter.isConnected);\r\n    }\r\n\r\n    /**\r\n     * @return {!Array<!GridSorterDefinition>}\r\n     * @protected\r\n     */\r\n    _mapSorters() {\r\n      return this._getActiveSorters().map((sorter) => {\r\n        return {\r\n          path: sorter.path,\r\n          direction: sorter.direction,\r\n        };\r\n      });\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { iterateChildren, iterateRowCells, updatePart } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const StylingMixin = (superClass) =>\r\n  class StylingMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * A function that allows generating CSS class names for grid cells\r\n         * based on their row and column. The return value should be the generated\r\n         * class name as a string, or multiple class names separated by whitespace\r\n         * characters.\r\n         *\r\n         * Receives two arguments:\r\n         * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.expanded` Sublevel toggle state.\r\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\r\n         *   - `model.selected` Selected state.\r\n         *\r\n         * @type {GridCellClassNameGenerator | null | undefined}\r\n         * @deprecated Use `cellPartNameGenerator` instead.\r\n         */\r\n        cellClassNameGenerator: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function that allows generating CSS `part` names for grid cells in Shadow DOM based\r\n         * on their row and column, for styling from outside using the `::part()` selector.\r\n         *\r\n         * The return value should be the generated part name as a string, or multiple part names\r\n         * separated by whitespace characters.\r\n         *\r\n         * Receives two arguments:\r\n         * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.expanded` Sublevel toggle state.\r\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\r\n         *   - `model.selected` Selected state.\r\n         *\r\n         * @type {GridCellPartNameGenerator | null | undefined}\r\n         */\r\n        cellPartNameGenerator: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__cellClassNameGeneratorChanged(cellClassNameGenerator)',\r\n        '__cellPartNameGeneratorChanged(cellPartNameGenerator)',\r\n      ];\r\n    }\r\n\r\n    /** @private */\r\n    __cellClassNameGeneratorChanged() {\r\n      this.generateCellClassNames();\r\n    }\r\n\r\n    /** @private */\r\n    __cellPartNameGeneratorChanged() {\r\n      this.generateCellPartNames();\r\n    }\r\n\r\n    /**\r\n     * Runs the `cellClassNameGenerator` for the visible cells.\r\n     * If the generator depends on varying conditions, you need to\r\n     * call this function manually in order to update the styles when\r\n     * the conditions change.\r\n     *\r\n     * @deprecated Use `cellPartNameGenerator` and `generateCellPartNames()` instead.\r\n     */\r\n    generateCellClassNames() {\r\n      iterateChildren(this.$.items, (row) => {\r\n        if (!row.hidden) {\r\n          this._generateCellClassNames(row, this.__getRowModel(row));\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Runs the `cellPartNameGenerator` for the visible cells.\r\n     * If the generator depends on varying conditions, you need to\r\n     * call this function manually in order to update the styles when\r\n     * the conditions change.\r\n     */\r\n    generateCellPartNames() {\r\n      iterateChildren(this.$.items, (row) => {\r\n        if (!row.hidden) {\r\n          this._generateCellPartNames(row, this.__getRowModel(row));\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _generateCellClassNames(row, model) {\r\n      iterateRowCells(row, (cell) => {\r\n        if (cell.__generatedClasses) {\r\n          cell.__generatedClasses.forEach((className) => cell.classList.remove(className));\r\n        }\r\n        if (this.cellClassNameGenerator && !row.hasAttribute('loading')) {\r\n          const result = this.cellClassNameGenerator(cell._column, model);\r\n          cell.__generatedClasses = result && result.split(' ').filter((className) => className.length > 0);\r\n          if (cell.__generatedClasses) {\r\n            cell.__generatedClasses.forEach((className) => cell.classList.add(className));\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _generateCellPartNames(row, model) {\r\n      iterateRowCells(row, (cell) => {\r\n        if (cell.__generatedParts) {\r\n          cell.__generatedParts.forEach((partName) => {\r\n            // Remove previously generated part names\r\n            updatePart(cell, null, partName);\r\n          });\r\n        }\r\n        if (this.cellPartNameGenerator && !row.hasAttribute('loading')) {\r\n          const result = this.cellPartNameGenerator(cell._column, model);\r\n          cell.__generatedParts = result && result.split(' ').filter((partName) => partName.length > 0);\r\n          if (cell.__generatedParts) {\r\n            cell.__generatedParts.forEach((partName) => {\r\n              // Add the newly generated names to part\r\n              updatePart(cell, true, partName);\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { TabindexMixin } from '@vaadin/a11y-base/src/tabindex-mixin.js';\r\nimport { animationFrame, microTask } from '@vaadin/component-base/src/async.js';\r\nimport {\r\n  isAndroid,\r\n  isChrome,\r\n  isFirefox,\r\n  isIOS,\r\n  isSafari,\r\n  isTouch,\r\n  supportsAdoptingStyleSheets,\r\n} from '@vaadin/component-base/src/browser-utils.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { getClosestElement } from '@vaadin/component-base/src/dom-utils.js';\r\nimport { SlotObserver } from '@vaadin/component-base/src/slot-observer.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { Virtualizer } from '@vaadin/component-base/src/virtualizer.js';\r\nimport { A11yMixin } from './vaadin-grid-a11y-mixin.js';\r\nimport { ActiveItemMixin } from './vaadin-grid-active-item-mixin.js';\r\nimport { ArrayDataProviderMixin } from './vaadin-grid-array-data-provider-mixin.js';\r\nimport { ColumnAutoWidthMixin } from './vaadin-grid-column-auto-width-mixin.js';\r\nimport { ColumnReorderingMixin } from './vaadin-grid-column-reordering-mixin.js';\r\nimport { ColumnResizingMixin } from './vaadin-grid-column-resizing-mixin.js';\r\nimport { DataProviderMixin } from './vaadin-grid-data-provider-mixin.js';\r\nimport { DragAndDropMixin } from './vaadin-grid-drag-and-drop-mixin.js';\r\nimport { DynamicColumnsMixin } from './vaadin-grid-dynamic-columns-mixin.js';\r\nimport { EventContextMixin } from './vaadin-grid-event-context-mixin.js';\r\nimport { FilterMixin } from './vaadin-grid-filter-mixin.js';\r\nimport {\r\n  getBodyRowCells,\r\n  iterateChildren,\r\n  iterateRowCells,\r\n  updateBooleanRowStates,\r\n  updateCellsPart,\r\n} from './vaadin-grid-helpers.js';\r\nimport { KeyboardNavigationMixin } from './vaadin-grid-keyboard-navigation-mixin.js';\r\nimport { RowDetailsMixin } from './vaadin-grid-row-details-mixin.js';\r\nimport { ScrollMixin } from './vaadin-grid-scroll-mixin.js';\r\nimport { SelectionMixin } from './vaadin-grid-selection-mixin.js';\r\nimport { SortMixin } from './vaadin-grid-sort-mixin.js';\r\nimport { StylingMixin } from './vaadin-grid-styling-mixin.js';\r\n\r\n/**\r\n * A mixin providing common grid functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes A11yMixin\r\n * @mixes ActiveItemMixin\r\n * @mixes ArrayDataProviderMixin\r\n * @mixes ColumnResizingMixin\r\n * @mixes DataProviderMixin\r\n * @mixes DynamicColumnsMixin\r\n * @mixes FilterMixin\r\n * @mixes RowDetailsMixin\r\n * @mixes ScrollMixin\r\n * @mixes SelectionMixin\r\n * @mixes SortMixin\r\n * @mixes KeyboardNavigationMixin\r\n * @mixes ColumnReorderingMixin\r\n * @mixes EventContextMixin\r\n * @mixes StylingMixin\r\n * @mixes DragAndDropMixin\r\n */\r\nexport const GridMixin = (superClass) =>\r\n  class extends ColumnAutoWidthMixin(\r\n    ArrayDataProviderMixin(\r\n      DataProviderMixin(\r\n        DynamicColumnsMixin(\r\n          ActiveItemMixin(\r\n            ScrollMixin(\r\n              SelectionMixin(\r\n                SortMixin(\r\n                  RowDetailsMixin(\r\n                    KeyboardNavigationMixin(\r\n                      A11yMixin(\r\n                        FilterMixin(\r\n                          ColumnReorderingMixin(\r\n                            ColumnResizingMixin(\r\n                              EventContextMixin(DragAndDropMixin(StylingMixin(TabindexMixin(superClass)))),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ) {\r\n    static get observers() {\r\n      return ['_columnTreeChanged(_columnTree)', '_flatSizeChanged(_flatSize, __virtualizer, _hasData, _columnTree)'];\r\n    }\r\n\r\n    static get properties() {\r\n      return {\r\n        /** @private */\r\n        _safari: {\r\n          type: Boolean,\r\n          value: isSafari,\r\n        },\r\n\r\n        /** @private */\r\n        _ios: {\r\n          type: Boolean,\r\n          value: isIOS,\r\n        },\r\n\r\n        /** @private */\r\n        _firefox: {\r\n          type: Boolean,\r\n          value: isFirefox,\r\n        },\r\n\r\n        /** @private */\r\n        _android: {\r\n          type: Boolean,\r\n          value: isAndroid,\r\n        },\r\n\r\n        /** @private */\r\n        _touchDevice: {\r\n          type: Boolean,\r\n          value: isTouch,\r\n        },\r\n\r\n        /**\r\n         * If true, the grid's height is defined by its rows.\r\n         *\r\n         * Effectively, this disables the grid's virtual scrolling so that all the rows are rendered in the DOM at once.\r\n         * If the grid has a large number of items, using the feature is discouraged to avoid performance issues.\r\n         * @attr {boolean} all-rows-visible\r\n         * @type {boolean}\r\n         */\r\n        allRowsVisible: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /** @private */\r\n        isAttached: {\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * An internal property that is mainly used by `vaadin-template-renderer`\r\n         * to identify grid elements.\r\n         *\r\n         * @private\r\n         */\r\n        __gridElement: {\r\n          type: Boolean,\r\n          value: true,\r\n        },\r\n\r\n        /** @private */\r\n        __hasEmptyStateContent: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /** @private */\r\n        __emptyState: {\r\n          type: Boolean,\r\n          computed: '__computeEmptyState(_flatSize, __hasEmptyStateContent)',\r\n        },\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.addEventListener('animationend', this._onAnimationEnd);\r\n    }\r\n\r\n    /** @private */\r\n    get _firstVisibleIndex() {\r\n      const firstVisibleItem = this.__getFirstVisibleItem();\r\n      return firstVisibleItem ? firstVisibleItem.index : undefined;\r\n    }\r\n\r\n    /** @private */\r\n    get _lastVisibleIndex() {\r\n      const lastVisibleItem = this.__getLastVisibleItem();\r\n      return lastVisibleItem ? lastVisibleItem.index : undefined;\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      this.isAttached = true;\r\n      this.__virtualizer.hostConnected();\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      this.isAttached = false;\r\n      this._hideTooltip(true);\r\n    }\r\n\r\n    /** @private */\r\n    __getFirstVisibleItem() {\r\n      return this._getRenderedRows().find((row) => this._isInViewport(row));\r\n    }\r\n\r\n    /** @private */\r\n    __getLastVisibleItem() {\r\n      return this._getRenderedRows()\r\n        .reverse()\r\n        .find((row) => this._isInViewport(row));\r\n    }\r\n\r\n    /** @private */\r\n    _isInViewport(item) {\r\n      const scrollTargetRect = this.$.table.getBoundingClientRect();\r\n      const itemRect = item.getBoundingClientRect();\r\n      const headerHeight = this.$.header.getBoundingClientRect().height;\r\n      const footerHeight = this.$.footer.getBoundingClientRect().height;\r\n      return (\r\n        itemRect.bottom > scrollTargetRect.top + headerHeight && itemRect.top < scrollTargetRect.bottom - footerHeight\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    _getRenderedRows() {\r\n      return Array.from(this.$.items.children)\r\n        .filter((item) => !item.hidden)\r\n        .sort((a, b) => a.index - b.index);\r\n    }\r\n\r\n    /** @protected */\r\n    _getRowContainingNode(node) {\r\n      const content = getClosestElement('vaadin-grid-cell-content', node);\r\n      if (!content) {\r\n        return;\r\n      }\r\n\r\n      const cell = content.assignedSlot.parentElement;\r\n      return cell.parentElement;\r\n    }\r\n\r\n    /** @protected */\r\n    _isItemAssignedToRow(item, row) {\r\n      const model = this.__getRowModel(row);\r\n      return this.getItemId(item) === this.getItemId(model.item);\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.__virtualizer = new Virtualizer({\r\n        createElements: this._createScrollerRows.bind(this),\r\n        updateElement: this._updateScrollerItem.bind(this),\r\n        scrollContainer: this.$.items,\r\n        scrollTarget: this.$.table,\r\n        reorderElements: true,\r\n      });\r\n\r\n      new ResizeObserver(() =>\r\n        setTimeout(() => {\r\n          this.__updateColumnsBodyContentHidden();\r\n        }),\r\n      ).observe(this.$.table);\r\n\r\n      const minHeightObserver = new ResizeObserver(() =>\r\n        setTimeout(() => {\r\n          this.__updateMinHeight();\r\n        }),\r\n      );\r\n\r\n      minHeightObserver.observe(this.$.header);\r\n      minHeightObserver.observe(this.$.items);\r\n      minHeightObserver.observe(this.$.footer);\r\n\r\n      processTemplates(this);\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this.addController(this._tooltipController);\r\n      this._tooltipController.setManual(true);\r\n\r\n      this.__emptyStateContentObserver = new SlotObserver(this.$.emptystateslot, ({ currentNodes }) => {\r\n        this.$.emptystatecell._content = currentNodes[0];\r\n        this.__hasEmptyStateContent = !!this.$.emptystatecell._content;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __getBodyCellCoordinates(cell) {\r\n      if (this.$.items.contains(cell) && cell.localName === 'td') {\r\n        return {\r\n          item: cell.parentElement._item,\r\n          column: cell._column,\r\n        };\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __focusBodyCell({ item, column }) {\r\n      const row = this._getRenderedRows().find((row) => row._item === item);\r\n      const cell = row && [...row.children].find((cell) => cell._column === column);\r\n      if (cell) {\r\n        cell.focus();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _focusFirstVisibleRow() {\r\n      const row = this.__getFirstVisibleItem();\r\n      this.__rowFocusMode = true;\r\n      row.focus();\r\n    }\r\n\r\n    /** @private */\r\n    _flatSizeChanged(flatSize, virtualizer, hasData, columnTree) {\r\n      if (virtualizer && hasData && columnTree) {\r\n        // Changing the virtualizer size may result in the row with focus getting hidden\r\n        const cell = this.shadowRoot.activeElement;\r\n        const cellCoordinates = this.__getBodyCellCoordinates(cell);\r\n\r\n        const previousSize = virtualizer.size || 0;\r\n        virtualizer.size = flatSize;\r\n\r\n        // Request an update for the previous last row to have the \"last\" state removed\r\n        virtualizer.update(previousSize - 1, previousSize - 1);\r\n        if (flatSize < previousSize) {\r\n          // Size was decreased, so the new last row requires an explicit update\r\n          virtualizer.update(flatSize - 1, flatSize - 1);\r\n        }\r\n\r\n        // If the focused cell's parent row got hidden by the size change, focus the corresponding new cell\r\n        if (cellCoordinates && cell.parentElement.hidden) {\r\n          this.__focusBodyCell(cellCoordinates);\r\n        }\r\n\r\n        // Make sure the body has a tabbable element\r\n        this._resetKeyboardNavigation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _createScrollerRows(count) {\r\n      const rows = [];\r\n      for (let i = 0; i < count; i++) {\r\n        const row = document.createElement('tr');\r\n        row.setAttribute('part', 'row body-row');\r\n        row.setAttribute('role', 'row');\r\n        row.setAttribute('tabindex', '-1');\r\n        if (this._columnTree) {\r\n          this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);\r\n        }\r\n        rows.push(row);\r\n      }\r\n\r\n      if (this._columnTree) {\r\n        this._columnTree[this._columnTree.length - 1].forEach((c) => {\r\n          if (c.isConnected && c._cells) {\r\n            c._cells = [...c._cells];\r\n          }\r\n        });\r\n      }\r\n\r\n      this.__afterCreateScrollerRowsDebouncer = Debouncer.debounce(\r\n        this.__afterCreateScrollerRowsDebouncer,\r\n        animationFrame,\r\n        () => {\r\n          this._afterScroll();\r\n        },\r\n      );\r\n      return rows;\r\n    }\r\n\r\n    /** @private */\r\n    _createCell(tagName, column) {\r\n      const contentId = (this._contentIndex = this._contentIndex + 1 || 0);\r\n      const slotName = `vaadin-grid-cell-content-${contentId}`;\r\n\r\n      const cellContent = document.createElement('vaadin-grid-cell-content');\r\n      cellContent.setAttribute('slot', slotName);\r\n\r\n      const cell = document.createElement(tagName);\r\n      cell.id = slotName.replace('-content-', '-');\r\n      cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');\r\n\r\n      // For now we only support tooltip on desktop\r\n      if (!isAndroid && !isIOS) {\r\n        cell.addEventListener('mouseenter', (event) => {\r\n          if (!this.$.scroller.hasAttribute('scrolling')) {\r\n            this._showTooltip(event);\r\n          }\r\n        });\r\n\r\n        cell.addEventListener('mouseleave', () => {\r\n          this._hideTooltip();\r\n        });\r\n\r\n        cell.addEventListener('mousedown', () => {\r\n          this._hideTooltip(true);\r\n        });\r\n      }\r\n\r\n      const slot = document.createElement('slot');\r\n      slot.setAttribute('name', slotName);\r\n\r\n      if (column && column._focusButtonMode) {\r\n        const div = document.createElement('div');\r\n        div.setAttribute('role', 'button');\r\n        div.setAttribute('tabindex', '-1');\r\n        cell.appendChild(div);\r\n\r\n        // Patch `focus()` to use the button\r\n        cell._focusButton = div;\r\n        cell.focus = function (options) {\r\n          cell._focusButton.focus(options);\r\n        };\r\n\r\n        div.appendChild(slot);\r\n      } else {\r\n        cell.setAttribute('tabindex', '-1');\r\n        cell.appendChild(slot);\r\n      }\r\n\r\n      cell._content = cellContent;\r\n\r\n      // With native Shadow DOM, mousedown on slotted element does not focus\r\n      // focusable slot wrapper, that is why cells are not focused with\r\n      // mousedown. Workaround: listen for mousedown and focus manually.\r\n      cellContent.addEventListener('mousedown', () => {\r\n        if (isChrome) {\r\n          // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903\r\n          const mouseUpListener = (event) => {\r\n            // If focus is on element within the cell content - respect it, do not change\r\n            const contentContainsFocusedElement = cellContent.contains(this.getRootNode().activeElement);\r\n            // Only focus if mouse is released on cell content itself\r\n            const mouseUpWithinCell = event.composedPath().includes(cellContent);\r\n            if (!contentContainsFocusedElement && mouseUpWithinCell) {\r\n              cell.focus({ preventScroll: true });\r\n            }\r\n            document.removeEventListener('mouseup', mouseUpListener, true);\r\n          };\r\n          document.addEventListener('mouseup', mouseUpListener, true);\r\n        } else {\r\n          // Focus on mouseup, on the other hand, removes selection on Safari.\r\n          // Watch out sync focus removal issue, only async focus works here.\r\n          setTimeout(() => {\r\n            if (!cellContent.contains(this.getRootNode().activeElement)) {\r\n              cell.focus({ preventScroll: true });\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      return cell;\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLTableRowElement} row\r\n     * @param {!Array<!GridColumn>} columns\r\n     * @param {?string} section\r\n     * @param {boolean} isColumnRow\r\n     * @param {boolean} noNotify\r\n     * @protected\r\n     */\r\n    _updateRow(row, columns, section = 'body', isColumnRow = false, noNotify = false) {\r\n      const contentsFragment = document.createDocumentFragment();\r\n\r\n      iterateRowCells(row, (cell) => {\r\n        cell._vacant = true;\r\n      });\r\n      row.innerHTML = '';\r\n      if (section === 'body') {\r\n        // Clear the cached cell references\r\n        row.__cells = [];\r\n        row.__detailsCell = null;\r\n      }\r\n\r\n      columns\r\n        .filter((column) => !column.hidden)\r\n        .forEach((column, index, cols) => {\r\n          let cell;\r\n\r\n          if (section === 'body') {\r\n            // Body\r\n            if (!column._cells) {\r\n              column._cells = [];\r\n            }\r\n            cell = column._cells.find((cell) => cell._vacant);\r\n            if (!cell) {\r\n              cell = this._createCell('td', column);\r\n              if (column._onCellKeyDown) {\r\n                cell.addEventListener('keydown', column._onCellKeyDown.bind(column));\r\n              }\r\n              column._cells.push(cell);\r\n            }\r\n            cell.setAttribute('part', 'cell body-cell');\r\n            cell.__parentRow = row;\r\n            // Cache the cell reference\r\n            row.__cells.push(cell);\r\n\r\n            const isSizerRow = row === this.$.sizer;\r\n            if (!column._bodyContentHidden || isSizerRow) {\r\n              row.appendChild(cell);\r\n            }\r\n\r\n            if (isSizerRow) {\r\n              column._sizerCell = cell;\r\n            }\r\n\r\n            if (index === cols.length - 1 && this.rowDetailsRenderer) {\r\n              // Add details cell as last cell to body rows\r\n              if (!this._detailsCells) {\r\n                this._detailsCells = [];\r\n              }\r\n              const detailsCell = this._detailsCells.find((cell) => cell._vacant) || this._createCell('td');\r\n              if (this._detailsCells.indexOf(detailsCell) === -1) {\r\n                this._detailsCells.push(detailsCell);\r\n              }\r\n              if (!detailsCell._content.parentElement) {\r\n                contentsFragment.appendChild(detailsCell._content);\r\n              }\r\n              this._configureDetailsCell(detailsCell);\r\n              row.appendChild(detailsCell);\r\n              // Cache the details cell reference\r\n              row.__detailsCell = detailsCell;\r\n              this._a11ySetRowDetailsCell(row, detailsCell);\r\n              detailsCell._vacant = false;\r\n            }\r\n\r\n            if (!noNotify) {\r\n              column._cells = [...column._cells];\r\n            }\r\n          } else {\r\n            // Header & footer\r\n            const tagName = section === 'header' ? 'th' : 'td';\r\n            if (isColumnRow || column.localName === 'vaadin-grid-column-group') {\r\n              cell = column[`_${section}Cell`];\r\n              if (!cell) {\r\n                cell = this._createCell(tagName);\r\n                if (column._onCellKeyDown) {\r\n                  cell.addEventListener('keydown', column._onCellKeyDown.bind(column));\r\n                }\r\n              }\r\n              cell._column = column;\r\n              row.appendChild(cell);\r\n              column[`_${section}Cell`] = cell;\r\n            } else {\r\n              if (!column._emptyCells) {\r\n                column._emptyCells = [];\r\n              }\r\n              cell = column._emptyCells.find((cell) => cell._vacant) || this._createCell(tagName);\r\n              cell._column = column;\r\n              row.appendChild(cell);\r\n              if (column._emptyCells.indexOf(cell) === -1) {\r\n                column._emptyCells.push(cell);\r\n              }\r\n            }\r\n            cell.part.add('cell', `${section}-cell`);\r\n          }\r\n\r\n          if (!cell._content.parentElement) {\r\n            contentsFragment.appendChild(cell._content);\r\n          }\r\n          cell._vacant = false;\r\n          cell._column = column;\r\n        });\r\n\r\n      if (section !== 'body') {\r\n        this.__debounceUpdateHeaderFooterRowVisibility(row);\r\n      }\r\n\r\n      // Might be empty if only cache was used\r\n      this.appendChild(contentsFragment);\r\n\r\n      this._frozenCellsChanged();\r\n      this._updateFirstAndLastColumnForRow(row);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} row\r\n     * @protected\r\n     */\r\n    __debounceUpdateHeaderFooterRowVisibility(row) {\r\n      row.__debounceUpdateHeaderFooterRowVisibility = Debouncer.debounce(\r\n        row.__debounceUpdateHeaderFooterRowVisibility,\r\n        microTask,\r\n        () => this.__updateHeaderFooterRowVisibility(row),\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} row\r\n     * @protected\r\n     */\r\n    __updateHeaderFooterRowVisibility(row) {\r\n      if (!row) {\r\n        return;\r\n      }\r\n\r\n      const visibleRowCells = Array.from(row.children).filter((cell) => {\r\n        const column = cell._column;\r\n        if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {\r\n          // The cell is an \"empty cell\"  -> doesn't block hiding the row\r\n          return false;\r\n        }\r\n        if (row.parentElement === this.$.header) {\r\n          if (column.headerRenderer) {\r\n            // The cell is the header cell of a column that has a header renderer\r\n            // -> row should be visible\r\n            return true;\r\n          }\r\n          if (column.header === null) {\r\n            // The column header is explicilty set to null -> doesn't block hiding the row\r\n            return false;\r\n          }\r\n          if (column.path || column.header !== undefined) {\r\n            // The column has an explicit non-null header or a path that generates a header\r\n            // -> row should be visible\r\n            return true;\r\n          }\r\n        } else if (column.footerRenderer) {\r\n          // The cell is the footer cell of a column that has a footer renderer\r\n          // -> row should be visible\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      if (row.hidden !== !visibleRowCells.length) {\r\n        row.hidden = !visibleRowCells.length;\r\n      }\r\n\r\n      // Make sure the section has a tabbable element\r\n      this._resetKeyboardNavigation();\r\n    }\r\n\r\n    /** @private */\r\n    _updateScrollerItem(row, index) {\r\n      this._preventScrollerRotatingCellFocus(row, index);\r\n\r\n      if (!this._columnTree) {\r\n        return;\r\n      }\r\n\r\n      this._updateRowOrderParts(row, index);\r\n\r\n      this._a11yUpdateRowRowindex(row, index);\r\n      this._getItem(index, row);\r\n    }\r\n\r\n    /** @private */\r\n    _columnTreeChanged(columnTree) {\r\n      this._renderColumnTree(columnTree);\r\n      this.__updateColumnsBodyContentHidden();\r\n    }\r\n\r\n    /** @private */\r\n    _updateRowOrderParts(row, index = row.index) {\r\n      updateBooleanRowStates(row, {\r\n        first: index === 0,\r\n        last: index === this._flatSize - 1,\r\n        odd: index % 2 !== 0,\r\n        even: index % 2 === 0,\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _updateRowStateParts(row, { item, expanded, selected, detailsOpened }) {\r\n      updateBooleanRowStates(row, {\r\n        expanded,\r\n        collapsed: this.__isRowExpandable(row),\r\n        selected,\r\n        nonselectable: this.__isItemSelectable(item) === false,\r\n        'details-opened': detailsOpened,\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __computeEmptyState(flatSize, hasEmptyStateContent) {\r\n      return flatSize === 0 && hasEmptyStateContent;\r\n    }\r\n\r\n    /**\r\n     * @param {!Array<!GridColumn>} columnTree\r\n     * @protected\r\n     */\r\n    _renderColumnTree(columnTree) {\r\n      iterateChildren(this.$.items, (row) => {\r\n        this._updateRow(row, columnTree[columnTree.length - 1], 'body', false, true);\r\n\r\n        const model = this.__getRowModel(row);\r\n        this._updateRowOrderParts(row);\r\n        this._updateRowStateParts(row, model);\r\n        this._filterDragAndDrop(row, model);\r\n      });\r\n\r\n      while (this.$.header.children.length < columnTree.length) {\r\n        const headerRow = document.createElement('tr');\r\n        headerRow.setAttribute('part', 'row');\r\n        headerRow.setAttribute('role', 'row');\r\n        headerRow.setAttribute('tabindex', '-1');\r\n        this.$.header.appendChild(headerRow);\r\n\r\n        const footerRow = document.createElement('tr');\r\n        footerRow.setAttribute('part', 'row');\r\n        footerRow.setAttribute('role', 'row');\r\n        footerRow.setAttribute('tabindex', '-1');\r\n        this.$.footer.appendChild(footerRow);\r\n      }\r\n      while (this.$.header.children.length > columnTree.length) {\r\n        this.$.header.removeChild(this.$.header.firstElementChild);\r\n        this.$.footer.removeChild(this.$.footer.firstElementChild);\r\n      }\r\n\r\n      iterateChildren(this.$.header, (headerRow, index, rows) => {\r\n        this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1);\r\n\r\n        const cells = getBodyRowCells(headerRow);\r\n        updateCellsPart(cells, 'first-header-row-cell', index === 0);\r\n        updateCellsPart(cells, 'last-header-row-cell', index === rows.length - 1);\r\n      });\r\n\r\n      iterateChildren(this.$.footer, (footerRow, index, rows) => {\r\n        this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0);\r\n\r\n        const cells = getBodyRowCells(footerRow);\r\n        updateCellsPart(cells, 'first-footer-row-cell', index === 0);\r\n        updateCellsPart(cells, 'last-footer-row-cell', index === rows.length - 1);\r\n      });\r\n\r\n      // Sizer rows\r\n      this._updateRow(this.$.sizer, columnTree[columnTree.length - 1]);\r\n\r\n      this._resizeHandler();\r\n      this._frozenCellsChanged();\r\n      this._updateFirstAndLastColumn();\r\n      this._resetKeyboardNavigation();\r\n      this._a11yUpdateHeaderRows();\r\n      this._a11yUpdateFooterRows();\r\n      this.generateCellClassNames();\r\n      this.generateCellPartNames();\r\n      this.__updateHeaderAndFooter();\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLElement} row\r\n     * @param {GridItem} item\r\n     * @protected\r\n     */\r\n    _updateItem(row, item) {\r\n      row._item = item;\r\n      const model = this.__getRowModel(row);\r\n\r\n      this._toggleDetailsCell(row, model.detailsOpened);\r\n\r\n      this._a11yUpdateRowLevel(row, model.level);\r\n      this._a11yUpdateRowSelected(row, model.selected);\r\n\r\n      this._updateRowStateParts(row, model);\r\n\r\n      this._generateCellClassNames(row, model);\r\n      this._generateCellPartNames(row, model);\r\n      this._filterDragAndDrop(row, model);\r\n      this.__updateDragSourceParts(row, model);\r\n\r\n      iterateChildren(row, (cell) => {\r\n        if (cell._column && !cell._column.isConnected) {\r\n          return;\r\n        }\r\n        if (cell._renderer) {\r\n          const owner = cell._column || this;\r\n          cell._renderer.call(owner, cell._content, owner, model);\r\n        }\r\n      });\r\n\r\n      this._updateDetailsCellHeight(row);\r\n\r\n      this._a11yUpdateRowExpanded(row, model.expanded);\r\n    }\r\n\r\n    /** @private */\r\n    _resizeHandler() {\r\n      this._updateDetailsCellHeights();\r\n      this.__updateHorizontalScrollPosition();\r\n    }\r\n\r\n    /** @private */\r\n    _onAnimationEnd(e) {\r\n      // ShadyCSS applies scoping suffixes to animation names\r\n      if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\r\n        e.stopPropagation();\r\n\r\n        // Ensure header and footer have tabbable elements\r\n        this._resetKeyboardNavigation();\r\n\r\n        requestAnimationFrame(() => {\r\n          this.__scrollToPendingIndexes();\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLTableRowElement} row\r\n     * @return {!GridItemModel}\r\n     * @protected\r\n     */\r\n    __getRowModel(row) {\r\n      return {\r\n        index: row.index,\r\n        item: row._item,\r\n        level: this._getIndexLevel(row.index),\r\n        expanded: this._isExpanded(row._item),\r\n        selected: this._isSelected(row._item),\r\n        detailsOpened: !!this.rowDetailsRenderer && this._isDetailsOpened(row._item),\r\n      };\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     * @protected\r\n     */\r\n    _showTooltip(event) {\r\n      // Check if there is a slotted vaadin-tooltip element.\r\n      const tooltip = this._tooltipController.node;\r\n      if (tooltip && tooltip.isConnected) {\r\n        const target = event.target;\r\n\r\n        if (!this.__isCellFullyVisible(target)) {\r\n          return;\r\n        }\r\n\r\n        this._tooltipController.setTarget(target);\r\n        this._tooltipController.setContext(this.getEventContext(event));\r\n\r\n        // Trigger opening using the corresponding delay.\r\n        tooltip._stateController.open({\r\n          focus: event.type === 'focusin',\r\n          hover: event.type === 'mouseenter',\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __isCellFullyVisible(cell) {\r\n      if (cell.hasAttribute('frozen') || cell.hasAttribute('frozen-to-end')) {\r\n        // Frozen cells are always fully visible\r\n        return true;\r\n      }\r\n\r\n      let { left, right } = this.getBoundingClientRect();\r\n\r\n      const frozen = [...cell.parentNode.children].find((cell) => cell.hasAttribute('last-frozen'));\r\n      if (frozen) {\r\n        const frozenRect = frozen.getBoundingClientRect();\r\n        left = this.__isRTL ? left : frozenRect.right;\r\n        right = this.__isRTL ? frozenRect.left : right;\r\n      }\r\n\r\n      const frozenToEnd = [...cell.parentNode.children].find((cell) => cell.hasAttribute('first-frozen-to-end'));\r\n      if (frozenToEnd) {\r\n        const frozenToEndRect = frozenToEnd.getBoundingClientRect();\r\n        left = this.__isRTL ? frozenToEndRect.right : left;\r\n        right = this.__isRTL ? right : frozenToEndRect.left;\r\n      }\r\n\r\n      const cellRect = cell.getBoundingClientRect();\r\n      return cellRect.left >= left && cellRect.right <= right;\r\n    }\r\n\r\n    /** @protected */\r\n    _hideTooltip(immediate) {\r\n      const tooltip = this._tooltipController && this._tooltipController.node;\r\n      if (tooltip) {\r\n        tooltip._stateController.close(immediate);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Requests an update for the content of cells.\r\n     *\r\n     * While performing the update, the following renderers are invoked:\r\n     * - `Grid.rowDetailsRenderer`\r\n     * - `GridColumn.renderer`\r\n     * - `GridColumn.headerRenderer`\r\n     * - `GridColumn.footerRenderer`\r\n     *\r\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\r\n     */\r\n    requestContentUpdate() {\r\n      // Header and footer renderers\r\n      this.__updateHeaderAndFooter();\r\n\r\n      // Body and row details renderers\r\n      this.__updateVisibleRows();\r\n    }\r\n\r\n    /** @private */\r\n    __updateHeaderAndFooter() {\r\n      (this._columnTree || []).forEach((level) => {\r\n        level.forEach((column) => {\r\n          if (column._renderHeaderAndFooter) {\r\n            column._renderHeaderAndFooter();\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    __updateVisibleRows(start, end) {\r\n      if (this.__virtualizer) {\r\n        this.__virtualizer.update(start, end);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateMinHeight() {\r\n      // Min height is calculated based on the header, footer and a single row\r\n      // For now use a hard-coded value for the row that matches a single default row in Lumo\r\n      const rowHeight = 36;\r\n      const headerHeight = this.$.header.clientHeight;\r\n      const footerHeight = this.$.footer.clientHeight;\r\n      const scrollbarHeight = this.$.table.offsetHeight - this.$.table.clientHeight;\r\n      const minHeight = headerHeight + rowHeight + footerHeight + scrollbarHeight;\r\n\r\n      // The style is set to host instead of the scroller so that the value can be overridden by the user with \"grid { min-height: 0 }\"\r\n      // Prefer setting style in adopted style sheet to avoid the need to add a confusing inline style on the host element\r\n      // If adopted style sheets are not supported, the style is set inline\r\n      if (!this.__minHeightStyleSheet && supportsAdoptingStyleSheets) {\r\n        this.__minHeightStyleSheet = new CSSStyleSheet();\r\n        this.shadowRoot.adoptedStyleSheets = [...this.shadowRoot.adoptedStyleSheets, this.__minHeightStyleSheet];\r\n      }\r\n      if (this.__minHeightStyleSheet) {\r\n        this.__minHeightStyleSheet.replaceSync(`:host { --_grid-min-height: ${minHeight}px; }`);\r\n      } else {\r\n        this.style.setProperty('--_grid-min-height', `${minHeight}px`);\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const gridStyles = css`\r\n  @keyframes vaadin-grid-appear {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  :host {\r\n    display: flex;\r\n    flex-direction: column;\r\n    animation: 1ms vaadin-grid-appear;\r\n    height: 400px;\r\n    min-height: var(--_grid-min-height, 0);\r\n    flex: 1 1 auto;\r\n    align-self: stretch;\r\n    position: relative;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  :host([disabled]) {\r\n    pointer-events: none;\r\n  }\r\n\r\n  #scroller {\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100%;\r\n    transform: translateY(0);\r\n    width: auto;\r\n    height: auto;\r\n    position: absolute;\r\n    inset: 0;\r\n  }\r\n\r\n  :host([all-rows-visible]) {\r\n    height: auto;\r\n    align-self: flex-start;\r\n    min-height: auto;\r\n    flex-grow: 0;\r\n    width: 100%;\r\n  }\r\n\r\n  :host([all-rows-visible]) #scroller {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n  }\r\n\r\n  :host([all-rows-visible]) #items {\r\n    min-height: 1px;\r\n  }\r\n\r\n  #table {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    position: relative;\r\n    outline: none;\r\n    /* Workaround for a Desktop Safari bug: new stacking context here prevents the scrollbar from getting hidden */\r\n    z-index: 0;\r\n  }\r\n\r\n  #header,\r\n  #footer {\r\n    display: block;\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    left: 0;\r\n    overflow: visible;\r\n    width: 100%;\r\n    z-index: 1;\r\n  }\r\n\r\n  #header {\r\n    top: 0;\r\n  }\r\n\r\n  th {\r\n    text-align: inherit;\r\n  }\r\n\r\n  /* Safari doesn't work with \"inherit\" */\r\n  [safari] th {\r\n    text-align: initial;\r\n  }\r\n\r\n  #footer {\r\n    bottom: 0;\r\n  }\r\n\r\n  #items {\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    display: block;\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    width: 100%;\r\n    left: 0;\r\n    overflow: visible;\r\n  }\r\n\r\n  [part~='row'] {\r\n    display: flex;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n  }\r\n\r\n  [part~='row'][loading] [part~='body-cell'] ::slotted(vaadin-grid-cell-content) {\r\n    visibility: hidden;\r\n  }\r\n\r\n  [column-rendering='lazy'] [part~='body-cell']:not([frozen]):not([frozen-to-end]) {\r\n    transform: translateX(var(--_grid-lazy-columns-start));\r\n  }\r\n\r\n  #items [part~='row'] {\r\n    position: absolute;\r\n  }\r\n\r\n  #items [part~='row']:empty {\r\n    height: 100%;\r\n  }\r\n\r\n  [part~='cell']:not([part~='details-cell']) {\r\n    flex-shrink: 0;\r\n    flex-grow: 1;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    width: 100%;\r\n    position: relative;\r\n    align-items: center;\r\n    padding: 0;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  [part~='cell'] {\r\n    outline: none;\r\n  }\r\n\r\n  [part~='cell'] > [tabindex] {\r\n    display: flex;\r\n    align-items: inherit;\r\n    outline: none;\r\n    position: absolute;\r\n    inset: 0;\r\n  }\r\n\r\n  /* Switch the focusButtonMode wrapping element to \"position: static\" temporarily\r\n     when measuring real width of the cells in the auto-width columns. */\r\n  [measuring-auto-width] [part~='cell'] > [tabindex] {\r\n    position: static;\r\n  }\r\n\r\n  [part~='details-cell'] {\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n  }\r\n\r\n  [part~='cell'] ::slotted(vaadin-grid-cell-content) {\r\n    display: block;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  [hidden] {\r\n    display: none !important;\r\n  }\r\n\r\n  [frozen],\r\n  [frozen-to-end] {\r\n    z-index: 2;\r\n    will-change: transform;\r\n  }\r\n\r\n  [no-scrollbars][safari] #table,\r\n  [no-scrollbars][firefox] #table {\r\n    overflow: hidden;\r\n  }\r\n\r\n  /* Empty state */\r\n\r\n  #scroller:not([empty-state]) #emptystatebody,\r\n  #scroller[empty-state] #items {\r\n    display: none;\r\n  }\r\n\r\n  #emptystatebody {\r\n    display: flex;\r\n    position: sticky;\r\n    inset: 0;\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n\r\n  #emptystaterow {\r\n    display: flex;\r\n    flex: 1;\r\n  }\r\n\r\n  #emptystatecell {\r\n    display: block;\r\n    flex: 1;\r\n    overflow: auto;\r\n  }\r\n\r\n  /* Reordering styles */\r\n  :host([reordering]) [part~='cell'] ::slotted(vaadin-grid-cell-content),\r\n  :host([reordering]) [part~='resize-handle'],\r\n  #scroller[no-content-pointer-events] [part~='cell'] ::slotted(vaadin-grid-cell-content) {\r\n    pointer-events: none;\r\n  }\r\n\r\n  [part~='reorder-ghost'] {\r\n    visibility: hidden;\r\n    position: fixed;\r\n    pointer-events: none;\r\n    opacity: 0.5;\r\n\r\n    /* Prevent overflowing the grid in Firefox */\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n\r\n  :host([reordering]) {\r\n    -webkit-user-select: none;\r\n    user-select: none;\r\n  }\r\n\r\n  /* Resizing styles */\r\n  [part~='resize-handle'] {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    height: 100%;\r\n    cursor: col-resize;\r\n    z-index: 1;\r\n  }\r\n\r\n  [part~='resize-handle']::before {\r\n    position: absolute;\r\n    content: '';\r\n    height: 100%;\r\n    width: 35px;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  [last-column] [part~='resize-handle']::before,\r\n  [last-frozen] [part~='resize-handle']::before {\r\n    width: 18px;\r\n    transform: none;\r\n    right: 0;\r\n  }\r\n\r\n  [frozen-to-end] [part~='resize-handle'] {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  [frozen-to-end] [part~='resize-handle']::before {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  [first-frozen-to-end] [part~='resize-handle']::before {\r\n    width: 18px;\r\n    transform: none;\r\n  }\r\n\r\n  [first-frozen-to-end] {\r\n    margin-inline-start: auto;\r\n  }\r\n\r\n  /* Hide resize handle if scrolled to end */\r\n  :host(:not([overflow~='end'])) [first-frozen-to-end] [part~='resize-handle'] {\r\n    display: none;\r\n  }\r\n\r\n  #scroller[column-resizing],\r\n  #scroller[range-selecting] {\r\n    -webkit-user-select: none;\r\n    user-select: none;\r\n  }\r\n\r\n  /* Sizer styles */\r\n  #sizer {\r\n    display: flex;\r\n    position: absolute;\r\n    visibility: hidden;\r\n  }\r\n\r\n  #sizer [part~='details-cell'] {\r\n    display: none !important;\r\n  }\r\n\r\n  #sizer [part~='cell'][hidden] {\r\n    display: none !important;\r\n  }\r\n\r\n  #sizer [part~='cell'] {\r\n    display: block;\r\n    flex-shrink: 0;\r\n    line-height: 0;\r\n    height: 0 !important;\r\n    min-height: 0 !important;\r\n    max-height: 0 !important;\r\n    padding: 0 !important;\r\n    border: none !important;\r\n  }\r\n\r\n  #sizer [part~='cell']::before {\r\n    content: '-';\r\n  }\r\n\r\n  #sizer [part~='cell'] ::slotted(vaadin-grid-cell-content) {\r\n    display: none !important;\r\n  }\r\n\r\n  /* RTL specific styles */\r\n\r\n  :host([dir='rtl']) #items,\r\n  :host([dir='rtl']) #header,\r\n  :host([dir='rtl']) #footer {\r\n    left: auto;\r\n  }\r\n\r\n  :host([dir='rtl']) [part~='reorder-ghost'] {\r\n    left: auto;\r\n    right: 0;\r\n  }\r\n\r\n  :host([dir='rtl']) [part~='resize-handle'] {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  :host([dir='rtl']) [part~='resize-handle']::before {\r\n    transform: translateX(50%);\r\n  }\r\n\r\n  :host([dir='rtl']) [last-column] [part~='resize-handle']::before,\r\n  :host([dir='rtl']) [last-frozen] [part~='resize-handle']::before {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  :host([dir='rtl']) [frozen-to-end] [part~='resize-handle'] {\r\n    right: 0;\r\n    left: auto;\r\n  }\r\n\r\n  :host([dir='rtl']) [frozen-to-end] [part~='resize-handle']::before {\r\n    right: 0;\r\n    left: auto;\r\n  }\r\n\r\n  @media (forced-colors: active) {\r\n    [part~='selected-row'] [part~='first-column-cell']::after {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      bottom: 0;\r\n      border: 2px solid;\r\n    }\r\n\r\n    [part~='focused-cell']::before {\r\n      outline: 2px solid !important;\r\n      outline-offset: -1px;\r\n    }\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-grid-column.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { GridMixin } from './vaadin-grid-mixin.js';\r\nimport { gridStyles } from './vaadin-grid-styles.js';\r\n\r\nregisterStyles('vaadin-grid', gridStyles, { moduleId: 'vaadin-grid-styles' });\r\n\r\n/**\r\n * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\r\n * the grid can be populated by using renderer callback function.\r\n *\r\n * ### Quick Start\r\n *\r\n * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\r\n *\r\n * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\r\n * shorthand properties for the columns to define what gets rendered in the cells of the column.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid>\r\n *   <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\r\n *   <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\r\n *   <vaadin-grid-column path=\"email\"></vaadin-grid-column>\r\n * </vaadin-grid>\r\n * ```\r\n *\r\n * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\r\n * `renderer` and `footerRenderer`.\r\n *\r\n * Each of those renderer functions provides `root`, `column`, `model` arguments when applicable.\r\n * Generate DOM content, append it to the `root` element and control the state\r\n * of the host element by accessing `column`. Before generating new content,\r\n * users are able to check if there is already content in `root` for reusing it.\r\n *\r\n * Renderers are called on initialization of new column cells and each time the\r\n * related row model is updated. DOM generated during the renderer call can be reused\r\n * in the next renderer call and will be provided with the `root` argument.\r\n * On first call it will be empty.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid>\r\n *   <vaadin-grid-column></vaadin-grid-column>\r\n *   <vaadin-grid-column></vaadin-grid-column>\r\n *   <vaadin-grid-column></vaadin-grid-column>\r\n * </vaadin-grid>\r\n * ```\r\n * ```js\r\n * const grid = document.querySelector('vaadin-grid');\r\n * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\r\n *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\r\n *\r\n * const columns = grid.querySelectorAll('vaadin-grid-column');\r\n *\r\n * columns[0].headerRenderer = function(root) {\r\n *   root.textContent = 'Name';\r\n * };\r\n * columns[0].renderer = function(root, column, model) {\r\n *   root.textContent = model.item.name;\r\n * };\r\n *\r\n * columns[1].headerRenderer = function(root) {\r\n *   root.textContent = 'Surname';\r\n * };\r\n * columns[1].renderer = function(root, column, model) {\r\n *   root.textContent = model.item.surname;\r\n * };\r\n *\r\n * columns[2].headerRenderer = function(root) {\r\n *   root.textContent = 'Role';\r\n * };\r\n * columns[2].renderer = function(root, column, model) {\r\n *   root.textContent = model.item.role;\r\n * };\r\n * ```\r\n *\r\n * The following properties are available in the `model` argument:\r\n *\r\n * Property name | Type | Description\r\n * --------------|------|------------\r\n * `index`| Number | The index of the item.\r\n * `item` | String or Object | The item.\r\n * `level` | Number | Number of the item's tree sublevel, starts from 0.\r\n * `expanded` | Boolean | True if the item's tree sublevel is expanded.\r\n * `selected` | Boolean | True if the item is selected.\r\n * `detailsOpened` | Boolean | True if the item's row details are open.\r\n *\r\n * The following helper elements can be used for further customization:\r\n * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\r\n * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\r\n * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\r\n * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\r\n * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\r\n *\r\n * __Note that the helper elements must be explicitly imported.__\r\n * If you want to import everything at once you can use the `all-imports.html` bundle.\r\n *\r\n * ### Lazy Loading with Function Data Provider\r\n *\r\n * In addition to assigning an array to the items property, you can alternatively\r\n * provide the `<vaadin-grid>` data through the\r\n * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\r\n * The `<vaadin-grid>` calls this function lazily, only when it needs more data\r\n * to be displayed.\r\n *\r\n * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) property\r\n * documentation for the detailed data provider arguments description.\r\n *\r\n * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\r\n *\r\n * __Also, note that when using function data providers, the total number of items\r\n * needs to be set manually. The total number of items can be returned\r\n * in the second argument of the data provider callback:__\r\n *\r\n * ```javascript\r\n * grid.dataProvider = ({page, pageSize}, callback) => {\r\n *   // page: the requested page index\r\n *   // pageSize: number of items on one page\r\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\r\n *\r\n *   fetch(url)\r\n *     .then((res) => res.json())\r\n *     .then(({ employees, totalSize }) => {\r\n *       callback(employees, totalSize);\r\n *     });\r\n * };\r\n * ```\r\n *\r\n * __Alternatively, you can use the `size` property to set the total number of items:__\r\n *\r\n * ```javascript\r\n * grid.size = 200; // The total number of items\r\n * grid.dataProvider = ({page, pageSize}, callback) => {\r\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\r\n *\r\n *   fetch(url)\r\n *     .then((res) => res.json())\r\n *     .then((resJson) => callback(resJson.employees));\r\n * };\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name                  | Description\r\n * ---------------------------|----------------\r\n * `row`                      | Row in the internal table\r\n * `body-row`                 | Body row in the internal table\r\n * `collapsed-row`            | Collapsed row\r\n * `expanded-row`             | Expanded row\r\n * `selected-row`             | Selected row\r\n * `nonselectable-row`        | Row that the user may not select or deselect\r\n * `details-opened-row`       | Row with details open\r\n * `odd-row`                  | Odd row\r\n * `even-row`                 | Even row\r\n * `first-row`                | The first body row\r\n * `last-row`                 | The last body row\r\n * `dragstart-row`            | Set on the row for one frame when drag is starting.\r\n * `dragover-above-row`       | Set on the row when the a row is dragged over above\r\n * `dragover-below-row`       | Set on the row when the a row is dragged over below\r\n * `dragover-on-top-row`      | Set on the row when the a row is dragged over on top\r\n * `drag-disabled-row`        | Set to a row that isn't available for dragging\r\n * `drop-disabled-row`        | Set to a row that can't be dropped on top of\r\n * `cell`                     | Cell in the internal table\r\n * `header-cell`              | Header cell in the internal table\r\n * `body-cell`                | Body cell in the internal table\r\n * `footer-cell`              | Footer cell in the internal table\r\n * `details-cell`             | Row details cell in the internal table\r\n * `focused-cell`             | Focused cell in the internal table\r\n * `odd-row-cell`             | Cell in an odd row\r\n * `even-row-cell`            | Cell in an even row\r\n * `first-row-cell`           | Cell in the first body row\r\n * `last-row-cell`            | Cell in the last body row\r\n * `first-header-row-cell`    | Cell in the first header row\r\n * `first-footer-row-cell`    | Cell in the first footer row\r\n * `last-header-row-cell`     | Cell in the last header row\r\n * `last-footer-row-cell`     | Cell in the last footer row\r\n * `loading-row-cell`         | Cell in a row that is waiting for data from data provider\r\n * `selected-row-cell`        | Cell in a selected row\r\n * `nonselectable-row-cell`   | Cell in a row that the user may not select or deselect\r\n * `collapsed-row-cell`       | Cell in a collapsed row\r\n * `expanded-row-cell`        | Cell in an expanded row\r\n * `details-opened-row-cell`  | Cell in an row with details open\r\n * `dragstart-row-cell`       | Cell in the ghost image row, but not in a source row\r\n * `drag-source-row-cell`     | Cell in a source row, but not in the ghost image\r\n * `dragover-above-row-cell`  | Cell in a row that has another row dragged over above\r\n * `dragover-below-row-cell`  | Cell in a row that has another row dragged over below\r\n * `dragover-on-top-row-cell` | Cell in a row that has another row dragged over on top\r\n * `drag-disabled-row-cell`   | Cell in a row that isn't available for dragging\r\n * `drop-disabled-row-cell`   | Cell in a row that can't be dropped on top of\r\n * `frozen-cell`              | Frozen cell in the internal table\r\n * `frozen-to-end-cell`       | Frozen to end cell in the internal table\r\n * `last-frozen-cell`         | Last frozen cell\r\n * `first-frozen-to-end-cell` | First cell frozen to end\r\n * `first-column-cell`        | First visible cell on a row\r\n * `last-column-cell`         | Last visible cell on a row\r\n * `reorder-allowed-cell`     | Cell in a column where another column can be reordered\r\n * `reorder-dragging-cell`    | Cell in a column currently being reordered\r\n * `resize-handle`            | Handle for resizing the columns\r\n * `empty-state`              | The container for the content to be displayed when there are no body rows to show\r\n * `reorder-ghost`            | Ghost element of the header cell being dragged\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute             | Description                                                                                       | Part name\r\n * ----------------------|---------------------------------------------------------------------------------------------------|-----------\r\n * `loading`             | Set when the grid is loading data from data provider                                              | :host\r\n * `interacting`         | Keyboard navigation in interaction mode                                                           | :host\r\n * `navigating`          | Keyboard navigation in navigation mode                                                            | :host\r\n * `overflow`            | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `start`, `end` | :host\r\n * `reordering`          | Set when the grid's columns are being reordered                                                   | :host\r\n * `dragover`            | Set when the grid (not a specific row) is dragged over                                            | :host\r\n * `dragging-rows`       | Set when grid rows are dragged                                                                    | :host\r\n * `reorder-status`      | Reflects the status of a cell while columns are being reordered                                   | cell\r\n * `frozen`              | Frozen cell                                                                                       | cell\r\n * `frozen-to-end`       | Cell frozen to end                                                                                | cell\r\n * `last-frozen`         | Last frozen cell                                                                                  | cell\r\n * `first-frozen-to-end` | First cell frozen to end                                                                          | cell\r\n * `first-column`        | First visible cell on a row                                                                       | cell\r\n * `last-column`         | Last visible cell on a row                                                                        | cell\r\n * `selected`            | Selected row                                                                                      | row\r\n * `expanded`            | Expanded row                                                                                      | row\r\n * `details-opened`      | Row with details open                                                                             | row\r\n * `loading`             | Row that is waiting for data from data provider                                                   | row\r\n * `odd`                 | Odd row                                                                                           | row\r\n * `first`               | The first body row                                                                                | row\r\n * `last`                | The last body row                                                                                 | row\r\n * `dragstart`           | Set for one frame when starting to drag a row. The value is a number when dragging multiple rows  | row\r\n * `dragover`            | Set when the row is dragged over                                                                  | row\r\n * `drag-disabled`       | Set to a row that isn't available for dragging                                                    | row\r\n * `drop-disabled`       | Set to a row that can't be dropped on top of                                                      | row\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {CustomEvent} active-item-changed - Fired when the `activeItem` property changes.\r\n * @fires {CustomEvent} cell-activate - Fired when the cell is activated with click or keyboard.\r\n * @fires {CustomEvent} cell-focus - Fired when a cell is focused with click or keyboard navigation.\r\n * @fires {CustomEvent} column-reorder - Fired when the columns in the grid are reordered.\r\n * @fires {CustomEvent} column-resize - Fired when the grid column resize is finished.\r\n * @fires {CustomEvent} data-provider-changed - Fired when the `dataProvider` property changes.\r\n * @fires {CustomEvent} expanded-items-changed - Fired when the `expandedItems` property changes.\r\n * @fires {CustomEvent} grid-dragstart - Fired when starting to drag grid rows.\r\n * @fires {CustomEvent} grid-dragend - Fired when the dragging of the rows ends.\r\n * @fires {CustomEvent} grid-drop - Fired when a drop occurs on top of the grid.\r\n * @fires {CustomEvent} loading-changed - Fired when the `loading` property changes.\r\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\r\n * @fires {CustomEvent} size-changed - Fired when the `size` property changes.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes GridMixin\r\n * @mixes ThemableMixin\r\n * @mixes ControllerMixin\r\n */\r\nclass Grid extends GridMixin(ElementMixin(ThemableMixin(ControllerMixin(PolymerElement)))) {\r\n  static get template() {\r\n    return html`\r\n      <div\r\n        id=\"scroller\"\r\n        safari$=\"[[_safari]]\"\r\n        ios$=\"[[_ios]]\"\r\n        loading$=\"[[loading]]\"\r\n        column-reordering-allowed$=\"[[columnReorderingAllowed]]\"\r\n        empty-state$=\"[[__emptyState]]\"\r\n      >\r\n        <table id=\"table\" role=\"treegrid\" aria-multiselectable=\"true\" tabindex=\"0\" aria-label$=\"[[accessibleName]]\">\r\n          <caption id=\"sizer\" part=\"row\"></caption>\r\n          <thead id=\"header\" role=\"rowgroup\"></thead>\r\n          <tbody id=\"items\" role=\"rowgroup\"></tbody>\r\n          <tbody id=\"emptystatebody\">\r\n            <tr id=\"emptystaterow\">\r\n              <td part=\"empty-state\" id=\"emptystatecell\" tabindex=\"0\">\r\n                <slot name=\"empty-state\" id=\"emptystateslot\"></slot>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n          <tfoot id=\"footer\" role=\"rowgroup\"></tfoot>\r\n        </table>\r\n\r\n        <div part=\"reorder-ghost\"></div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n\r\n      <div id=\"focusexit\" tabindex=\"0\"></div>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-grid';\r\n  }\r\n}\r\n\r\ndefineCustomElement(Grid);\r\n\r\nexport { Grid };\r\n"],
  "mappings": "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",
  "names": ["get", "filter", "col", "column", "cell", "row", "filter", "sorter", "row", "cell"]
}

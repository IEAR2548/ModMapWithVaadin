{
  "version": 3,
  "sources": ["../../@vaadin/text-area/theme/lumo/vaadin-text-area-styles.js", "../../@vaadin/field-base/src/text-area-controller.js", "../../@vaadin/text-area/src/vaadin-text-area-mixin.js", "../../@vaadin/text-area/src/vaadin-text-area-styles.js", "../../@vaadin/text-area/src/vaadin-text-area.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container-styles.js';\r\nimport '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst textArea = css`\r\n  [part='input-field'],\r\n  [part='input-field'] ::slotted(textarea) {\r\n    height: auto;\r\n    box-sizing: border-box;\r\n    min-height: 0;\r\n  }\r\n\r\n  [part='input-field'] {\r\n    /* Equal to the implicit padding in vaadin-text-field */\r\n    padding-top: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\r\n    padding-bottom: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\r\n    transition: background-color 0.1s;\r\n    line-height: var(--lumo-line-height-s);\r\n  }\r\n\r\n  :host(:not([readonly])) [part='input-field']::after {\r\n    display: none;\r\n  }\r\n\r\n  :host([readonly]) [part='input-field'] {\r\n    border: var(--vaadin-input-field-readonly-border, 1px dashed var(--lumo-contrast-30pct));\r\n  }\r\n\r\n  :host([readonly]) [part='input-field']::after {\r\n    border: none;\r\n  }\r\n\r\n  :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\r\n    background-color: var(--lumo-contrast-20pct);\r\n  }\r\n\r\n  @media (pointer: coarse) {\r\n    :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\r\n      background-color: var(--lumo-contrast-10pct);\r\n    }\r\n\r\n    :host(:active:not([readonly]):not([focused])) [part='input-field'] {\r\n      background-color: var(--lumo-contrast-20pct);\r\n    }\r\n  }\r\n\r\n  [part='input-field'] ::slotted(textarea) {\r\n    line-height: inherit;\r\n    --_lumo-text-field-overflow-mask-image: none;\r\n  }\r\n\r\n  /* Use sticky positioning to keep prefix/suffix/clear button visible when scrolling textarea container */\r\n  [part='input-field'] ::slotted([slot$='fix']),\r\n  [part='clear-button'] {\r\n    position: sticky;\r\n    top: 0;\r\n    align-self: flex-start;\r\n  }\r\n\r\n  [part='input-field'] ::slotted(vaadin-icon[slot$='fix']),\r\n  [part='clear-button'] {\r\n    /* Vertically align icon prefix/suffix/clear button with the first line of text */\r\n    top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\r\n    margin-top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\r\n    /* Reduce effective height to match line height of native textarea, so icons don't increase component size when using single row */\r\n    margin-bottom: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-text-area', [inputFieldShared, textArea], {\r\n  moduleId: 'lumo-text-area',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\r\n\r\n/**\r\n * A controller to create and initialize slotted `<textarea>` element.\r\n */\r\nexport class TextAreaController extends SlotController {\r\n  constructor(host, callback) {\r\n    super(host, 'textarea', 'textarea', {\r\n      initializer: (node, host) => {\r\n        const value = host.getAttribute('value');\r\n        if (value) {\r\n          node.value = value;\r\n        }\r\n\r\n        const name = host.getAttribute('name');\r\n        if (name) {\r\n          node.setAttribute('name', name);\r\n        }\r\n\r\n        node.id = this.defaultId;\r\n\r\n        if (typeof callback === 'function') {\r\n          callback(node);\r\n        }\r\n      },\r\n      useUniqueId: true,\r\n    });\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\nimport { TextAreaController } from '@vaadin/field-base/src/text-area-controller.js';\r\n\r\n/**\r\n * A mixin providing common text area functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes InputFieldMixin\r\n * @mixes ResizeMixin\r\n */\r\nexport const TextAreaMixin = (superClass) =>\r\n  class TextAreaMixinClass extends ResizeMixin(InputFieldMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Maximum number of characters (in Unicode code points) that the user can enter.\r\n         */\r\n        maxlength: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * Minimum number of characters (in Unicode code points) that the user can enter.\r\n         */\r\n        minlength: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * A regular expression that the value is checked against.\r\n         * The pattern must match the entire value, not just some subset.\r\n         */\r\n        pattern: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * Minimum number of rows to show. Default is two rows.\r\n         *\r\n         * When using a custom slotted textarea, the minimum number of rows are not applied for backwards compatibility.\r\n         *\r\n         * @attr {number} min-rows\r\n         */\r\n        minRows: {\r\n          type: Number,\r\n          value: 2,\r\n          observer: '__minRowsChanged',\r\n        },\r\n\r\n        /**\r\n         * Maximum number of rows to expand to before the text area starts scrolling. This effectively sets a max-height\r\n         * on the `input-field` part. By default, it is not set, and the text area grows with the content without\r\n         * constraints.\r\n         * @attr {number} max-rows\r\n         */\r\n        maxRows: {\r\n          type: Number,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get delegateAttrs() {\r\n      return [...super.delegateAttrs, 'maxlength', 'minlength', 'pattern'];\r\n    }\r\n\r\n    static get constraints() {\r\n      return [...super.constraints, 'maxlength', 'minlength', 'pattern'];\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__updateMinHeight(minRows, inputElement)', '__updateMaxHeight(maxRows, inputElement, _inputField)'];\r\n    }\r\n\r\n    /**\r\n     * Used by `InputControlMixin` as a reference to the clear button element.\r\n     * @protected\r\n     */\r\n    get clearElement() {\r\n      return this.$.clearButton;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onResize() {\r\n      this._updateHeight();\r\n      this.__scrollPositionUpdated();\r\n    }\r\n\r\n    /** @protected */\r\n    _onScroll() {\r\n      this.__scrollPositionUpdated();\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.__textAreaController = new TextAreaController(this, (input) => {\r\n        this._setInputElement(input);\r\n        this._setFocusElement(input);\r\n        this.stateTarget = input;\r\n        this.ariaTarget = input;\r\n      });\r\n      this.addController(this.__textAreaController);\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n\r\n      this._inputField = this.shadowRoot.querySelector('[part=input-field]');\r\n\r\n      // Wheel scrolling results in async scroll events. Preventing the wheel\r\n      // event, scrolling manually and then synchronously updating the scroll position CSS variable\r\n      // allows us to avoid some jumpy behavior that would occur on wheel otherwise.\r\n      this._inputField.addEventListener('wheel', (e) => {\r\n        const scrollTopBefore = this._inputField.scrollTop;\r\n        this._inputField.scrollTop += e.deltaY;\r\n\r\n        if (scrollTopBefore !== this._inputField.scrollTop) {\r\n          e.preventDefault();\r\n          this.__scrollPositionUpdated();\r\n        }\r\n      });\r\n\r\n      this._updateHeight();\r\n      this.__scrollPositionUpdated();\r\n    }\r\n\r\n    /** @private */\r\n    __scrollPositionUpdated() {\r\n      this._inputField.style.setProperty('--_text-area-vertical-scroll-position', '0px');\r\n      this._inputField.style.setProperty('--_text-area-vertical-scroll-position', `${this._inputField.scrollTop}px`);\r\n    }\r\n\r\n    /**\r\n     * @param {unknown} newVal\r\n     * @param {unknown} oldVal\r\n     * @protected\r\n     * @override\r\n     */\r\n    _valueChanged(newVal, oldVal) {\r\n      super._valueChanged(newVal, oldVal);\r\n\r\n      this._updateHeight();\r\n    }\r\n\r\n    /** @private */\r\n    _updateHeight() {\r\n      const input = this.inputElement;\r\n      const inputField = this._inputField;\r\n\r\n      if (!input || !inputField) {\r\n        return;\r\n      }\r\n\r\n      const scrollTop = inputField.scrollTop;\r\n\r\n      // Only clear the height when the content shortens to minimize scrollbar flickering.\r\n      const valueLength = this.value ? this.value.length : 0;\r\n\r\n      if (this._oldValueLength >= valueLength) {\r\n        const inputFieldHeight = getComputedStyle(inputField).height;\r\n        const inputWidth = getComputedStyle(input).width;\r\n\r\n        // Temporarily fix the height of the wrapping input field container to prevent changing the browsers scroll\r\n        // position while resetting the textareas height. If the textarea had a large height, then removing its height\r\n        // will reset its height to the default of two rows. That might reduce the height of the page, and the\r\n        // browser might adjust the scroll position before we can restore the measured height of the textarea.\r\n        inputField.style.height = inputFieldHeight;\r\n\r\n        // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars\r\n        input.style.maxWidth = inputWidth;\r\n\r\n        // Clear the height of the textarea to allow measuring a reduced scroll height\r\n        input.style.alignSelf = 'flex-start';\r\n        input.style.height = 'auto';\r\n      }\r\n      this._oldValueLength = valueLength;\r\n\r\n      const inputHeight = input.scrollHeight;\r\n      if (inputHeight > input.clientHeight) {\r\n        input.style.height = `${inputHeight}px`;\r\n      }\r\n\r\n      // Restore\r\n      input.style.removeProperty('max-width');\r\n      input.style.removeProperty('align-self');\r\n      inputField.style.removeProperty('height');\r\n      inputField.scrollTop = scrollTop;\r\n\r\n      // Update max height in case this update was triggered by style changes\r\n      // affecting line height, paddings or margins.\r\n      this.__updateMaxHeight(this.maxRows);\r\n    }\r\n\r\n    /** @private */\r\n    __updateMinHeight(minRows) {\r\n      if (!this.inputElement) {\r\n        return;\r\n      }\r\n\r\n      // For minimum height, just set the number of rows on the native textarea,\r\n      // which causes the input container to grow as well.\r\n      // Do not override this on custom slotted textarea as number of rows may\r\n      // have been configured there.\r\n      if (this.inputElement === this.__textAreaController.defaultNode) {\r\n        this.inputElement.rows = Math.max(minRows, 1);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateMaxHeight(maxRows) {\r\n      if (!this._inputField || !this.inputElement) {\r\n        return;\r\n      }\r\n\r\n      if (maxRows) {\r\n        // For maximum height, we need to constrain the height of the input\r\n        // container to prevent it from growing further. For this we take the\r\n        // line height of the native textarea times the number of rows, and add\r\n        // other properties affecting the height of the input container.\r\n        const inputStyle = getComputedStyle(this.inputElement);\r\n        const inputFieldStyle = getComputedStyle(this._inputField);\r\n\r\n        const lineHeight = parseFloat(inputStyle.lineHeight);\r\n        const contentHeight = lineHeight * maxRows;\r\n        const marginsAndPaddings =\r\n          parseFloat(inputStyle.paddingTop) +\r\n          parseFloat(inputStyle.paddingBottom) +\r\n          parseFloat(inputStyle.marginTop) +\r\n          parseFloat(inputStyle.marginBottom) +\r\n          parseFloat(inputFieldStyle.paddingTop) +\r\n          parseFloat(inputFieldStyle.paddingBottom);\r\n        const maxHeight = Math.ceil(contentHeight + marginsAndPaddings);\r\n        this._inputField.style.setProperty('max-height', `${maxHeight}px`);\r\n      } else {\r\n        this._inputField.style.removeProperty('max-height');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    __minRowsChanged(minRows) {\r\n      if (minRows < 1) {\r\n        console.warn('<vaadin-text-area> minRows must be at least 1.');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Scrolls the textarea to the start if it has a vertical scrollbar.\r\n     */\r\n    scrollToStart() {\r\n      this._inputField.scrollTop = 0;\r\n    }\r\n\r\n    /**\r\n     * Scrolls the textarea to the end if it has a vertical scrollbar.\r\n     */\r\n    scrollToEnd() {\r\n      this._inputField.scrollTop = this._inputField.scrollHeight;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current textarea value satisfies all constraints (if any).\r\n     * @return {boolean}\r\n     * @override\r\n     */\r\n    checkValidity() {\r\n      if (!super.checkValidity()) {\r\n        return false;\r\n      }\r\n\r\n      // Native <textarea> does not support pattern attribute, so we have a custom logic\r\n      // according to WHATWG spec for <input>, with tests inspired by web-platform-tests\r\n      // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\r\n\r\n      if (!this.pattern || !this.inputElement.value) {\r\n        // Mark as valid if there is no pattern, or the value is empty\r\n        return true;\r\n      }\r\n\r\n      try {\r\n        const match = this.inputElement.value.match(this.pattern);\r\n        return match ? match[0] === match.input : false;\r\n      } catch (_) {\r\n        // If the pattern can not be compiled, then report as valid\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const textAreaStyles = css`\r\n  .vaadin-text-area-container {\r\n    flex: auto;\r\n  }\r\n\r\n  /* The label, helper text and the error message should neither grow nor shrink. */\r\n  [part='label'],\r\n  [part='helper-text'],\r\n  [part='error-message'] {\r\n    flex: none;\r\n  }\r\n\r\n  [part='input-field'] {\r\n    flex: auto;\r\n    overflow: auto;\r\n    -webkit-overflow-scrolling: touch;\r\n  }\r\n\r\n  ::slotted(textarea) {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    flex: auto;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none;\r\n    resize: none;\r\n    margin: 0;\r\n    padding: 0 0.25em;\r\n    border: 0;\r\n    border-radius: 0;\r\n    min-width: 0;\r\n    font: inherit;\r\n    font-size: 1em;\r\n    line-height: normal;\r\n    color: inherit;\r\n    background-color: transparent;\r\n    /* Disable default invalid style in Firefox */\r\n    box-shadow: none;\r\n  }\r\n\r\n  /* Override styles from <vaadin-input-container> */\r\n  [part='input-field'] ::slotted(textarea) {\r\n    align-self: stretch;\r\n    white-space: pre-wrap;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  [part='input-field'] ::slotted(:not(textarea)) {\r\n    align-self: flex-start;\r\n  }\r\n\r\n  /* Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1739079 */\r\n  :host([disabled]) ::slotted(textarea) {\r\n    user-select: none;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport { html, PolymerElement } from '@polymer/polymer';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { TextAreaMixin } from './vaadin-text-area-mixin.js';\r\nimport { textAreaStyles } from './vaadin-text-area-styles.js';\r\n\r\nregisterStyles('vaadin-text-area', [inputFieldShared, textAreaStyles], { moduleId: 'vaadin-text-area-styles' });\r\n\r\n/**\r\n * `<vaadin-text-area>` is a web component for multi-line text input.\r\n *\r\n * ```html\r\n * <vaadin-text-area label=\"Comment\"></vaadin-text-area>\r\n * ```\r\n *\r\n * ### Prefixes and suffixes\r\n *\r\n * These are child elements of a `<vaadin-text-area>` that are displayed\r\n * inline with the input, before or after.\r\n * In order for an element to be considered as a prefix, it must have the slot\r\n * attribute set to `prefix` (and similarly for `suffix`).\r\n *\r\n * ```html\r\n * <vaadin-text-area label=\"Description\">\r\n *   <div slot=\"prefix\">Details:</div>\r\n *   <div slot=\"suffix\">The end!</div>\r\n * </vaadin-text-area>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following custom properties are available for styling:\r\n *\r\n * Custom property                | Description                | Default\r\n * -------------------------------|----------------------------|---------\r\n * `--vaadin-field-default-width` | Default width of the field | `12em`\r\n *\r\n * `<vaadin-text-area>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\r\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes TextAreaMixin\r\n * @mixes ThemableMixin\r\n */\r\nexport class TextArea extends TextAreaMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-text-area';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-text-area-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-input-container\r\n          part=\"input-field\"\r\n          readonly=\"[[readonly]]\"\r\n          disabled=\"[[disabled]]\"\r\n          invalid=\"[[invalid]]\"\r\n          theme$=\"[[_theme]]\"\r\n          on-scroll=\"_onScroll\"\r\n        >\r\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n          <slot name=\"textarea\"></slot>\r\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n        </vaadin-input-container>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this._tooltipController = new TooltipController(this);\r\n    this._tooltipController.setPosition('top');\r\n    this._tooltipController.setAriaTarget(this.inputElement);\r\n    this.addController(this._tooltipController);\r\n  }\r\n}\r\n\r\ndefineCustomElement(TextArea);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiEjB,eAAe,oBAAoB,CAAC,kBAAkB,QAAQ,GAAG;AAAA,EAC/D,UAAU;AACZ,CAAC;;;ACrEM,IAAM,qBAAN,cAAiC,eAAe;AAAA,EACrD,YAAY,MAAM,UAAU;AAC1B,UAAM,MAAM,YAAY,YAAY;AAAA,MAClC,aAAa,CAAC,MAAMA,UAAS;AAC3B,cAAM,QAAQA,MAAK,aAAa,OAAO;AACvC,YAAI,OAAO;AACT,eAAK,QAAQ;AAAA,QACf;AAEA,cAAM,OAAOA,MAAK,aAAa,MAAM;AACrC,YAAI,MAAM;AACR,eAAK,aAAa,QAAQ,IAAI;AAAA,QAChC;AAEA,aAAK,KAAK,KAAK;AAEf,YAAI,OAAO,aAAa,YAAY;AAClC,mBAAS,IAAI;AAAA,QACf;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AACF;;;AChBO,IAAM,gBAAgB,CAAC,eAC5B,MAAM,2BAA2B,YAAY,gBAAgB,UAAU,CAAC,EAAE;AAAA,EACxE,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,WAAW;AAAA,QACT,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA,MAKA,WAAW;AAAA,QACT,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,MACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe,aAAa,aAAa,SAAS;AAAA,EACrE;AAAA,EAEA,WAAW,cAAc;AACvB,WAAO,CAAC,GAAG,MAAM,aAAa,aAAa,aAAa,SAAS;AAAA,EACnE;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO,CAAC,4CAA4C,uDAAuD;AAAA,EAC7G;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AACjB,WAAO,KAAK,EAAE;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY;AACV,SAAK,cAAc;AACnB,SAAK,wBAAwB;AAAA,EAC/B;AAAA;AAAA,EAGA,YAAY;AACV,SAAK,wBAAwB;AAAA,EAC/B;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,uBAAuB,IAAI,mBAAmB,MAAM,CAAC,UAAU;AAClE,WAAK,iBAAiB,KAAK;AAC3B,WAAK,iBAAiB,KAAK;AAC3B,WAAK,cAAc;AACnB,WAAK,aAAa;AAAA,IACpB,CAAC;AACD,SAAK,cAAc,KAAK,oBAAoB;AAC5C,SAAK,cAAc,IAAI,wBAAwB,KAAK,cAAc,KAAK,gBAAgB,CAAC;AAExF,SAAK,cAAc,KAAK,WAAW,cAAc,oBAAoB;AAKrE,SAAK,YAAY,iBAAiB,SAAS,CAAC,MAAM;AAChD,YAAM,kBAAkB,KAAK,YAAY;AACzC,WAAK,YAAY,aAAa,EAAE;AAEhC,UAAI,oBAAoB,KAAK,YAAY,WAAW;AAClD,UAAE,eAAe;AACjB,aAAK,wBAAwB;AAAA,MAC/B;AAAA,IACF,CAAC;AAED,SAAK,cAAc;AACnB,SAAK,wBAAwB;AAAA,EAC/B;AAAA;AAAA,EAGA,0BAA0B;AACxB,SAAK,YAAY,MAAM,YAAY,yCAAyC,KAAK;AACjF,SAAK,YAAY,MAAM,YAAY,yCAAyC,GAAG,KAAK,YAAY,SAAS,IAAI;AAAA,EAC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAAQ,QAAQ;AAC5B,UAAM,cAAc,QAAQ,MAAM;AAElC,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA,EAGA,gBAAgB;AACd,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,KAAK;AAExB,QAAI,CAAC,SAAS,CAAC,YAAY;AACzB;AAAA,IACF;AAEA,UAAM,YAAY,WAAW;AAG7B,UAAM,cAAc,KAAK,QAAQ,KAAK,MAAM,SAAS;AAErD,QAAI,KAAK,mBAAmB,aAAa;AACvC,YAAM,mBAAmB,iBAAiB,UAAU,EAAE;AACtD,YAAM,aAAa,iBAAiB,KAAK,EAAE;AAM3C,iBAAW,MAAM,SAAS;AAG1B,YAAM,MAAM,WAAW;AAGvB,YAAM,MAAM,YAAY;AACxB,YAAM,MAAM,SAAS;AAAA,IACvB;AACA,SAAK,kBAAkB;AAEvB,UAAM,cAAc,MAAM;AAC1B,QAAI,cAAc,MAAM,cAAc;AACpC,YAAM,MAAM,SAAS,GAAG,WAAW;AAAA,IACrC;AAGA,UAAM,MAAM,eAAe,WAAW;AACtC,UAAM,MAAM,eAAe,YAAY;AACvC,eAAW,MAAM,eAAe,QAAQ;AACxC,eAAW,YAAY;AAIvB,SAAK,kBAAkB,KAAK,OAAO;AAAA,EACrC;AAAA;AAAA,EAGA,kBAAkB,SAAS;AACzB,QAAI,CAAC,KAAK,cAAc;AACtB;AAAA,IACF;AAMA,QAAI,KAAK,iBAAiB,KAAK,qBAAqB,aAAa;AAC/D,WAAK,aAAa,OAAO,KAAK,IAAI,SAAS,CAAC;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA,EAGA,kBAAkB,SAAS;AACzB,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,cAAc;AAC3C;AAAA,IACF;AAEA,QAAI,SAAS;AAKX,YAAM,aAAa,iBAAiB,KAAK,YAAY;AACrD,YAAM,kBAAkB,iBAAiB,KAAK,WAAW;AAEzD,YAAM,aAAa,WAAW,WAAW,UAAU;AACnD,YAAM,gBAAgB,aAAa;AACnC,YAAM,qBACJ,WAAW,WAAW,UAAU,IAChC,WAAW,WAAW,aAAa,IACnC,WAAW,WAAW,SAAS,IAC/B,WAAW,WAAW,YAAY,IAClC,WAAW,gBAAgB,UAAU,IACrC,WAAW,gBAAgB,aAAa;AAC1C,YAAM,YAAY,KAAK,KAAK,gBAAgB,kBAAkB;AAC9D,WAAK,YAAY,MAAM,YAAY,cAAc,GAAG,SAAS,IAAI;AAAA,IACnE,OAAO;AACL,WAAK,YAAY,MAAM,eAAe,YAAY;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,SAAS;AACxB,QAAI,UAAU,GAAG;AACf,cAAQ,KAAK,gDAAgD;AAAA,IAC/D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACd,SAAK,YAAY,YAAY;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACZ,SAAK,YAAY,YAAY,KAAK,YAAY;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACd,QAAI,CAAC,MAAM,cAAc,GAAG;AAC1B,aAAO;AAAA,IACT;AAMA,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,aAAa,OAAO;AAE7C,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,QAAQ,KAAK,aAAa,MAAM,MAAM,KAAK,OAAO;AACxD,aAAO,QAAQ,MAAM,CAAC,MAAM,MAAM,QAAQ;AAAA,IAC5C,SAAS,GAAG;AAEV,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACjSK,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACQ9B,eAAe,oBAAoB,CAACC,mBAAkB,cAAc,GAAG,EAAE,UAAU,0BAA0B,CAAC;AAgDvG,IAAM,WAAN,cAAuB,cAAc,cAAc,aAAa,cAAc,CAAC,CAAC,EAAE;AAAA,EACvF,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCT;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,qBAAqB,IAAI,kBAAkB,IAAI;AACpD,SAAK,mBAAmB,YAAY,KAAK;AACzC,SAAK,mBAAmB,cAAc,KAAK,YAAY;AACvD,SAAK,cAAc,KAAK,kBAAkB;AAAA,EAC5C;AACF;AAEA,oBAAoB,QAAQ;",
  "names": ["host", "inputFieldShared"]
}

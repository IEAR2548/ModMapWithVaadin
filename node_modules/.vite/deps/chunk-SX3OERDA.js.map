{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/slot-child-observe-controller.js", "../../@vaadin/field-base/src/label-controller.js", "../../@vaadin/field-base/src/label-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotController } from './slot-controller.js';\r\n\r\n/**\r\n * A controller that observes slotted element mutations, especially ID attribute\r\n * and the text content, and fires an event to notify host element about those.\r\n */\r\nexport class SlotChildObserveController extends SlotController {\r\n  constructor(host, slot, tagName, config = {}) {\r\n    super(host, slot, tagName, { ...config, useUniqueId: true });\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(node) {\r\n    this.__updateNodeId(node);\r\n    this.__notifyChange(node);\r\n  }\r\n\r\n  /**\r\n   * Override to notify the controller host about removal of\r\n   * the custom node, and to apply the default one if needed.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   * @override\r\n   */\r\n  teardownNode(_node) {\r\n    const node = this.getSlotChild();\r\n\r\n    // Custom node is added to the slot\r\n    if (node && node !== this.defaultNode) {\r\n      this.__notifyChange(node);\r\n    } else {\r\n      this.restoreDefaultNode();\r\n      this.updateDefaultNode(this.node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotMixin`\r\n   * to set ID attribute on the default node.\r\n   *\r\n   * @return {Node}\r\n   * @protected\r\n   * @override\r\n   */\r\n  attachDefaultNode() {\r\n    const node = super.attachDefaultNode();\r\n\r\n    if (node) {\r\n      this.__updateNodeId(node);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Override to restore default node when a custom one is removed.\r\n   *\r\n   * @protected\r\n   */\r\n  restoreDefaultNode() {\r\n    // To be implemented\r\n  }\r\n\r\n  /**\r\n   * Override to update default node text on property change.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  updateDefaultNode(node) {\r\n    this.__notifyChange(node);\r\n  }\r\n\r\n  /**\r\n   * Setup the mutation observer on the node to update ID and notify host.\r\n   * Node doesn't get observed automatically until this method is called.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  observeNode(node) {\r\n    // Stop observing the previous node, if any.\r\n    if (this.__nodeObserver) {\r\n      this.__nodeObserver.disconnect();\r\n    }\r\n\r\n    this.__nodeObserver = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        const target = mutation.target;\r\n\r\n        // Ensure the mutation target is the currently connected node\r\n        // to ignore async mutations dispatched for removed element.\r\n        const isCurrentNodeMutation = target === this.node;\r\n\r\n        if (mutation.type === 'attributes') {\r\n          // We use attributeFilter to only observe ID mutation,\r\n          // no need to check for attribute name separately.\r\n          if (isCurrentNodeMutation) {\r\n            this.__updateNodeId(target);\r\n          }\r\n        } else if (isCurrentNodeMutation || target.parentElement === this.node) {\r\n          // Node text content has changed.\r\n          this.__notifyChange(this.node);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Observe changes to node ID attribute, text content and children.\r\n    this.__nodeObserver.observe(node, {\r\n      attributes: true,\r\n      attributeFilter: ['id'],\r\n      childList: true,\r\n      subtree: true,\r\n      characterData: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if a node is an HTML element with children,\r\n   * or is a defined custom element, or has non-empty text.\r\n   *\r\n   * @param {Node} node\r\n   * @return {boolean}\r\n   * @private\r\n   */\r\n  __hasContent(node) {\r\n    if (!node) {\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      (node.nodeType === Node.ELEMENT_NODE && (customElements.get(node.localName) || node.children.length > 0)) ||\r\n      (node.textContent && node.textContent.trim() !== '')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fire an event to notify the controller host about node changes.\r\n   *\r\n   * @param {Node} node\r\n   * @private\r\n   */\r\n  __notifyChange(node) {\r\n    this.dispatchEvent(\r\n      new CustomEvent('slot-content-changed', {\r\n        detail: { hasContent: this.__hasContent(node), node },\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set default ID on the node in case it is an HTML element.\r\n   *\r\n   * @param {Node} node\r\n   * @private\r\n   */\r\n  __updateNodeId(node) {\r\n    // When in multiple mode, only set ID attribute on the element in default slot.\r\n    const isFirstNode = !this.nodes || node === this.nodes[0];\r\n    if (node.nodeType === Node.ELEMENT_NODE && (!this.multiple || isFirstNode) && !node.id) {\r\n      node.id = this.defaultId;\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\r\n\r\n/**\r\n * A controller to manage the label element.\r\n */\r\nexport class LabelController extends SlotChildObserveController {\r\n  constructor(host) {\r\n    super(host, 'label', 'label');\r\n  }\r\n\r\n  /**\r\n   * Set label based on corresponding host property.\r\n   *\r\n   * @param {string} label\r\n   */\r\n  setLabel(label) {\r\n    this.label = label;\r\n\r\n    // Restore the default label, if needed.\r\n    const labelNode = this.getSlotChild();\r\n    if (!labelNode) {\r\n      this.restoreDefaultNode();\r\n    }\r\n\r\n    // When default label is used, update it.\r\n    if (this.node === this.defaultNode) {\r\n      this.updateDefaultNode(this.node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to restore and observe the default label element.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  restoreDefaultNode() {\r\n    const { label } = this;\r\n\r\n    // Restore the default label.\r\n    if (label && label.trim() !== '') {\r\n      const labelNode = this.attachDefaultNode();\r\n\r\n      // Observe the default label.\r\n      this.observeNode(labelNode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to update the default label element text content.\r\n   *\r\n   * @param {Node | undefined} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  updateDefaultNode(node) {\r\n    if (node) {\r\n      node.textContent = this.label;\r\n    }\r\n\r\n    // Notify the host after update.\r\n    super.updateDefaultNode(node);\r\n  }\r\n\r\n  /**\r\n   * Override to observe the newly added custom node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(node) {\r\n    // Notify the host about adding a custom node.\r\n    super.initCustomNode(node);\r\n\r\n    this.observeNode(node);\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { LabelController } from './label-controller.js';\r\n\r\n/**\r\n * A mixin to provide label via corresponding property or named slot.\r\n *\r\n * @polymerMixin\r\n * @mixes ControllerMixin\r\n */\r\nexport const LabelMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class LabelMixinClass extends ControllerMixin(superclass) {\r\n      static get properties() {\r\n        return {\r\n          /**\r\n           * The label text for the input node.\r\n           * When no light dom defined via [slot=label], this value will be used.\r\n           */\r\n          label: {\r\n            type: String,\r\n            observer: '_labelChanged',\r\n          },\r\n        };\r\n      }\r\n\r\n      constructor() {\r\n        super();\r\n\r\n        this._labelController = new LabelController(this);\r\n\r\n        this._labelController.addEventListener('slot-content-changed', (event) => {\r\n          this.toggleAttribute('has-label', event.detail.hasContent);\r\n        });\r\n      }\r\n\r\n      /** @protected */\r\n      get _labelId() {\r\n        const node = this._labelNode;\r\n        return node && node.id;\r\n      }\r\n\r\n      /** @protected */\r\n      get _labelNode() {\r\n        return this._labelController.node;\r\n      }\r\n\r\n      /** @protected */\r\n      ready() {\r\n        super.ready();\r\n\r\n        this.addController(this._labelController);\r\n      }\r\n\r\n      /** @protected */\r\n      _labelChanged(label) {\r\n        this._labelController.setLabel(label);\r\n      }\r\n    },\r\n);\r\n"],
  "mappings": "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",
  "names": []
}

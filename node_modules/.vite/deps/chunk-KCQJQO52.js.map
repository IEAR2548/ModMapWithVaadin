{
  "version": 3,
  "sources": ["../../lit-html/src/directives/unsafe-html.ts", "../../lit-html/src/directives/unsafe-svg.ts", "../../@vaadin/icon/src/vaadin-icon-svg.js", "../../@vaadin/icon/src/vaadin-iconset-mixin.js", "../../@vaadin/icon/src/vaadin-iconset.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {directive} from '../directive.js';\nimport {UnsafeHTMLDirective} from './unsafe-html.js';\n\nconst SVG_RESULT = 2;\n\nclass UnsafeSVGDirective extends UnsafeHTMLDirective {\n  static override directiveName = 'unsafeSVG';\n  static override resultType = SVG_RESULT;\n}\n\n/**\n * Renders the result as SVG, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeSVG = directive(UnsafeSVGDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {UnsafeSVGDirective};\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { nothing, render, svg } from 'lit';\r\nimport { isTemplateResult, TemplateResultType } from 'lit/directive-helpers.js';\r\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\r\n\r\n/**\r\n * Clone given node and return its content as SVG literal.\r\n *\r\n * @param {Element} source\r\n */\r\nexport function cloneSvgNode(source) {\r\n  let result = nothing;\r\n  if (source) {\r\n    const content = source.cloneNode(true);\r\n    content.removeAttribute('id');\r\n    result = svg`${unsafeSVG(content.outerHTML)}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Test if the given argument is a valid SVG literal.\r\n *\r\n * @param {unknown} source\r\n */\r\nexport function isValidSvg(source) {\r\n  return isTemplateResult(source, TemplateResultType.SVG) || source === nothing;\r\n}\r\n\r\n/**\r\n * Create a valid SVG literal based on the argument.\r\n *\r\n * @param {unknown} svg\r\n */\r\nexport function ensureSvgLiteral(source) {\r\n  let result = source == null || source === '' ? nothing : source;\r\n\r\n  if (!isValidSvg(result)) {\r\n    console.error('[vaadin-icon] Invalid svg passed, please use Lit svg literal.');\r\n    result = nothing;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Render a given SVG literal to the container.\r\n *\r\n * @param {unknown} source\r\n * @param {SVGElement} container\r\n */\r\nexport function renderSvg(source, container) {\r\n  const result = ensureSvgLiteral(source);\r\n  render(result, container);\r\n}\r\n\r\n/**\r\n * Create an SVG literal from source string.\r\n *\r\n * @param {string} source\r\n */\r\nexport function unsafeSvgLiteral(source) {\r\n  return svg`${unsafeSVG(source)}`;\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { cloneSvgNode } from './vaadin-icon-svg.js';\r\n\r\nconst iconsetRegistry = {};\r\n\r\nconst attachedIcons = new Set();\r\n\r\nfunction getIconId(id, name) {\r\n  return (id || '').replace(`${name}:`, '');\r\n}\r\n\r\nfunction getIconsetName(icon) {\r\n  if (!icon) {\r\n    return;\r\n  }\r\n  const parts = icon.split(':');\r\n\r\n  // Use \"vaadin\" as a fallback\r\n  return parts[0] || 'vaadin';\r\n}\r\n\r\nfunction initIconsMap(iconset, name) {\r\n  iconset._icons = [...iconset.querySelectorAll('[id]')].reduce((map, svg) => {\r\n    const key = getIconId(svg.id, name);\r\n    map[key] = svg;\r\n    return map;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const IconsetMixin = (superClass) =>\r\n  class extends superClass {\r\n    static get observedAttributes() {\r\n      return ['name', 'size'];\r\n    }\r\n\r\n    /**\r\n     * Set of the `vaadin-icon` instances in the DOM.\r\n     *\r\n     * @return {Set<Icon>}\r\n     */\r\n    static get attachedIcons() {\r\n      return attachedIcons;\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of the iconset by its name.\r\n     *\r\n     * @param {string} name\r\n     * @return {Iconset}\r\n     */\r\n    static getIconset(name) {\r\n      return iconsetRegistry[name];\r\n    }\r\n\r\n    /**\r\n     * Returns SVGTemplateResult for the `icon` ID matching `name` of the\r\n     * iconset, or `nothing` literal if there is no matching icon found.\r\n     *\r\n     * @param {string} icon\r\n     * @param {?string} name\r\n     */\r\n    static getIconSvg(icon, name) {\r\n      const iconsetName = name || getIconsetName(icon);\r\n      const iconset = this.getIconset(iconsetName);\r\n      if (!icon || !iconset) {\r\n        // Missing icon, return `nothing` literal.\r\n        return {\r\n          svg: cloneSvgNode(null),\r\n        };\r\n      }\r\n      const iconId = getIconId(icon, iconsetName);\r\n      const iconSvg = iconset._icons[iconId];\r\n      return {\r\n        preserveAspectRatio: iconSvg ? iconSvg.getAttribute('preserveAspectRatio') : null,\r\n        svg: cloneSvgNode(iconSvg),\r\n        size: iconset.size,\r\n        viewBox: iconSvg ? iconSvg.getAttribute('viewBox') : null,\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Register an iconset without adding to the DOM.\r\n     *\r\n     * @param {string} name\r\n     * @param {number} size\r\n     * @param {?HTMLTemplateElement} template\r\n     */\r\n    static register(name, size, template) {\r\n      if (!iconsetRegistry[name]) {\r\n        const iconset = document.createElement('vaadin-iconset');\r\n        iconset.appendChild(template.content.cloneNode(true));\r\n        iconsetRegistry[name] = iconset;\r\n        initIconsMap(iconset, name);\r\n        iconset.size = size;\r\n        iconset.name = name;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The name of the iconset. Every iconset is required to have its own unique name.\r\n     * All the SVG icons in the iconset must have IDs conforming to its name.\r\n     *\r\n     * See also [`name`](#/elements/vaadin-icon#property-name) property of `vaadin-icon`.\r\n     *\r\n     * @return {string}\r\n     */\r\n    get name() {\r\n      return this.__name;\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    set name(name) {\r\n      const oldName = this.__name;\r\n      this.__name = name;\r\n      this.__nameChanged(name, oldName);\r\n    }\r\n\r\n    /**\r\n     * The size of an individual icon. Note that icons must be square.\r\n     *\r\n     * When using `vaadin-icon`, the size of the iconset will take precedence\r\n     * over the size defined by the user to ensure correct appearance.\r\n     *\r\n     * @return {number}\r\n     */\r\n    get size() {\r\n      // Use default property value as a fallback here instead of the constructor\r\n      // to not override an instance property in the lazy upgrade scenario below.\r\n      return this.__size !== undefined ? this.__size : 24;\r\n    }\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    set size(size) {\r\n      this.__size = size;\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      // A user may set a property on an _instance_ of an element\r\n      // before the custom element is lazily imported and upgraded.\r\n      // If so, we need to run it through the proper class setter.\r\n      ['name', 'size'].forEach((prop) => {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (this.hasOwnProperty(prop)) {\r\n          const value = this[prop];\r\n          delete this[prop];\r\n          this[prop] = value;\r\n        }\r\n      });\r\n\r\n      this.style.display = 'none';\r\n    }\r\n\r\n    /** @protected */\r\n    attributeChangedCallback(attr, _oldValue, newValue) {\r\n      if (attr === 'name') {\r\n        this.name = newValue;\r\n      } else if (attr === 'size') {\r\n        this.size = newValue == null ? null : Number(newValue);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update all the icons instances in the DOM.\r\n     *\r\n     * @param {string} name\r\n     * @private\r\n     */\r\n    __updateIcons(name) {\r\n      attachedIcons.forEach((element) => {\r\n        if (name === getIconsetName(element.icon)) {\r\n          element._applyIcon();\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __nameChanged(name, oldName) {\r\n      if (oldName) {\r\n        delete iconsetRegistry[oldName];\r\n      }\r\n      if (name) {\r\n        iconsetRegistry[name] = this;\r\n        initIconsMap(this, name);\r\n        this.__updateIcons(name);\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { IconsetMixin } from './vaadin-iconset-mixin.js';\r\n\r\n/**\r\n * `<vaadin-iconset>` is a Web Component for creating SVG icon collections.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes IconsetMixin\r\n */\r\nclass Iconset extends IconsetMixin(HTMLElement) {\r\n  static get is() {\r\n    return 'vaadin-iconset';\r\n  }\r\n}\r\n\r\ndefineCustomElement(Iconset);\r\n\r\nexport { Iconset };\r\n"],
  "mappings": "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",
  "names": ["svg"]
}

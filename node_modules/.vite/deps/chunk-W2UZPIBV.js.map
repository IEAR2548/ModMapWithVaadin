{
  "version": 3,
  "sources": ["../../@vaadin/button/src/vaadin-button-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\r\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\r\nimport { TabindexMixin } from '@vaadin/a11y-base/src/tabindex-mixin.js';\r\n\r\nconst INTERACTION_EVENTS = ['mousedown', 'mouseup', 'click', 'dblclick', 'keypress', 'keydown', 'keyup'];\r\n\r\n/**\r\n * A mixin providing common button functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes ActiveMixin\r\n * @mixes FocusMixin\r\n * @mixes TabindexMixin\r\n */\r\nexport const ButtonMixin = (superClass) =>\r\n  class ButtonMixinClass extends ActiveMixin(TabindexMixin(FocusMixin(superClass))) {\r\n    constructor() {\r\n      super();\r\n\r\n      this.__onInteractionEvent = this.__onInteractionEvent.bind(this);\r\n\r\n      INTERACTION_EVENTS.forEach((eventType) => {\r\n        this.addEventListener(eventType, this.__onInteractionEvent, true);\r\n      });\r\n\r\n      // Set tabindex to 0 by default\r\n      this.tabindex = 0;\r\n    }\r\n\r\n    /**\r\n     * By default, `Space` is the only possible activation key for a focusable HTML element.\r\n     * Nonetheless, the button is an exception as it can be also activated by pressing `Enter`.\r\n     * See the \"Keyboard Support\" section in https://www.w3.org/TR/wai-aria-practices/examples/button/button.html.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    get _activeKeys() {\r\n      return ['Enter', ' '];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      // By default, if the user hasn't provided a custom role,\r\n      // the role attribute is set to \"button\".\r\n      if (!this.hasAttribute('role')) {\r\n        this.setAttribute('role', 'button');\r\n      }\r\n\r\n      if (this.__shouldAllowFocusWhenDisabled()) {\r\n        this.style.setProperty('--_vaadin-button-disabled-pointer-events', 'auto');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Since the button component is designed on the base of the `[role=button]` attribute,\r\n     * and doesn't have a native <button> inside, in order to be fully accessible from the keyboard,\r\n     * it should manually fire the `click` event once an activation key is pressed,\r\n     * as it follows from the WAI-ARIA specifications:\r\n     * https://www.w3.org/TR/wai-aria-practices-1.1/#button\r\n     *\r\n     * According to the UI Events specifications,\r\n     * the `click` event should be fired exactly on `keydown`:\r\n     * https://www.w3.org/TR/uievents/#event-type-keydown\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(event) {\r\n      super._onKeyDown(event);\r\n\r\n      if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\r\n        return;\r\n      }\r\n\r\n      if (this._activeKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n\r\n        // `DisabledMixin` overrides the standard `click()` method\r\n        // so that it doesn't fire the `click` event when the element is disabled.\r\n        this.click();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onInteractionEvent(event) {\r\n      if (this.__shouldSuppressInteractionEvent(event)) {\r\n        event.stopImmediatePropagation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns whether to suppress interaction events like `click`, `keydown`, etc.\r\n     * By default suppresses all interaction events when the button is disabled.\r\n     *\r\n     * @private\r\n     */\r\n    __shouldSuppressInteractionEvent(_event) {\r\n      return this.disabled;\r\n    }\r\n  };\r\n"],
  "mappings": ";;;;;;;;;;;AASA,IAAM,qBAAqB,CAAC,aAAa,WAAW,SAAS,YAAY,YAAY,WAAW,OAAO;AAUhG,IAAM,cAAc,CAAC,eAC1B,MAAM,yBAAyB,YAAY,cAAc,WAAW,UAAU,CAAC,CAAC,EAAE;AAAA,EAChF,cAAc;AACZ,UAAM;AAEN,SAAK,uBAAuB,KAAK,qBAAqB,KAAK,IAAI;AAE/D,uBAAmB,QAAQ,CAAC,cAAc;AACxC,WAAK,iBAAiB,WAAW,KAAK,sBAAsB,IAAI;AAAA,IAClE,CAAC;AAGD,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,cAAc;AAChB,WAAO,CAAC,SAAS,GAAG;AAAA,EACtB;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAIZ,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC9B,WAAK,aAAa,QAAQ,QAAQ;AAAA,IACpC;AAEA,QAAI,KAAK,+BAA+B,GAAG;AACzC,WAAK,MAAM,YAAY,4CAA4C,MAAM;AAAA,IAC3E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,WAAW,OAAO;AAChB,UAAM,WAAW,KAAK;AAEtB,QAAI,MAAM,UAAU,MAAM,YAAY,MAAM,WAAW,MAAM,SAAS;AACpE;AAAA,IACF;AAEA,QAAI,KAAK,YAAY,SAAS,MAAM,GAAG,GAAG;AACxC,YAAM,eAAe;AAIrB,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AAAA;AAAA,EAGA,qBAAqB,OAAO;AAC1B,QAAI,KAAK,iCAAiC,KAAK,GAAG;AAChD,YAAM,yBAAyB;AAAA,IACjC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iCAAiC,QAAQ;AACvC,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/a11y-base/src/focus-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\nimport { isKeyboardActive } from './focus-utils.js';\r\n\r\n/**\r\n * A mixin to handle `focused` and `focus-ring` attributes based on focus.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const FocusMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class FocusMixinClass extends superclass {\r\n      /**\r\n       * @protected\r\n       * @return {boolean}\r\n       */\r\n      get _keyboardActive() {\r\n        return isKeyboardActive();\r\n      }\r\n\r\n      /** @protected */\r\n      ready() {\r\n        this.addEventListener('focusin', (e) => {\r\n          if (this._shouldSetFocus(e)) {\r\n            this._setFocused(true);\r\n          }\r\n        });\r\n\r\n        this.addEventListener('focusout', (e) => {\r\n          if (this._shouldRemoveFocus(e)) {\r\n            this._setFocused(false);\r\n          }\r\n        });\r\n\r\n        // In super.ready() other 'focusin' and 'focusout' listeners might be\r\n        // added, so we call it after our own ones to ensure they execute first.\r\n        // Issue to watch out: when incorrect, <vaadin-combo-box> refocuses the\r\n        // input field on iOS after \"Done\" is pressed.\r\n        super.ready();\r\n      }\r\n\r\n      /** @protected */\r\n      disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n\r\n        // In non-Chrome browsers, blur does not fire on the element when it is disconnected.\r\n        // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\r\n        if (this.hasAttribute('focused')) {\r\n          this._setFocused(false);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Override to change how focused and focus-ring attributes are set.\r\n       *\r\n       * @param {boolean} focused\r\n       * @protected\r\n       */\r\n      _setFocused(focused) {\r\n        this.toggleAttribute('focused', focused);\r\n\r\n        // Focus-ring is true when the element was focused from the keyboard.\r\n        // Focus Ring [A11ycasts]: https://youtu.be/ilj2P5-5CjI\r\n        this.toggleAttribute('focus-ring', focused && this._keyboardActive);\r\n      }\r\n\r\n      /**\r\n       * Override to define if the field receives focus based on the event.\r\n       *\r\n       * @param {FocusEvent} _event\r\n       * @return {boolean}\r\n       * @protected\r\n       */\r\n      _shouldSetFocus(_event) {\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * Override to define if the field loses focus based on the event.\r\n       *\r\n       * @param {FocusEvent} _event\r\n       * @return {boolean}\r\n       * @protected\r\n       */\r\n      _shouldRemoveFocus(_event) {\r\n        return true;\r\n      }\r\n    },\r\n);\r\n"],
  "mappings": ";;;;;;;;AAaO,IAAM,aAAa;AAAA,EACxB,CAAC,eACC,MAAM,wBAAwB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,IAKvC,IAAI,kBAAkB;AACpB,aAAO,iBAAiB;AAAA,IAC1B;AAAA;AAAA,IAGA,QAAQ;AACN,WAAK,iBAAiB,WAAW,CAAC,MAAM;AACtC,YAAI,KAAK,gBAAgB,CAAC,GAAG;AAC3B,eAAK,YAAY,IAAI;AAAA,QACvB;AAAA,MACF,CAAC;AAED,WAAK,iBAAiB,YAAY,CAAC,MAAM;AACvC,YAAI,KAAK,mBAAmB,CAAC,GAAG;AAC9B,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF,CAAC;AAMD,YAAM,MAAM;AAAA,IACd;AAAA;AAAA,IAGA,uBAAuB;AACrB,YAAM,qBAAqB;AAI3B,UAAI,KAAK,aAAa,SAAS,GAAG;AAChC,aAAK,YAAY,KAAK;AAAA,MACxB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,YAAY,SAAS;AACnB,WAAK,gBAAgB,WAAW,OAAO;AAIvC,WAAK,gBAAgB,cAAc,WAAW,KAAK,eAAe;AAAA,IACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,gBAAgB,QAAQ;AACtB,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,mBAAmB,QAAQ;AACzB,aAAO;AAAA,IACT;AAAA,EACF;AACJ;",
  "names": []
}

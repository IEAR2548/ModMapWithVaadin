{
  "version": 3,
  "sources": ["../../@vaadin/details/theme/lumo/vaadin-details-styles.js", "../../@vaadin/details/theme/lumo/vaadin-details-summary-styles.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/dom-utils.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-observer.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/unique-id-utils.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-controller.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-child-observe-controller.js", "../../@vaadin/details/src/content-controller.js", "../../@vaadin/details/src/collapsible-mixin.js", "../../@vaadin/details/src/summary-controller.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst details = css`\r\n  :host {\r\n    margin: var(--lumo-space-xs) 0;\r\n    outline: none;\r\n    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));\r\n    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);\r\n  }\r\n\r\n  :host([focus-ring]) ::slotted([slot='summary']) {\r\n    box-shadow: 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);\r\n  }\r\n\r\n  [part='content'] {\r\n    padding: var(--lumo-space-xs) 0 var(--lumo-space-s);\r\n    font-size: var(--lumo-font-size-m);\r\n    line-height: var(--lumo-line-height-m);\r\n  }\r\n\r\n  :host([theme~='filled']) {\r\n    background-color: var(--lumo-contrast-5pct);\r\n    border-radius: var(--lumo-border-radius-m);\r\n  }\r\n\r\n  :host([theme~='filled']) [part='content'] {\r\n    padding-left: var(--lumo-space-m);\r\n    padding-right: var(--lumo-space-m);\r\n  }\r\n\r\n  :host([theme~='small']) [part$='content'] {\r\n    font-size: var(--lumo-font-size-s);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-details', details, { moduleId: 'lumo-details' });\r\n\r\nexport { details };\r\n", "import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst detailsSummary = css`\r\n  :host {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    outline: none;\r\n    padding: var(--lumo-space-s) 0;\r\n    box-sizing: border-box;\r\n    font-family: var(--lumo-font-family);\r\n    font-size: var(--lumo-font-size-m);\r\n    font-weight: 500;\r\n    line-height: var(--lumo-line-height-xs);\r\n    color: var(--lumo-secondary-text-color);\r\n    background-color: inherit;\r\n    border-radius: var(--lumo-border-radius-m);\r\n    cursor: var(--lumo-clickable-cursor);\r\n    -webkit-tap-highlight-color: transparent;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  :host([disabled]),\r\n  :host([disabled]) [part='toggle'] {\r\n    color: var(--lumo-disabled-text-color);\r\n    cursor: default;\r\n  }\r\n\r\n  @media (hover: hover) {\r\n    :host(:hover:not([disabled])),\r\n    :host(:hover:not([disabled])) [part='toggle'] {\r\n      color: var(--lumo-contrast-80pct);\r\n    }\r\n  }\r\n\r\n  [part='toggle'] {\r\n    display: block;\r\n    width: 1em;\r\n    height: 1em;\r\n    margin-left: calc(var(--lumo-space-xs) * -1);\r\n    margin-right: var(--lumo-space-xs);\r\n    font-size: var(--lumo-icon-size-s);\r\n    line-height: 1;\r\n    color: var(--lumo-contrast-60pct);\r\n    font-family: 'lumo-icons';\r\n    cursor: var(--lumo-clickable-cursor);\r\n  }\r\n\r\n  [part='toggle']::before {\r\n    content: var(--lumo-icons-angle-right);\r\n  }\r\n\r\n  :host([opened]) [part='toggle'] {\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  [part='content'] {\r\n    flex-grow: 1;\r\n  }\r\n\r\n  /* RTL styles */\r\n  :host([dir='rtl']) [part='toggle'] {\r\n    margin-left: var(--lumo-space-xs);\r\n    margin-right: calc(var(--lumo-space-xs) * -1);\r\n  }\r\n\r\n  :host([dir='rtl']) [part='toggle']::before {\r\n    content: var(--lumo-icons-angle-left);\r\n  }\r\n\r\n  :host([opened][dir='rtl']) [part='toggle'] {\r\n    transform: rotate(-90deg);\r\n  }\r\n\r\n  /* Small */\r\n  :host([theme~='small']) {\r\n    padding-top: var(--lumo-space-xs);\r\n    padding-bottom: var(--lumo-space-xs);\r\n  }\r\n\r\n  :host([theme~='small']) [part='toggle'] {\r\n    margin-right: calc(var(--lumo-space-xs) / 2);\r\n  }\r\n\r\n  :host([theme~='small'][dir='rtl']) [part='toggle'] {\r\n    margin-left: calc(var(--lumo-space-xs) / 2);\r\n  }\r\n\r\n  /* Filled */\r\n  :host([theme~='filled']) {\r\n    padding: var(--lumo-space-s) calc(var(--lumo-space-s) + var(--lumo-space-xs) / 2);\r\n  }\r\n\r\n  /* Reverse */\r\n  :host([theme~='reverse']) {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  :host([theme~='reverse']) [part='toggle'] {\r\n    order: 1;\r\n    margin-right: 0;\r\n  }\r\n\r\n  :host([theme~='reverse'][dir='rtl']) [part='toggle'] {\r\n    margin-left: 0;\r\n  }\r\n\r\n  /* Filled reverse */\r\n  :host([theme~='reverse'][theme~='filled']) {\r\n    padding-left: var(--lumo-space-m);\r\n  }\r\n\r\n  :host([theme~='reverse'][theme~='filled'][dir='rtl']) {\r\n    padding-right: var(--lumo-space-m);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-details-summary', detailsSummary, { moduleId: 'lumo-details-summary' });\r\n\r\nexport { detailsSummary };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * Returns an array of ancestor root nodes for the given node.\r\n *\r\n * A root node is either a document node or a document fragment node (Shadow Root).\r\n * The array is collected by a bottom-up DOM traversing that starts with the given node\r\n * and involves both the light DOM and ancestor shadow DOM trees.\r\n *\r\n * @param {Node} node\r\n * @return {Node[]}\r\n */\r\nexport function getAncestorRootNodes(node) {\r\n  const result = [];\r\n\r\n  while (node) {\r\n    if (node.nodeType === Node.DOCUMENT_NODE) {\r\n      result.push(node);\r\n      break;\r\n    }\r\n\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      result.push(node);\r\n      node = node.host;\r\n      continue;\r\n    }\r\n\r\n    if (node.assignedSlot) {\r\n      node = node.assignedSlot;\r\n      continue;\r\n    }\r\n\r\n    node = node.parentNode;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the list of flattened elements for the given `node`.\r\n * This list consists of a node's children and, for any children that are\r\n * `<slot>` elements, the expanded flattened list of `assignedElements`.\r\n *\r\n * @param {Node} node\r\n * @return {Element[]}\r\n */\r\nexport function getFlattenedElements(node) {\r\n  const result = [];\r\n  let elements;\r\n  if (node.localName === 'slot') {\r\n    elements = node.assignedElements();\r\n  } else {\r\n    result.push(node);\r\n    elements = [...node.children];\r\n  }\r\n  elements.forEach((elem) => result.push(...getFlattenedElements(elem)));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Traverses the given node and its parents, including those that are across\r\n * the shadow root boundaries, until it finds a node that matches the selector.\r\n *\r\n * @param {string} selector The CSS selector to match against\r\n * @param {Node} node The starting node for the traversal\r\n * @return {Node | null} The closest matching element, or null if no match is found\r\n */\r\nexport function getClosestElement(selector, node) {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n\r\n  return node.closest(selector) || getClosestElement(selector, node.getRootNode().host);\r\n}\r\n\r\n/**\r\n * Takes a string with values separated by space and returns a set the values\r\n *\r\n * @param {string} value\r\n * @return {Set<string>}\r\n */\r\nexport function deserializeAttributeValue(value) {\r\n  if (!value) {\r\n    return new Set();\r\n  }\r\n\r\n  return new Set(value.split(' '));\r\n}\r\n\r\n/**\r\n * Takes a set of string values and returns a string with values separated by space\r\n *\r\n * @param {Set<string>} values\r\n * @return {string}\r\n */\r\nexport function serializeAttributeValue(values) {\r\n  return values ? [...values].join(' ') : '';\r\n}\r\n\r\n/**\r\n * Adds a value to an attribute containing space-delimited values.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {string} attr\r\n * @param {string} value\r\n */\r\nexport function addValueToAttribute(element, attr, value) {\r\n  const values = deserializeAttributeValue(element.getAttribute(attr));\r\n  values.add(value);\r\n  element.setAttribute(attr, serializeAttributeValue(values));\r\n}\r\n\r\n/**\r\n * Removes a value from an attribute containing space-delimited values.\r\n * If the value is the last one, the whole attribute is removed.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {string} attr\r\n * @param {string} value\r\n */\r\nexport function removeValueFromAttribute(element, attr, value) {\r\n  const values = deserializeAttributeValue(element.getAttribute(attr));\r\n  values.delete(value);\r\n  if (values.size === 0) {\r\n    element.removeAttribute(attr);\r\n    return;\r\n  }\r\n  element.setAttribute(attr, serializeAttributeValue(values));\r\n}\r\n\r\n/**\r\n * Returns true if the given node is an empty text node, false otherwise.\r\n *\r\n * @param {Node} node\r\n * @return {boolean}\r\n */\r\nexport function isEmptyTextNode(node) {\r\n  return node.nodeType === Node.TEXT_NODE && node.textContent.trim() === '';\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2023 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * A helper for observing slot changes.\r\n */\r\nexport class SlotObserver {\r\n  constructor(slot, callback) {\r\n    /** @type HTMLSlotElement */\r\n    this.slot = slot;\r\n\r\n    /** @type Function */\r\n    this.callback = callback;\r\n\r\n    /** @type {Node[]} */\r\n    this._storedNodes = [];\r\n\r\n    this._connected = false;\r\n    this._scheduled = false;\r\n\r\n    this._boundSchedule = () => {\r\n      this._schedule();\r\n    };\r\n\r\n    this.connect();\r\n    this._schedule();\r\n  }\r\n\r\n  /**\r\n   * Activates an observer. This method is automatically called when\r\n   * a `SlotObserver` is created. It should only be called to  re-activate\r\n   * an observer that has been deactivated via the `disconnect` method.\r\n   */\r\n  connect() {\r\n    this.slot.addEventListener('slotchange', this._boundSchedule);\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Deactivates the observer. After calling this method the observer callback\r\n   * will not be called when changes to slotted nodes occur. The `connect` method\r\n   * may be subsequently called to reactivate the observer.\r\n   */\r\n  disconnect() {\r\n    this.slot.removeEventListener('slotchange', this._boundSchedule);\r\n    this._connected = false;\r\n  }\r\n\r\n  /** @private */\r\n  _schedule() {\r\n    if (!this._scheduled) {\r\n      this._scheduled = true;\r\n\r\n      queueMicrotask(() => {\r\n        this.flush();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run the observer callback synchronously.\r\n   */\r\n  flush() {\r\n    if (!this._connected) {\r\n      return;\r\n    }\r\n\r\n    this._scheduled = false;\r\n\r\n    this._processNodes();\r\n  }\r\n\r\n  /** @private */\r\n  _processNodes() {\r\n    const currentNodes = this.slot.assignedNodes({ flatten: true });\r\n\r\n    let addedNodes = [];\r\n    const removedNodes = [];\r\n    const movedNodes = [];\r\n\r\n    if (currentNodes.length) {\r\n      addedNodes = currentNodes.filter((node) => !this._storedNodes.includes(node));\r\n    }\r\n\r\n    if (this._storedNodes.length) {\r\n      this._storedNodes.forEach((node, index) => {\r\n        const idx = currentNodes.indexOf(node);\r\n        if (idx === -1) {\r\n          removedNodes.push(node);\r\n        } else if (idx !== index) {\r\n          movedNodes.push(node);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (addedNodes.length || removedNodes.length || movedNodes.length) {\r\n      this.callback({ addedNodes, currentNodes, movedNodes, removedNodes });\r\n    }\r\n\r\n    this._storedNodes = currentNodes;\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Resets the unique id counter.\r\n *\r\n * @return {void}\r\n */\r\nexport function resetUniqueId() {\r\n  uniqueId = 0;\r\n}\r\n\r\n/**\r\n * Returns a unique integer id.\r\n *\r\n * @return {number}\r\n */\r\nexport function generateUniqueId() {\r\n  // eslint-disable-next-line no-plusplus\r\n  return uniqueId++;\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isEmptyTextNode } from './dom-utils.js';\r\nimport { SlotObserver } from './slot-observer.js';\r\nimport { generateUniqueId } from './unique-id-utils.js';\r\n\r\n/**\r\n * A controller for providing content to slot element and observing changes.\r\n */\r\nexport class SlotController extends EventTarget {\r\n  /**\r\n   * Ensure that every instance has unique ID.\r\n   *\r\n   * @param {HTMLElement} host\r\n   * @param {string} slotName\r\n   * @return {string}\r\n   * @protected\r\n   */\r\n  static generateId(host, prefix = 'default') {\r\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\r\n  }\r\n\r\n  constructor(host, slotName, tagName, config = {}) {\r\n    super();\r\n\r\n    const { initializer, multiple, observe, useUniqueId, uniqueIdPrefix } = config;\r\n\r\n    this.host = host;\r\n    this.slotName = slotName;\r\n    this.tagName = tagName;\r\n    this.observe = typeof observe === 'boolean' ? observe : true;\r\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\r\n    this.slotInitializer = initializer;\r\n\r\n    if (multiple) {\r\n      this.nodes = [];\r\n    }\r\n\r\n    // Only generate the default ID if requested by the controller.\r\n    if (useUniqueId) {\r\n      this.defaultId = this.constructor.generateId(host, uniqueIdPrefix || slotName);\r\n    }\r\n  }\r\n\r\n  hostConnected() {\r\n    if (!this.initialized) {\r\n      if (this.multiple) {\r\n        this.initMultiple();\r\n      } else {\r\n        this.initSingle();\r\n      }\r\n\r\n      if (this.observe) {\r\n        this.observeSlot();\r\n      }\r\n\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /** @protected */\r\n  initSingle() {\r\n    let node = this.getSlotChild();\r\n\r\n    if (!node) {\r\n      node = this.attachDefaultNode();\r\n      this.initNode(node);\r\n    } else {\r\n      this.node = node;\r\n      this.initAddedNode(node);\r\n    }\r\n  }\r\n\r\n  /** @protected */\r\n  initMultiple() {\r\n    const children = this.getSlotChildren();\r\n\r\n    if (children.length === 0) {\r\n      const defaultNode = this.attachDefaultNode();\r\n      if (defaultNode) {\r\n        this.nodes = [defaultNode];\r\n        this.initNode(defaultNode);\r\n      }\r\n    } else {\r\n      this.nodes = children;\r\n      children.forEach((node) => {\r\n        this.initAddedNode(node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and attach default node using the provided tag name, if any.\r\n   * @return {Node | undefined}\r\n   * @protected\r\n   */\r\n  attachDefaultNode() {\r\n    const { host, slotName, tagName } = this;\r\n\r\n    // Check if the node was created previously and if so, reuse it.\r\n    let node = this.defaultNode;\r\n\r\n    // Tag name is optional, sometimes we don't init default content.\r\n    if (!node && tagName) {\r\n      node = document.createElement(tagName);\r\n      if (node instanceof Element) {\r\n        if (slotName !== '') {\r\n          node.setAttribute('slot', slotName);\r\n        }\r\n        this.defaultNode = node;\r\n      }\r\n    }\r\n\r\n    if (node) {\r\n      this.node = node;\r\n      host.appendChild(node);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Return the list of nodes matching the slot managed by the controller.\r\n   * @return {Node}\r\n   */\r\n  getSlotChildren() {\r\n    const { slotName } = this;\r\n    return Array.from(this.host.childNodes).filter((node) => {\r\n      // Either an element (any slot) or a text node (only un-named slot).\r\n      return (\r\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\r\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return a reference to the node managed by the controller.\r\n   * @return {Node}\r\n   */\r\n  getSlotChild() {\r\n    return this.getSlotChildren()[0];\r\n  }\r\n\r\n  /**\r\n   * Run `slotInitializer` for the node managed by the controller.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  initNode(node) {\r\n    const { slotInitializer } = this;\r\n    // Don't try to bind `this` to initializer (normally it's arrow function).\r\n    // Instead, pass the host as a first argument to access component's state.\r\n    if (slotInitializer) {\r\n      slotInitializer(node, this.host);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom node.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   */\r\n  initCustomNode(_node) {}\r\n\r\n  /**\r\n   * Override to teardown slotted node when it's removed.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   */\r\n  teardownNode(_node) {}\r\n\r\n  /**\r\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  initAddedNode(node) {\r\n    if (node !== this.defaultNode) {\r\n      this.initCustomNode(node);\r\n      this.initNode(node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the observer to manage slot content changes.\r\n   * @protected\r\n   */\r\n  observeSlot() {\r\n    const { slotName } = this;\r\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\r\n    const slot = this.host.shadowRoot.querySelector(selector);\r\n\r\n    this.__slotObserver = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\r\n      const current = this.multiple ? this.nodes : [this.node];\r\n\r\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\r\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\r\n      const newNodes = addedNodes.filter((node) => !isEmptyTextNode(node) && !current.includes(node));\r\n\r\n      if (removedNodes.length) {\r\n        this.nodes = current.filter((node) => !removedNodes.includes(node));\r\n\r\n        removedNodes.forEach((node) => {\r\n          this.teardownNode(node);\r\n        });\r\n      }\r\n\r\n      if (newNodes && newNodes.length > 0) {\r\n        if (this.multiple) {\r\n          // Remove default node if exists\r\n          if (this.defaultNode) {\r\n            this.defaultNode.remove();\r\n          }\r\n          this.nodes = [...current, ...newNodes].filter((node) => node !== this.defaultNode);\r\n          newNodes.forEach((node) => {\r\n            this.initAddedNode(node);\r\n          });\r\n        } else {\r\n          // Remove previous node if exists\r\n          if (this.node) {\r\n            this.node.remove();\r\n          }\r\n          this.node = newNodes[0];\r\n          this.initAddedNode(this.node);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotController } from './slot-controller.js';\r\n\r\n/**\r\n * A controller that observes slotted element mutations, especially ID attribute\r\n * and the text content, and fires an event to notify host element about those.\r\n */\r\nexport class SlotChildObserveController extends SlotController {\r\n  constructor(host, slot, tagName, config = {}) {\r\n    super(host, slot, tagName, { ...config, useUniqueId: true });\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(node) {\r\n    this.__updateNodeId(node);\r\n    this.__notifyChange(node);\r\n  }\r\n\r\n  /**\r\n   * Override to notify the controller host about removal of\r\n   * the custom node, and to apply the default one if needed.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   * @override\r\n   */\r\n  teardownNode(_node) {\r\n    const node = this.getSlotChild();\r\n\r\n    // Custom node is added to the slot\r\n    if (node && node !== this.defaultNode) {\r\n      this.__notifyChange(node);\r\n    } else {\r\n      this.restoreDefaultNode();\r\n      this.updateDefaultNode(this.node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotMixin`\r\n   * to set ID attribute on the default node.\r\n   *\r\n   * @return {Node}\r\n   * @protected\r\n   * @override\r\n   */\r\n  attachDefaultNode() {\r\n    const node = super.attachDefaultNode();\r\n\r\n    if (node) {\r\n      this.__updateNodeId(node);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Override to restore default node when a custom one is removed.\r\n   *\r\n   * @protected\r\n   */\r\n  restoreDefaultNode() {\r\n    // To be implemented\r\n  }\r\n\r\n  /**\r\n   * Override to update default node text on property change.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  updateDefaultNode(node) {\r\n    this.__notifyChange(node);\r\n  }\r\n\r\n  /**\r\n   * Setup the mutation observer on the node to update ID and notify host.\r\n   * Node doesn't get observed automatically until this method is called.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  observeNode(node) {\r\n    // Stop observing the previous node, if any.\r\n    if (this.__nodeObserver) {\r\n      this.__nodeObserver.disconnect();\r\n    }\r\n\r\n    this.__nodeObserver = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        const target = mutation.target;\r\n\r\n        // Ensure the mutation target is the currently connected node\r\n        // to ignore async mutations dispatched for removed element.\r\n        const isCurrentNodeMutation = target === this.node;\r\n\r\n        if (mutation.type === 'attributes') {\r\n          // We use attributeFilter to only observe ID mutation,\r\n          // no need to check for attribute name separately.\r\n          if (isCurrentNodeMutation) {\r\n            this.__updateNodeId(target);\r\n          }\r\n        } else if (isCurrentNodeMutation || target.parentElement === this.node) {\r\n          // Node text content has changed.\r\n          this.__notifyChange(this.node);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Observe changes to node ID attribute, text content and children.\r\n    this.__nodeObserver.observe(node, {\r\n      attributes: true,\r\n      attributeFilter: ['id'],\r\n      childList: true,\r\n      subtree: true,\r\n      characterData: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if a node is an HTML element with children,\r\n   * or is a defined custom element, or has non-empty text.\r\n   *\r\n   * @param {Node} node\r\n   * @return {boolean}\r\n   * @private\r\n   */\r\n  __hasContent(node) {\r\n    if (!node) {\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      (node.nodeType === Node.ELEMENT_NODE && (customElements.get(node.localName) || node.children.length > 0)) ||\r\n      (node.textContent && node.textContent.trim() !== '')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fire an event to notify the controller host about node changes.\r\n   *\r\n   * @param {Node} node\r\n   * @private\r\n   */\r\n  __notifyChange(node) {\r\n    this.dispatchEvent(\r\n      new CustomEvent('slot-content-changed', {\r\n        detail: { hasContent: this.__hasContent(node), node },\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set default ID on the node in case it is an HTML element.\r\n   *\r\n   * @param {Node} node\r\n   * @private\r\n   */\r\n  __updateNodeId(node) {\r\n    // When in multiple mode, only set ID attribute on the element in default slot.\r\n    const isFirstNode = !this.nodes || node === this.nodes[0];\r\n    if (node.nodeType === Node.ELEMENT_NODE && (!this.multiple || isFirstNode) && !node.id) {\r\n      node.id = this.defaultId;\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\r\n\r\n/**\r\n * A controller to manage the default content slot.\r\n */\r\nexport class ContentController extends SlotChildObserveController {\r\n  /**\r\n   * Override method from `SlotController` to change\r\n   * the ID prefix for the default slot content.\r\n   *\r\n   * @param {HTMLElement} host\r\n   * @return {string}\r\n   * @protected\r\n   * @override\r\n   */\r\n  static generateId(host) {\r\n    return super.generateId(host, 'content');\r\n  }\r\n\r\n  constructor(host) {\r\n    super(host, '', null, { multiple: true });\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ContentController } from './content-controller.js';\r\n\r\n/**\r\n * A mixin providing common functionality for making content collapsible,\r\n * used by `<vaadin-details>` and `<vaadin-accordion-panel>` elements.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const CollapsibleMixin = (superClass) =>\r\n  class CollapsibleMixinClass extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * If true, the collapsible content is visible.\r\n         * @type {boolean}\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          notify: true,\r\n        },\r\n\r\n        /**\r\n         * List of elements assigned to the default `<slot>`\r\n         * that represent the collapsible content.\r\n         *\r\n         * @protected\r\n         */\r\n        _contentElements: {\r\n          type: Array,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_openedOrContentChanged(opened, _contentElements)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this._contentController = new ContentController(this);\r\n\r\n      this._contentController.addEventListener('slot-content-changed', (event) => {\r\n        const content = event.target.nodes || [];\r\n\r\n        // Exclude nodes that are no longer connected\r\n        this._contentElements = content.filter((node) => node.parentNode === this);\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(this._contentController);\r\n\r\n      // Only handle click and not keydown, because `vaadin-details-summary` uses `ButtonMixin`\r\n      // that already covers this logic, and `vaadin-accordion-heading` uses native `<button>`.\r\n      this.addEventListener('click', ({ target }) => {\r\n        if (this.disabled) {\r\n          return;\r\n        }\r\n\r\n        // Do not change opened on link click\r\n        if (target.localName === 'a') {\r\n          return;\r\n        }\r\n\r\n        const summary = this.focusElement;\r\n\r\n        if (summary && (target === summary || summary.contains(target))) {\r\n          this.opened = !this.opened;\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _openedOrContentChanged(opened, elements) {\r\n      if (elements) {\r\n        elements.forEach((el) => {\r\n          el.setAttribute('aria-hidden', opened ? 'false' : 'true');\r\n        });\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\r\n\r\n/**\r\n * A controller to manage the summary element.\r\n */\r\nexport class SummaryController extends SlotChildObserveController {\r\n  constructor(host, tagName) {\r\n    super(host, 'summary', tagName);\r\n  }\r\n\r\n  /**\r\n   * Set summary based on corresponding host property.\r\n   *\r\n   * @param {string} summary\r\n   */\r\n  setSummary(summary) {\r\n    this.summary = summary;\r\n\r\n    // Restore the default summary, if needed.\r\n    const summaryNode = this.getSlotChild();\r\n    if (!summaryNode) {\r\n      this.restoreDefaultNode();\r\n    }\r\n\r\n    // When default summary is used, update it.\r\n    if (this.node === this.defaultNode) {\r\n      this.updateDefaultNode(this.node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to restore and observe the default summary element.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  restoreDefaultNode() {\r\n    const { summary } = this;\r\n\r\n    // Restore the default summary.\r\n    if (summary && summary.trim() !== '') {\r\n      this.attachDefaultNode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to update the default summary element text content.\r\n   *\r\n   * @param {Node | undefined} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  updateDefaultNode(node) {\r\n    if (node) {\r\n      node.textContent = this.summary;\r\n    }\r\n\r\n    // Notify the host after update.\r\n    super.updateDefaultNode(node);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

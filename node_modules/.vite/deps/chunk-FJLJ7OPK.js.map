{
  "version": 3,
  "sources": ["../../ol/src/events/Event.js", "../../ol/src/ObjectEventType.js", "../../ol/src/array.js", "../../ol/src/functions.js", "../../ol/src/events/EventType.js", "../../ol/src/events.js", "../../ol/src/Disposable.js", "../../ol/src/events/Target.js", "../../ol/src/Observable.js", "../../ol/src/Object.js"],
  "sourcesContent": ["/**\r\n * @module ol/events/Event\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\r\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\r\n *\r\n * This implementation only provides `type` and `target` properties, and\r\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\r\n * for higher level events defined in the library, and works with\r\n * {@link module:ol/events/Target~Target}.\r\n */\r\nclass BaseEvent {\r\n  /**\r\n   * @param {string} type Type.\r\n   */\r\n  constructor(type) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.propagationStopped;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.defaultPrevented;\r\n\r\n    /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.type = type;\r\n\r\n    /**\r\n     * The event target.\r\n     * @type {Object}\r\n     * @api\r\n     */\r\n    this.target = null;\r\n  }\r\n\r\n  /**\r\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\r\n   * will be fired.\r\n   * @api\r\n   */\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n\r\n  /**\r\n   * Stop event propagation.\r\n   * @api\r\n   */\r\n  stopPropagation() {\r\n    this.propagationStopped = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function stopPropagation(evt) {\r\n  evt.stopPropagation();\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function preventDefault(evt) {\r\n  evt.preventDefault();\r\n}\r\n\r\nexport default BaseEvent;\r\n", "/**\r\n * @module ol/ObjectEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a property is changed.\r\n   * @event module:ol/Object.ObjectEvent#propertychange\r\n   * @api\r\n   */\r\n  PROPERTYCHANGE: 'propertychange',\r\n};\r\n\r\n/**\r\n * @typedef {'propertychange'} Types\r\n */\r\n", "/**\r\n * @module ol/array\r\n */\r\n\r\n/**\r\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\r\n * https://github.com/darkskyapp/binary-search\r\n *\r\n * @param {Array<*>} haystack Items to search through.\r\n * @param {*} needle The item to look for.\r\n * @param {Function} [opt_comparator] Comparator function.\r\n * @return {number} The index of the item if found, -1 if not.\r\n */\r\nexport function binarySearch(haystack, needle, opt_comparator) {\r\n  let mid, cmp;\r\n  const comparator = opt_comparator || numberSafeCompareFunction;\r\n  let low = 0;\r\n  let high = haystack.length;\r\n  let found = false;\r\n\r\n  while (low < high) {\r\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\r\n     * to double (which gives the wrong results). */\r\n    mid = low + ((high - low) >> 1);\r\n    cmp = +comparator(haystack[mid], needle);\r\n\r\n    if (cmp < 0.0) {\r\n      /* Too low. */\r\n      low = mid + 1;\r\n    } else {\r\n      /* Key found or too high */\r\n      high = mid;\r\n      found = !cmp;\r\n    }\r\n  }\r\n\r\n  /* Key not found. */\r\n  return found ? low : ~low;\r\n}\r\n\r\n/**\r\n * Compare function for array sort that is safe for numbers.\r\n * @param {*} a The first object to be compared.\r\n * @param {*} b The second object to be compared.\r\n * @return {number} A negative number, zero, or a positive number as the first\r\n *     argument is less than, equal to, or greater than the second.\r\n */\r\nexport function numberSafeCompareFunction(a, b) {\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * Whether the array contains the given object.\r\n * @param {Array<*>} arr The array to test for the presence of the element.\r\n * @param {*} obj The object for which to test.\r\n * @return {boolean} The object is in the array.\r\n */\r\nexport function includes(arr, obj) {\r\n  return arr.indexOf(obj) >= 0;\r\n}\r\n\r\n/**\r\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\r\n * of this type to determine which nearest resolution to use.\r\n *\r\n * This function takes a `{number}` representing a value between two array entries,\r\n * a `{number}` representing the value of the nearest higher entry and\r\n * a `{number}` representing the value of the nearest lower entry\r\n * as arguments and returns a `{number}`. If a negative number or zero is returned\r\n * the lower value will be used, if a positive number is returned the higher value\r\n * will be used.\r\n * @typedef {function(number, number, number): number} NearestDirectionFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {Array<number>} arr Array in descending order.\r\n * @param {number} target Target.\r\n * @param {number|NearestDirectionFunction} direction\r\n *    0 means return the nearest,\r\n *    > 0 means return the largest nearest,\r\n *    < 0 means return the smallest nearest.\r\n * @return {number} Index.\r\n */\r\nexport function linearFindNearest(arr, target, direction) {\r\n  const n = arr.length;\r\n  if (arr[0] <= target) {\r\n    return 0;\r\n  } else if (target <= arr[n - 1]) {\r\n    return n - 1;\r\n  } else {\r\n    let i;\r\n    if (direction > 0) {\r\n      for (i = 1; i < n; ++i) {\r\n        if (arr[i] < target) {\r\n          return i - 1;\r\n        }\r\n      }\r\n    } else if (direction < 0) {\r\n      for (i = 1; i < n; ++i) {\r\n        if (arr[i] <= target) {\r\n          return i;\r\n        }\r\n      }\r\n    } else {\r\n      for (i = 1; i < n; ++i) {\r\n        if (arr[i] == target) {\r\n          return i;\r\n        } else if (arr[i] < target) {\r\n          if (typeof direction === 'function') {\r\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\r\n              return i - 1;\r\n            } else {\r\n              return i;\r\n            }\r\n          } else if (arr[i - 1] - target < target - arr[i]) {\r\n            return i - 1;\r\n          } else {\r\n            return i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr Array.\r\n * @param {number} begin Begin index.\r\n * @param {number} end End index.\r\n */\r\nexport function reverseSubArray(arr, begin, end) {\r\n  while (begin < end) {\r\n    const tmp = arr[begin];\r\n    arr[begin] = arr[end];\r\n    arr[end] = tmp;\r\n    ++begin;\r\n    --end;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\r\n * @template VALUE\r\n */\r\nexport function extend(arr, data) {\r\n  const extension = Array.isArray(data) ? data : [data];\r\n  const length = extension.length;\r\n  for (let i = 0; i < length; i++) {\r\n    arr[arr.length] = extension[i];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {VALUE} obj The element to remove.\r\n * @template VALUE\r\n * @return {boolean} If the element was removed.\r\n */\r\nexport function remove(arr, obj) {\r\n  const i = arr.indexOf(obj);\r\n  const found = i > -1;\r\n  if (found) {\r\n    arr.splice(i, 1);\r\n  }\r\n  return found;\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to search in.\r\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\r\n * @template VALUE\r\n * @return {VALUE|null} The element found or null.\r\n */\r\nexport function find(arr, func) {\r\n  const length = arr.length >>> 0;\r\n  let value;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    value = arr[i];\r\n    if (func(value, i, arr)) {\r\n      return value;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\r\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\r\n * @return {boolean} Whether the two arrays are equal.\r\n */\r\nexport function equals(arr1, arr2) {\r\n  const len1 = arr1.length;\r\n  if (len1 !== arr2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < len1; i++) {\r\n    if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Sort the passed array such that the relative order of equal elements is preserved.\r\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\r\n * @param {Array<*>} arr The array to sort (modifies original).\r\n * @param {!function(*, *): number} compareFnc Comparison function.\r\n * @api\r\n */\r\nexport function stableSort(arr, compareFnc) {\r\n  const length = arr.length;\r\n  const tmp = Array(arr.length);\r\n  let i;\r\n  for (i = 0; i < length; i++) {\r\n    tmp[i] = {index: i, value: arr[i]};\r\n  }\r\n  tmp.sort(function (a, b) {\r\n    return compareFnc(a.value, b.value) || a.index - b.index;\r\n  });\r\n  for (i = 0; i < arr.length; i++) {\r\n    arr[i] = tmp[i].value;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr The array to search in.\r\n * @param {Function} func Comparison function.\r\n * @return {number} Return index.\r\n */\r\nexport function findIndex(arr, func) {\r\n  let index;\r\n  const found = !arr.every(function (el, idx) {\r\n    index = idx;\r\n    return !func(el, idx, arr);\r\n  });\r\n  return found ? index : -1;\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr The array to test.\r\n * @param {Function} [opt_func] Comparison function.\r\n * @param {boolean} [opt_strict] Strictly sorted (default false).\r\n * @return {boolean} Return index.\r\n */\r\nexport function isSorted(arr, opt_func, opt_strict) {\r\n  const compare = opt_func || numberSafeCompareFunction;\r\n  return arr.every(function (currentVal, index) {\r\n    if (index === 0) {\r\n      return true;\r\n    }\r\n    const res = compare(arr[index - 1], currentVal);\r\n    return !(res > 0 || (opt_strict && res === 0));\r\n  });\r\n}\r\n", "/**\r\n * @module ol/functions\r\n */\r\n\r\nimport {equals as arrayEquals} from './array.js';\r\n\r\n/**\r\n * Always returns true.\r\n * @return {boolean} true.\r\n */\r\nexport function TRUE() {\r\n  return true;\r\n}\r\n\r\n/**\r\n * Always returns false.\r\n * @return {boolean} false.\r\n */\r\nexport function FALSE() {\r\n  return false;\r\n}\r\n\r\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\r\nexport function VOID() {}\r\n\r\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\r\nexport function memoizeOne(fn) {\r\n  let called = false;\r\n\r\n  /** @type {ReturnType} */\r\n  let lastResult;\r\n\r\n  /** @type {Array<any>} */\r\n  let lastArgs;\r\n\r\n  let lastThis;\r\n\r\n  return function () {\r\n    const nextArgs = Array.prototype.slice.call(arguments);\r\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\r\n      called = true;\r\n      lastThis = this;\r\n      lastArgs = nextArgs;\r\n      lastResult = fn.apply(this, arguments);\r\n    }\r\n    return lastResult;\r\n  };\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\r\n * @return {Promise<T>} A promise for the value.\r\n */\r\nexport function toPromise(getter) {\r\n  function promiseGetter() {\r\n    let value;\r\n    try {\r\n      value = getter();\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    if (value instanceof Promise) {\r\n      return value;\r\n    }\r\n    return Promise.resolve(value);\r\n  }\r\n  return promiseGetter();\r\n}\r\n", "/**\r\n * @module ol/events/EventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @const\r\n */\r\nexport default {\r\n  /**\r\n   * Generic change event. Triggered when the revision counter is increased.\r\n   * @event module:ol/events/Event~BaseEvent#change\r\n   * @api\r\n   */\r\n  CHANGE: 'change',\r\n\r\n  /**\r\n   * Generic error event. Triggered when an error occurs.\r\n   * @event module:ol/events/Event~BaseEvent#error\r\n   * @api\r\n   */\r\n  ERROR: 'error',\r\n\r\n  BLUR: 'blur',\r\n  CLEAR: 'clear',\r\n  CONTEXTMENU: 'contextmenu',\r\n  CLICK: 'click',\r\n  DBLCLICK: 'dblclick',\r\n  DRAGENTER: 'dragenter',\r\n  DRAGOVER: 'dragover',\r\n  DROP: 'drop',\r\n  FOCUS: 'focus',\r\n  KEYDOWN: 'keydown',\r\n  KEYPRESS: 'keypress',\r\n  LOAD: 'load',\r\n  RESIZE: 'resize',\r\n  TOUCHMOVE: 'touchmove',\r\n  WHEEL: 'wheel',\r\n};\r\n", "/**\r\n * @module ol/events\r\n */\r\nimport {clear} from './obj.js';\r\n\r\n/**\r\n * Key to use with {@link module:ol/Observable.unByKey}.\r\n * @typedef {Object} EventsKey\r\n * @property {ListenerFunction} listener Listener.\r\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\r\n * @property {string} type Type.\r\n * @api\r\n */\r\n\r\n/**\r\n * Listener function. This function is called with an event object as argument.\r\n * When the function returns `false`, event propagation will stop.\r\n *\r\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ListenerObject\r\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\r\n */\r\n\r\n/**\r\n * @typedef {ListenerFunction|ListenerObject} Listener\r\n */\r\n\r\n/**\r\n * Registers an event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` to a `this` object, and returns\r\n * a key for use with {@link module:ol/events.unlistenByKey}.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @param {boolean} [opt_once] If true, add the listener as one-off listener.\r\n * @return {EventsKey} Unique key for the listener.\r\n */\r\nexport function listen(target, type, listener, opt_this, opt_once) {\r\n  if (opt_this && opt_this !== target) {\r\n    listener = listener.bind(opt_this);\r\n  }\r\n  if (opt_once) {\r\n    const originalListener = listener;\r\n    listener = function () {\r\n      target.removeEventListener(type, listener);\r\n      originalListener.apply(this, arguments);\r\n    };\r\n  }\r\n  const eventsKey = {\r\n    target: target,\r\n    type: type,\r\n    listener: listener,\r\n  };\r\n  target.addEventListener(type, listener);\r\n  return eventsKey;\r\n}\r\n\r\n/**\r\n * Registers a one-off event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` as self-unregistering listener\r\n * to a `this` object, and returns a key for use with\r\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\r\n * unregistered before it is called.\r\n *\r\n * When {@link module:ol/events.listen} is called with the same arguments after this\r\n * function, the self-unregistering listener will be turned into a permanent\r\n * listener.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @return {EventsKey} Key for unlistenByKey.\r\n */\r\nexport function listenOnce(target, type, listener, opt_this) {\r\n  return listen(target, type, listener, opt_this, true);\r\n}\r\n\r\n/**\r\n * Unregisters event listeners on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * The argument passed to this function is the key returned from\r\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\r\n *\r\n * @param {EventsKey} key The key.\r\n */\r\nexport function unlistenByKey(key) {\r\n  if (key && key.target) {\r\n    key.target.removeEventListener(key.type, key.listener);\r\n    clear(key);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/Disposable\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Objects that need to clean up after themselves.\r\n */\r\nclass Disposable {\r\n  constructor() {\r\n    /**\r\n     * The object has already been disposed.\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.disposed = false;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  dispose() {\r\n    if (!this.disposed) {\r\n      this.disposed = true;\r\n      this.disposeInternal();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extension point for disposable objects.\r\n   * @protected\r\n   */\r\n  disposeInternal() {}\r\n}\r\n\r\nexport default Disposable;\r\n", "/**\r\n * @module ol/events/Target\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport Event from './Event.js';\r\nimport {VOID} from '../functions.js';\r\nimport {clear} from '../obj.js';\r\n\r\n/**\r\n * @typedef {EventTarget|Target} EventTargetLike\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\r\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\r\n *\r\n * There are two important simplifications compared to the specification:\r\n *\r\n * 1. The handling of `useCapture` in `addEventListener` and\r\n *    `removeEventListener`. There is no real capture model.\r\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\r\n *    There is no event target hierarchy. When a listener calls\r\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\r\n *    more listeners after this one will be called. Same as when the listener\r\n *    returns false.\r\n */\r\nclass Target extends Disposable {\r\n  /**\r\n   * @param {*} [opt_target] Default event target for dispatched events.\r\n   */\r\n  constructor(opt_target) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {*}\r\n     */\r\n    this.eventTarget_ = opt_target;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>}\r\n     */\r\n    this.pendingRemovals_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>}\r\n     */\r\n    this.dispatching_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\r\n     */\r\n    this.listeners_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  addEventListener(type, listener) {\r\n    if (!type || !listener) {\r\n      return;\r\n    }\r\n    const listeners = this.listeners_ || (this.listeners_ = {});\r\n    const listenersForType = listeners[type] || (listeners[type] = []);\r\n    if (listenersForType.indexOf(listener) === -1) {\r\n      listenersForType.push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event and calls all listeners listening for events\r\n   * of this type. The event parameter can either be a string or an\r\n   * Object with a `type` property.\r\n   *\r\n   * @param {import(\"./Event.js\").default|string} event Event object.\r\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\r\n   *     event object or if any of the listeners returned false.\r\n   * @api\r\n   */\r\n  dispatchEvent(event) {\r\n    const isString = typeof event === 'string';\r\n    const type = isString ? event : event.type;\r\n    const listeners = this.listeners_ && this.listeners_[type];\r\n    if (!listeners) {\r\n      return;\r\n    }\r\n\r\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\r\n    if (!evt.target) {\r\n      evt.target = this.eventTarget_ || this;\r\n    }\r\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\r\n    const pendingRemovals =\r\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\r\n    if (!(type in dispatching)) {\r\n      dispatching[type] = 0;\r\n      pendingRemovals[type] = 0;\r\n    }\r\n    ++dispatching[type];\r\n    let propagate;\r\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\r\n      if ('handleEvent' in listeners[i]) {\r\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\r\n          listeners[i]\r\n        ).handleEvent(evt);\r\n      } else {\r\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\r\n          listeners[i]\r\n        ).call(this, evt);\r\n      }\r\n      if (propagate === false || evt.propagationStopped) {\r\n        propagate = false;\r\n        break;\r\n      }\r\n    }\r\n    if (--dispatching[type] === 0) {\r\n      let pr = pendingRemovals[type];\r\n      delete pendingRemovals[type];\r\n      while (pr--) {\r\n        this.removeEventListener(type, VOID);\r\n      }\r\n      delete dispatching[type];\r\n    }\r\n    return propagate;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.listeners_ && clear(this.listeners_);\r\n  }\r\n\r\n  /**\r\n   * Get the listeners for a specified event type. Listeners are returned in the\r\n   * order that they will be called in.\r\n   *\r\n   * @param {string} type Type.\r\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\r\n   */\r\n  getListeners(type) {\r\n    return (this.listeners_ && this.listeners_[type]) || undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {string} [opt_type] Type. If not provided,\r\n   *     `true` will be returned if this event target has any listeners.\r\n   * @return {boolean} Has listeners.\r\n   */\r\n  hasListener(opt_type) {\r\n    if (!this.listeners_) {\r\n      return false;\r\n    }\r\n    return opt_type\r\n      ? opt_type in this.listeners_\r\n      : Object.keys(this.listeners_).length > 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  removeEventListener(type, listener) {\r\n    const listeners = this.listeners_ && this.listeners_[type];\r\n    if (listeners) {\r\n      const index = listeners.indexOf(listener);\r\n      if (index !== -1) {\r\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\r\n          // make listener a no-op, and remove later in #dispatchEvent()\r\n          listeners[index] = VOID;\r\n          ++this.pendingRemovals_[type];\r\n        } else {\r\n          listeners.splice(index, 1);\r\n          if (listeners.length === 0) {\r\n            delete this.listeners_[type];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Target;\r\n", "/**\r\n * @module ol/Observable\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport {listen, listenOnce, unlistenByKey} from './events.js';\r\n\r\n/***\r\n * @template {string} Type\r\n * @template {Event|import(\"./events/Event.js\").default} EventClass\r\n * @template Return\r\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\r\n */\r\n\r\n/***\r\n * @template {string} Type\r\n * @template Return\r\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {'change'|'error'} EventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * An event target providing convenient methods for listener registration\r\n * and unregistration. A generic `change` event is always available through\r\n * {@link module:ol/Observable~Observable#changed}.\r\n *\r\n * @fires import(\"./events/Event.js\").default\r\n * @api\r\n */\r\nclass Observable extends EventTarget {\r\n  constructor() {\r\n    super();\r\n\r\n    this.on =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onInternal\r\n      );\r\n\r\n    this.once =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onceInternal\r\n      );\r\n\r\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.revision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Increases the revision counter and dispatches a 'change' event.\r\n   * @api\r\n   */\r\n  changed() {\r\n    ++this.revision_;\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Get the version number for this object.  Each time the object is modified,\r\n   * its version number will be incremented.\r\n   * @return {number} Revision.\r\n   * @api\r\n   */\r\n  getRevision() {\r\n    return this.revision_;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onInternal(type, listener) {\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      const keys = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        keys[i] = listen(this, type[i], listener);\r\n      }\r\n      return keys;\r\n    } else {\r\n      return listen(this, /** @type {string} */ (type), listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onceInternal(type, listener) {\r\n    let key;\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      key = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        key[i] = listenOnce(this, type[i], listener);\r\n      }\r\n    } else {\r\n      key = listenOnce(this, /** @type {string} */ (type), listener);\r\n    }\r\n    /** @type {Object} */ (listener).ol_key = key;\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Unlisten for a certain type of event.\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @protected\r\n   */\r\n  unInternal(type, listener) {\r\n    const key = /** @type {Object} */ (listener).ol_key;\r\n    if (key) {\r\n      unByKey(key);\r\n    } else if (Array.isArray(type)) {\r\n      for (let i = 0, ii = type.length; i < ii; ++i) {\r\n        this.removeEventListener(type[i], listener);\r\n      }\r\n    } else {\r\n      this.removeEventListener(type, listener);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Listen for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.on;\r\n\r\n/**\r\n * Listen once for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.once;\r\n\r\n/**\r\n * Unlisten for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @api\r\n */\r\nObservable.prototype.un;\r\n\r\n/**\r\n * Removes an event listener using the key returned by `on()` or `once()`.\r\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\r\n *     or `once()` (or an array of keys).\r\n * @api\r\n */\r\nexport function unByKey(key) {\r\n  if (Array.isArray(key)) {\r\n    for (let i = 0, ii = key.length; i < ii; ++i) {\r\n      unlistenByKey(key[i]);\r\n    }\r\n  } else {\r\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\r\n  }\r\n}\r\n\r\nexport default Observable;\r\n", "/**\r\n * @module ol/Object\r\n */\r\nimport Event from './events/Event.js';\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport Observable from './Observable.js';\r\nimport {assign, isEmpty} from './obj.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\r\n */\r\nexport class ObjectEvent extends Event {\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {string} key The property name.\r\n   * @param {*} oldValue The old value for `key`.\r\n   */\r\n  constructor(type, key, oldValue) {\r\n    super(type);\r\n\r\n    /**\r\n     * The name of the property whose value is changing.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.key = key;\r\n\r\n    /**\r\n     * The old value. To get the new value use `e.target.get(e.key)` where\r\n     * `e` is the event object.\r\n     * @type {*}\r\n     * @api\r\n     */\r\n    this.oldValue = oldValue;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Most non-trivial classes inherit from this.\r\n *\r\n * This extends {@link module:ol/Observable~Observable} with observable\r\n * properties, where each property is observable as well as the object as a\r\n * whole.\r\n *\r\n * Classes that inherit from this have pre-defined properties, to which you can\r\n * add your owns. The pre-defined properties are listed in this documentation as\r\n * 'Observable Properties', and have their own accessors; for example,\r\n * {@link module:ol/Map~Map} has a `target` property, accessed with\r\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\r\n * settable. There are also general-purpose accessors `get()` and `set()`. For\r\n * example, `get('target')` is equivalent to `getTarget()`.\r\n *\r\n * The `set` accessors trigger a change event, and you can monitor this by\r\n * registering a listener. For example, {@link module:ol/View~View} has a\r\n * `center` property, so `view.on('change:center', function(evt) {...});` would\r\n * call the function whenever the value of the center property changes. Within\r\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\r\n * would return the new center.\r\n *\r\n * You can add your own observable properties with\r\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\r\n * You can listen for changes on that property value with\r\n * `object.on('change:prop', listener)`. You can get a list of all\r\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\r\n *\r\n * Note that the observable properties are separate from standard JS properties.\r\n * You can, for example, give your map object a title with\r\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\r\n * first will be a `hasOwnProperty`; the second will appear in\r\n * `getProperties()`. Only the second is observable.\r\n *\r\n * Properties can be deleted by using the unset method. E.g.\r\n * object.unset('foo').\r\n *\r\n * @fires ObjectEvent\r\n * @api\r\n */\r\nclass BaseObject extends Observable {\r\n  /**\r\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\r\n   */\r\n  constructor(opt_values) {\r\n    super();\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\r\n    // the same as the order in which they were created.  This also helps to\r\n    // ensure that object properties are always added in the same order, which\r\n    // helps many JavaScript engines generate faster code.\r\n    getUid(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */\r\n    this.values_ = null;\r\n\r\n    if (opt_values !== undefined) {\r\n      this.setProperties(opt_values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a value.\r\n   * @param {string} key Key name.\r\n   * @return {*} Value.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    let value;\r\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\r\n      value = this.values_[key];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Get a list of object property names.\r\n   * @return {Array<string>} List of property names.\r\n   * @api\r\n   */\r\n  getKeys() {\r\n    return (this.values_ && Object.keys(this.values_)) || [];\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>} Object.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return (this.values_ && assign({}, this.values_)) || {};\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The object has properties.\r\n   */\r\n  hasProperties() {\r\n    return !!this.values_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {*} oldValue Old value.\r\n   */\r\n  notify(key, oldValue) {\r\n    let eventType;\r\n    eventType = `change:${key}`;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n    eventType = ObjectEventType.PROPERTYCHANGE;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  addChangeListener(key, listener) {\r\n    this.addEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  removeChangeListener(key, listener) {\r\n    this.removeEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * Sets a value.\r\n   * @param {string} key Key name.\r\n   * @param {*} value Value.\r\n   * @param {boolean} [opt_silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  set(key, value, opt_silent) {\r\n    const values = this.values_ || (this.values_ = {});\r\n    if (opt_silent) {\r\n      values[key] = value;\r\n    } else {\r\n      const oldValue = values[key];\r\n      values[key] = value;\r\n      if (oldValue !== value) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a collection of key-value pairs.  Note that this changes any existing\r\n   * properties and adds new ones (it does not remove any existing properties).\r\n   * @param {Object<string, *>} values Values.\r\n   * @param {boolean} [opt_silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  setProperties(values, opt_silent) {\r\n    for (const key in values) {\r\n      this.set(key, values[key], opt_silent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply any properties from another object without triggering events.\r\n   * @param {BaseObject} source The source object.\r\n   * @protected\r\n   */\r\n  applyProperties(source) {\r\n    if (!source.values_) {\r\n      return;\r\n    }\r\n    assign(this.values_ || (this.values_ = {}), source.values_);\r\n  }\r\n\r\n  /**\r\n   * Unsets a property.\r\n   * @param {string} key Key name.\r\n   * @param {boolean} [opt_silent] Unset without triggering an event.\r\n   * @api\r\n   */\r\n  unset(key, opt_silent) {\r\n    if (this.values_ && key in this.values_) {\r\n      const oldValue = this.values_[key];\r\n      delete this.values_[key];\r\n      if (isEmpty(this.values_)) {\r\n        this.values_ = null;\r\n      }\r\n      if (!opt_silent) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseObject;\r\n"],
  "mappings": "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",
  "names": ["BaseEvent", "Disposable", "Target", "__extends", "Observable", "__extends", "ObjectEvent", "__extends", "BaseObject"]
}

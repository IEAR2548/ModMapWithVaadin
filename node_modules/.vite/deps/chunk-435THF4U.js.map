{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-column-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { updateCellState } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ColumnBaseMixin = (superClass) =>\r\n  class ColumnBaseMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * When set to true, the column is user-resizable.\r\n         * @default false\r\n         */\r\n        resizable: {\r\n          type: Boolean,\r\n          sync: true,\r\n          value() {\r\n            if (this.localName === 'vaadin-grid-column-group') {\r\n              return;\r\n            }\r\n\r\n            const parent = this.parentNode;\r\n            if (parent && parent.localName === 'vaadin-grid-column-group') {\r\n              return parent.resizable || false;\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n\r\n        /**\r\n         * When true, the column is frozen. When a column inside of a column group is frozen,\r\n         * all of the sibling columns inside the group will get frozen also.\r\n         * @type {boolean}\r\n         */\r\n        frozen: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When true, the column is frozen to end of grid.\r\n         *\r\n         * When a column inside of a column group is frozen to end, all of the sibling columns\r\n         * inside the group will get frozen to end also.\r\n         *\r\n         * Column can not be set as `frozen` and `frozenToEnd` at the same time.\r\n         * @attr {boolean} frozen-to-end\r\n         * @type {boolean}\r\n         */\r\n        frozenToEnd: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When true, the cells for this column will be rendered with the `role` attribute\r\n         * set as `rowheader`, instead of the `gridcell` role value used by default.\r\n         *\r\n         * When a column is set as row header, its cells will be announced by screen readers\r\n         * while navigating to help user identify the current row as uniquely as possible.\r\n         *\r\n         * @attr {boolean} row-header\r\n         * @type {boolean}\r\n         */\r\n        rowHeader: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When set to true, the cells for this column are hidden.\r\n         */\r\n        hidden: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Text content to display in the header cell of the column.\r\n         */\r\n        header: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Aligns the columns cell content horizontally.\r\n         * Supported values: \"start\", \"center\" and \"end\".\r\n         * @attr {start|center|end} text-align\r\n         * @type {GridColumnTextAlign | null | undefined}\r\n         */\r\n        textAlign: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Custom part name for the header cell.\r\n         *\r\n         * @attr {string} header-part-name\r\n         */\r\n        headerPartName: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Custom part name for the footer cell.\r\n         *\r\n         * @attr {string} footer-part-name\r\n         */\r\n        footerPartName: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {boolean}\r\n         * @protected\r\n         */\r\n        _lastFrozen: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {boolean}\r\n         * @protected\r\n         */\r\n        _bodyContentHidden: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {boolean}\r\n         * @protected\r\n         */\r\n        _firstFrozenToEnd: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /** @protected */\r\n        _order: {\r\n          type: Number,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _reorderStatus: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {Array<!HTMLElement>}\r\n         * @protected\r\n         */\r\n        _emptyCells: Array,\r\n\r\n        /** @private */\r\n        _headerCell: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _footerCell: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /** @protected */\r\n        _grid: Object,\r\n\r\n        /**\r\n         * By default, the Polymer doesn't invoke the observer\r\n         * during initialization if all of its dependencies are `undefined`.\r\n         * This internal property can be used to force initial invocation of an observer\r\n         * even the other dependencies of the observer are `undefined`.\r\n         *\r\n         * @private\r\n         */\r\n        __initialized: {\r\n          type: Boolean,\r\n          value: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the header content.\r\n         * Receives two arguments:\r\n         *\r\n         * - `root` The header cell content DOM element. Append your content to it.\r\n         * - `column` The `<vaadin-grid-column>` element.\r\n         *\r\n         * @type {GridHeaderFooterRenderer | null | undefined}\r\n         */\r\n        headerRenderer: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Represents the final header renderer computed on the set of observable arguments.\r\n         * It is supposed to be used internally when rendering the header cell content.\r\n         *\r\n         * @protected\r\n         * @type {GridHeaderFooterRenderer | undefined}\r\n         */\r\n        _headerRenderer: {\r\n          type: Function,\r\n          computed: '_computeHeaderRenderer(headerRenderer, header, __initialized)',\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the footer content.\r\n         * Receives two arguments:\r\n         *\r\n         * - `root` The footer cell content DOM element. Append your content to it.\r\n         * - `column` The `<vaadin-grid-column>` element.\r\n         *\r\n         * @type {GridHeaderFooterRenderer | null | undefined}\r\n         */\r\n        footerRenderer: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Represents the final footer renderer computed on the set of observable arguments.\r\n         * It is supposed to be used internally when rendering the footer cell content.\r\n         *\r\n         * @protected\r\n         * @type {GridHeaderFooterRenderer | undefined}\r\n         */\r\n        _footerRenderer: {\r\n          type: Function,\r\n          computed: '_computeFooterRenderer(footerRenderer, __initialized)',\r\n        },\r\n\r\n        /**\r\n         * An internal property that is mainly used by `vaadin-template-renderer`\r\n         * to identify grid column elements.\r\n         *\r\n         * @private\r\n         */\r\n        __gridColumnElement: {\r\n          type: Boolean,\r\n          value: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '_widthChanged(width, _headerCell, _footerCell, _cells)',\r\n        '_frozenChanged(frozen, _headerCell, _footerCell, _cells)',\r\n        '_frozenToEndChanged(frozenToEnd, _headerCell, _footerCell, _cells)',\r\n        '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells)',\r\n        '_textAlignChanged(textAlign, _cells, _headerCell, _footerCell)',\r\n        '_orderChanged(_order, _headerCell, _footerCell, _cells)',\r\n        '_lastFrozenChanged(_lastFrozen)',\r\n        '_firstFrozenToEndChanged(_firstFrozenToEnd)',\r\n        '_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, path)',\r\n        '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header)',\r\n        '_onFooterRendererOrBindingChanged(_footerRenderer, _footerCell)',\r\n        '_resizableChanged(resizable, _headerCell)',\r\n        '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells)',\r\n        '_hiddenChanged(hidden, _headerCell, _footerCell, _cells)',\r\n        '_rowHeaderChanged(rowHeader, _cells)',\r\n        '__headerFooterPartNameChanged(_headerCell, _footerCell, headerPartName, footerPartName)',\r\n      ];\r\n    }\r\n\r\n    /**\r\n     * @return {!Grid | undefined}\r\n     * @protected\r\n     */\r\n    get _grid() {\r\n      if (!this._gridValue) {\r\n        this._gridValue = this._findHostGrid();\r\n      }\r\n      return this._gridValue;\r\n    }\r\n\r\n    /**\r\n     * @return {!Array<!HTMLElement>}\r\n     * @protected\r\n     */\r\n    get _allCells() {\r\n      return []\r\n        .concat(this._cells || [])\r\n        .concat(this._emptyCells || [])\r\n        .concat(this._headerCell)\r\n        .concat(this._footerCell)\r\n        .filter((cell) => cell);\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      // Adds the column cells to the grid after the column is attached\r\n      requestAnimationFrame(() => {\r\n        // Skip if the column has been detached\r\n        if (!this._grid) {\r\n          return;\r\n        }\r\n\r\n        this._allCells.forEach((cell) => {\r\n          if (!cell._content.parentNode) {\r\n            this._grid.appendChild(cell._content);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n\r\n      // Removes the column cells from the grid after the column is detached\r\n      requestAnimationFrame(() => {\r\n        // Skip if the column has been attached again\r\n        if (this._grid) {\r\n          return;\r\n        }\r\n\r\n        this._allCells.forEach((cell) => {\r\n          if (cell._content.parentNode) {\r\n            cell._content.parentNode.removeChild(cell._content);\r\n          }\r\n        });\r\n      });\r\n\r\n      this._gridValue = undefined;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      processTemplates(this);\r\n    }\r\n\r\n    /**\r\n     * @return {!Grid | undefined}\r\n     * @protected\r\n     */\r\n    _findHostGrid() {\r\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\r\n      let el = this;\r\n      // Custom elements extending grid must have a specific localName\r\n      while (el && !/^vaadin.*grid(-pro)?$/u.test(el.localName)) {\r\n        el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;\r\n      }\r\n      return el || undefined;\r\n    }\r\n\r\n    /** @protected */\r\n    _renderHeaderAndFooter() {\r\n      this._renderHeaderCellContent(this._headerRenderer, this._headerCell);\r\n      this._renderFooterCellContent(this._footerRenderer, this._footerCell);\r\n    }\r\n\r\n    /** @private */\r\n    _flexGrowChanged(flexGrow) {\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._columnPropChanged('flexGrow');\r\n      }\r\n\r\n      this._allCells.forEach((cell) => {\r\n        cell.style.flexGrow = flexGrow;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _orderChanged(order) {\r\n      this._allCells.forEach((cell) => {\r\n        cell.style.order = order;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _widthChanged(width) {\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._columnPropChanged('width');\r\n      }\r\n\r\n      this._allCells.forEach((cell) => {\r\n        cell.style.width = width;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _frozenChanged(frozen) {\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._columnPropChanged('frozen', frozen);\r\n      }\r\n\r\n      this._allCells.forEach((cell) => {\r\n        updateCellState(cell, 'frozen', frozen);\r\n      });\r\n\r\n      if (this._grid && this._grid._frozenCellsChanged) {\r\n        this._grid._frozenCellsChanged();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _frozenToEndChanged(frozenToEnd) {\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._columnPropChanged('frozenToEnd', frozenToEnd);\r\n      }\r\n\r\n      this._allCells.forEach((cell) => {\r\n        // Skip sizer cells to keep correct scrollWidth.\r\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\r\n          return;\r\n        }\r\n\r\n        updateCellState(cell, 'frozen-to-end', frozenToEnd);\r\n      });\r\n\r\n      if (this._grid && this._grid._frozenCellsChanged) {\r\n        this._grid._frozenCellsChanged();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _lastFrozenChanged(lastFrozen) {\r\n      this._allCells.forEach((cell) => {\r\n        updateCellState(cell, 'last-frozen', lastFrozen);\r\n      });\r\n\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._lastFrozen = lastFrozen;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _firstFrozenToEndChanged(firstFrozenToEnd) {\r\n      this._allCells.forEach((cell) => {\r\n        // Skip sizer cells to keep correct scrollWidth.\r\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\r\n          return;\r\n        }\r\n\r\n        updateCellState(cell, 'first-frozen-to-end', firstFrozenToEnd);\r\n      });\r\n\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._firstFrozenToEnd = firstFrozenToEnd;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _rowHeaderChanged(rowHeader, cells) {\r\n      if (!cells) {\r\n        return;\r\n      }\r\n\r\n      cells.forEach((cell) => {\r\n        cell.setAttribute('role', rowHeader ? 'rowheader' : 'gridcell');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {string} path\r\n     * @return {string}\r\n     * @protected\r\n     */\r\n    _generateHeader(path) {\r\n      return path\r\n        .substr(path.lastIndexOf('.') + 1)\r\n        .replace(/([A-Z])/gu, '-$1')\r\n        .toLowerCase()\r\n        .replace(/-/gu, ' ')\r\n        .replace(/^./u, (match) => match.toUpperCase());\r\n    }\r\n\r\n    /** @private */\r\n    _reorderStatusChanged(reorderStatus) {\r\n      const prevStatus = this.__previousReorderStatus;\r\n      const oldPart = prevStatus ? `reorder-${prevStatus}-cell` : '';\r\n      const newPart = `reorder-${reorderStatus}-cell`;\r\n\r\n      this._allCells.forEach((cell) => {\r\n        updateCellState(cell, 'reorder-status', reorderStatus, newPart, oldPart);\r\n      });\r\n\r\n      this.__previousReorderStatus = reorderStatus;\r\n    }\r\n\r\n    /** @private */\r\n    _resizableChanged(resizable, headerCell) {\r\n      if (resizable === undefined || headerCell === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (headerCell) {\r\n        [headerCell].concat(this._emptyCells).forEach((cell) => {\r\n          if (cell) {\r\n            const existingHandle = cell.querySelector('[part~=\"resize-handle\"]');\r\n            if (existingHandle) {\r\n              cell.removeChild(existingHandle);\r\n            }\r\n\r\n            if (resizable) {\r\n              const handle = document.createElement('div');\r\n              handle.setAttribute('part', 'resize-handle');\r\n              cell.appendChild(handle);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _textAlignChanged(textAlign) {\r\n      if (textAlign === undefined || this._grid === undefined) {\r\n        return;\r\n      }\r\n      if (['start', 'end', 'center'].indexOf(textAlign) === -1) {\r\n        console.warn('textAlign can only be set as \"start\", \"end\" or \"center\"');\r\n        return;\r\n      }\r\n\r\n      let textAlignFallback;\r\n      if (getComputedStyle(this._grid).direction === 'ltr') {\r\n        if (textAlign === 'start') {\r\n          textAlignFallback = 'left';\r\n        } else if (textAlign === 'end') {\r\n          textAlignFallback = 'right';\r\n        }\r\n      } else if (textAlign === 'start') {\r\n        textAlignFallback = 'right';\r\n      } else if (textAlign === 'end') {\r\n        textAlignFallback = 'left';\r\n      }\r\n\r\n      this._allCells.forEach((cell) => {\r\n        cell._content.style.textAlign = textAlign;\r\n        if (getComputedStyle(cell._content).textAlign !== textAlign) {\r\n          cell._content.style.textAlign = textAlignFallback;\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _hiddenChanged(hidden) {\r\n      if (this.parentElement && this.parentElement._columnPropChanged) {\r\n        this.parentElement._columnPropChanged('hidden', hidden);\r\n      }\r\n\r\n      if (!!hidden !== !!this._previousHidden && this._grid) {\r\n        if (hidden === true) {\r\n          this._allCells.forEach((cell) => {\r\n            if (cell._content.parentNode) {\r\n              cell._content.parentNode.removeChild(cell._content);\r\n            }\r\n          });\r\n        }\r\n        this._grid._debouncerHiddenChanged = Debouncer.debounce(\r\n          this._grid._debouncerHiddenChanged,\r\n          animationFrame,\r\n          () => {\r\n            if (this._grid && this._grid._renderColumnTree) {\r\n              this._grid._renderColumnTree(this._grid._columnTree);\r\n            }\r\n          },\r\n        );\r\n\r\n        if (this._grid._debounceUpdateFrozenColumn) {\r\n          this._grid._debounceUpdateFrozenColumn();\r\n        }\r\n\r\n        if (this._grid._resetKeyboardNavigation) {\r\n          this._grid._resetKeyboardNavigation();\r\n        }\r\n      }\r\n      this._previousHidden = hidden;\r\n    }\r\n\r\n    /** @protected */\r\n    _runRenderer(renderer, cell, model) {\r\n      const isVisibleBodyCell = model && model.item && !cell.parentElement.hidden;\r\n      const shouldRender = isVisibleBodyCell || renderer === this._headerRenderer || renderer === this._footerRenderer;\r\n      if (!shouldRender) {\r\n        return;\r\n      }\r\n\r\n      const args = [cell._content, this];\r\n      if (isVisibleBodyCell) {\r\n        args.push(model);\r\n      }\r\n\r\n      renderer.apply(this, args);\r\n    }\r\n\r\n    /**\r\n     * Renders the content to the given cells using a renderer.\r\n     *\r\n     * @private\r\n     */\r\n    __renderCellsContent(renderer, cells) {\r\n      // Skip if the column is hidden or not attached to a grid.\r\n      if (this.hidden || !this._grid) {\r\n        return;\r\n      }\r\n\r\n      cells.forEach((cell) => {\r\n        if (!cell.parentElement) {\r\n          return;\r\n        }\r\n\r\n        const model = this._grid.__getRowModel(cell.parentElement);\r\n\r\n        if (!renderer) {\r\n          return;\r\n        }\r\n\r\n        if (cell._renderer !== renderer) {\r\n          this._clearCellContent(cell);\r\n        }\r\n\r\n        cell._renderer = renderer;\r\n\r\n        this._runRenderer(renderer, cell, model);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Clears the content of a cell.\r\n     *\r\n     * @protected\r\n     */\r\n    _clearCellContent(cell) {\r\n      cell._content.innerHTML = '';\r\n      // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\r\n      // When clearing the rendered content, this part needs to be manually disposed of.\r\n      // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\r\n      delete cell._content._$litPart$;\r\n    }\r\n\r\n    /**\r\n     * Renders the header cell content using a renderer,\r\n     * and then updates the visibility of the parent row depending on\r\n     * whether all its children cells are empty or not.\r\n     *\r\n     * @protected\r\n     */\r\n    _renderHeaderCellContent(headerRenderer, headerCell) {\r\n      if (!headerCell || !headerRenderer) {\r\n        return;\r\n      }\r\n\r\n      this.__renderCellsContent(headerRenderer, [headerCell]);\r\n      if (this._grid && headerCell.parentElement) {\r\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(headerCell.parentElement);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onHeaderRendererOrBindingChanged(headerRenderer, headerCell, ..._bindings) {\r\n      this._renderHeaderCellContent(headerRenderer, headerCell);\r\n    }\r\n\r\n    /** @private */\r\n    __headerFooterPartNameChanged(headerCell, footerCell, headerPartName, footerPartName) {\r\n      [\r\n        { cell: headerCell, partName: headerPartName },\r\n        { cell: footerCell, partName: footerPartName },\r\n      ].forEach(({ cell, partName }) => {\r\n        if (cell) {\r\n          const customParts = cell.__customParts || [];\r\n          cell.part.remove(...customParts);\r\n\r\n          cell.__customParts = partName ? partName.trim().split(' ') : [];\r\n          cell.part.add(...cell.__customParts);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Renders the content of body cells using a renderer.\r\n     *\r\n     * @protected\r\n     */\r\n    _renderBodyCellsContent(renderer, cells) {\r\n      if (!cells || !renderer) {\r\n        return;\r\n      }\r\n\r\n      this.__renderCellsContent(renderer, cells);\r\n    }\r\n\r\n    /** @protected */\r\n    _onRendererOrBindingChanged(renderer, cells, ..._bindings) {\r\n      this._renderBodyCellsContent(renderer, cells);\r\n    }\r\n\r\n    /**\r\n     * Renders the footer cell content using a renderer\r\n     * and then updates the visibility of the parent row depending on\r\n     * whether all its children cells are empty or not.\r\n     *\r\n     * @protected\r\n     */\r\n    _renderFooterCellContent(footerRenderer, footerCell) {\r\n      if (!footerCell || !footerRenderer) {\r\n        return;\r\n      }\r\n\r\n      this.__renderCellsContent(footerRenderer, [footerCell]);\r\n      if (this._grid && footerCell.parentElement) {\r\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(footerCell.parentElement);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onFooterRendererOrBindingChanged(footerRenderer, footerCell) {\r\n      this._renderFooterCellContent(footerRenderer, footerCell);\r\n    }\r\n\r\n    /** @private */\r\n    __setTextContent(node, textContent) {\r\n      if (node.textContent !== textContent) {\r\n        node.textContent = textContent;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Renders the text header to the header cell.\r\n     *\r\n     * @private\r\n     */\r\n    __textHeaderRenderer() {\r\n      this.__setTextContent(this._headerCell._content, this.header);\r\n    }\r\n\r\n    /**\r\n     * Computes the property name based on the path and renders it to the header cell.\r\n     * If the path is not defined, then nothing is rendered.\r\n     *\r\n     * @protected\r\n     */\r\n    _defaultHeaderRenderer() {\r\n      if (!this.path) {\r\n        return;\r\n      }\r\n\r\n      this.__setTextContent(this._headerCell._content, this._generateHeader(this.path));\r\n    }\r\n\r\n    /**\r\n     * Computes the item property value based on the path and renders it to the body cell.\r\n     * If the path is not defined, then nothing is rendered.\r\n     *\r\n     * @protected\r\n     */\r\n    _defaultRenderer(root, _owner, { item }) {\r\n      if (!this.path) {\r\n        return;\r\n      }\r\n\r\n      this.__setTextContent(root, get(this.path, item));\r\n    }\r\n\r\n    /**\r\n     * By default, nothing is rendered to the footer cell.\r\n     *\r\n     * @protected\r\n     */\r\n    _defaultFooterRenderer() {}\r\n\r\n    /**\r\n     * Computes the final header renderer for the `_headerRenderer` computed property.\r\n     * All the arguments are observable by the Polymer, it re-calls the method\r\n     * once an argument is changed to update the property value.\r\n     *\r\n     * @protected\r\n     * @return {GridHeaderFooterRenderer | undefined}\r\n     */\r\n    _computeHeaderRenderer(headerRenderer, header) {\r\n      if (headerRenderer) {\r\n        return headerRenderer;\r\n      }\r\n\r\n      if (header !== undefined && header !== null) {\r\n        return this.__textHeaderRenderer;\r\n      }\r\n\r\n      return this._defaultHeaderRenderer;\r\n    }\r\n\r\n    /**\r\n     * Computes the final renderer for the `_renderer` property.\r\n     * All the arguments are observable by the Polymer, it re-calls the method\r\n     * once an argument is changed to update the property value.\r\n     *\r\n     * @protected\r\n     * @return {GridBodyRenderer | undefined}\r\n     */\r\n    _computeRenderer(renderer) {\r\n      if (renderer) {\r\n        return renderer;\r\n      }\r\n\r\n      return this._defaultRenderer;\r\n    }\r\n\r\n    /**\r\n     * Computes the final footer renderer for the `_footerRenderer` property.\r\n     * All the arguments are observable by the Polymer, it re-calls the method\r\n     * once an argument is changed to update the property value.\r\n     *\r\n     * @protected\r\n     * @return {GridHeaderFooterRenderer | undefined}\r\n     */\r\n    _computeFooterRenderer(footerRenderer) {\r\n      if (footerRenderer) {\r\n        return footerRenderer;\r\n      }\r\n\r\n      return this._defaultFooterRenderer;\r\n    }\r\n  };\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes ColumnBaseMixin\r\n * @mixes DirMixin\r\n */\r\nexport const GridColumnMixin = (superClass) =>\r\n  class extends ColumnBaseMixin(DirMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Width of the cells for this column.\r\n         *\r\n         * Please note that using the `em` length unit is discouraged as\r\n         * it might lead to misalignment issues if the header, body, and footer\r\n         * cells have different font sizes. Instead, use `rem` if you need\r\n         * a length unit relative to the font size.\r\n         */\r\n        width: {\r\n          type: String,\r\n          value: '100px',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\r\n         * @attr {number} flex-grow\r\n         * @type {number}\r\n         */\r\n        flexGrow: {\r\n          type: Number,\r\n          value: 1,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the cell content.\r\n         * Receives three arguments:\r\n         *\r\n         * - `root` The cell content DOM element. Append your content to it.\r\n         * - `column` The `<vaadin-grid-column>` element.\r\n         * - `model` The object with the properties related with\r\n         *   the rendered item, contains:\r\n         *   - `model.index` The index of the item.\r\n         *   - `model.item` The item.\r\n         *   - `model.expanded` Sublevel toggle state.\r\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\r\n         *   - `model.selected` Selected state.\r\n         *   - `model.detailsOpened` Details opened state.\r\n         *\r\n         * @type {GridBodyRenderer | null | undefined}\r\n         */\r\n        renderer: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Represents the final renderer computed on the set of observable arguments.\r\n         * It is supposed to be used internally when rendering the content of a body cell.\r\n         *\r\n         * @protected\r\n         * @type {GridBodyRenderer | undefined}\r\n         */\r\n        _renderer: {\r\n          type: Function,\r\n          computed: '_computeRenderer(renderer, __initialized)',\r\n        },\r\n\r\n        /**\r\n         * Path to an item sub-property whose value gets displayed in the column body cells.\r\n         * The property name is also shown in the column header if an explicit header or renderer isn't defined.\r\n         */\r\n        path: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Automatically sets the width of the column based on the column contents when this is set to `true`.\r\n         *\r\n         * For performance reasons the column width is calculated automatically only once when the grid items\r\n         * are rendered for the first time and the calculation only considers the rows which are currently\r\n         * rendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\r\n         * content changes, the column width might not match the contents anymore.\r\n         *\r\n         * Hidden columns are ignored in the calculation and their widths are not automatically updated when\r\n         * you show a column that was initially hidden.\r\n         *\r\n         * You can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\r\n         *\r\n         * The column width may still grow larger when `flexGrow` is not 0.\r\n         * @attr {boolean} auto-width\r\n         * @type {boolean}\r\n         */\r\n        autoWidth: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * When true, wraps the cell's slot into an element with role=\"button\", and sets\r\n         * the tabindex attribute on the button element, instead of the cell itself.\r\n         * This is needed to keep focus in sync with VoiceOver cursor when navigating\r\n         * with Control + Option + arrow keys: focusing the `<td>` element does not fire\r\n         * a focus event, but focusing an element with role=\"button\" inside a cell fires it.\r\n         * @protected\r\n         */\r\n        _focusButtonMode: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * @type {Array<!HTMLElement>}\r\n         * @protected\r\n         */\r\n        _cells: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n  };\r\n"],
  "mappings": "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",
  "names": []
}

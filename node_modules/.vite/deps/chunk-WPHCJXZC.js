import {
  PolylitMixin
} from "./chunk-2XOX65VI.js";
import {
  button
} from "./chunk-D4YSSUXC.js";
import {
  buttonStyles,
  buttonTemplate
} from "./chunk-UVDGD6M6.js";
import {
  ButtonMixin
} from "./chunk-W2UZPIBV.js";
import {
  ResizeMixin
} from "./chunk-2OEODMLR.js";
import {
  TooltipController
} from "./chunk-JN3IROFX.js";
import {
  FocusTrapController
} from "./chunk-MY27H5BQ.js";
import {
  ElementMixin
} from "./chunk-QN4QZSZG.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-KEWLZU7R.js";
import {
  defineCustomElement
} from "./chunk-AQ7DMXX6.js";
import {
  LitElement
} from "./chunk-2VJ6XAW7.js";
import {
  css
} from "./chunk-WFI4KZJ4.js";
import {
  html
} from "./chunk-4QYCOPDF.js";

// node_modules/@vaadin/dashboard/theme/lumo/vaadin-dashboard-widget-styles.js
var dashboardWidgetAndSection = css`
  /* stylelint-disable rule-empty-line-before */
  /* stylelint-disable length-zero-no-unit */

  :host {
    --_vaadin-dashboard-widget-background: var(--vaadin-dashboard-widget-background, var(--lumo-base-color));
    --_vaadin-dashboard-widget-border-radius: var(--vaadin-dashboard-widget-border-radius, var(--lumo-border-radius-l));
    --_vaadin-dashboard-widget-border-width: var(--vaadin-dashboard-widget-border-width, 1px);
    --_vaadin-dashboard-widget-border-color: var(--vaadin-dashboard-widget-border-color, var(--lumo-contrast-20pct));
    --_vaadin-dashboard-widget-shadow: var(--vaadin-dashboard-widget-shadow, 0 0 0 0 transparent);
    --_vaadin-dashboard-widget-editable-shadow: var(
      --vaadin-dashboard-widget-editable-shadow,
      var(--lumo-box-shadow-s)
    );
    --_vaadin-dashboard-widget-selected-shadow: var(
      --vaadin-dashboard-widget-selected-shadow,
      0 2px 4px -1px var(--lumo-primary-color-10pct),
      0 3px 12px -1px var(--lumo-primary-color-50pct)
    );
    --_vaadin-dashboard-drop-target-background-color: var(
      --vaadin-dashboard-drop-target-background-color,
      var(--lumo-primary-color-10pct)
    );
    --_vaadin-dashboard-drop-target-border: var(
      --vaadin-dashboard-drop-target-border,
      1px dashed var(--lumo-primary-color-50pct)
    );

    color: var(--lumo-body-text-color);
    font-family: var(--lumo-font-family);
    font-size: var(--lumo-font-size-m);
    line-height: var(--lumo-line-height-m);
    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));
    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);
    --_icon-color: var(--lumo-contrast-60pct);
    opacity: var(--_vaadin-dashboard-widget-opacity);
    filter: var(--_vaadin-dashboard-widget-filter);
  }

  :host([selected]) {
    opacity: 1;
    z-index: 1;
  }

  :host([focused]) {
    z-index: 1;
  }

  header {
    display: flex;
    align-items: center;
    box-sizing: border-box;
    justify-content: space-between;
    gap: var(--lumo-space-xs);
  }

  [part='title'] {
    flex: 1;
    color: var(--lumo-header-text-color);
    margin: 0;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  vaadin-dashboard-button {
    font-family: 'lumo-icons';
    font-size: var(--lumo-icon-size-m);
    margin: 0;
  }

  vaadin-dashboard-button .icon::before {
    display: block;
    content: var(--icon);
  }

  /* Common styles for non-mode edit buttons */
  [part='move-button'],
  [part='resize-button'],
  [part='remove-button'] {
    color: var(--_icon-color);
    padding-inline: 0;
  }
  :where([part='move-button'], [part='resize-button'], [part='remove-button']):hover {
    --_icon-color: var(--lumo-primary-text-color);
  }
  :host([selected]) {
    --_icon-color: var(--lumo-primary-text-color);
  }
  :host(:is([move-mode], [resize-mode])) {
    --_icon-color: var(--lumo-disabled-text-color);
  }

  /* Drag handle */
  [part~='move-button'] {
    cursor: move;
    --icon: var(--lumo-icons-drag-handle);
  }

  /* Remove button */
  [part~='remove-button'] {
    cursor: pointer;
    --icon: var(--lumo-icons-cross);
  }

  /* Mode controls */
  .mode-controls vaadin-dashboard-button[focused] {
    z-index: 3;
  }

  /* Move mode */

  :host(:not([dir='rtl'])) [part~='move-backward-button'],
  :host([dir='rtl']) [part~='move-forward-button'] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    --icon: var(--lumo-icons-angle-left);
  }

  :host(:not([dir='rtl'])) [part~='move-forward-button'],
  :host([dir='rtl']) [part~='move-backward-button'] {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    --icon: var(--lumo-icons-angle-right);
  }

  [part~='move-apply-button'] {
    --icon: var(--lumo-icons-checkmark);
    font-size: var(--lumo-icon-size-m);
  }
`;
var dashboardWidget = css`
  :host {
    background: var(--_vaadin-dashboard-widget-background);
    border-radius: var(--_vaadin-dashboard-widget-border-radius);
    --_border-shadow: 0 0 0 var(--_vaadin-dashboard-widget-border-width) var(--_vaadin-dashboard-widget-border-color);
    --_shadow: var(--_vaadin-dashboard-widget-shadow);
    box-shadow: var(--_shadow), var(--_border-shadow);
  }

  /* Widget states */

  :host([editable]) {
    --_shadow: var(--_vaadin-dashboard-widget-editable-shadow);
  }

  :host([focused]) {
    --_border-shadow: inset 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);
  }

  :host([selected]) {
    --_shadow: var(--_vaadin-dashboard-widget-selected-shadow);
    background: var(--lumo-primary-color-10pct);
  }

  :host([dragging]) {
    box-shadow: none;
    background: var(--_vaadin-dashboard-drop-target-background-color);
    border: var(--_vaadin-dashboard-drop-target-border);
  }

  :host([resizing])::after {
    background: var(--_vaadin-dashboard-drop-target-background-color);
    border: var(--_vaadin-dashboard-drop-target-border);
  }

  /* Widget parts */

  header {
    min-height: var(--lumo-size-l);
    padding: 0 var(--lumo-space-m);
    border-bottom: 1px solid var(--lumo-contrast-10pct);
  }

  :host([editable]) header {
    padding-inline: var(--lumo-space-xs);
  }

  [part='title'] {
    font-size: var(--lumo-font-size-l);
    font-weight: 600;
  }

  #content {
    min-height: var(--lumo-size-m);
    padding: var(--lumo-space-s);
  }

  :host([resize-mode]) #content,
  :host([move-mode]) #content {
    opacity: 0.75;
    filter: blur(10px);
  }

  /* Resize handle */

  [part~='resize-button'] {
    --_resize-button-offset: min(var(--_vaadin-dashboard-gap), var(--_vaadin-dashboard-padding), var(--lumo-space-xs));
    position: absolute;
    bottom: calc(-1 * var(--_resize-button-offset));
    inset-inline-end: calc(-1 * var(--_resize-button-offset));
    cursor: nwse-resize;
    --icon: var(--lumo-icons-resize-handle);
  }

  :host([dir='rtl']) [part~='resize-button'] {
    cursor: sw-resize;
  }

  :host([dir='rtl']) [part~='resize-button'] .icon::before {
    transform: scaleX(-1);
  }

  /* Accessible resize mode controls */

  [part~='resize-apply-button'] {
    --icon: var(--lumo-icons-checkmark);
    font-size: var(--lumo-icon-size-m);
  }

  [part~='resize-grow-width-button'],
  [part~='resize-shrink-width-button'] {
    padding-right: 0;
    padding-left: 0;
    min-width: var(--lumo-size-s);
  }

  [part~='resize-shrink-width-button'] + [part~='resize-grow-width-button'] {
    margin-left: 1px;
  }

  [part~='resize-grow-height-button'],
  [part~='resize-shrink-height-button'] {
    height: var(--lumo-size-s);
    padding-right: 0;
    padding-left: 0;
  }

  [part~='resize-shrink-height-button'] + [part~='resize-grow-height-button'] {
    margin-top: 1px;
  }

  :host(:not([dir='rtl'])) [part~='resize-grow-width-button'],
  :host(:not([dir='rtl'])) [part~='resize-shrink-width-button'] {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  :host([dir='rtl']) [part~='resize-grow-width-button'],
  :host([dir='rtl']) [part~='resize-shrink-width-button'] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  :host(:not([dir='rtl'])) [part~='resize-shrink-width-button']:not([hidden]) + [part~='resize-grow-width-button'] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  :host([dir='rtl']) [part~='resize-shrink-width-button']:not([hidden]) + [part~='resize-grow-width-button'] {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  [part~='resize-grow-height-button'],
  [part~='resize-grow-width-button'] {
    --icon: var(--lumo-icons-plus);
  }

  [part~='resize-shrink-height-button'],
  [part~='resize-shrink-width-button'] {
    --icon: var(--lumo-icons-minus);
  }

  [part~='resize-grow-height-button'],
  [part~='resize-shrink-height-button'] {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  [part~='resize-shrink-height-button']:not([hidden]) + [part~='resize-grow-height-button'] {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  /* Windows High Contrast Mode */
  @media (forced-colors: active) {
    :host {
      border: 1px solid;
    }
    :host([focused]) {
      outline: 2px solid;
      outline-offset: 1px;
    }
    :host([selected]) {
      outline-width: 1px;
      outline-offset: 0px;
      outline-color: Highlight;
    }
    :host([selected][focused]) {
      outline-width: 3px;
      outline-offset: 0px;
    }
  }
`;
registerStyles("vaadin-dashboard-widget", [dashboardWidget, dashboardWidgetAndSection], {
  moduleId: "lumo-dashboard-widget"
});

// node_modules/@vaadin/dashboard/theme/lumo/vaadin-dashboard-button-styles.js
registerStyles("vaadin-dashboard-button", button, {
  moduleId: "lumo-dashboard-button"
});

// node_modules/@vaadin/dashboard/src/vaadin-dashboard-helpers.js
var WRAPPER_LOCAL_NAME = "vaadin-dashboard-widget-wrapper";
var SYNCHRONIZED_ATTRIBUTES = ["editable", "dragging", "first-child", "last-child"];
function fireMove(element, delta) {
  element.dispatchEvent(
    new CustomEvent("item-move", {
      bubbles: true,
      detail: { delta }
    })
  );
}
function fireResize(element, colspanDelta, rowspanDelta) {
  element.dispatchEvent(
    new CustomEvent("item-resize", {
      bubbles: true,
      detail: {
        colspanDelta,
        rowspanDelta
      }
    })
  );
  if ("requestUpdate" in element) {
    element.requestUpdate();
  }
}
function fireRemove(element) {
  element.dispatchEvent(new CustomEvent("item-remove", { bubbles: true }));
}

// node_modules/@vaadin/dashboard/src/vaadin-dashboard-styles.js
var hasWidgetWrappers = css`
  ::slotted(vaadin-dashboard-widget-wrapper) {
    display: contents;
  }
`;
var dashboardWidgetAndSectionStyles = css`
  :host {
    box-sizing: border-box;
  }

  :host([dragging]) * {
    visibility: hidden;
  }

  :host(:not([editable])) [part~='move-button'],
  :host(:not([editable])) [part~='remove-button'],
  :host(:not([editable])) #focus-button,
  :host(:not([editable])) #focus-button-wrapper,
  :host(:not([editable])) .mode-controls {
    display: none;
  }

  #focustrap {
    display: contents;
  }

  header {
    display: flex;
    overflow: hidden;
  }

  vaadin-dashboard-button {
    z-index: 1;
  }

  #focus-button-wrapper,
  #focus-button {
    position: absolute;
    inset: 0;
    opacity: 0;
  }

  #focus-button {
    pointer-events: none;
    padding: 0;
    border: none;
  }

  .mode-controls {
    position: absolute;
    inset: 0;
    z-index: 2;
  }

  .mode-controls[hidden] {
    display: none;
  }

  /* Move-mode buttons */
  [part~='move-backward-button'],
  [part~='move-forward-button'],
  [part~='move-apply-button'] {
    position: absolute;
    top: 50%;
  }

  [part~='move-backward-button'] {
    inset-inline-start: 0;
    transform: translateY(-50%);
  }

  [part~='move-forward-button'] {
    inset-inline-end: 0;
    transform: translateY(-50%);
  }

  [part~='move-apply-button'] {
    left: 50%;
    transform: translate(-50%, -50%);
  }

  :host([first-child]) [part~='move-backward-button'],
  :host([last-child]) [part~='move-forward-button'] {
    display: none;
  }

  /* Resize-mode buttons */
  [part~='resize-shrink-width-button'],
  [part~='resize-shrink-height-button'],
  [part~='resize-grow-width-button'],
  [part~='resize-grow-height-button'],
  [part~='resize-apply-button'] {
    position: absolute;
  }

  [part~='resize-shrink-width-button'] {
    inset-inline-end: 0;
    top: 50%;
  }

  :host(:not([dir='rtl'])) [part~='resize-shrink-width-button'] {
    transform: translateY(-50%) translateX(-100%);
  }

  :host([dir='rtl']) [part~='resize-shrink-width-button'] {
    transform: translateY(-50%) translateX(100%);
  }

  .mode-controls:has([part~='resize-grow-width-button'][hidden]) [part~='resize-shrink-width-button'] {
    transform: translateY(-50%);
  }

  [part~='resize-grow-width-button'] {
    inset-inline-start: 100%;
    top: 50%;
  }

  :host(:not([dir='rtl'])) [part~='resize-grow-width-button'] {
    transform: translateY(-50%) translateX(-100%);
  }

  :host([dir='rtl']) [part~='resize-grow-width-button'] {
    transform: translateY(-50%) translateX(100%);
  }

  [part~='resize-shrink-height-button'] {
    bottom: 0;
    left: 50%;
    transform: translateX(-50%) translateY(-100%);
  }

  [part~='resize-grow-height-button'] {
    top: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-100%);
  }

  [part~='resize-apply-button'] {
    left: 50%;
    top: 50%;

    transform: translate(-50%, -50%);
  }
`;

// node_modules/@vaadin/dashboard/src/vaadin-dashboard-button.js
var DashboardButton = class extends ButtonMixin(ElementMixin(ThemableMixin(PolylitMixin(LitElement)))) {
  static get is() {
    return "vaadin-dashboard-button";
  }
  static get experimental() {
    return "dashboardComponent";
  }
  static get styles() {
    return buttonStyles;
  }
  /** @protected */
  render() {
    return buttonTemplate(html);
  }
  /** @protected */
  ready() {
    super.ready();
    this._tooltipController = new TooltipController(this);
    this.addController(this._tooltipController);
  }
};
defineCustomElement(DashboardButton);

// node_modules/@vaadin/dashboard/src/keyboard-controller.js
var KeyboardController = class {
  constructor(host) {
    this.host = host;
    host.addEventListener("focusout", (e) => this.__focusout(e));
    host.addEventListener("keydown", (e) => this.__keydown(e));
  }
  /** @private */
  __focusout(e) {
    const focusOutElement = e.composedPath()[0];
    const isHostVisible = !!this.host.offsetHeight;
    const isFocusButtonHidden = getComputedStyle(focusOutElement).display === "none";
    if (isHostVisible && isFocusButtonHidden && this.host.hasAttribute("editable")) {
      this.host.__focusApply();
    } else {
      this.host.__exitMode();
      this.host.__focused = false;
      this.host.__selected = false;
    }
  }
  /** @private */
  __keydown(e) {
    if (e.metaKey || e.ctrlKey || !this.host.__selected) {
      return;
    }
    if (e.key === "Backspace" || e.key === "Delete") {
      this.__delete(e);
    } else if (e.key === "Escape") {
      this.__escape(e);
    } else if (e.shiftKey && e.key.startsWith("Arrow")) {
      this.__resize(e);
    } else if (e.key.startsWith("Arrow")) {
      this.__move(e);
    }
  }
  /** @private */
  __delete(e) {
    e.preventDefault();
    fireRemove(this.host);
  }
  /** @private */
  __escape(e) {
    e.preventDefault();
    if (this.host.__moveMode || this.host.__resizeMode) {
      this.host.__exitMode(true);
    } else {
      this.host.__selected = false;
      this.host.focus();
    }
  }
  /** @private */
  __resize(e) {
    const resizeMap = {
      ArrowRight: [document.dir === "rtl" ? -1 : 1, 0],
      ArrowLeft: [document.dir === "rtl" ? 1 : -1, 0],
      ArrowDown: [0, 1],
      ArrowUp: [0, -1]
    };
    if (resizeMap[e.key]) {
      e.preventDefault();
      fireResize(this.host, ...resizeMap[e.key]);
    }
  }
  /** @private */
  __move(e) {
    const moveMap = {
      ArrowRight: document.dir === "rtl" ? -1 : 1,
      ArrowLeft: document.dir === "rtl" ? 1 : -1,
      ArrowDown: 1,
      ArrowUp: -1
    };
    if (moveMap[e.key]) {
      e.preventDefault();
      fireMove(this.host, moveMap[e.key]);
    }
  }
};

// node_modules/@vaadin/dashboard/src/vaadin-dashboard-item-mixin.js
var DEFAULT_I18N = {
  selectWidget: "Select widget for editing",
  selectSection: "Select section for editing",
  remove: "Remove",
  move: "Move",
  moveApply: "Apply",
  moveForward: "Move Forward",
  moveBackward: "Move Backward",
  resize: "Resize",
  resizeApply: "Apply",
  resizeShrinkWidth: "Shrink width",
  resizeGrowWidth: "Grow width",
  resizeShrinkHeight: "Shrink height",
  resizeGrowHeight: "Grow height"
};
function getDefaultI18n() {
  return { ...DEFAULT_I18N };
}
var DashboardItemMixin = (superClass) => class DashboardItemMixinClass extends ResizeMixin(superClass) {
  static get styles() {
    return dashboardWidgetAndSectionStyles;
  }
  static get properties() {
    return {
      /** @protected */
      __i18n: {
        type: Object
      },
      /** @private */
      __selected: {
        type: Boolean,
        reflectToAttribute: true,
        attribute: "selected",
        observer: "__selectedChanged"
      },
      /** @private */
      __focused: {
        type: Boolean,
        reflectToAttribute: true,
        attribute: "focused"
      },
      /** @private */
      __moveMode: {
        type: Boolean,
        reflectToAttribute: true,
        attribute: "move-mode",
        observer: "__moveModeChanged"
      },
      /** @private */
      __resizeMode: {
        type: Boolean,
        reflectToAttribute: true,
        attribute: "resize-mode",
        observer: "__resizeModeChanged"
      }
    };
  }
  /** @private */
  __renderDragHandle() {
    return html`<vaadin-dashboard-button
        id="drag-handle"
        draggable="true"
        class="drag-handle"
        part="move-button"
        theme="icon tertiary"
        aria-label="${this.__i18n.move}"
        title="${this.__i18n.move}"
        tabindex="${this.__selected ? 0 : -1}"
        @click="${() => this.__enterMoveMode()}"
      >
        <div class="icon"></div>
      </vaadin-dashboard-button>`;
  }
  /** @private */
  __renderRemoveButton() {
    return html`<vaadin-dashboard-button
        aria-label="${this.__i18n.remove}"
        title="${this.__i18n.remove}"
        id="remove-button"
        part="remove-button"
        theme="icon tertiary"
        tabindex="${this.__selected ? 0 : -1}"
        @click="${() => fireRemove(this)}"
      >
        <div class="icon"></div>
      </vaadin-dashboard-button>`;
  }
  /** @private */
  __renderFocusButton(i18nSelectTitleForEditingProperty) {
    return html`<label draggable="true" class="drag-handle" id="focus-button-wrapper">
        <button
          id="focus-button"
          aria-label=${this.__i18n[i18nSelectTitleForEditingProperty]}
          aria-describedby="title"
          aria-pressed="${!!this.__selected}"
          @focus="${() => {
      this.__focused = true;
    }}"
          @blur="${() => {
      this.__focused = false;
    }}"
          @click="${() => {
      const wasSelected = this.__selected;
      this.__selected = !wasSelected;
      this.__focused = wasSelected;
      if (this.__selected) {
        this.$["drag-handle"].focus();
      }
    }}"
        ></button>
      </label>`;
  }
  /** @private */
  __renderResizeHandle() {
    return html`<vaadin-dashboard-button
        aria-label="${this.__i18n.resize}"
        title="${this.__i18n.resize}"
        id="resize-handle"
        part="resize-button"
        class="resize-handle"
        theme="icon tertiary"
        tabindex="${this.__selected ? 0 : -1}"
        @click="${() => this.__enterResizeMode()}"
      >
        <div class="icon"></div>
      </vaadin-dashboard-button>`;
  }
  /** @private */
  __renderMoveControls() {
    return html`<div
        id="move-controls"
        class="mode-controls"
        .hidden="${!this.__moveMode}"
        @pointerdown="${(e) => e.preventDefault()}"
      >
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.moveBackward}"
          title="${this.__i18n.moveBackward}"
          @click="${() => fireMove(this, -1)}"
          id="move-backward"
          part="move-backward-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon large"
          aria-label="${this.__i18n.moveApply}"
          title="${this.__i18n.moveApply}"
          @click="${() => this.__exitMode(true)}"
          id="move-apply"
          part="move-apply-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.moveForward}"
          title="${this.__i18n.moveForward}"
          @click="${() => fireMove(this, 1)}"
          id="move-forward"
          part="move-forward-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
      </div>`;
  }
  /** @private */
  __renderResizeControls() {
    const style = getComputedStyle(this);
    const hasMinRowHeight = style.getPropertyValue("--_vaadin-dashboard-row-min-height") !== "auto";
    const effectiveColCount = style.getPropertyValue("--_vaadin-dashboard-col-count");
    const maxColCount = style.getPropertyValue("--_vaadin-dashboard-col-max-count");
    const colCount = Math.min(effectiveColCount, maxColCount);
    const colspan = style.getPropertyValue("--vaadin-dashboard-item-colspan") || 1;
    const rowspan = style.getPropertyValue("--vaadin-dashboard-item-rowspan") || 1;
    const canShrinkWidth = colspan > 1;
    const canShrinkHeight = rowspan > 1;
    const canGrowWidth = colspan < colCount;
    return html`<div
        id="resize-controls"
        class="mode-controls"
        .hidden="${!this.__resizeMode}"
        @pointerdown="${(e) => e.preventDefault()}"
      >
        <vaadin-dashboard-button
          theme="primary icon large"
          aria-label="${this.__i18n.resizeApply}"
          title="${this.__i18n.resizeApply}"
          @click="${() => this.__exitMode(true)}"
          id="resize-apply"
          part="resize-apply-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.resizeShrinkWidth}"
          title="${this.__i18n.resizeShrinkWidth}"
          @click="${() => fireResize(this, -1, 0)}"
          .hidden="${!canShrinkWidth}"
          id="resize-shrink-width"
          part="resize-shrink-width-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.resizeGrowWidth}"
          title="${this.__i18n.resizeGrowWidth}"
          @click="${() => fireResize(this, 1, 0)}"
          .hidden="${!canGrowWidth}"
          id="resize-grow-width"
          part="resize-grow-width-button"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.resizeShrinkHeight}"
          title="${this.__i18n.resizeShrinkHeight}"
          @click="${() => fireResize(this, 0, -1)}"
          id="resize-shrink-height"
          part="resize-shrink-height-button"
          .hidden="${!hasMinRowHeight || !canShrinkHeight}"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
        <vaadin-dashboard-button
          theme="primary icon"
          aria-label="${this.__i18n.resizeGrowHeight}"
          title="${this.__i18n.resizeGrowHeight}"
          @click="${() => fireResize(this, 0, 1)}"
          id="resize-grow-height"
          part="resize-grow-height-button"
          .hidden="${!hasMinRowHeight}"
        >
          <div class="icon"></div>
        </vaadin-dashboard-button>
      </div>`;
  }
  constructor() {
    super();
    this.__keyboardController = new KeyboardController(this);
    this.__focusTrapController = new FocusTrapController(this);
  }
  /** @protected */
  ready() {
    super.ready();
    this.addController(this.__keyboardController);
    this.addController(this.__focusTrapController);
  }
  /** @private */
  __selectedChanged(selected, oldSelected) {
    if (!!selected === !!oldSelected) {
      return;
    }
    this.dispatchEvent(new CustomEvent("item-selected-changed", { bubbles: true, detail: { value: selected } }));
    if (selected) {
      this.__focusTrapController.trapFocus(this.$.focustrap);
    } else {
      this.__focusTrapController.releaseFocus();
    }
  }
  focus() {
    if (this.hasAttribute("editable")) {
      this.$["focus-button"].focus();
    } else {
      super.focus();
    }
  }
  /** @private */
  __exitMode(focus) {
    if (this.__moveMode) {
      this.__moveMode = false;
      if (focus) {
        this.$["drag-handle"].focus();
        this.__focusTrapController.trapFocus(this.$.focustrap);
      }
    } else if (this.__resizeMode) {
      this.__resizeMode = false;
      if (focus) {
        this.$["resize-handle"].focus();
        this.__focusTrapController.trapFocus(this.$.focustrap);
      }
    }
  }
  /** @private */
  __focusApply() {
    if (this.__moveMode) {
      this.$["move-apply"].focus();
    } else if (this.__resizeMode) {
      this.$["resize-apply"].focus();
    }
  }
  /** @private */
  __enterMoveMode() {
    this.__selected = true;
    this.__moveMode = true;
    requestAnimationFrame(() => {
      this.__focusTrapController.trapFocus(this.$["move-controls"]);
    });
  }
  /** @private */
  __enterResizeMode() {
    this.__selected = true;
    this.__resizeMode = true;
    requestAnimationFrame(() => {
      this.__focusTrapController.trapFocus(this.$["resize-controls"]);
    });
  }
  /** @private */
  __moveModeChanged(moveMode, oldMoveMode) {
    if (!!moveMode === !!oldMoveMode) {
      return;
    }
    this.dispatchEvent(new CustomEvent("item-move-mode-changed", { bubbles: true, detail: { value: moveMode } }));
  }
  /** @private */
  __resizeModeChanged(resizeMode, oldResizeMode) {
    if (!!resizeMode === !!oldResizeMode) {
      return;
    }
    this.dispatchEvent(new CustomEvent("item-resize-mode-changed", { bubbles: true, detail: { value: resizeMode } }));
  }
};

export {
  dashboardWidgetAndSection,
  WRAPPER_LOCAL_NAME,
  SYNCHRONIZED_ATTRIBUTES,
  hasWidgetWrappers,
  getDefaultI18n,
  DashboardItemMixin
};
/*! Bundled license information:

@vaadin/dashboard/src/vaadin-dashboard-helpers.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/dashboard/src/vaadin-dashboard-styles.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/dashboard/src/vaadin-dashboard-button.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/dashboard/src/keyboard-controller.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/dashboard/src/vaadin-dashboard-item-mixin.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)
*/
//# sourceMappingURL=chunk-WPHCJXZC.js.map

{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/resolve-url.js", "../../@polymer/polymer/lib/utils/settings.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\nimport './boot.js';\r\n\r\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\r\nlet ABS_URL = /(^\\/[^\\/])|(^#)|(^[\\w-\\d]*:)/;\r\nlet workingURL;\r\nlet resolveDoc;\r\n/**\r\n * Resolves the given URL against the provided `baseUri'.\r\n *\r\n * Note that this function performs no resolution for URLs that start\r\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\r\n * URL resolution, use `window.URL`.\r\n *\r\n * @param {string} url Input URL to resolve\r\n * @param {?string=} baseURI Base URI to resolve the URL against\r\n * @return {string} resolved URL\r\n */\r\nexport function resolveUrl(url, baseURI) {\r\n  if (url && ABS_URL.test(url)) {\r\n    return url;\r\n  }\r\n  if (url === '//') {\r\n    return url;\r\n  }\r\n  // Lazy feature detection.\r\n  if (workingURL === undefined) {\r\n    workingURL = false;\r\n    try {\r\n      const u = new URL('b', 'http://a');\r\n      u.pathname = 'c%20d';\r\n      workingURL = (u.href === 'http://a/c%20d');\r\n    } catch (e) {\r\n      // silently fail\r\n    }\r\n  }\r\n  if (!baseURI) {\r\n    baseURI = document.baseURI || window.location.href;\r\n  }\r\n  if (workingURL) {\r\n    try {\r\n      return (new URL(url, baseURI)).href;\r\n    } catch (e) {\r\n      // Bad url or baseURI structure. Do not attempt to resolve.\r\n      return url;\r\n    }\r\n  }\r\n  // Fallback to creating an anchor into a disconnected document.\r\n  if (!resolveDoc) {\r\n    resolveDoc = document.implementation.createHTMLDocument('temp');\r\n    resolveDoc.base = resolveDoc.createElement('base');\r\n    resolveDoc.head.appendChild(resolveDoc.base);\r\n    resolveDoc.anchor = resolveDoc.createElement('a');\r\n    resolveDoc.body.appendChild(resolveDoc.anchor);\r\n  }\r\n  resolveDoc.base.href = baseURI;\r\n  resolveDoc.anchor.href = url;\r\n  return resolveDoc.anchor.href || url;\r\n\r\n}\r\n\r\n/**\r\n * Resolves any relative URL's in the given CSS text against the provided\r\n * `ownerDocument`'s `baseURI`.\r\n *\r\n * @param {string} cssText CSS text to process\r\n * @param {string} baseURI Base URI to resolve the URL against\r\n * @return {string} Processed CSS text with resolved URL's\r\n */\r\nexport function resolveCss(cssText, baseURI) {\r\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\r\n    return pre + '\\'' +\r\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\r\n      '\\'' + post;\r\n  });\r\n}\r\n\r\n/**\r\n * Returns a path from a given `url`. The path includes the trailing\r\n * `/` from the url.\r\n *\r\n * @param {string} url Input URL to transform\r\n * @return {string} resolved path\r\n */\r\nexport function pathFromUrl(url) {\r\n  return url.substring(0, url.lastIndexOf('/') + 1);\r\n}\r\n", "/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\nimport './boot.js';\r\nimport { pathFromUrl } from './resolve-url.js';\r\nexport const useShadow = !(window.ShadyDOM) || !(window.ShadyDOM.inUse);\r\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\r\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\r\nexport const supportsAdoptingStyleSheets = useShadow &&\r\n    ('adoptedStyleSheets' in Document.prototype) &&\r\n    ('replaceSync' in CSSStyleSheet.prototype) &&\r\n    // Since spec may change, feature detect exact API we need\r\n    (() => {\r\n      try {\r\n        const sheet = new CSSStyleSheet();\r\n        sheet.replaceSync('');\r\n        const host = document.createElement('div');\r\n        host.attachShadow({mode: 'open'});\r\n        host.shadowRoot.adoptedStyleSheets = [sheet];\r\n        return (host.shadowRoot.adoptedStyleSheets[0] === sheet);\r\n      } catch(e) {\r\n        return false;\r\n      }\r\n    })();\r\n\r\n/**\r\n * Globally settable property that is automatically assigned to\r\n * `ElementMixin` instances, useful for binding in templates to\r\n * make URL's relative to an application's root.  Defaults to the main\r\n * document URL, but can be overridden by users.  It may be useful to set\r\n * `rootPath` to provide a stable application mount path when\r\n * using client side routing.\r\n */\r\nexport let rootPath = window.Polymer && window.Polymer.rootPath ||\r\n  pathFromUrl(document.baseURI || window.location.href);\r\n\r\n/**\r\n * Sets the global rootPath property used by `ElementMixin` and\r\n * available via `rootPath`.\r\n *\r\n * @param {string} path The new root path\r\n * @return {void}\r\n */\r\nexport const setRootPath = function(path) {\r\n  rootPath = path;\r\n};\r\n\r\n/**\r\n * A global callback used to sanitize any value before inserting it into the DOM.\r\n * The callback signature is:\r\n *\r\n *  function sanitizeDOMValue(value, name, type, node) { ... }\r\n *\r\n * Where:\r\n *\r\n * `value` is the value to sanitize.\r\n * `name` is the name of an attribute or property (for example, href).\r\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\r\n * `node` is the node where the value is being inserted.\r\n *\r\n * @type {(function(*,string,string,?Node):*)|undefined}\r\n */\r\nexport let sanitizeDOMValue =\r\n  window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\r\n\r\n/**\r\n * Sets the global sanitizeDOMValue available via this module's exported\r\n * `sanitizeDOMValue` variable.\r\n *\r\n * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\r\n * @return {void}\r\n */\r\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\r\n  sanitizeDOMValue = newSanitizeDOMValue;\r\n};\r\n\r\n/**\r\n * Gets sanitizeDOMValue, for environments that don't well support `export let`.\r\n *\r\n * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue\r\n */\r\nexport const getSanitizeDOMValue = function() {\r\n  return sanitizeDOMValue;\r\n};\r\n\r\n/**\r\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\r\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\r\n * scrolling performance.\r\n * Defaults to `false` for backwards compatibility.\r\n */\r\nexport let passiveTouchGestures =\r\n  window.Polymer && window.Polymer.setPassiveTouchGestures || false;\r\n\r\n/**\r\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\r\n *\r\n * @param {boolean} usePassive enable or disable passive touch gestures globally\r\n * @return {void}\r\n */\r\nexport const setPassiveTouchGestures = function(usePassive) {\r\n  passiveTouchGestures = usePassive;\r\n};\r\n\r\n/**\r\n * Setting to ensure Polymer template evaluation only occurs based on tempates\r\n * defined in trusted script.  When true, `<dom-module>` re-registration is\r\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\r\n * templates will only evaluate in the context of a trusted element template.\r\n */\r\nexport let strictTemplatePolicy =\r\n  window.Polymer && window.Polymer.strictTemplatePolicy || false;\r\n\r\n/**\r\n * Sets `strictTemplatePolicy` globally for all elements\r\n *\r\n * @param {boolean} useStrictPolicy enable or disable strict template policy\r\n *   globally\r\n * @return {void}\r\n */\r\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\r\n  strictTemplatePolicy = useStrictPolicy;\r\n};\r\n\r\n/**\r\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\r\n * templates must be defined in script using the `static get template()`\r\n * getter and the `html` tag function.  To enable legacy loading of templates\r\n * via dom-module, set this flag to true.\r\n */\r\nexport let allowTemplateFromDomModule =\r\n  window.Polymer && window.Polymer.allowTemplateFromDomModule || false;\r\n\r\n/**\r\n * Sets `lookupTemplateFromDomModule` globally for all elements\r\n *\r\n * @param {boolean} allowDomModule enable or disable template lookup\r\n *   globally\r\n * @return {void}\r\n */\r\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\r\n  allowTemplateFromDomModule = allowDomModule;\r\n};\r\n\r\n/**\r\n * Setting to skip processing style includes and re-writing urls in css styles.\r\n * Normally \"included\" styles are pulled into the element and all urls in styles\r\n * are re-written to be relative to the containing script url.\r\n * If no includes or relative urls are used in styles, these steps can be\r\n * skipped as an optimization.\r\n */\r\nexport let legacyOptimizations =\r\n  window.Polymer && window.Polymer.legacyOptimizations || false;\r\n\r\n/**\r\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\r\n * when only legacy based elements are used.\r\n *\r\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\r\n * includes and url rewriting\r\n * @return {void}\r\n */\r\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\r\n  legacyOptimizations = useLegacyOptimizations;\r\n};\r\n\r\n/**\r\n * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.\r\n */\r\nexport let legacyWarnings =\r\n  window.Polymer && window.Polymer.legacyWarnings || false;\r\n\r\n/**\r\n * Sets `legacyWarnings` globally for all elements to migration warnings.\r\n *\r\n * @param {boolean} useLegacyWarnings enable or disable warnings\r\n * @return {void}\r\n */\r\nexport const setLegacyWarnings = function(useLegacyWarnings) {\r\n  legacyWarnings = useLegacyWarnings;\r\n};\r\n\r\n/**\r\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\r\n * This matches the behavior of Polymer 1.\r\n */\r\nexport let syncInitialRender =\r\n  window.Polymer && window.Polymer.syncInitialRender || false;\r\n\r\n/**\r\n * Sets `syncInitialRender` globally for all elements to enable synchronous\r\n * initial rendering.\r\n *\r\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\r\n * rendering globally.\r\n * @return {void}\r\n */\r\nexport const setSyncInitialRender = function(useSyncInitialRender) {\r\n  syncInitialRender = useSyncInitialRender;\r\n};\r\n\r\n/**\r\n * Setting to retain the legacy Polymer 1 behavior for multi-property\r\n * observers around undefined values. Observers and computed property methods\r\n * are not called until no argument is undefined.\r\n */\r\nexport let legacyUndefined =\r\n  window.Polymer && window.Polymer.legacyUndefined || false;\r\n\r\n/**\r\n * Sets `legacyUndefined` globally for all elements to enable legacy\r\n * multi-property behavior for undefined values.\r\n *\r\n * @param {boolean} useLegacyUndefined enable or disable legacy\r\n * multi-property behavior for undefined.\r\n * @return {void}\r\n */\r\nexport const setLegacyUndefined = function(useLegacyUndefined) {\r\n  legacyUndefined = useLegacyUndefined;\r\n};\r\n\r\n/**\r\n * Setting to ensure computed properties are computed in order to ensure\r\n * re-computation never occurs in a given turn.\r\n */\r\nexport let orderedComputed =\r\n  window.Polymer && window.Polymer.orderedComputed || false;\r\n\r\n/**\r\n * Sets `orderedComputed` globally for all elements to enable ordered computed\r\n * property computation.\r\n *\r\n * @param {boolean} useOrderedComputed enable or disable ordered computed effects\r\n * @return {void}\r\n */\r\nexport const setOrderedComputed = function(useOrderedComputed) {\r\n  orderedComputed = useOrderedComputed;\r\n};\r\n\r\n/**\r\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\r\n * no longer fire synthetic click events, and the cancellation behavior can interfere\r\n * when programmatically clicking on elements.\r\n */\r\nexport let cancelSyntheticClickEvents = true;\r\n\r\n/**\r\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\r\n *\r\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\r\n * events\r\n * @return {void}\r\n */\r\nexport const setCancelSyntheticClickEvents = function(useCancelSyntheticClickEvents) {\r\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\r\n};\r\n\r\n/**\r\n * Setting to remove nested templates inside `dom-if` and `dom-repeat` as\r\n * part of element template parsing.  This is a performance optimization that\r\n * eliminates most of the tax of needing two elements due to the loss of\r\n * type-extended templates as a result of the V1 specification changes.\r\n */\r\nexport let removeNestedTemplates =\r\n  window.Polymer && window.Polymer.removeNestedTemplates || false;\r\n\r\n/**\r\n * Sets `removeNestedTemplates` globally, to eliminate nested templates\r\n * inside `dom-if` and `dom-repeat` as part of template parsing.\r\n *\r\n * @param {boolean} useRemoveNestedTemplates enable or disable removing nested\r\n *   templates during parsing\r\n * @return {void}\r\n */\r\nexport const setRemoveNestedTemplates = function(useRemoveNestedTemplates) {\r\n  removeNestedTemplates = useRemoveNestedTemplates;\r\n};\r\n\r\n/**\r\n * Setting to place `dom-if` elements in a performance-optimized mode that takes\r\n * advantage of lighter-weight host runtime template stamping to eliminate the\r\n * need for an intermediate Templatizer `TemplateInstance` to mange the nodes\r\n * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's\r\n * such as `modelForElement` will not be available for nodes stamped by\r\n * `dom-if`.\r\n */\r\nexport let fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;\r\n\r\n/**\r\n * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.\r\n *\r\n * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode\r\n * @return {void}\r\n */\r\nexport const setFastDomIf = function(useFastDomIf) {\r\n  fastDomIf = useFastDomIf;\r\n};\r\n\r\n/**\r\n * Setting to disable `dom-change` and `rendered-item-count` events from\r\n * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by\r\n * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)\r\n * to `dom-if`/`don-repeat` instances.\r\n */\r\nexport let suppressTemplateNotifications =\r\n  window.Polymer && window.Polymer.suppressTemplateNotifications || false;\r\n\r\n/**\r\n * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and\r\n * `rendered-item-count` events from `dom-if` and `dom-repeat`.\r\n *\r\n * @param {boolean} suppress enable or disable `suppressTemplateNotifications`\r\n * @return {void}\r\n */\r\nexport const setSuppressTemplateNotifications = function(suppress) {\r\n  suppressTemplateNotifications = suppress;\r\n};\r\n\r\n/**\r\n * Setting to disable use of dynamic attributes. This is an optimization\r\n * to avoid setting `observedAttributes`. Instead attributes are read\r\n * once at create time and set/removeAttribute are patched.\r\n */\r\nexport let legacyNoObservedAttributes =\r\n  window.Polymer && window.Polymer.legacyNoObservedAttributes || false;\r\n\r\n/**\r\n * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.\r\n *\r\n * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`\r\n * @return {void}\r\n */\r\nexport const setLegacyNoObservedAttributes = function(noObservedAttributes) {\r\n  legacyNoObservedAttributes = noObservedAttributes;\r\n};\r\n\r\n/**\r\n * Setting to enable use of `adoptedStyleSheets` for sharing style sheets\r\n * between component instances' shadow roots, if the app uses built Shady CSS\r\n * styles.\r\n */\r\nexport let useAdoptedStyleSheetsWithBuiltCSS =\r\n  window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;\r\n\r\n/**\r\n * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.\r\n *\r\n * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`\r\n * @return {void}\r\n */\r\nexport const setUseAdoptedStyleSheetsWithBuiltCSS = function(value) {\r\n  useAdoptedStyleSheetsWithBuiltCSS = value;\r\n};\r\n"],
  "mappings": "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",
  "names": []
}

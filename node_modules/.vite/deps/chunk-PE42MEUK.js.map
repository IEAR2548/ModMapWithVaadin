{
  "version": 3,
  "sources": ["../../ol/src/structs/RBush.js", "../../ol/src/source/VectorEventType.js", "../../ol/src/loadingstrategy.js", "../../ol/src/format/FormatType.js", "../../ol/src/featureloader.js", "../../ol/src/source/Vector.js"],
  "sourcesContent": ["/**\r\n * @module ol/structs/RBush\r\n */\r\nimport RBush_ from 'rbush';\r\nimport {createOrUpdate, equals} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @typedef {Object} Entry\r\n * @property {number} minX MinX.\r\n * @property {number} minY MinY.\r\n * @property {number} maxX MaxX.\r\n * @property {number} maxY MaxY.\r\n * @property {Object} [value] Value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template T\r\n */\r\nclass RBush {\r\n  /**\r\n   * @param {number} [opt_maxEntries] Max entries.\r\n   */\r\n  constructor(opt_maxEntries) {\r\n    /**\r\n     * @private\r\n     */\r\n    this.rbush_ = new RBush_(opt_maxEntries);\r\n\r\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry>}\r\n     */\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  insert(extent, value) {\r\n    /** @type {Entry} */\r\n    const item = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n      value: value,\r\n    };\r\n\r\n    this.rbush_.insert(item);\r\n    this.items_[getUid(value)] = item;\r\n  }\r\n\r\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\r\n  load(extents, values) {\r\n    const items = new Array(values.length);\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      const extent = extents[i];\r\n      const value = values[i];\r\n\r\n      /** @type {Entry} */\r\n      const item = {\r\n        minX: extent[0],\r\n        minY: extent[1],\r\n        maxX: extent[2],\r\n        maxY: extent[3],\r\n        value: value,\r\n      };\r\n      items[i] = item;\r\n      this.items_[getUid(value)] = item;\r\n    }\r\n    this.rbush_.load(items);\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\r\n  remove(value) {\r\n    const uid = getUid(value);\r\n\r\n    // get the object in which the value was wrapped when adding to the\r\n    // internal rbush. then use that object to do the removal.\r\n    const item = this.items_[uid];\r\n    delete this.items_[uid];\r\n    return this.rbush_.remove(item) !== null;\r\n  }\r\n\r\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  update(extent, value) {\r\n    const item = this.items_[getUid(value)];\r\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\r\n    if (!equals(bbox, extent)) {\r\n      this.remove(value);\r\n      this.insert(extent, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\r\n  getAll() {\r\n    const items = this.rbush_.all();\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\r\n  getInExtent(extent) {\r\n    /** @type {Entry} */\r\n    const bbox = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n    };\r\n    const items = this.rbush_.search(bbox);\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach(callback) {\r\n    return this.forEach_(this.getAll(), callback);\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEachInExtent(extent, callback) {\r\n    return this.forEach_(this.getInExtent(extent), callback);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): *} callback Callback.\r\n   * @private\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach_(values, callback) {\r\n    let result;\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      result = callback(values[i]);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.items_);\r\n  }\r\n\r\n  /**\r\n   * Remove all values from the RBush.\r\n   */\r\n  clear() {\r\n    this.rbush_.clear();\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\r\n  getExtent(opt_extent) {\r\n    const data = this.rbush_.toJSON();\r\n    return createOrUpdate(\r\n      data.minX,\r\n      data.minY,\r\n      data.maxX,\r\n      data.maxY,\r\n      opt_extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {RBush} rbush R-Tree.\r\n   */\r\n  concat(rbush) {\r\n    this.rbush_.load(rbush.rbush_.all());\r\n    for (const i in rbush.items_) {\r\n      this.items_[i] = rbush.items_[i];\r\n    }\r\n  }\r\n}\r\n\r\nexport default RBush;\r\n", "/**\r\n * @module ol/source/VectorEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a feature is added to the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\r\n   * @api\r\n   */\r\n  ADDFEATURE: 'addfeature',\r\n\r\n  /**\r\n   * Triggered when a feature is updated.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\r\n   * @api\r\n   */\r\n  CHANGEFEATURE: 'changefeature',\r\n\r\n  /**\r\n   * Triggered when the clear method is called on the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\r\n   * @api\r\n   */\r\n  CLEAR: 'clear',\r\n\r\n  /**\r\n   * Triggered when a feature is removed from the source.\r\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\r\n   * @api\r\n   */\r\n  REMOVEFEATURE: 'removefeature',\r\n\r\n  /**\r\n   * Triggered when features starts loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\r\n   * @api\r\n   */\r\n  FEATURESLOADSTART: 'featuresloadstart',\r\n\r\n  /**\r\n   * Triggered when features finishes loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\r\n   * @api\r\n   */\r\n  FEATURESLOADEND: 'featuresloadend',\r\n\r\n  /**\r\n   * Triggered if feature loading results in an error.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\r\n   * @api\r\n   */\r\n  FEATURESLOADERROR: 'featuresloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\r\n */\r\n", "/**\r\n * @module ol/loadingstrategy\r\n */\r\n\r\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\r\n\r\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function all(extent, resolution) {\r\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\r\n}\r\n\r\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function bbox(extent, resolution) {\r\n  return [extent];\r\n}\r\n\r\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\r\nexport function tile(tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      const z = tileGrid.getZForResolution(\r\n        fromUserResolution(resolution, projection)\r\n      );\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        fromUserExtent(extent, projection),\r\n        z\r\n      );\r\n      /** @type {Array<import(\"./extent.js\").Extent>} */\r\n      const extents = [];\r\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\r\n      const tileCoord = [z, 0, 0];\r\n      for (\r\n        tileCoord[1] = tileRange.minX;\r\n        tileCoord[1] <= tileRange.maxX;\r\n        ++tileCoord[1]\r\n      ) {\r\n        for (\r\n          tileCoord[2] = tileRange.minY;\r\n          tileCoord[2] <= tileRange.maxY;\r\n          ++tileCoord[2]\r\n        ) {\r\n          extents.push(\r\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)\r\n          );\r\n        }\r\n      }\r\n      return extents;\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/format/FormatType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  JSON: 'json',\r\n  TEXT: 'text',\r\n  XML: 'xml',\r\n};\r\n", "/**\r\n * @module ol/featureloader\r\n */\r\nimport FormatType from './format/FormatType.js';\r\nimport {VOID} from './functions.js';\r\n\r\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\r\nlet withCredentials = false;\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\r\n *           import(\"./extent.js\").Extent,\r\n *           number,\r\n *           import(\"./proj/Projection.js\").default,\r\n *           function(Array<import(\"./Feature.js\").default>): void=,\r\n *           function(): void=): void} FeatureLoader\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\r\nexport function loadFeaturesXhr(\r\n  url,\r\n  format,\r\n  extent,\r\n  resolution,\r\n  projection,\r\n  success,\r\n  failure\r\n) {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\r\n    'GET',\r\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n    true\r\n  );\r\n  if (format.getType() == FormatType.ARRAY_BUFFER) {\r\n    xhr.responseType = 'arraybuffer';\r\n  }\r\n  xhr.withCredentials = withCredentials;\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  xhr.onload = function (event) {\r\n    // status will be 0 for file:// urls\r\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n      const type = format.getType();\r\n      /** @type {Document|Node|Object|string|undefined} */\r\n      let source;\r\n      if (type == FormatType.JSON || type == FormatType.TEXT) {\r\n        source = xhr.responseText;\r\n      } else if (type == FormatType.XML) {\r\n        source = xhr.responseXML;\r\n        if (!source) {\r\n          source = new DOMParser().parseFromString(\r\n            xhr.responseText,\r\n            'application/xml'\r\n          );\r\n        }\r\n      } else if (type == FormatType.ARRAY_BUFFER) {\r\n        source = /** @type {ArrayBuffer} */ (xhr.response);\r\n      }\r\n      if (source) {\r\n        success(\r\n          /** @type {Array<import(\"./Feature.js\").default>} */\r\n          (\r\n            format.readFeatures(source, {\r\n              extent: extent,\r\n              featureProjection: projection,\r\n            })\r\n          ),\r\n          format.readProjection(source)\r\n        );\r\n      } else {\r\n        failure();\r\n      }\r\n    } else {\r\n      failure();\r\n    }\r\n  };\r\n  /**\r\n   * @private\r\n   */\r\n  xhr.onerror = failure;\r\n  xhr.send();\r\n}\r\n\r\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default} format Feature format.\r\n * @return {FeatureLoader} The feature loader.\r\n * @api\r\n */\r\nexport function xhr(url, format) {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   * @this {import(\"./source/Vector\").default}\r\n   */\r\n  return function (extent, resolution, projection, success, failure) {\r\n    const source = /** @type {import(\"./source/Vector\").default} */ (this);\r\n    loadFeaturesXhr(\r\n      url,\r\n      format,\r\n      extent,\r\n      resolution,\r\n      projection,\r\n      /**\r\n       * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */\r\n      function (features, dataProjection) {\r\n        source.addFeatures(features);\r\n        if (success !== undefined) {\r\n          success(features);\r\n        }\r\n      },\r\n      /* FIXME handle error */ failure ? failure : VOID\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\r\nexport function setWithCredentials(xhrWithCredentials) {\r\n  withCredentials = xhrWithCredentials;\r\n}\r\n", "/**\r\n * @module ol/source/Vector\r\n */\r\n\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport RBush from '../structs/RBush.js';\r\nimport Source from './Source.js';\r\nimport SourceState from './State.js';\r\nimport VectorEventType from './VectorEventType.js';\r\nimport {TRUE, VOID} from '../functions.js';\r\nimport {all as allStrategy} from '../loadingstrategy.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent, equals} from '../extent.js';\r\nimport {extend} from '../array.js';\r\nimport {getUid} from '../util.js';\r\nimport {getValues, isEmpty} from '../obj.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {xhr} from '../featureloader.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\r\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\r\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\r\n *\r\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\r\n * type.\r\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\r\n */\r\nexport class VectorSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} [opt_feature] Feature.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [opt_features] Features.\r\n   */\r\n  constructor(type, opt_feature, opt_features) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\r\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\r\n     * @api\r\n     */\r\n    this.feature = opt_feature;\r\n\r\n    /**\r\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\r\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\r\n     * @api\r\n     */\r\n    this.features = opt_features;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\r\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\r\n * and the collection will stay in sync.\r\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\r\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\r\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\r\n * The loader function used to load features, from a remote source for example.\r\n * If this is not set and `url` is set, the source will create and use an XHR\r\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\r\n * will only fire if the `success` and `failure` callbacks are used.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * import {Vector} from 'ol/source';\r\n * import {GeoJSON} from 'ol/format';\r\n * import {bbox} from 'ol/loadingstrategy';\r\n *\r\n * var vectorSource = new Vector({\r\n *   format: new GeoJSON(),\r\n *   loader: function(extent, resolution, projection, success, failure) {\r\n *      var proj = projection.getCode();\r\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n *          'outputFormat=application/json&srsname=' + proj + '&' +\r\n *          'bbox=' + extent.join(',') + ',' + proj;\r\n *      var xhr = new XMLHttpRequest();\r\n *      xhr.open('GET', url);\r\n *      var onError = function() {\r\n *        vectorSource.removeLoadedExtent(extent);\r\n *        failure();\r\n *      }\r\n *      xhr.onerror = onError;\r\n *      xhr.onload = function() {\r\n *        if (xhr.status == 200) {\r\n *          var features = vectorSource.getFormat().readFeatures(xhr.responseText);\r\n *          vectorSource.addFeatures(features);\r\n *          success(features);\r\n *        } else {\r\n *          onError();\r\n *        }\r\n *      }\r\n *      xhr.send();\r\n *    },\r\n *    strategy: bbox\r\n *  });\r\n * ```\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\r\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\r\n * By default an {@link module:ol/loadingstrategy.all}\r\n * strategy is used, a one-off strategy which loads all features at once.\r\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\r\n * Setting this option instructs the source to load features using an XHR loader\r\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\r\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\r\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\r\n * other loading strategies.\r\n * Requires `format` to be set as well.\r\n * When default XHR feature loader is provided, the features will\r\n * be transformed from the data projection to the view projection\r\n * during parsing. If your remote data source does not advertise its projection\r\n * properly, this transformation will be incorrect. For some formats, the\r\n * default projection (usually EPSG:4326) can be overridden by setting the\r\n * dataProjection constructor option on the format.\r\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\r\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\r\n * @property {boolean} [useSpatialIndex=true]\r\n * By default, an RTree is used as spatial index. When features are removed and\r\n * added frequently, and the total number of features is low, setting this to\r\n * `false` may improve performance.\r\n *\r\n * Note that\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\r\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\r\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\r\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\r\n * through all features.\r\n *\r\n * When set to `false`, the features will be maintained in an\r\n * {@link module:ol/Collection~Collection}, which can be retrieved through\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\r\n * -180° and 180° meridians to work properly, this should be set to `false`. The\r\n * resulting geometry coordinates will then exceed the world bounds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Provides a source of features for vector layers. Vector features provided\r\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\r\n * vector data that is optimized for rendering.\r\n *\r\n * @fires VectorSourceEvent\r\n * @api\r\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\r\n */\r\nclass VectorSource extends Source {\r\n  /**\r\n   * @param {Options} [opt_options] Vector source options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: true,\r\n      projection: undefined,\r\n      state: SourceState.READY,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n    });\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../featureloader.js\").FeatureLoader}\r\n     */\r\n    this.loader_ = VOID;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default|undefined}\r\n     */\r\n    this.format_ = options.format;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    if (options.loader !== undefined) {\r\n      this.loader_ = options.loader;\r\n    } else if (this.url_ !== undefined) {\r\n      assert(this.format_, 7); // `format` must be set when `url` is set\r\n      // create a XHR feature loader for \"url\" and \"format\"\r\n      this.loader_ = xhr(\r\n        this.url_,\r\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {LoadingStrategy}\r\n     */\r\n    this.strategy_ =\r\n      options.strategy !== undefined ? options.strategy : allStrategy;\r\n\r\n    const useSpatialIndex =\r\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\r\n     */\r\n    this.loadedExtentsRtree_ = new RBush();\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.loadingExtentsCount_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    /**\r\n     * A lookup of features by id (the return from feature.getId()).\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.idIndex_ = {};\r\n\r\n    /**\r\n     * A lookup of features by uid (using getUid(feature)).\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.uidIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.featureChangeKeys_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\r\n     */\r\n    this.featuresCollection_ = null;\r\n\r\n    let collection, features;\r\n    if (Array.isArray(options.features)) {\r\n      features =\r\n        /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\r\n          options.features\r\n        );\r\n    } else if (options.features) {\r\n      collection =\r\n        /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */ (\r\n          options.features\r\n        );\r\n      features = collection.getArray();\r\n    }\r\n    if (!useSpatialIndex && collection === undefined) {\r\n      collection = new Collection(features);\r\n    }\r\n    if (features !== undefined) {\r\n      this.addFeaturesInternal(features);\r\n    }\r\n    if (collection !== undefined) {\r\n      this.bindFeaturesCollection_(collection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single feature to the source.  If you want to add a batch of features\r\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\r\n   * instead. A feature will not be added to the source if feature with\r\n   * the same id is already there. The reason for this behavior is to avoid\r\n   * feature duplication when using bbox or tile loading strategies.\r\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\r\n   * meaning that if a feature with a duplicate id is added in the collection, it will\r\n   * be removed from it right away.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\r\n   * @api\r\n   */\r\n  addFeature(feature) {\r\n    this.addFeatureInternal(feature);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add a feature without firing a `change` event.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @protected\r\n   */\r\n  addFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n\r\n    if (!this.addToIndex_(featureKey, feature)) {\r\n      if (this.featuresCollection_) {\r\n        this.featuresCollection_.remove(feature);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setupChangeEvents_(featureKey, feature);\r\n\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      const extent = geometry.getExtent();\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.insert(extent, feature);\r\n      }\r\n    } else {\r\n      this.nullGeometryFeatures_[featureKey] = feature;\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @private\r\n   */\r\n  setupChangeEvents_(featureKey, feature) {\r\n    this.featureChangeKeys_[featureKey] = [\r\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\r\n      listen(\r\n        feature,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleFeatureChange_,\r\n        this\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\r\n   *     candidate for insertion into the Rtree.\r\n   * @private\r\n   */\r\n  addToIndex_(featureKey, feature) {\r\n    let valid = true;\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      if (!(id.toString() in this.idIndex_)) {\r\n        this.idIndex_[id.toString()] = feature;\r\n      } else {\r\n        valid = false;\r\n      }\r\n    }\r\n    if (valid) {\r\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    return valid;\r\n  }\r\n\r\n  /**\r\n   * Add a batch of features to the source.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\r\n   * @api\r\n   */\r\n  addFeatures(features) {\r\n    this.addFeaturesInternal(features);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add features without firing a `change` event.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\r\n   * @protected\r\n   */\r\n  addFeaturesInternal(features) {\r\n    const extents = [];\r\n    const newFeatures = [];\r\n    const geometryFeatures = [];\r\n\r\n    for (let i = 0, length = features.length; i < length; i++) {\r\n      const feature = features[i];\r\n      const featureKey = getUid(feature);\r\n      if (this.addToIndex_(featureKey, feature)) {\r\n        newFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n      const feature = newFeatures[i];\r\n      const featureKey = getUid(feature);\r\n      this.setupChangeEvents_(featureKey, feature);\r\n\r\n      const geometry = feature.getGeometry();\r\n      if (geometry) {\r\n        const extent = geometry.getExtent();\r\n        extents.push(extent);\r\n        geometryFeatures.push(feature);\r\n      } else {\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    }\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.load(extents, geometryFeatures);\r\n    }\r\n\r\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\r\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\r\n   * @private\r\n   */\r\n  bindFeaturesCollection_(collection) {\r\n    let modifyingCollection = false;\r\n    this.addEventListener(\r\n      VectorEventType.ADDFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.push(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    this.addEventListener(\r\n      VectorEventType.REMOVEFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.remove(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.addFeature(\r\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (\r\n              evt.element\r\n            )\r\n          );\r\n          modifyingCollection = false;\r\n        }\r\n      }.bind(this)\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.removeFeature(\r\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (\r\n              evt.element\r\n            )\r\n          );\r\n          modifyingCollection = false;\r\n        }\r\n      }.bind(this)\r\n    );\r\n    this.featuresCollection_ = collection;\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature removefeature} events.\r\n   * @api\r\n   */\r\n  clear(opt_fast) {\r\n    if (opt_fast) {\r\n      for (const featureId in this.featureChangeKeys_) {\r\n        const keys = this.featureChangeKeys_[featureId];\r\n        keys.forEach(unlistenByKey);\r\n      }\r\n      if (!this.featuresCollection_) {\r\n        this.featureChangeKeys_ = {};\r\n        this.idIndex_ = {};\r\n        this.uidIndex_ = {};\r\n      }\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        const removeAndIgnoreReturn = function (feature) {\r\n          this.removeFeatureInternal(feature);\r\n        }.bind(this);\r\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\r\n        for (const id in this.nullGeometryFeatures_) {\r\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\r\n        }\r\n      }\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.clear();\r\n    }\r\n\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.clear();\r\n    }\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\r\n    this.dispatchEvent(clearEvent);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features on the source, calling the provided callback\r\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\r\n   * stop and the function will return the same value.\r\n   * Note: this function only iterate through the feature that have a defined geometry.\r\n   *\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     on the source.  Return a truthy value to stop iteration.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeature(callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEach(callback);\r\n    } else if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometries contain the provided\r\n   * coordinate, calling the callback with each feature.  If the callback returns\r\n   * a \"truthy\" value, iteration will stop and the function will return the same\r\n   * value.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose goemetry contains the provided coordinate.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\r\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\r\n    return this.forEachFeatureInExtent(extent, function (feature) {\r\n      const geometry = feature.getGeometry();\r\n      if (geometry.intersectsCoordinate(coordinate)) {\r\n        return callback(feature);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose bounding box intersects the provided\r\n   * extent (note that the feature's geometry may not intersect the extent),\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you are interested in features whose geometry intersects an extent, call\r\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will loop through all\r\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose bounding box intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureInExtent(extent, callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEachInExtent(extent, callback);\r\n    } else if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometry intersects the provided extent,\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you only want to test for bounding box intersection, call the\r\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose geometry intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureIntersectingExtent(extent, callback) {\r\n    return this.forEachFeatureInExtent(\r\n      extent,\r\n      /**\r\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n       * @return {T|undefined} The return value from the last call to the callback.\r\n       */\r\n      function (feature) {\r\n        const geometry = feature.getGeometry();\r\n        if (geometry.intersectsExtent(extent)) {\r\n          const result = callback(feature);\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the features collection associated with this source. Will be `null`\r\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\r\n   * with an {@link module:ol/Collection~Collection} as `features`.\r\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\r\n   * @api\r\n   */\r\n  getFeaturesCollection() {\r\n    return this.featuresCollection_;\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot of the features currently on the source in random order. The returned array\r\n   * is a copy, the features are references to the features in the source.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    let features;\r\n    if (this.featuresCollection_) {\r\n      features = this.featuresCollection_.getArray().slice(0);\r\n    } else if (this.featuresRtree_) {\r\n      features = this.featuresRtree_.getAll();\r\n      if (!isEmpty(this.nullGeometryFeatures_)) {\r\n        extend(features, getValues(this.nullGeometryFeatures_));\r\n      }\r\n    }\r\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\r\n      features\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all features whose geometry intersects the provided coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesAtCoordinate(coordinate) {\r\n    const features = [];\r\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\r\n      features.push(feature);\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\r\n   * all features intersecting the given extent in random order (so it may include\r\n   * features whose geometries do not intersect the extent).\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will return all\r\n   * features.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.getInExtent(extent);\r\n    } else if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getArray().slice(0);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the closest feature to the provided coordinate.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [opt_filter] Feature filter function.\r\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\r\n   *     and it should return a boolean value. By default, no filtering is made.\r\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\r\n   * @api\r\n   */\r\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\r\n    // Find the closest feature using branch and bound.  We start searching an\r\n    // infinite extent, and find the distance from the first feature found.  This\r\n    // becomes the closest feature.  We then compute a smaller extent which any\r\n    // closer feature must intersect.  We continue searching with this smaller\r\n    // extent, trying to find a closer feature.  Every time we find a closer\r\n    // feature, we update the extent being searched so that any even closer\r\n    // feature must intersect it.  We continue until we run out of features.\r\n    const x = coordinate[0];\r\n    const y = coordinate[1];\r\n    let closestFeature = null;\r\n    const closestPoint = [NaN, NaN];\r\n    let minSquaredDistance = Infinity;\r\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\r\n    const filter = opt_filter ? opt_filter : TRUE;\r\n    this.featuresRtree_.forEachInExtent(\r\n      extent,\r\n      /**\r\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n       */\r\n      function (feature) {\r\n        if (filter(feature)) {\r\n          const geometry = feature.getGeometry();\r\n          const previousMinSquaredDistance = minSquaredDistance;\r\n          minSquaredDistance = geometry.closestPointXY(\r\n            x,\r\n            y,\r\n            closestPoint,\r\n            minSquaredDistance\r\n          );\r\n          if (minSquaredDistance < previousMinSquaredDistance) {\r\n            closestFeature = feature;\r\n            // This is sneaky.  Reduce the extent that it is currently being\r\n            // searched while the R-Tree traversal using this same extent object\r\n            // is still in progress.  This is safe because the new extent is\r\n            // strictly contained by the old extent.\r\n            const minDistance = Math.sqrt(minSquaredDistance);\r\n            extent[0] = x - minDistance;\r\n            extent[1] = y - minDistance;\r\n            extent[2] = x + minDistance;\r\n            extent[3] = y + minDistance;\r\n          }\r\n        }\r\n      }\r\n    );\r\n    return closestFeature;\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the features currently in the source.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Destination extent. If provided, no new extent\r\n   *     will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent(opt_extent) {\r\n    return this.featuresRtree_.getExtent(opt_extent);\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its identifier (the value returned by feature.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same.  So\r\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\r\n   *\r\n   * @param {string|number} id Feature identifier.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\r\n   * @api\r\n   */\r\n  getFeatureById(id) {\r\n    const feature = this.idIndex_[id.toString()];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its internal unique identifier (using `getUid`).\r\n   *\r\n   * @param {string} uid Feature identifier.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\r\n   */\r\n  getFeatureByUid(uid) {\r\n    const feature = this.uidIndex_[uid];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get the format associated with this source.\r\n   *\r\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */\r\n  getOverlaps() {\r\n    return this.overlaps_;\r\n  }\r\n\r\n  /**\r\n   * Get the url associated with this source.\r\n   *\r\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleFeatureChange_(event) {\r\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (\r\n      event.target\r\n    );\r\n    const featureKey = getUid(feature);\r\n    const geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      if (!(featureKey in this.nullGeometryFeatures_)) {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.remove(feature);\r\n        }\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    } else {\r\n      const extent = geometry.getExtent();\r\n      if (featureKey in this.nullGeometryFeatures_) {\r\n        delete this.nullGeometryFeatures_[featureKey];\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.insert(extent, feature);\r\n        }\r\n      } else {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.update(extent, feature);\r\n        }\r\n      }\r\n    }\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const sid = id.toString();\r\n      if (this.idIndex_[sid] !== feature) {\r\n        this.removeFromIdIndex_(feature);\r\n        this.idIndex_[sid] = feature;\r\n      }\r\n    } else {\r\n      this.removeFromIdIndex_(feature);\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    this.changed();\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if the feature is contained within the source.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @return {boolean} Has feature.\r\n   * @api\r\n   */\r\n  hasFeature(feature) {\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      return id in this.idIndex_;\r\n    } else {\r\n      return getUid(feature) in this.uidIndex_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    if (this.featuresRtree_) {\r\n      return (\r\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getLength() === 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\r\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\r\n      const extentToLoad = extentsToLoad[i];\r\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\r\n        extentToLoad,\r\n        /**\r\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\r\n         * @return {boolean} Contains.\r\n         */\r\n        function (object) {\r\n          return containsExtent(object.extent, extentToLoad);\r\n        }\r\n      );\r\n      if (!alreadyLoaded) {\r\n        ++this.loadingExtentsCount_;\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)\r\n        );\r\n        this.loader_.call(\r\n          this,\r\n          extentToLoad,\r\n          resolution,\r\n          projection,\r\n          function (features) {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(\r\n                VectorEventType.FEATURESLOADEND,\r\n                undefined,\r\n                features\r\n              )\r\n            );\r\n          }.bind(this),\r\n          function () {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)\r\n            );\r\n          }.bind(this)\r\n        );\r\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\r\n      }\r\n    }\r\n    this.loading =\r\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\r\n  }\r\n\r\n  refresh() {\r\n    this.clear(true);\r\n    this.loadedExtentsRtree_.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Remove an extent from the list of loaded extents.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  removeLoadedExtent(extent) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    let obj;\r\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\r\n      if (equals(object.extent, extent)) {\r\n        obj = object;\r\n        return true;\r\n      }\r\n    });\r\n    if (obj) {\r\n      loadedExtentsRtree.remove(obj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a single feature from the source.  If you want to remove all features\r\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\r\n   * instead.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\r\n   * @api\r\n   */\r\n  removeFeature(feature) {\r\n    if (!feature) {\r\n      return;\r\n    }\r\n    const featureKey = getUid(feature);\r\n    if (featureKey in this.nullGeometryFeatures_) {\r\n      delete this.nullGeometryFeatures_[featureKey];\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.remove(feature);\r\n      }\r\n    }\r\n    const result = this.removeFeatureInternal(feature);\r\n    if (result) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove feature without firing a `change` event.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\r\n   *     (or undefined if the feature was not found).\r\n   * @protected\r\n   */\r\n  removeFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\r\n    if (!featureChangeKeys) {\r\n      return;\r\n    }\r\n    featureChangeKeys.forEach(unlistenByKey);\r\n    delete this.featureChangeKeys_[featureKey];\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      delete this.idIndex_[id.toString()];\r\n    }\r\n    delete this.uidIndex_[featureKey];\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\r\n    );\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * Remove a feature from the id index.  Called internally when the feature id\r\n   * may have changed.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @return {boolean} Removed the feature from the index.\r\n   * @private\r\n   */\r\n  removeFromIdIndex_(feature) {\r\n    let removed = false;\r\n    for (const id in this.idIndex_) {\r\n      if (this.idIndex_[id] === feature) {\r\n        delete this.idIndex_[id];\r\n        removed = true;\r\n        break;\r\n      }\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Set the new loader of the source. The next render cycle will use the\r\n   * new loader.\r\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n\r\n  /**\r\n   * Points the source to a new url. The next render cycle will use the new url.\r\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    assert(this.format_, 7); // `format` must be set when `url` is set\r\n    this.url_ = url;\r\n    this.setLoader(xhr(url, this.format_));\r\n  }\r\n}\r\n\r\nexport default VectorSource;\r\n"],
  "mappings": "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",
  "names": ["RBush", "xhr", "VectorSourceEvent", "VectorSource", "i", "ii"]
}

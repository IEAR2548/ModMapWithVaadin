{
  "version": 3,
  "sources": ["../../@vaadin/time-picker/theme/lumo/vaadin-time-picker-styles.js", "../../@vaadin/time-picker/src/vaadin-time-picker-item.js", "../../@vaadin/time-picker/src/vaadin-time-picker-overlay.js", "../../@vaadin/time-picker/src/vaadin-time-picker-scroller.js", "../../@vaadin/time-picker/src/vaadin-time-picker-combo-box.js", "../../@vaadin/time-picker/src/vaadin-time-picker-mixin.js", "../../@vaadin/time-picker/src/vaadin-time-picker.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container-styles.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport { comboBoxItem } from '@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js';\r\nimport { comboBoxOverlay } from '@vaadin/combo-box/theme/lumo/vaadin-combo-box-overlay-styles.js';\r\nimport { item } from '@vaadin/item/theme/lumo/vaadin-item-styles.js';\r\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\r\nimport { menuOverlayCore } from '@vaadin/vaadin-lumo-styles/mixins/menu-overlay.js';\r\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles('vaadin-time-picker-item', [item, comboBoxItem], {\r\n  moduleId: 'lumo-time-picker-item',\r\n});\r\n\r\nregisterStyles(\r\n  'vaadin-time-picker-overlay',\r\n  [\r\n    overlay,\r\n    menuOverlayCore,\r\n    comboBoxOverlay,\r\n    css`\r\n      :host {\r\n        --_vaadin-time-picker-items-container-border-width: var(--lumo-space-xs);\r\n        --_vaadin-time-picker-items-container-border-style: solid;\r\n      }\r\n    `,\r\n  ],\r\n  {\r\n    moduleId: 'lumo-time-picker-overlay',\r\n  },\r\n);\r\n\r\nconst timePicker = css`\r\n  [part~='toggle-button']::before {\r\n    content: var(--lumo-icons-clock);\r\n  }\r\n\r\n  :host([dir='rtl']) [part='input-field'] ::slotted(input:placeholder-shown) {\r\n    --_lumo-text-field-overflow-mask-image: none;\r\n  }\r\n\r\n  :host([dir='rtl']) [part='input-field'] ::slotted(input) {\r\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-time-picker', [inputFieldShared, timePicker], { moduleId: 'lumo-time-picker' });\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxItemMixin } from '@vaadin/combo-box/src/vaadin-combo-box-item-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An item element used by the `<vaadin-time-picker>` dropdown.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name   | Description\r\n * ------------|--------------\r\n * `checkmark` | The graphical checkmark shown for a selected item\r\n * `content`   | The element that wraps the item content\r\n *\r\n * The following state attributes are exposed for styling:\r\n *\r\n * Attribute    | Description\r\n * -------------|-------------\r\n * `selected`   | Set when the item is selected\r\n * `focused`    | Set when the item is focused\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @customElement\r\n * @mixes ComboBoxItemMixin\r\n * @mixes ThemableMixin\r\n * @mixes DirMixin\r\n * @private\r\n */\r\nexport class TimePickerItem extends ComboBoxItemMixin(ThemableMixin(DirMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-time-picker-item';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n      <span part=\"checkmark\" aria-hidden=\"true\"></span>\r\n      <div part=\"content\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(TimePickerItem);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxOverlayMixin } from '@vaadin/combo-box/src/vaadin-combo-box-overlay-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { OverlayMixin } from '@vaadin/overlay/src/vaadin-overlay-mixin.js';\r\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\r\nimport { css, registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst timePickerOverlayStyles = css`\r\n  #overlay {\r\n    width: var(--vaadin-time-picker-overlay-width, var(--_vaadin-time-picker-overlay-default-width, auto));\r\n  }\r\n\r\n  [part='content'] {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-time-picker-overlay', [overlayStyles, timePickerOverlayStyles], {\r\n  moduleId: 'vaadin-time-picker-overlay-styles',\r\n});\r\n\r\n/**\r\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\r\n *\r\n * @extends HTMLElement\r\n * @mixes ComboBoxOverlayMixin\r\n * @mixes DirMixin\r\n * @mixes OverlayMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nexport class TimePickerOverlay extends ComboBoxOverlayMixin(OverlayMixin(DirMixin(ThemableMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-time-picker-overlay';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div id=\"backdrop\" part=\"backdrop\" hidden></div>\r\n      <div part=\"overlay\" id=\"overlay\">\r\n        <div part=\"content\" id=\"content\">\r\n          <slot></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(TimePickerOverlay);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxScrollerMixin } from '@vaadin/combo-box/src/vaadin-combo-box-scroller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ComboBoxScrollerMixin\r\n * @private\r\n */\r\nexport class TimePickerScroller extends ComboBoxScrollerMixin(PolymerElement) {\r\n  static get is() {\r\n    return 'vaadin-time-picker-scroller';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n          min-height: 1px;\r\n          overflow: auto;\r\n\r\n          /* Fixes item background from getting on top of scrollbars on Safari */\r\n          transform: translate3d(0, 0, 0);\r\n\r\n          /* Enable momentum scrolling on iOS */\r\n          -webkit-overflow-scrolling: touch;\r\n\r\n          /* Fixes scrollbar disappearing when 'Show scroll bars: Always' enabled in Safari */\r\n          box-shadow: 0 0 0 white;\r\n        }\r\n\r\n        #selector {\r\n          border-width: var(--_vaadin-time-picker-items-container-border-width);\r\n          border-style: var(--_vaadin-time-picker-items-container-border-style);\r\n          border-color: var(--_vaadin-time-picker-items-container-border-color, transparent);\r\n          position: relative;\r\n        }\r\n      </style>\r\n      <div id=\"selector\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(TimePickerScroller);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-time-picker-item.js';\r\nimport './vaadin-time-picker-overlay.js';\r\nimport './vaadin-time-picker-scroller.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxMixin } from '@vaadin/combo-box/src/vaadin-combo-box-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ComboBoxMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nclass TimePickerComboBox extends ComboBoxMixin(ThemableMixin(PolymerElement)) {\r\n  static get is() {\r\n    return 'vaadin-time-picker-combo-box';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host([opened]) {\r\n          pointer-events: auto;\r\n        }\r\n      </style>\r\n\r\n      <slot></slot>\r\n\r\n      <vaadin-time-picker-overlay\r\n        id=\"overlay\"\r\n        opened=\"[[_overlayOpened]]\"\r\n        loading$=\"[[loading]]\"\r\n        theme$=\"[[_theme]]\"\r\n        position-target=\"[[positionTarget]]\"\r\n        no-vertical-overlap\r\n        restore-focus-node=\"[[inputElement]]\"\r\n      ></vaadin-time-picker-overlay>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      positionTarget: {\r\n        type: Object,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Tag name prefix used by scroller and items.\r\n   * @protected\r\n   * @return {string}\r\n   */\r\n  get _tagNamePrefix() {\r\n    return 'vaadin-time-picker';\r\n  }\r\n\r\n  /**\r\n   * Reference to the clear button element.\r\n   * @protected\r\n   * @return {!HTMLElement}\r\n   */\r\n  get clearElement() {\r\n    return this.querySelector('[part=\"clear-button\"]');\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.allowCustomValue = true;\r\n    this._toggleElement = this.querySelector('.toggle-button');\r\n\r\n    // See https://github.com/vaadin/vaadin-time-picker/issues/145\r\n    this.setAttribute('dir', 'ltr');\r\n  }\r\n}\r\n\r\ndefineCustomElement(TimePickerComboBox);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\nimport { PatternMixin } from '@vaadin/field-base/src/pattern-mixin.js';\r\nimport { formatISOTime, parseISOTime, validateTime } from './vaadin-time-picker-helper.js';\r\n\r\nexport const timePickerI18nDefaults = Object.freeze({\r\n  formatTime: formatISOTime,\r\n  parseTime: parseISOTime,\r\n});\r\n\r\nconst MIN_ALLOWED_TIME = '00:00:00.000';\r\nconst MAX_ALLOWED_TIME = '23:59:59.999';\r\n\r\n/**\r\n * A mixin providing common time-picker functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes InputControlMixin\r\n * @mixes PatternMixin\r\n */\r\nexport const TimePickerMixin = (superClass) =>\r\n  class TimePickerMixinClass extends PatternMixin(InputControlMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The time value for this element.\r\n         *\r\n         * Supported time formats are in ISO 8601:\r\n         * - `hh:mm` (default)\r\n         * - `hh:mm:ss`\r\n         * - `hh:mm:ss.fff`\r\n         * @type {string}\r\n         */\r\n        value: {\r\n          type: String,\r\n          notify: true,\r\n          value: '',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * True if the dropdown is open, false otherwise.\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          notify: true,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Minimum time allowed.\r\n         *\r\n         * Supported time formats are in ISO 8601:\r\n         * - `hh:mm`\r\n         * - `hh:mm:ss`\r\n         * - `hh:mm:ss.fff`\r\n         * @type {string}\r\n         */\r\n        min: {\r\n          type: String,\r\n          value: '',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Maximum time allowed.\r\n         *\r\n         * Supported time formats are in ISO 8601:\r\n         * - `hh:mm`\r\n         * - `hh:mm:ss`\r\n         * - `hh:mm:ss.fff`\r\n         * @type {string}\r\n         */\r\n        max: {\r\n          type: String,\r\n          value: '',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Defines the time interval (in seconds) between the items displayed\r\n         * in the time selection box. The default is 1 hour (i.e. `3600`).\r\n         *\r\n         * It also configures the precision of the value string. By default\r\n         * the component formats values as `hh:mm` but setting a step value\r\n         * lower than one minute or one second, format resolution changes to\r\n         * `hh:mm:ss` and `hh:mm:ss.fff` respectively.\r\n         *\r\n         * Unit must be set in seconds, and for correctly configuring intervals\r\n         * in the dropdown, it need to evenly divide a day.\r\n         *\r\n         * Note: it is possible to define step that is dividing an hour in inexact\r\n         * fragments (i.e. 5760 seconds which equals 1 hour 36 minutes), but it is\r\n         * not recommended to use it for better UX experience.\r\n         */\r\n        step: {\r\n          type: Number,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set true to prevent the overlay from opening automatically.\r\n         * @attr {boolean} auto-open-disabled\r\n         */\r\n        autoOpenDisabled: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A space-delimited list of CSS class names to set on the overlay element.\r\n         *\r\n         * @attr {string} overlay-class\r\n         */\r\n        overlayClass: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * The object used to localize this component.\r\n         * To change the default localization, replace the entire\r\n         * _i18n_ object or just the property you want to modify.\r\n         *\r\n         * The object has the following JSON structure:\r\n         *\r\n         * ```\r\n         * {\r\n         *   // A function to format given `Object` as\r\n         *   // time string. Object is in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\r\n         *   formatTime: (time) => {\r\n         *     // returns a string representation of the given\r\n         *     // object in `hh` / 'hh:mm' / 'hh:mm:ss' / 'hh:mm:ss.fff' - formats\r\n         *   },\r\n         *\r\n         *   // A function to parse the given text to an `Object` in the format\r\n         *   // `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`.\r\n         *   // Must properly parse (at least) text\r\n         *   // formatted by `formatTime`.\r\n         *   parseTime: text => {\r\n         *     // Parses a string in object/string that can be formatted by`formatTime`.\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * Both `formatTime` and `parseTime` need to be implemented\r\n         * to ensure the component works properly.\r\n         *\r\n         * @type {!TimePickerI18n}\r\n         */\r\n        i18n: {\r\n          type: Object,\r\n          sync: true,\r\n          value: () => ({ ...timePickerI18nDefaults }),\r\n        },\r\n\r\n        /** @private */\r\n        _comboBoxValue: {\r\n          type: String,\r\n          sync: true,\r\n          observer: '__comboBoxValueChanged',\r\n        },\r\n\r\n        /** @private */\r\n        __dropdownItems: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _inputContainer: {\r\n          type: Object,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__updateAriaAttributes(__dropdownItems, opened, inputElement)',\r\n        '__updateDropdownItems(i18n, min, max, step)',\r\n      ];\r\n    }\r\n\r\n    static get constraints() {\r\n      return [...super.constraints, 'min', 'max'];\r\n    }\r\n\r\n    /**\r\n     * Used by `ClearButtonMixin` as a reference to the clear button element.\r\n     * @protected\r\n     * @return {!HTMLElement}\r\n     */\r\n    get clearElement() {\r\n      return this.$.clearButton;\r\n    }\r\n\r\n    /**\r\n     * The input element's value when it cannot be parsed as a time, and an empty string otherwise.\r\n     *\r\n     * @private\r\n     * @return {string}\r\n     */\r\n    get __unparsableValue() {\r\n      if (this._inputElementValue && !this.i18n.parseTime(this._inputElementValue)) {\r\n        return this._inputElementValue;\r\n      }\r\n\r\n      return '';\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(\r\n        new InputController(\r\n          this,\r\n          (input) => {\r\n            this._setInputElement(input);\r\n            this._setFocusElement(input);\r\n            this.stateTarget = input;\r\n            this.ariaTarget = input;\r\n          },\r\n          {\r\n            // The \"search\" word is a trick to prevent Safari from enabling AutoFill,\r\n            // which is causing click issues:\r\n            // https://github.com/vaadin/web-components/issues/6817#issuecomment-2268229567\r\n            uniqueIdPrefix: 'search-input',\r\n          },\r\n        ),\r\n      );\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n      this._inputContainer = this.shadowRoot.querySelector('[part~=\"input-field\"]');\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this._tooltipController.setShouldShow((timePicker) => !timePicker.opened);\r\n      this._tooltipController.setPosition('top');\r\n      this._tooltipController.setAriaTarget(this.inputElement);\r\n      this.addController(this._tooltipController);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin` to forward the input to combo-box.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _inputElementChanged(input) {\r\n      super._inputElementChanged(input);\r\n\r\n      if (input) {\r\n        this.$.comboBox._setInputElement(input);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Opens the dropdown list.\r\n     */\r\n    open() {\r\n      if (!this.disabled && !this.readonly) {\r\n        this.opened = true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Closes the dropdown list.\r\n     */\r\n    close() {\r\n      this.opened = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current input value satisfies all constraints (if any).\r\n     * You can override this method for custom validations.\r\n     *\r\n     * @return {boolean} True if the value is valid\r\n     */\r\n    checkValidity() {\r\n      return !!(\r\n        this.inputElement.checkValidity() &&\r\n        (!this.value || this._timeAllowed(this.i18n.parseTime(this.value))) &&\r\n        (!this._comboBoxValue || this.i18n.parseTime(this._comboBoxValue))\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} focused\r\n     * @override\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      if (!focused) {\r\n        // Do not validate when focusout is caused by document\r\n        // losing focus, which happens on browser tab switch.\r\n        if (document.hasFocus()) {\r\n          this._requestValidation();\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __validDayDivisor(step) {\r\n      // Valid if undefined, or exact divides a day, or has millisecond resolution\r\n      return !step || (24 * 3600) % step === 0 || (step < 1 && ((step % 1) * 1000) % 1 === 0);\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     * @param {!KeyboardEvent} e\r\n     * @protected\r\n     */\r\n    _onKeyDown(e) {\r\n      super._onKeyDown(e);\r\n\r\n      if (this.readonly || this.disabled || this.__dropdownItems.length) {\r\n        return;\r\n      }\r\n\r\n      const stepResolution = (this.__validDayDivisor(this.step) && this.step) || 60;\r\n\r\n      if (e.keyCode === 40) {\r\n        this.__onArrowPressWithStep(-stepResolution);\r\n      } else if (e.keyCode === 38) {\r\n        this.__onArrowPressWithStep(stepResolution);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     * Do not call `super` in order to override clear\r\n     * button logic defined in `InputControlMixin`.\r\n     * @param {Event} event\r\n     * @protected\r\n     */\r\n    _onEscape() {\r\n      // Do nothing, the internal combo-box handles Escape.\r\n    }\r\n\r\n    /** @private */\r\n    __onArrowPressWithStep(step) {\r\n      const objWithStep = this.__addStep(this.__getMsec(this.__memoValue), step, true);\r\n      this.__memoValue = objWithStep;\r\n\r\n      // Setting `_comboBoxValue` property triggers the synchronous\r\n      // observer where the value can be parsed again, so we set\r\n      // this flag to ensure it does not alter the value.\r\n      this.__useMemo = true;\r\n      this._comboBoxValue = this.i18n.formatTime(objWithStep);\r\n      this.__useMemo = false;\r\n\r\n      this.__commitValueChange();\r\n    }\r\n\r\n    /**\r\n     * Depending on the nature of the value change that has occurred since\r\n     * the last commit attempt, triggers validation and fires an event:\r\n     *\r\n     * Value change             | Event\r\n     * -------------------------|-------------------\r\n     * empty => parsable        | change\r\n     * empty => unparsable      | unparsable-change\r\n     * parsable => empty        | change\r\n     * parsable => parsable     | change\r\n     * parsable => unparsable   | change\r\n     * unparsable => empty      | unparsable-change\r\n     * unparsable => parsable   | change\r\n     * unparsable => unparsable | unparsable-change\r\n     *\r\n     * @private\r\n     */\r\n    __commitValueChange() {\r\n      const unparsableValue = this.__unparsableValue;\r\n\r\n      if (this.__committedValue !== this.value) {\r\n        this._requestValidation();\r\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\r\n      } else if (this.__committedUnparsableValue !== unparsableValue) {\r\n        this._requestValidation();\r\n        this.dispatchEvent(new CustomEvent('unparsable-change'));\r\n      }\r\n\r\n      this.__committedValue = this.value;\r\n      this.__committedUnparsableValue = unparsableValue;\r\n    }\r\n\r\n    /**\r\n     * Returning milliseconds from Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\r\n     * @private\r\n     */\r\n    __getMsec(obj) {\r\n      let result = ((obj && obj.hours) || 0) * 60 * 60 * 1000;\r\n      result += ((obj && obj.minutes) || 0) * 60 * 1000;\r\n      result += ((obj && obj.seconds) || 0) * 1000;\r\n      result += (obj && parseInt(obj.milliseconds)) || 0;\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Returning seconds from Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\r\n     * @private\r\n     */\r\n    __getSec(obj) {\r\n      let result = ((obj && obj.hours) || 0) * 60 * 60;\r\n      result += ((obj && obj.minutes) || 0) * 60;\r\n      result += (obj && obj.seconds) || 0;\r\n      result += (obj && obj.milliseconds / 1000) || 0;\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Returning Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\r\n     * from the result of adding step value in milliseconds to the milliseconds amount.\r\n     * With `precision` parameter rounding the value to the closest step valid interval.\r\n     * @private\r\n     */\r\n    __addStep(msec, step, precision) {\r\n      // If the time is `00:00` and step changes value downwards, it should be considered as `24:00`\r\n      if (msec === 0 && step < 0) {\r\n        msec = 24 * 60 * 60 * 1000;\r\n      }\r\n\r\n      const stepMsec = step * 1000;\r\n      const diffToNext = msec % stepMsec;\r\n      if (stepMsec < 0 && diffToNext && precision) {\r\n        msec -= diffToNext;\r\n      } else if (stepMsec > 0 && diffToNext && precision) {\r\n        msec -= diffToNext - stepMsec;\r\n      } else {\r\n        msec += stepMsec;\r\n      }\r\n\r\n      const hh = Math.floor(msec / 1000 / 60 / 60);\r\n      msec -= hh * 1000 * 60 * 60;\r\n      const mm = Math.floor(msec / 1000 / 60);\r\n      msec -= mm * 1000 * 60;\r\n      const ss = Math.floor(msec / 1000);\r\n      msec -= ss * 1000;\r\n\r\n      return { hours: hh < 24 ? hh : 0, minutes: mm, seconds: ss, milliseconds: msec };\r\n    }\r\n\r\n    /** @private */\r\n    __updateDropdownItems(i18n, min, max, step) {\r\n      const minTimeObj = validateTime(parseISOTime(min || MIN_ALLOWED_TIME), step);\r\n      const minSec = this.__getSec(minTimeObj);\r\n\r\n      const maxTimeObj = validateTime(parseISOTime(max || MAX_ALLOWED_TIME), step);\r\n      const maxSec = this.__getSec(maxTimeObj);\r\n\r\n      this.__dropdownItems = this.__generateDropdownList(minSec, maxSec, step);\r\n\r\n      if (step !== this.__oldStep) {\r\n        this.__oldStep = step;\r\n        const parsedObj = validateTime(parseISOTime(this.value), step);\r\n        this.__updateValue(parsedObj);\r\n      }\r\n\r\n      if (this.value) {\r\n        this._comboBoxValue = i18n.formatTime(i18n.parseTime(this.value));\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateAriaAttributes(items, opened, input) {\r\n      if (items === undefined || input === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (items.length === 0) {\r\n        input.removeAttribute('role');\r\n        input.removeAttribute('aria-expanded');\r\n      } else {\r\n        input.setAttribute('role', 'combobox');\r\n        input.setAttribute('aria-expanded', !!opened);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __generateDropdownList(minSec, maxSec, step) {\r\n      if (step < 15 * 60 || !this.__validDayDivisor(step)) {\r\n        return [];\r\n      }\r\n\r\n      const generatedList = [];\r\n\r\n      // Default step in overlay items is 1 hour\r\n      if (!step) {\r\n        step = 3600;\r\n      }\r\n\r\n      let time = -step + minSec;\r\n      while (time + step >= minSec && time + step <= maxSec) {\r\n        const timeObj = validateTime(this.__addStep(time * 1000, step), step);\r\n        time += step;\r\n        const formatted = this.i18n.formatTime(timeObj);\r\n        generatedList.push({ label: formatted, value: formatted });\r\n      }\r\n\r\n      return generatedList;\r\n    }\r\n\r\n    /**\r\n     * Override an observer from `InputMixin`.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _valueChanged(value, oldValue) {\r\n      const parsedObj = (this.__memoValue = parseISOTime(value));\r\n      const newValue = formatISOTime(parsedObj) || '';\r\n\r\n      // Mark value set programmatically by the user\r\n      // as committed for the change event detection.\r\n      if (!this.__keepCommittedValue) {\r\n        this.__committedValue = value;\r\n        this.__committedUnparsableValue = '';\r\n      }\r\n\r\n      if (value !== '' && value !== null && !parsedObj) {\r\n        // Value can not be parsed, reset to the old one.\r\n        this.value = oldValue === undefined ? '' : oldValue;\r\n      } else if (value !== newValue) {\r\n        // Value can be parsed (e.g. 12 -> 12:00), adjust.\r\n        this.value = newValue;\r\n      } else if (this.__keepInvalidInput) {\r\n        // User input could not be parsed and was reset\r\n        // to empty string, do not update input value.\r\n        delete this.__keepInvalidInput;\r\n      } else {\r\n        this.__updateInputValue(parsedObj);\r\n      }\r\n\r\n      this._toggleHasValue(this._hasValue);\r\n    }\r\n\r\n    /** @private */\r\n    __comboBoxValueChanged(value, oldValue) {\r\n      if (value === '' && oldValue === undefined) {\r\n        return;\r\n      }\r\n\r\n      const parsedObj = this.__useMemo ? this.__memoValue : this.i18n.parseTime(value);\r\n      const newValue = this.i18n.formatTime(parsedObj) || '';\r\n\r\n      if (parsedObj) {\r\n        if (value !== newValue) {\r\n          this._comboBoxValue = newValue;\r\n        } else {\r\n          this.__keepCommittedValue = true;\r\n          this.__updateValue(parsedObj);\r\n          this.__keepCommittedValue = false;\r\n        }\r\n      } else {\r\n        // If the user input can not be parsed, set a flag\r\n        // that prevents `__valueChanged` from removing the input\r\n        // after setting the value property to an empty string below.\r\n        if (this.value !== '' && value !== '') {\r\n          this.__keepInvalidInput = true;\r\n        }\r\n\r\n        this.__keepCommittedValue = true;\r\n        this.value = '';\r\n        this.__keepCommittedValue = false;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onComboBoxChange(event) {\r\n      event.stopPropagation();\r\n      this.__commitValueChange();\r\n    }\r\n\r\n    /** @private */\r\n    __updateValue(obj) {\r\n      const timeString = formatISOTime(validateTime(obj, this.step)) || '';\r\n      this.value = timeString;\r\n\r\n      // Always strip the input value to match the step interval, even\r\n      // if the component value hasn't changed. For example, if the step\r\n      // is 3600 \"10:00:50\" should become \"10:00\".\r\n      this.__updateInputValue(obj);\r\n    }\r\n\r\n    /** @private */\r\n    __updateInputValue(obj) {\r\n      const timeString = this.i18n.formatTime(validateTime(obj, this.step)) || '';\r\n      this._comboBoxValue = timeString;\r\n    }\r\n\r\n    /**\r\n     * Returns true if `time` satisfies the `min` and `max` constraints (if any).\r\n     *\r\n     * @param {!TimePickerTime} time Value to check against constraints\r\n     * @return {boolean} True if `time` satisfies the constraints\r\n     * @protected\r\n     */\r\n    _timeAllowed(time) {\r\n      const parsedMin = this.i18n.parseTime(this.min || MIN_ALLOWED_TIME);\r\n      const parsedMax = this.i18n.parseTime(this.max || MAX_ALLOWED_TIME);\r\n\r\n      return (\r\n        (!this.__getMsec(parsedMin) || this.__getMsec(time) >= this.__getMsec(parsedMin)) &&\r\n        (!this.__getMsec(parsedMax) || this.__getMsec(time) <= this.__getMsec(parsedMax))\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputControlMixin`.\r\n     * @protected\r\n     */\r\n    _onClearButtonClick() {}\r\n\r\n    /**\r\n     * Override method inherited from `InputConstraintsMixin`.\r\n     * @protected\r\n     */\r\n    _onChange() {}\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin`.\r\n     * @protected\r\n     */\r\n    _onInput() {}\r\n\r\n    /**\r\n     * Fired when the user commits a value change.\r\n     *\r\n     * @event change\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport './vaadin-time-picker-combo-box.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { TimePickerMixin } from './vaadin-time-picker-mixin.js';\r\n\r\nregisterStyles('vaadin-time-picker', inputFieldShared, { moduleId: 'vaadin-time-picker-styles' });\r\n\r\n/**\r\n * `<vaadin-time-picker>` is a Web Component providing a time-selection field.\r\n *\r\n * ```html\r\n * <vaadin-time-picker></vaadin-time-picker>\r\n * ```\r\n * ```js\r\n * timePicker.value = '14:30';\r\n * ```\r\n *\r\n * When the selected `value` is changed, a `value-changed` event is triggered.\r\n *\r\n * ### Styling\r\n *\r\n * The following custom properties are available for styling:\r\n *\r\n * Custom property                          | Description                | Default\r\n * -----------------------------------------|----------------------------|---------\r\n * `--vaadin-field-default-width`           | Default width of the field | `12em`\r\n * `--vaadin-time-picker-overlay-width`     | Width of the overlay       | `auto`\r\n * `--vaadin-time-picker-overlay-max-height`| Max height of the overlay  | `65vh`\r\n *\r\n * `<vaadin-time-picker>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\r\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\r\n *\r\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\r\n *\r\n * Part name       | Description\r\n * ----------------|----------------\r\n * `toggle-button` | The toggle button\r\n *\r\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\r\n *\r\n * Attribute | Description\r\n * ----------|------------------------------------------\r\n * `opened`  | Set when the time-picker dropdown is open\r\n *\r\n * ### Internal components\r\n *\r\n * In addition to `<vaadin-time-picker>` itself, the following internal\r\n * components are themable:\r\n *\r\n * - `<vaadin-time-picker-combo-box>` - has the same API as [`<vaadin-combo-box-light>`](#/elements/vaadin-combo-box-light).\r\n * - `<vaadin-time-picker-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).\r\n * - `<vaadin-time-picker-item>` - has the same API as [`<vaadin-item>`](#/elements/vaadin-item).\r\n * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the input.\r\n *\r\n * Note: the `theme` attribute value set on `<vaadin-time-picker>` is\r\n * propagated to the internal components listed above.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * ### Change events\r\n *\r\n * Depending on the nature of the value change that the user attempts to commit e.g. by pressing Enter,\r\n * the component can fire either a `change` event or an `unparsable-change` event:\r\n *\r\n * Value change             | Event\r\n * :------------------------|:------------------\r\n * empty => parsable        | change\r\n * empty => unparsable      | unparsable-change\r\n * parsable => empty        | change\r\n * parsable => parsable     | change\r\n * parsable => unparsable   | change\r\n * unparsable => empty      | unparsable-change\r\n * unparsable => parsable   | change\r\n * unparsable => unparsable | unparsable-change\r\n *\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n * @mixes TimePickerMixin\r\n */\r\nclass TimePicker extends TimePickerMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-time-picker';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        /* See https://github.com/vaadin/vaadin-time-picker/issues/145 */\r\n        :host([dir='rtl']) [part='input-field'] {\r\n          direction: ltr;\r\n        }\r\n\r\n        :host([dir='rtl']) [part='input-field'] ::slotted(input)::placeholder {\r\n          direction: rtl;\r\n          text-align: left;\r\n        }\r\n\r\n        [part~='toggle-button'] {\r\n          cursor: pointer;\r\n        }\r\n      </style>\r\n\r\n      <div class=\"vaadin-time-picker-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-time-picker-combo-box\r\n          id=\"comboBox\"\r\n          filtered-items=\"[[__dropdownItems]]\"\r\n          value=\"{{_comboBoxValue}}\"\r\n          opened=\"{{opened}}\"\r\n          disabled=\"[[disabled]]\"\r\n          readonly=\"[[readonly]]\"\r\n          clear-button-visible=\"[[clearButtonVisible]]\"\r\n          auto-open-disabled=\"[[autoOpenDisabled]]\"\r\n          overlay-class=\"[[overlayClass]]\"\r\n          position-target=\"[[_inputContainer]]\"\r\n          theme$=\"[[_theme]]\"\r\n          on-change=\"__onComboBoxChange\"\r\n        >\r\n          <vaadin-input-container\r\n            part=\"input-field\"\r\n            readonly=\"[[readonly]]\"\r\n            disabled=\"[[disabled]]\"\r\n            invalid=\"[[invalid]]\"\r\n            theme$=\"[[_theme]]\"\r\n          >\r\n            <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n            <slot name=\"input\"></slot>\r\n            <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n            <div id=\"toggleButton\" class=\"toggle-button\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n          </vaadin-input-container>\r\n        </vaadin-time-picker-combo-box>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(TimePicker);\r\n\r\nexport { TimePicker };\r\n"],
  "mappings": "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",
  "names": ["timePicker", "inputFieldShared"]
}

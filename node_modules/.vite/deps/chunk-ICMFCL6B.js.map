{
  "version": 3,
  "sources": ["../../@vaadin/form-layout/theme/lumo/vaadin-form-layout-styles.js", "../../@vaadin/form-layout/src/vaadin-form-layout-mixin.js", "../../@vaadin/form-layout/src/vaadin-form-layout.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-form-layout',\r\n  css`\r\n    :host {\r\n      --vaadin-form-layout-column-spacing: var(--lumo-space-l);\r\n      --vaadin-form-layout-row-spacing: 0;\r\n    }\r\n  `,\r\n  { moduleId: 'lumo-form-layout' },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isElementHidden } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\n\r\nfunction isValidCSSLength(value) {\r\n  // Check if the value is a valid CSS length and not `inherit` or `normal`,\r\n  // which are also valid values for `word-spacing`, see:\r\n  // https://drafts.csswg.org/css-text-3/#word-spacing-property\r\n  return CSS.supports('word-spacing', value) && !['inherit', 'normal'].includes(value);\r\n}\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes ResizeMixin\r\n */\r\nexport const FormLayoutMixin = (superClass) =>\r\n  class extends ResizeMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * @typedef FormLayoutResponsiveStep\r\n         * @type {object}\r\n         * @property {string} minWidth - The threshold value for this step in CSS length units.\r\n         * @property {number} columns - Number of columns. Only natural numbers are valid.\r\n         * @property {string} labelsPosition - Labels position option, valid values: `\"aside\"` (default), `\"top\"`.\r\n         */\r\n\r\n        /**\r\n         * Allows specifying a responsive behavior with the number of columns\r\n         * and the label position depending on the layout width.\r\n         *\r\n         * Format: array of objects, each object defines one responsive step\r\n         * with `minWidth` CSS length, `columns` number, and optional\r\n         * `labelsPosition` string of `\"aside\"` or `\"top\"`. At least one item is required.\r\n         *\r\n         * #### Examples\r\n         *\r\n         * ```javascript\r\n         * formLayout.responsiveSteps = [{columns: 1}];\r\n         * // The layout is always a single column, labels aside.\r\n         * ```\r\n         *\r\n         * ```javascript\r\n         * formLayout.responsiveSteps = [\r\n         *   {minWidth: 0, columns: 1},\r\n         *   {minWidth: '40em', columns: 2}\r\n         * ];\r\n         * // Sets two responsive steps:\r\n         * // 1. When the layout width is < 40em, one column, labels aside.\r\n         * // 2. Width >= 40em, two columns, labels aside.\r\n         * ```\r\n         *\r\n         * ```javascript\r\n         * formLayout.responsiveSteps = [\r\n         *   {minWidth: 0, columns: 1, labelsPosition: 'top'},\r\n         *   {minWidth: '20em', columns: 1},\r\n         *   {minWidth: '40em', columns: 2}\r\n         * ];\r\n         * // Default value. Three responsive steps:\r\n         * // 1. Width < 20em, one column, labels on top.\r\n         * // 2. 20em <= width < 40em, one column, labels aside.\r\n         * // 3. Width >= 40em, two columns, labels aside.\r\n         * ```\r\n         *\r\n         * @type {!Array<!FormLayoutResponsiveStep>}\r\n         */\r\n        responsiveSteps: {\r\n          type: Array,\r\n          value() {\r\n            return [\r\n              { minWidth: 0, columns: 1, labelsPosition: 'top' },\r\n              { minWidth: '20em', columns: 1 },\r\n              { minWidth: '40em', columns: 2 },\r\n            ];\r\n          },\r\n          observer: '_responsiveStepsChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Current number of columns in the layout\r\n         * @private\r\n         */\r\n        _columnCount: {\r\n          type: Number,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Indicates that labels are on top\r\n         * @private\r\n         */\r\n        _labelsOnTop: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_invokeUpdateLayout(_columnCount, _labelsOnTop)'];\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      // Set up an observer to update layout when new children are added or removed.\r\n      this.__childrenObserver = new MutationObserver(() => this._updateLayout());\r\n      this.__childrenObserver.observe(this, { childList: true });\r\n\r\n      // Set up an observer to update layout when children's attributes change.\r\n      this.__childrenAttributesObserver = new MutationObserver((mutations) => {\r\n        if (mutations.some((mutation) => mutation.target.parentElement === this)) {\r\n          this._updateLayout();\r\n        }\r\n      });\r\n      this.__childrenAttributesObserver.observe(this, {\r\n        subtree: true,\r\n        attributes: true,\r\n        attributeFilter: ['colspan', 'data-colspan', 'hidden'],\r\n      });\r\n\r\n      requestAnimationFrame(() => this._selectResponsiveStep());\r\n      requestAnimationFrame(() => this._updateLayout());\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n\r\n      this.__childrenObserver.disconnect();\r\n      this.__childrenAttributesObserver.disconnect();\r\n    }\r\n\r\n    /** @private */\r\n    _naturalNumberOrOne(n) {\r\n      if (typeof n === 'number' && n >= 1 && n < Infinity) {\r\n        return Math.floor(n);\r\n      }\r\n      return 1;\r\n    }\r\n\r\n    /** @private */\r\n    _responsiveStepsChanged(responsiveSteps, oldResponsiveSteps) {\r\n      try {\r\n        if (!Array.isArray(responsiveSteps)) {\r\n          throw new Error('Invalid \"responsiveSteps\" type, an Array is required.');\r\n        }\r\n\r\n        if (responsiveSteps.length < 1) {\r\n          throw new Error('Invalid empty \"responsiveSteps\" array, at least one item is required.');\r\n        }\r\n\r\n        responsiveSteps.forEach((step) => {\r\n          if (this._naturalNumberOrOne(step.columns) !== step.columns) {\r\n            throw new Error(`Invalid 'columns' value of ${step.columns}, a natural number is required.`);\r\n          }\r\n\r\n          if (step.minWidth !== undefined && !isValidCSSLength(step.minWidth)) {\r\n            throw new Error(`Invalid 'minWidth' value of ${step.minWidth}, a valid CSS length required.`);\r\n          }\r\n\r\n          if (step.labelsPosition !== undefined && ['aside', 'top'].indexOf(step.labelsPosition) === -1) {\r\n            throw new Error(\r\n              `Invalid 'labelsPosition' value of ${step.labelsPosition}, 'aside' or 'top' string is required.`,\r\n            );\r\n          }\r\n        });\r\n      } catch (e) {\r\n        if (oldResponsiveSteps && oldResponsiveSteps !== responsiveSteps) {\r\n          console.warn(`${e.message} Using previously set 'responsiveSteps' instead.`);\r\n          this.responsiveSteps = oldResponsiveSteps;\r\n        } else {\r\n          console.warn(`${e.message} Using default 'responsiveSteps' instead.`);\r\n          this.responsiveSteps = [\r\n            { minWidth: 0, columns: 1, labelsPosition: 'top' },\r\n            { minWidth: '20em', columns: 1 },\r\n            { minWidth: '40em', columns: 2 },\r\n          ];\r\n        }\r\n      }\r\n\r\n      this._selectResponsiveStep();\r\n    }\r\n\r\n    /** @private */\r\n    _selectResponsiveStep() {\r\n      // Iterate through responsiveSteps and choose the step\r\n      let selectedStep;\r\n      const tmpStyleProp = 'background-position';\r\n      this.responsiveSteps.forEach((step) => {\r\n        // Convert minWidth to px units for comparison\r\n        this.$.layout.style.setProperty(tmpStyleProp, step.minWidth);\r\n        const stepMinWidthPx = parseFloat(getComputedStyle(this.$.layout).getPropertyValue(tmpStyleProp));\r\n\r\n        // Compare step min-width with the host width, select the passed step\r\n        if (stepMinWidthPx <= this.offsetWidth) {\r\n          selectedStep = step;\r\n        }\r\n      });\r\n      this.$.layout.style.removeProperty(tmpStyleProp);\r\n\r\n      // Sometimes converting units is not possible, e.g, when element is\r\n      // not connected. Then the `selectedStep` stays `undefined`.\r\n      if (selectedStep) {\r\n        // Apply the chosen responsive step's properties\r\n        this._columnCount = selectedStep.columns;\r\n        this._labelsOnTop = selectedStep.labelsPosition === 'top';\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _invokeUpdateLayout() {\r\n      this._updateLayout();\r\n    }\r\n\r\n    /**\r\n     * Update the layout.\r\n     * @protected\r\n     */\r\n    _updateLayout() {\r\n      // Do not update layout when invisible\r\n      if (isElementHidden(this)) {\r\n        return;\r\n      }\r\n\r\n      /*\r\n        The item width formula:\r\n\r\n            itemWidth = colspan / columnCount * 100% - columnSpacing\r\n\r\n        We have to subtract columnSpacing, because the column spacing space is taken\r\n        by item margins of 1/2 * spacing on both sides\r\n      */\r\n\r\n      const style = getComputedStyle(this);\r\n      const columnSpacing = style.getPropertyValue('--vaadin-form-layout-column-spacing');\r\n\r\n      const direction = style.direction;\r\n      const marginStartProp = `margin-${direction === 'ltr' ? 'left' : 'right'}`;\r\n      const marginEndProp = `margin-${direction === 'ltr' ? 'right' : 'left'}`;\r\n\r\n      const containerWidth = this.offsetWidth;\r\n\r\n      let col = 0;\r\n      Array.from(this.children)\r\n        .filter((child) => child.localName === 'br' || getComputedStyle(child).display !== 'none')\r\n        .forEach((child, index, children) => {\r\n          if (child.localName === 'br') {\r\n            // Reset column count on line break\r\n            col = 0;\r\n            return;\r\n          }\r\n\r\n          const attrColspan = child.getAttribute('colspan') || child.getAttribute('data-colspan');\r\n          let colspan;\r\n          colspan = this._naturalNumberOrOne(parseFloat(attrColspan));\r\n\r\n          // Never span further than the number of columns\r\n          colspan = Math.min(colspan, this._columnCount);\r\n\r\n          const childRatio = colspan / this._columnCount;\r\n          child.style.width = `calc(${childRatio * 100}% - ${1 - childRatio} * ${columnSpacing})`;\r\n\r\n          if (col + colspan > this._columnCount) {\r\n            // Too big to fit on this row, let's wrap it\r\n            col = 0;\r\n          }\r\n\r\n          // At the start edge\r\n          if (col === 0) {\r\n            child.style.setProperty(marginStartProp, '0px');\r\n          } else {\r\n            child.style.removeProperty(marginStartProp);\r\n          }\r\n\r\n          const nextIndex = index + 1;\r\n          const nextLineBreak = nextIndex < children.length && children[nextIndex].localName === 'br';\r\n\r\n          // At the end edge\r\n          if (col + colspan === this._columnCount) {\r\n            child.style.setProperty(marginEndProp, '0px');\r\n          } else if (nextLineBreak) {\r\n            const colspanRatio = (this._columnCount - col - colspan) / this._columnCount;\r\n            child.style.setProperty(\r\n              marginEndProp,\r\n              `calc(${colspanRatio * containerWidth}px + ${colspanRatio} * ${columnSpacing})`,\r\n            );\r\n          } else {\r\n            child.style.removeProperty(marginEndProp);\r\n          }\r\n\r\n          // Move the column counter\r\n          col = (col + colspan) % this._columnCount;\r\n\r\n          if (child.localName === 'vaadin-form-item') {\r\n            if (this._labelsOnTop) {\r\n              if (child.getAttribute('label-position') !== 'top') {\r\n                child.__useLayoutLabelPosition = true;\r\n                child.setAttribute('label-position', 'top');\r\n              }\r\n            } else if (child.__useLayoutLabelPosition) {\r\n              delete child.__useLayoutLabelPosition;\r\n              child.removeAttribute('label-position');\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onResize(contentRect) {\r\n      if (contentRect.width === 0 && contentRect.height === 0) {\r\n        this.$.layout.style.opacity = '0';\r\n        return;\r\n      }\r\n\r\n      this._selectResponsiveStep();\r\n      this._updateLayout();\r\n\r\n      this.$.layout.style.opacity = '';\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { FormLayoutMixin } from './vaadin-form-layout-mixin.js';\r\nimport { formLayoutStyles } from './vaadin-form-layout-styles.js';\r\n\r\nregisterStyles('vaadin-form-layout', formLayoutStyles, { moduleId: 'vaadin-form-layout-styles' });\r\n\r\n/**\r\n * `<vaadin-form-layout>` is a Web Component providing configurable responsive\r\n * layout for form elements.\r\n *\r\n * ```html\r\n * <vaadin-form-layout>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">First Name</label>\r\n *     <input class=\"full-width\" value=\"Jane\">\r\n *   </vaadin-form-item>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">Last Name</label>\r\n *     <input class=\"full-width\" value=\"Doe\">\r\n *   </vaadin-form-item>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">Email</label>\r\n *     <input class=\"full-width\" value=\"jane.doe@example.com\">\r\n *   </vaadin-form-item>\r\n *\r\n * </vaadin-form-layout>\r\n * ```\r\n *\r\n * It supports any child elements as layout items.\r\n *\r\n * By default, it makes a layout of two columns if the element width is equal or\r\n * wider than 40em, and a single column layout otherwise.\r\n *\r\n * The number of columns and the responsive behavior are customizable with\r\n * the `responsiveSteps` property.\r\n *\r\n * ### Spanning Items on Multiple Columns\r\n *\r\n * You can use `colspan` or `data-colspan` attribute on the items.\r\n * In the example below, the first text field spans on two columns:\r\n *\r\n * ```html\r\n * <vaadin-form-layout>\r\n *\r\n *   <vaadin-form-item colspan=\"2\">\r\n *     <label slot=\"label\">Address</label>\r\n *     <input class=\"full-width\">\r\n *   </vaadin-form-item>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">First Name</label>\r\n *     <input class=\"full-width\" value=\"Jane\">\r\n *   </vaadin-form-item>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">Last Name</label>\r\n *     <input class=\"full-width\" value=\"Doe\">\r\n *   </vaadin-form-item>\r\n *\r\n * </vaadin-form-layout>\r\n * ```\r\n *\r\n * ### Explicit New Row\r\n *\r\n * Use the `<br>` line break element to wrap the items on a new row:\r\n *\r\n * ```html\r\n * <vaadin-form-layout>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">Email</label>\r\n *     <input class=\"full-width\">\r\n *   </vaadin-form-item>\r\n *\r\n *   <br>\r\n *\r\n *   <vaadin-form-item>\r\n *     <label slot=\"label\">Confirm Email</label>\r\n *     <input class=\"full-width\">\r\n *   </vaadin-form-item>\r\n *\r\n * </vaadin-form-layout>\r\n * ```\r\n *\r\n * ### CSS Properties Reference\r\n *\r\n * The following custom CSS properties are available on the `<vaadin-form-layout>`\r\n * element:\r\n *\r\n * Custom CSS property | Description | Default\r\n * ---|---|---\r\n * `--vaadin-form-layout-column-spacing` | Length of the spacing between columns | `2em`\r\n * `--vaadin-form-layout-row-spacing` | Length of the spacing between rows | `1em`\r\n * `--vaadin-form-layout-label-width` | Width of the label when labels are displayed aside | `8em`\r\n * `--vaadin-form-layout-label-spacing` | Length of the spacing between the label and the input when labels are displayed aside | `1em`\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes FormLayoutMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n */\r\nclass FormLayout extends FormLayoutMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-form-layout';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div id=\"layout\">\r\n        <slot id=\"slot\"></slot>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(FormLayout);\r\n\r\nexport { FormLayout };\r\n"],
  "mappings": "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",
  "names": []
}

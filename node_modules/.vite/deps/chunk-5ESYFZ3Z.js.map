{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-helpers.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { microTask } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\r\n\r\n/**\r\n * Returns the cells of the given row, excluding the details cell.\r\n *\r\n * @param {HTMLTableRowElement} row the table row\r\n * @return {HTMLTableCellElement[]} array of cells\r\n */\r\nexport function getBodyRowCells(row) {\r\n  // If available, return the cached cells. Otherwise, query the cells directly from the row.\r\n  return row.__cells || Array.from(row.querySelectorAll('[part~=\"cell\"]:not([part~=\"details-cell\"])'));\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} container the DOM element with children\r\n * @param {Function} callback function to call on each child\r\n */\r\nexport function iterateChildren(container, callback) {\r\n  [...container.children].forEach(callback);\r\n}\r\n\r\n/**\r\n * Iterates over the cells of a row. This includes the details cell if\r\n * present and any other cell that may be physically detached from the row\r\n * due to lazy column reordering.\r\n *\r\n * @param {HTMLTableRowElement} row the table row\r\n * @param {Function} callback function to call on each cell\r\n */\r\nexport function iterateRowCells(row, callback) {\r\n  getBodyRowCells(row).forEach(callback);\r\n  if (row.__detailsCell) {\r\n    callback(row.__detailsCell);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<Object>} columns array of columns to be modified\r\n * @param {number} scope multiplier added to base order for each column\r\n * @param {number} baseOrder base number used for order\r\n */\r\nexport function updateColumnOrders(columns, scope, baseOrder) {\r\n  let c = 1;\r\n  columns.forEach((column) => {\r\n    // Avoid multiples of 10 because they introduce and extra zero and\r\n    // causes the underlying calculations for child order goes wrong\r\n    if (c % 10 === 0) {\r\n      c += 1;\r\n    }\r\n    column._order = baseOrder + c * scope;\r\n    c += 1;\r\n  });\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} element\r\n * @param {string} attribute\r\n * @param {boolean | string | null | undefined} value\r\n */\r\nexport function updateState(element, attribute, value) {\r\n  switch (typeof value) {\r\n    case 'boolean':\r\n      element.toggleAttribute(attribute, value);\r\n      break;\r\n    case 'string':\r\n      element.setAttribute(attribute, value);\r\n      break;\r\n    default:\r\n      // Value set to null / undefined\r\n      element.removeAttribute(attribute);\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} element\r\n * @param {boolean | string | null | undefined} value\r\n * @param {string} part\r\n */\r\nexport function updatePart(element, value, part) {\r\n  if (value || value === '') {\r\n    addValueToAttribute(element, 'part', part);\r\n  } else {\r\n    removeValueFromAttribute(element, 'part', part);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLTableCellElement[]} cells\r\n * @param {string} part\r\n * @param {boolean | string | null | undefined} value\r\n */\r\nexport function updateCellsPart(cells, part, value) {\r\n  cells.forEach((cell) => {\r\n    updatePart(cell, value, part);\r\n  });\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} row\r\n * @param {Object} states\r\n */\r\nexport function updateBooleanRowStates(row, states) {\r\n  const cells = getBodyRowCells(row);\r\n\r\n  Object.entries(states).forEach(([state, value]) => {\r\n    // Row state attribute\r\n    updateState(row, state, value);\r\n\r\n    const rowPart = `${state}-row`;\r\n\r\n    // Row part attribute\r\n    updatePart(row, value, rowPart);\r\n\r\n    // Cells part attribute\r\n    updateCellsPart(cells, `${rowPart}-cell`, value);\r\n  });\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} row\r\n * @param {Object} states\r\n */\r\nexport function updateStringRowStates(row, states) {\r\n  const cells = getBodyRowCells(row);\r\n\r\n  Object.entries(states).forEach(([state, value]) => {\r\n    const prevValue = row.getAttribute(state);\r\n\r\n    // Row state attribute\r\n    updateState(row, state, value);\r\n\r\n    // remove previous part from row and cells if there was any\r\n    if (prevValue) {\r\n      const prevRowPart = `${state}-${prevValue}-row`;\r\n      updatePart(row, false, prevRowPart);\r\n      updateCellsPart(cells, `${prevRowPart}-cell`, false);\r\n    }\r\n\r\n    // set new part to rows and cells if there is a value\r\n    if (value) {\r\n      const rowPart = `${state}-${value}-row`;\r\n      updatePart(row, value, rowPart);\r\n      updateCellsPart(cells, `${rowPart}-cell`, value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} cell\r\n * @param {string} attribute\r\n * @param {boolean | string | null | undefined} value\r\n * @param {string} part\r\n * @param {?string} oldPart\r\n */\r\nexport function updateCellState(cell, attribute, value, part, oldPart) {\r\n  // Toggle state attribute on the cell\r\n  updateState(cell, attribute, value);\r\n\r\n  // Remove old part from the attribute\r\n  if (oldPart) {\r\n    updatePart(cell, false, oldPart);\r\n  }\r\n\r\n  // Add new part to the cell attribute\r\n  updatePart(cell, value, part || `${attribute}-cell`);\r\n}\r\n\r\n/**\r\n * A helper for observing flattened child column list of an element.\r\n */\r\nexport class ColumnObserver {\r\n  constructor(host, callback) {\r\n    this.__host = host;\r\n    this.__callback = callback;\r\n    this.__currentSlots = [];\r\n\r\n    this.__onMutation = this.__onMutation.bind(this);\r\n    this.__observer = new MutationObserver(this.__onMutation);\r\n    this.__observer.observe(host, {\r\n      childList: true,\r\n    });\r\n\r\n    // The observer callback is invoked once initially.\r\n    this.__initialCallDebouncer = Debouncer.debounce(this.__initialCallDebouncer, microTask, () => this.__onMutation());\r\n  }\r\n\r\n  disconnect() {\r\n    this.__observer.disconnect();\r\n    this.__initialCallDebouncer.cancel();\r\n    this.__toggleSlotChangeListeners(false);\r\n  }\r\n\r\n  flush() {\r\n    this.__onMutation();\r\n  }\r\n\r\n  __toggleSlotChangeListeners(add) {\r\n    this.__currentSlots.forEach((slot) => {\r\n      if (add) {\r\n        slot.addEventListener('slotchange', this.__onMutation);\r\n      } else {\r\n        slot.removeEventListener('slotchange', this.__onMutation);\r\n      }\r\n    });\r\n  }\r\n\r\n  __onMutation() {\r\n    // Detect if this is the initial call\r\n    const initialCall = !this.__currentColumns;\r\n    this.__currentColumns ||= [];\r\n\r\n    // Detect added and removed columns or if the columns order has changed\r\n    const columns = ColumnObserver.getColumns(this.__host);\r\n    const addedColumns = columns.filter((column) => !this.__currentColumns.includes(column));\r\n    const removedColumns = this.__currentColumns.filter((column) => !columns.includes(column));\r\n    const orderChanged = this.__currentColumns.some((column, index) => column !== columns[index]);\r\n    this.__currentColumns = columns;\r\n\r\n    // Update the list of child slots and toggle their slotchange listeners\r\n    this.__toggleSlotChangeListeners(false);\r\n    this.__currentSlots = [...this.__host.children].filter((child) => child instanceof HTMLSlotElement);\r\n    this.__toggleSlotChangeListeners(true);\r\n\r\n    // Invoke the callback if there are changes in the child columns or if this is the initial call\r\n    const invokeCallback = initialCall || addedColumns.length || removedColumns.length || orderChanged;\r\n    if (invokeCallback) {\r\n      this.__callback(addedColumns, removedColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default filter for column elements.\r\n   */\r\n  static __isColumnElement(node) {\r\n    return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/u.test(node.localName);\r\n  }\r\n\r\n  static getColumns(host) {\r\n    const columns = [];\r\n\r\n    // A temporary workaround for backwards compatibility\r\n    const isColumnElement = host._isColumnElement || ColumnObserver.__isColumnElement;\r\n\r\n    [...host.children].forEach((child) => {\r\n      if (isColumnElement(child)) {\r\n        // The child is a column element, add it to the list\r\n        columns.push(child);\r\n      } else if (child instanceof HTMLSlotElement) {\r\n        // The child is a slot, add all assigned column elements to the list\r\n        [...child.assignedElements({ flatten: true })]\r\n          .filter((assignedElement) => isColumnElement(assignedElement))\r\n          .forEach((assignedElement) => columns.push(assignedElement));\r\n      }\r\n    });\r\n\r\n    return columns;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../ol/src/extent/Corner.js", "../../ol/src/extent/Relationship.js", "../../ol/src/extent.js"],
  "sourcesContent": ["/**\r\n * @module ol/extent/Corner\r\n */\r\n\r\n/**\r\n * Extent corner.\r\n * @enum {string}\r\n */\r\nexport default {\r\n  BOTTOM_LEFT: 'bottom-left',\r\n  BOTTOM_RIGHT: 'bottom-right',\r\n  TOP_LEFT: 'top-left',\r\n  TOP_RIGHT: 'top-right',\r\n};\r\n", "/**\r\n * @module ol/extent/Relationship\r\n */\r\n\r\n/**\r\n * Relationship to an extent.\r\n * @enum {number}\r\n */\r\nexport default {\r\n  UNKNOWN: 0,\r\n  INTERSECTING: 1,\r\n  ABOVE: 2,\r\n  RIGHT: 4,\r\n  BELOW: 8,\r\n  LEFT: 16,\r\n};\r\n", "/**\r\n * @module ol/extent\r\n */\r\nimport Corner from './extent/Corner.js';\r\nimport Relationship from './extent/Relationship.js';\r\nimport {assert} from './asserts.js';\r\n\r\n/**\r\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\r\n * @typedef {Array<number>} Extent\r\n * @api\r\n */\r\n\r\n/**\r\n * Build an extent that includes all given coordinates.\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Bounding extent.\r\n * @api\r\n */\r\nexport function boundingExtent(coordinates) {\r\n  const extent = createEmpty();\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} xs Xs.\r\n * @param {Array<number>} ys Ys.\r\n * @param {Extent} [opt_extent] Destination extent.\r\n * @private\r\n * @return {Extent} Extent.\r\n */\r\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\r\n  const minX = Math.min.apply(null, xs);\r\n  const minY = Math.min.apply(null, ys);\r\n  const maxX = Math.max.apply(null, xs);\r\n  const maxY = Math.max.apply(null, ys);\r\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\r\n}\r\n\r\n/**\r\n * Return extent increased by the provided value.\r\n * @param {Extent} extent Extent.\r\n * @param {number} value The amount by which the extent should be buffered.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function buffer(extent, value, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0] - value;\r\n    opt_extent[1] = extent[1] - value;\r\n    opt_extent[2] = extent[2] + value;\r\n    opt_extent[3] = extent[3] + value;\r\n    return opt_extent;\r\n  } else {\r\n    return [\r\n      extent[0] - value,\r\n      extent[1] - value,\r\n      extent[2] + value,\r\n      extent[3] + value,\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a clone of an extent.\r\n *\r\n * @param {Extent} extent Extent to clone.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} The clone.\r\n */\r\nexport function clone(extent, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0];\r\n    opt_extent[1] = extent[1];\r\n    opt_extent[2] = extent[2];\r\n    opt_extent[3] = extent[3];\r\n    return opt_extent;\r\n  } else {\r\n    return extent.slice();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {number} Closest squared distance.\r\n */\r\nexport function closestSquaredDistanceXY(extent, x, y) {\r\n  let dx, dy;\r\n  if (x < extent[0]) {\r\n    dx = extent[0] - x;\r\n  } else if (extent[2] < x) {\r\n    dx = x - extent[2];\r\n  } else {\r\n    dx = 0;\r\n  }\r\n  if (y < extent[1]) {\r\n    dy = extent[1] - y;\r\n  } else if (extent[3] < y) {\r\n    dy = y - extent[3];\r\n  } else {\r\n    dy = 0;\r\n  }\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @return {boolean} The coordinate is contained in the extent.\r\n * @api\r\n */\r\nexport function containsCoordinate(extent, coordinate) {\r\n  return containsXY(extent, coordinate[0], coordinate[1]);\r\n}\r\n\r\n/**\r\n * Check if one extent contains another.\r\n *\r\n * An extent is deemed contained if it lies completely within the other extent,\r\n * including if they share one or more edges.\r\n *\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The second extent is contained by or on the edge of the\r\n *     first.\r\n * @api\r\n */\r\nexport function containsExtent(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[0] &&\r\n    extent2[2] <= extent1[2] &&\r\n    extent1[1] <= extent2[1] &&\r\n    extent2[3] <= extent1[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X coordinate.\r\n * @param {number} y Y coordinate.\r\n * @return {boolean} The x, y values are contained in the extent.\r\n * @api\r\n */\r\nexport function containsXY(extent, x, y) {\r\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\r\n}\r\n\r\n/**\r\n * Get the relationship between a coordinate and extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\r\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\r\n *     import(\"./extent/Relationship.js\").Relationship).\r\n */\r\nexport function coordinateRelationship(extent, coordinate) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  let relationship = Relationship.UNKNOWN;\r\n  if (x < minX) {\r\n    relationship = relationship | Relationship.LEFT;\r\n  } else if (x > maxX) {\r\n    relationship = relationship | Relationship.RIGHT;\r\n  }\r\n  if (y < minY) {\r\n    relationship = relationship | Relationship.BELOW;\r\n  } else if (y > maxY) {\r\n    relationship = relationship | Relationship.ABOVE;\r\n  }\r\n  if (relationship === Relationship.UNKNOWN) {\r\n    relationship = Relationship.INTERSECTING;\r\n  }\r\n  return relationship;\r\n}\r\n\r\n/**\r\n * Create an empty extent.\r\n * @return {Extent} Empty extent.\r\n * @api\r\n */\r\nexport function createEmpty() {\r\n  return [Infinity, Infinity, -Infinity, -Infinity];\r\n}\r\n\r\n/**\r\n * Create a new extent or update the provided extent.\r\n * @param {number} minX Minimum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} maxY Maximum Y.\r\n * @param {Extent} [opt_extent] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = minX;\r\n    opt_extent[1] = minY;\r\n    opt_extent[2] = maxX;\r\n    opt_extent[3] = maxY;\r\n    return opt_extent;\r\n  } else {\r\n    return [minX, minY, maxX, maxY];\r\n  }\r\n}\r\n\r\n/**\r\n * Create a new empty extent or make the provided one empty.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateEmpty(opt_extent) {\r\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  return createOrUpdate(x, y, x, y, opt_extent);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendCoordinates(extent, coordinates);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromFlatCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  opt_extent\r\n) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\r\n}\r\n\r\n/**\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromRings(rings, opt_extent) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendRings(extent, rings);\r\n}\r\n\r\n/**\r\n * Determine if two extents are equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The two extents are equivalent.\r\n * @api\r\n */\r\nexport function equals(extent1, extent2) {\r\n  return (\r\n    extent1[0] == extent2[0] &&\r\n    extent1[2] == extent2[2] &&\r\n    extent1[1] == extent2[1] &&\r\n    extent1[3] == extent2[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if two extents are approximately equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {number} tolerance Tolerance in extent coordinate units.\r\n * @return {boolean} The two extents differ by less than the tolerance.\r\n */\r\nexport function approximatelyEquals(extent1, extent2, tolerance) {\r\n  return (\r\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\r\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\r\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\r\n    Math.abs(extent1[3] - extent2[3]) < tolerance\r\n  );\r\n}\r\n\r\n/**\r\n * Modify an extent to include another extent.\r\n * @param {Extent} extent1 The extent to be modified.\r\n * @param {Extent} extent2 The extent that will be included in the first.\r\n * @return {Extent} A reference to the first (extended) extent.\r\n * @api\r\n */\r\nexport function extend(extent1, extent2) {\r\n  if (extent2[0] < extent1[0]) {\r\n    extent1[0] = extent2[0];\r\n  }\r\n  if (extent2[2] > extent1[2]) {\r\n    extent1[2] = extent2[2];\r\n  }\r\n  if (extent2[1] < extent1[1]) {\r\n    extent1[1] = extent2[1];\r\n  }\r\n  if (extent2[3] > extent1[3]) {\r\n    extent1[3] = extent2[3];\r\n  }\r\n  return extent1;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n */\r\nexport function extendCoordinate(extent, coordinate) {\r\n  if (coordinate[0] < extent[0]) {\r\n    extent[0] = coordinate[0];\r\n  }\r\n  if (coordinate[0] > extent[2]) {\r\n    extent[2] = coordinate[0];\r\n  }\r\n  if (coordinate[1] < extent[1]) {\r\n    extent[1] = coordinate[1];\r\n  }\r\n  if (coordinate[1] > extent[3]) {\r\n    extent[3] = coordinate[1];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendFlatCoordinates(\r\n  extent,\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride\r\n) {\r\n  for (; offset < end; offset += stride) {\r\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendRings(extent, rings) {\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    extendCoordinates(extent, rings[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n */\r\nexport function extendXY(extent, x, y) {\r\n  extent[0] = Math.min(extent[0], x);\r\n  extent[1] = Math.min(extent[1], y);\r\n  extent[2] = Math.max(extent[2], x);\r\n  extent[3] = Math.max(extent[3], y);\r\n}\r\n\r\n/**\r\n * This function calls `callback` for each corner of the extent. If the\r\n * callback returns a truthy value the function returns that value\r\n * immediately. Otherwise the function returns `false`.\r\n * @param {Extent} extent Extent.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\r\n * @return {S|boolean} Value.\r\n * @template S\r\n */\r\nexport function forEachCorner(extent, callback) {\r\n  let val;\r\n  val = callback(getBottomLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getBottomRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get the size of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Area.\r\n * @api\r\n */\r\nexport function getArea(extent) {\r\n  let area = 0;\r\n  if (!isEmpty(extent)) {\r\n    area = getWidth(extent) * getHeight(extent);\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * Get the bottom left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\r\n * @api\r\n */\r\nexport function getBottomLeft(extent) {\r\n  return [extent[0], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the bottom right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\r\n * @api\r\n */\r\nexport function getBottomRight(extent) {\r\n  return [extent[2], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the center coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Center.\r\n * @api\r\n */\r\nexport function getCenter(extent) {\r\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n}\r\n\r\n/**\r\n * Get a corner coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./extent/Corner.js\").default} corner Corner.\r\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\r\n */\r\nexport function getCorner(extent, corner) {\r\n  let coordinate;\r\n  if (corner === Corner.BOTTOM_LEFT) {\r\n    coordinate = getBottomLeft(extent);\r\n  } else if (corner === Corner.BOTTOM_RIGHT) {\r\n    coordinate = getBottomRight(extent);\r\n  } else if (corner === Corner.TOP_LEFT) {\r\n    coordinate = getTopLeft(extent);\r\n  } else if (corner === Corner.TOP_RIGHT) {\r\n    coordinate = getTopRight(extent);\r\n  } else {\r\n    assert(false, 13); // Invalid corner\r\n  }\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Enlarged area.\r\n */\r\nexport function getEnlargedArea(extent1, extent2) {\r\n  const minX = Math.min(extent1[0], extent2[0]);\r\n  const minY = Math.min(extent1[1], extent2[1]);\r\n  const maxX = Math.max(extent1[2], extent2[2]);\r\n  const maxY = Math.max(extent1[3], extent2[3]);\r\n  return (maxX - minX) * (maxY - minY);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {import(\"./size.js\").Size} size Size.\r\n * @param {Extent} [opt_extent] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function getForViewAndSize(\r\n  center,\r\n  resolution,\r\n  rotation,\r\n  size,\r\n  opt_extent\r\n) {\r\n  const dx = (resolution * size[0]) / 2;\r\n  const dy = (resolution * size[1]) / 2;\r\n  const cosRotation = Math.cos(rotation);\r\n  const sinRotation = Math.sin(rotation);\r\n  const xCos = dx * cosRotation;\r\n  const xSin = dx * sinRotation;\r\n  const yCos = dy * cosRotation;\r\n  const ySin = dy * sinRotation;\r\n  const x = center[0];\r\n  const y = center[1];\r\n  const x0 = x - xCos + ySin;\r\n  const x1 = x - xCos - ySin;\r\n  const x2 = x + xCos - ySin;\r\n  const x3 = x + xCos + ySin;\r\n  const y0 = y - xSin - yCos;\r\n  const y1 = y - xSin + yCos;\r\n  const y2 = y + xSin + yCos;\r\n  const y3 = y + xSin - yCos;\r\n  return createOrUpdate(\r\n    Math.min(x0, x1, x2, x3),\r\n    Math.min(y0, y1, y2, y3),\r\n    Math.max(x0, x1, x2, x3),\r\n    Math.max(y0, y1, y2, y3),\r\n    opt_extent\r\n  );\r\n}\r\n\r\n/**\r\n * Get the height of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Height.\r\n * @api\r\n */\r\nexport function getHeight(extent) {\r\n  return extent[3] - extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Intersection area.\r\n */\r\nexport function getIntersectionArea(extent1, extent2) {\r\n  const intersection = getIntersection(extent1, extent2);\r\n  return getArea(intersection);\r\n}\r\n\r\n/**\r\n * Get the intersection of two extents.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {Extent} [opt_extent] Optional extent to populate with intersection.\r\n * @return {Extent} Intersecting extent.\r\n * @api\r\n */\r\nexport function getIntersection(extent1, extent2, opt_extent) {\r\n  const intersection = opt_extent ? opt_extent : createEmpty();\r\n  if (intersects(extent1, extent2)) {\r\n    if (extent1[0] > extent2[0]) {\r\n      intersection[0] = extent1[0];\r\n    } else {\r\n      intersection[0] = extent2[0];\r\n    }\r\n    if (extent1[1] > extent2[1]) {\r\n      intersection[1] = extent1[1];\r\n    } else {\r\n      intersection[1] = extent2[1];\r\n    }\r\n    if (extent1[2] < extent2[2]) {\r\n      intersection[2] = extent1[2];\r\n    } else {\r\n      intersection[2] = extent2[2];\r\n    }\r\n    if (extent1[3] < extent2[3]) {\r\n      intersection[3] = extent1[3];\r\n    } else {\r\n      intersection[3] = extent2[3];\r\n    }\r\n  } else {\r\n    createOrUpdateEmpty(intersection);\r\n  }\r\n  return intersection;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @return {number} Margin.\r\n */\r\nexport function getMargin(extent) {\r\n  return getWidth(extent) + getHeight(extent);\r\n}\r\n\r\n/**\r\n * Get the size (width, height) of an extent.\r\n * @param {Extent} extent The extent.\r\n * @return {import(\"./size.js\").Size} The extent size.\r\n * @api\r\n */\r\nexport function getSize(extent) {\r\n  return [extent[2] - extent[0], extent[3] - extent[1]];\r\n}\r\n\r\n/**\r\n * Get the top left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\r\n * @api\r\n */\r\nexport function getTopLeft(extent) {\r\n  return [extent[0], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the top right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\r\n * @api\r\n */\r\nexport function getTopRight(extent) {\r\n  return [extent[2], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the width of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Width.\r\n * @api\r\n */\r\nexport function getWidth(extent) {\r\n  return extent[2] - extent[0];\r\n}\r\n\r\n/**\r\n * Determine if one extent intersects another.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent.\r\n * @return {boolean} The two extents intersect.\r\n * @api\r\n */\r\nexport function intersects(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[2] &&\r\n    extent1[2] >= extent2[0] &&\r\n    extent1[1] <= extent2[3] &&\r\n    extent1[3] >= extent2[1]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if an extent is empty.\r\n * @param {Extent} extent Extent.\r\n * @return {boolean} Is empty.\r\n * @api\r\n */\r\nexport function isEmpty(extent) {\r\n  return extent[2] < extent[0] || extent[3] < extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Extent} [opt_extent] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function returnOrUpdate(extent, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0];\r\n    opt_extent[1] = extent[1];\r\n    opt_extent[2] = extent[2];\r\n    opt_extent[3] = extent[3];\r\n    return opt_extent;\r\n  } else {\r\n    return extent;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} value Value.\r\n */\r\nexport function scaleFromCenter(extent, value) {\r\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\r\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\r\n  extent[0] -= deltaX;\r\n  extent[2] += deltaX;\r\n  extent[1] -= deltaY;\r\n  extent[3] += deltaY;\r\n}\r\n\r\n/**\r\n * Determine if the segment between two coordinates intersects (crosses,\r\n * touches, or is contained by) the provided extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\r\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\r\n * @return {boolean} The segment intersects the extent.\r\n */\r\nexport function intersectsSegment(extent, start, end) {\r\n  let intersects = false;\r\n  const startRel = coordinateRelationship(extent, start);\r\n  const endRel = coordinateRelationship(extent, end);\r\n  if (\r\n    startRel === Relationship.INTERSECTING ||\r\n    endRel === Relationship.INTERSECTING\r\n  ) {\r\n    intersects = true;\r\n  } else {\r\n    const minX = extent[0];\r\n    const minY = extent[1];\r\n    const maxX = extent[2];\r\n    const maxY = extent[3];\r\n    const startX = start[0];\r\n    const startY = start[1];\r\n    const endX = end[0];\r\n    const endY = end[1];\r\n    const slope = (endY - startY) / (endX - startX);\r\n    let x, y;\r\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\r\n      // potentially intersects top\r\n      x = endX - (endY - maxY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.RIGHT) &&\r\n      !(startRel & Relationship.RIGHT)\r\n    ) {\r\n      // potentially intersects right\r\n      y = endY - (endX - maxX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.BELOW) &&\r\n      !(startRel & Relationship.BELOW)\r\n    ) {\r\n      // potentially intersects bottom\r\n      x = endX - (endY - minY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.LEFT) &&\r\n      !(startRel & Relationship.LEFT)\r\n    ) {\r\n      // potentially intersects left\r\n      y = endY - (endX - minX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n  }\r\n  return intersects;\r\n}\r\n\r\n/**\r\n * Apply a transform function to the extent.\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\r\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\r\n * @param {Extent} [opt_extent] Destination extent.\r\n * @param {number} [opt_stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\r\n  let coordinates = [];\r\n  if (opt_stops > 1) {\r\n    const width = extent[2] - extent[0];\r\n    const height = extent[3] - extent[1];\r\n    for (let i = 0; i < opt_stops; ++i) {\r\n      coordinates.push(\r\n        extent[0] + (width * i) / opt_stops,\r\n        extent[1],\r\n        extent[2],\r\n        extent[1] + (height * i) / opt_stops,\r\n        extent[2] - (width * i) / opt_stops,\r\n        extent[3],\r\n        extent[0],\r\n        extent[3] - (height * i) / opt_stops\r\n      );\r\n    }\r\n  } else {\r\n    coordinates = [\r\n      extent[0],\r\n      extent[1],\r\n      extent[2],\r\n      extent[1],\r\n      extent[2],\r\n      extent[3],\r\n      extent[0],\r\n      extent[3],\r\n    ];\r\n  }\r\n  transformFn(coordinates, coordinates, 2);\r\n  const xs = [];\r\n  const ys = [];\r\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\r\n    xs.push(coordinates[i]);\r\n    ys.push(coordinates[i + 1]);\r\n  }\r\n  return _boundingExtentXYs(xs, ys, opt_extent);\r\n}\r\n\r\n/**\r\n * Modifies the provided extent in-place to be within the real world\r\n * extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection\r\n * @return {Extent} The extent within the real world extent.\r\n */\r\nexport function wrapX(extent, projection) {\r\n  const projectionExtent = projection.getExtent();\r\n  const center = getCenter(extent);\r\n  if (\r\n    projection.canWrapX() &&\r\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\r\n  ) {\r\n    const worldWidth = getWidth(projectionExtent);\r\n    const worldsAway = Math.floor(\r\n      (center[0] - projectionExtent[0]) / worldWidth\r\n    );\r\n    const offset = worldsAway * worldWidth;\r\n    extent[0] -= offset;\r\n    extent[2] -= offset;\r\n  }\r\n  return extent;\r\n}\r\n"],
  "mappings": "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",
  "names": ["intersects"]
}

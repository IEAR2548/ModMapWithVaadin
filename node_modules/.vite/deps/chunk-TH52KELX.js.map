{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/render-status.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Module for scheduling flushable pre-render and post-render tasks.\r\n *\r\n * @summary Module for scheduling flushable pre-render and post-render tasks.\r\n */\r\n\r\nimport './boot.js';\r\n\r\nlet scheduled = false;\r\nlet beforeRenderQueue = [];\r\nlet afterRenderQueue = [];\r\n\r\nfunction schedule() {\r\n  scheduled = true;\r\n  // before next render\r\n  requestAnimationFrame(function() {\r\n    scheduled = false;\r\n    flushQueue(beforeRenderQueue);\r\n    // after the render\r\n    setTimeout(function() {\r\n      runQueue(afterRenderQueue);\r\n    });\r\n  });\r\n}\r\n\r\nfunction flushQueue(queue) {\r\n  while (queue.length) {\r\n    callMethod(queue.shift());\r\n  }\r\n}\r\n\r\nfunction runQueue(queue) {\r\n  for (let i=0, l=queue.length; i < l; i++) {\r\n    callMethod(queue.shift());\r\n  }\r\n}\r\n\r\nfunction callMethod(info) {\r\n  const context = info[0];\r\n  const callback = info[1];\r\n  const args = info[2];\r\n  try {\r\n    callback.apply(context, args);\r\n  } catch(e) {\r\n    setTimeout(() => {\r\n      throw e;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\r\n * tasks.\r\n *\r\n * @return {void}\r\n */\r\nexport function flush() {\r\n  while (beforeRenderQueue.length || afterRenderQueue.length) {\r\n    flushQueue(beforeRenderQueue);\r\n    flushQueue(afterRenderQueue);\r\n  }\r\n  scheduled = false;\r\n}\r\n\r\n\r\n/**\r\n * Enqueues a callback which will be run before the next render, at\r\n * `requestAnimationFrame` timing.\r\n *\r\n * This method is useful for enqueuing work that requires DOM measurement,\r\n * since measurement may not be reliable in custom element callbacks before\r\n * the first render, as well as for batching measurement tasks in general.\r\n *\r\n * Tasks in this queue may be flushed by calling `flush()`.\r\n *\r\n * @param {*} context Context object the callback function will be bound to\r\n * @param {function(...*):void} callback Callback function\r\n * @param {!Array=} args An array of arguments to call the callback function with\r\n * @return {void}\r\n */\r\nexport function beforeNextRender(context, callback, args) {\r\n  if (!scheduled) {\r\n    schedule();\r\n  }\r\n  beforeRenderQueue.push([context, callback, args]);\r\n}\r\n\r\n/**\r\n * Enqueues a callback which will be run after the next render, equivalent\r\n * to one task (`setTimeout`) after the next `requestAnimationFrame`.\r\n *\r\n * This method is useful for tuning the first-render performance of an\r\n * element or application by deferring non-critical work until after the\r\n * first paint.  Typical non-render-critical work may include adding UI\r\n * event listeners and aria attributes.\r\n *\r\n * @param {*} context Context object the callback function will be bound to\r\n * @param {function(...*):void} callback Callback function\r\n * @param {!Array=} args An array of arguments to call the callback function with\r\n * @return {void}\r\n */\r\nexport function afterNextRender(context, callback, args) {\r\n  if (!scheduled) {\r\n    schedule();\r\n  }\r\n  afterRenderQueue.push([context, callback, args]);\r\n}\r\n\r\n"],
  "mappings": ";AAkBA,IAAI,YAAY;AAChB,IAAI,oBAAoB,CAAC;AACzB,IAAI,mBAAmB,CAAC;AAExB,SAAS,WAAW;AAClB,cAAY;AAEZ,wBAAsB,WAAW;AAC/B,gBAAY;AACZ,eAAW,iBAAiB;AAE5B,eAAW,WAAW;AACpB,eAAS,gBAAgB;AAAA,IAC3B,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,WAAW,OAAO;AACzB,SAAO,MAAM,QAAQ;AACnB,eAAW,MAAM,MAAM,CAAC;AAAA,EAC1B;AACF;AAEA,SAAS,SAAS,OAAO;AACvB,WAAS,IAAE,GAAG,IAAE,MAAM,QAAQ,IAAI,GAAG,KAAK;AACxC,eAAW,MAAM,MAAM,CAAC;AAAA,EAC1B;AACF;AAEA,SAAS,WAAW,MAAM;AACxB,QAAM,UAAU,KAAK,CAAC;AACtB,QAAM,WAAW,KAAK,CAAC;AACvB,QAAM,OAAO,KAAK,CAAC;AACnB,MAAI;AACF,aAAS,MAAM,SAAS,IAAI;AAAA,EAC9B,SAAQ,GAAG;AACT,eAAW,MAAM;AACf,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AACF;AAgCO,SAAS,iBAAiB,SAAS,UAAU,MAAM;AACxD,MAAI,CAAC,WAAW;AACd,aAAS;AAAA,EACX;AACA,oBAAkB,KAAK,CAAC,SAAS,UAAU,IAAI,CAAC;AAClD;AAgBO,SAAS,gBAAgB,SAAS,UAAU,MAAM;AACvD,MAAI,CAAC,WAAW;AACd,aAAS;AAAA,EACX;AACA,mBAAiB,KAAK,CAAC,SAAS,UAAU,IAAI,CAAC;AACjD;",
  "names": []
}

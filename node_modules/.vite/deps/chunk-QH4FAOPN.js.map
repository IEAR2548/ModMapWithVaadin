{
  "version": 3,
  "sources": ["../../ol/src/geom/flat/transform.js", "../../ol/src/geom/Geometry.js", "../../ol/src/geom/GeometryLayout.js", "../../ol/src/geom/SimpleGeometry.js"],
  "sourcesContent": ["/**\r\n * @module ol/geom/flat/transform\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function transform2D(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  transform,\r\n  opt_dest\r\n) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const x = flatCoordinates[j];\r\n    const y = flatCoordinates[j + 1];\r\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\r\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} angle Angle.\r\n * @param {Array<number>} anchor Rotation anchor point.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function rotate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  angle,\r\n  anchor,\r\n  opt_dest\r\n) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\r\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Scale the coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} sx Scale factor in the x-direction.\r\n * @param {number} sy Scale factor in the y-direction.\r\n * @param {Array<number>} anchor Scale anchor point.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function scale(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  sx,\r\n  sy,\r\n  anchor,\r\n  opt_dest\r\n) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + sx * deltaX;\r\n    dest[i++] = anchorY + sy * deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} deltaX Delta X.\r\n * @param {number} deltaY Delta Y.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function translate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  deltaX,\r\n  deltaY,\r\n  opt_dest\r\n) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    dest[i++] = flatCoordinates[j] + deltaX;\r\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/geom/Geometry\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport Units from '../proj/Units.js';\r\nimport {abstract} from '../util.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {\r\n  createEmpty,\r\n  createOrUpdateEmpty,\r\n  getHeight,\r\n  returnOrUpdate,\r\n} from '../extent.js';\r\nimport {get as getProjection, getTransform} from '../proj.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {transform2D} from './flat/transform.js';\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for vector geometries.\r\n *\r\n * To get notified of changes to the geometry, register a listener for the\r\n * generic `change` event on your geometry instance.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass Geometry extends BaseObject {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.extentRevision_ = -1;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryRevision = 0;\r\n\r\n    /**\r\n     * Get a transformed and simplified version of the geometry.\r\n     * @abstract\r\n     * @param {number} revision The geometry revision.\r\n     * @param {number} squaredTolerance Squared tolerance.\r\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\r\n     * @return {Geometry} Simplified geometry.\r\n     */\r\n    this.simplifyTransformedInternal = memoizeOne(function (\r\n      revision,\r\n      squaredTolerance,\r\n      opt_transform\r\n    ) {\r\n      if (!opt_transform) {\r\n        return this.getSimplifiedGeometry(squaredTolerance);\r\n      }\r\n      const clone = this.clone();\r\n      clone.applyTransform(opt_transform);\r\n      return clone.getSimplifiedGeometry(squaredTolerance);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, opt_transform) {\r\n    return this.simplifyTransformedInternal(\r\n      this.getRevision(),\r\n      squaredTolerance,\r\n      opt_transform\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @abstract\r\n   * @return {!Geometry} Clone.\r\n   */\r\n  clone() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const coord = this.getClosestPoint([x, y]);\r\n    return coord[0] === x && coord[1] === y;\r\n  }\r\n\r\n  /**\r\n   * Return the closest point of the geometry to the passed point as\r\n   * {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\r\n   * @api\r\n   */\r\n  getClosestPoint(point, opt_closestPoint) {\r\n    const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\r\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\r\n    return closestPoint;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this geometry includes the specified coordinate. If the\r\n   * coordinate is on the boundary of the geometry, returns false.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {boolean} Contains coordinate.\r\n   * @api\r\n   */\r\n  intersectsCoordinate(coordinate) {\r\n    return this.containsXY(coordinate[0], coordinate[1]);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the geometry.\r\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  getExtent(opt_extent) {\r\n    if (this.extentRevision_ != this.getRevision()) {\r\n      const extent = this.computeExtent(this.extent_);\r\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\r\n        createOrUpdateEmpty(extent);\r\n      }\r\n      this.extentRevision_ = this.getRevision();\r\n    }\r\n    return returnOrUpdate(this.extent_, opt_extent);\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, opt_sy, opt_anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry.  For linestrings, this uses\r\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\r\n   * algorithm.  For polygons, a quantization-based\r\n   * simplification is used to preserve topology.\r\n   * @param {number} tolerance The tolerance distance for simplification.\r\n   * @return {Geometry} A new, simplified version of the original geometry.\r\n   * @api\r\n   */\r\n  simplify(tolerance) {\r\n    return this.getSimplifiedGeometry(tolerance * tolerance);\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker\r\n   * algorithm.\r\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @abstract\r\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @abstract\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   */\r\n  applyTransform(transformFn) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   */\r\n  intersectsExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @abstract\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Transform each coordinate of the geometry from one coordinate reference\r\n   * system to another. The geometry is modified in place.\r\n   * For example, a line will be transformed to a line and a circle to a circle.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @return {Geometry} This geometry.  Note that original geometry is\r\n   *     modified in place.\r\n   * @api\r\n   */\r\n  transform(source, destination) {\r\n    /** @type {import(\"../proj/Projection.js\").default} */\r\n    const sourceProj = getProjection(source);\r\n    const transformFn =\r\n      sourceProj.getUnits() == Units.TILE_PIXELS\r\n        ? function (inCoordinates, outCoordinates, stride) {\r\n            const pixelExtent = sourceProj.getExtent();\r\n            const projectedExtent = sourceProj.getWorldExtent();\r\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n            composeTransform(\r\n              tmpTransform,\r\n              projectedExtent[0],\r\n              projectedExtent[3],\r\n              scale,\r\n              -scale,\r\n              0,\r\n              0,\r\n              0\r\n            );\r\n            transform2D(\r\n              inCoordinates,\r\n              0,\r\n              inCoordinates.length,\r\n              stride,\r\n              tmpTransform,\r\n              outCoordinates\r\n            );\r\n            return getTransform(sourceProj, destination)(\r\n              inCoordinates,\r\n              outCoordinates,\r\n              stride\r\n            );\r\n          }\r\n        : getTransform(sourceProj, destination);\r\n    this.applyTransform(transformFn);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Geometry;\r\n", "/**\r\n * @module ol/geom/GeometryLayout\r\n */\r\n\r\n/**\r\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\r\n * or measure ('M') coordinate is available. Supported values are `'XY'`,\r\n * `'XYZ'`, `'XYM'`, `'XYZM'`.\r\n * @enum {string}\r\n */\r\nexport default {\r\n  XY: 'XY',\r\n  XYZ: 'XYZ',\r\n  XYM: 'XYM',\r\n  XYZM: 'XYZM',\r\n};\r\n", "/**\r\n * @module ol/geom/SimpleGeometry\r\n */\r\nimport Geometry from './Geometry.js';\r\nimport GeometryLayout from './GeometryLayout.js';\r\nimport {abstract} from '../util.js';\r\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\r\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass SimpleGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./GeometryLayout.js\").default}\r\n     */\r\n    this.layout = GeometryLayout.XY;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.stride = 2;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates = null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromFlatCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\r\n  getCoordinates() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\r\n  getFirstCoordinate() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getFlatCoordinates() {\r\n    return this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\r\n  getLastCoordinate() {\r\n    return this.flatCoordinates.slice(\r\n      this.flatCoordinates.length - this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\r\n   * @api\r\n   */\r\n  getLayout() {\r\n    return this.layout;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    // If squaredTolerance is negative or if we know that simplification will not\r\n    // have any effect then just return this.\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometry =\r\n      this.getSimplifiedGeometryInternal(squaredTolerance);\r\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\r\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\r\n      return simplifiedGeometry;\r\n    } else {\r\n      // Simplification did not actually remove any coordinates.  We now know\r\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\r\n      // than or equal to the current squaredTolerance will also not have any\r\n      // effect.  This allows us to short circuit simplification (saving CPU\r\n      // cycles) and prevents the cache of simplified geometries from filling\r\n      // up with useless identical copies of this geometry (saving memory).\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\r\n  setFlatCoordinates(layout, flatCoordinates) {\r\n    this.stride = getStrideForLayout(layout);\r\n    this.layout = layout;\r\n    this.flatCoordinates = flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\r\n  setLayout(layout, coordinates, nesting) {\r\n    /** @type {number} */\r\n    let stride;\r\n    if (layout) {\r\n      stride = getStrideForLayout(layout);\r\n    } else {\r\n      for (let i = 0; i < nesting; ++i) {\r\n        if (coordinates.length === 0) {\r\n          this.layout = GeometryLayout.XY;\r\n          this.stride = 2;\r\n          return;\r\n        } else {\r\n          coordinates = /** @type {Array} */ (coordinates[0]);\r\n        }\r\n      }\r\n      stride = coordinates.length;\r\n      layout = getLayoutForStride(stride);\r\n    }\r\n    this.layout = layout;\r\n    this.stride = stride;\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    if (this.flatCoordinates) {\r\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      rotate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        angle,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, opt_sy, opt_anchor) {\r\n    let sy = opt_sy;\r\n    if (sy === undefined) {\r\n      sy = sx;\r\n    }\r\n    let anchor = opt_anchor;\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      scale(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        sx,\r\n        sy,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      translate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        deltaX,\r\n        deltaY,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\r\n */\r\nfunction getLayoutForStride(stride) {\r\n  let layout;\r\n  if (stride == 2) {\r\n    layout = GeometryLayout.XY;\r\n  } else if (stride == 3) {\r\n    layout = GeometryLayout.XYZ;\r\n  } else if (stride == 4) {\r\n    layout = GeometryLayout.XYZM;\r\n  }\r\n  return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\r\n * @return {number} Stride.\r\n */\r\nexport function getStrideForLayout(layout) {\r\n  let stride;\r\n  if (layout == GeometryLayout.XY) {\r\n    stride = 2;\r\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\r\n    stride = 3;\r\n  } else if (layout == GeometryLayout.XYZM) {\r\n    stride = 4;\r\n  }\r\n  return /** @type {number} */ (stride);\r\n}\r\n\r\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\r\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\r\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\r\n  if (!flatCoordinates) {\r\n    return null;\r\n  } else {\r\n    const stride = simpleGeometry.getStride();\r\n    return transform2D(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      transform,\r\n      opt_dest\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleGeometry;\r\n"],
  "mappings": "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",
  "names": ["Geometry", "scale", "__extends", "SimpleGeometry"]
}

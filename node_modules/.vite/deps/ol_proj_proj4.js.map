{
  "version": 3,
  "sources": ["../../ol/src/proj/proj4.js"],
  "sourcesContent": ["/**\r\n * @module ol/proj/proj4\r\n */\r\nimport Projection from './Projection.js';\r\nimport Units from './Units.js';\r\nimport {\r\n  addCoordinateTransforms,\r\n  addEquivalentProjections,\r\n  addProjection,\r\n  createSafeCoordinateTransform,\r\n  get,\r\n} from '../proj.js';\r\nimport {get as getTransform} from './transforms.js';\r\n\r\n/**\r\n * Make projections defined in proj4 (with `proj4.defs()`) available in\r\n * OpenLayers.\r\n *\r\n * This function should be called whenever changes are made to the proj4\r\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\r\n * modified by this function.\r\n *\r\n * @param {?} proj4 Proj4.\r\n * @api\r\n */\r\nexport function register(proj4) {\r\n  const projCodes = Object.keys(proj4.defs);\r\n  const len = projCodes.length;\r\n  let i, j;\r\n  for (i = 0; i < len; ++i) {\r\n    const code = projCodes[i];\r\n    if (!get(code)) {\r\n      const def = proj4.defs(code);\r\n      let units = def.units;\r\n      if (!units && def.projName === 'longlat') {\r\n        units = Units.DEGREES;\r\n      }\r\n      addProjection(\r\n        new Projection({\r\n          code: code,\r\n          axisOrientation: def.axis,\r\n          metersPerUnit: def.to_meter,\r\n          units,\r\n        })\r\n      );\r\n    }\r\n  }\r\n  for (i = 0; i < len; ++i) {\r\n    const code1 = projCodes[i];\r\n    const proj1 = get(code1);\r\n    for (j = 0; j < len; ++j) {\r\n      const code2 = projCodes[j];\r\n      const proj2 = get(code2);\r\n      if (!getTransform(code1, code2)) {\r\n        if (proj4.defs[code1] === proj4.defs[code2]) {\r\n          addEquivalentProjections([proj1, proj2]);\r\n        } else {\r\n          const transform = proj4(code1, code2);\r\n          addCoordinateTransforms(\r\n            proj1,\r\n            proj2,\r\n            createSafeCoordinateTransform(proj1, proj2, transform.forward),\r\n            createSafeCoordinateTransform(proj2, proj1, transform.inverse)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyBM,SAAU,SAAS,OAAK;AAC5B,MAAM,YAAY,OAAO,KAAK,MAAM,IAAI;AACxC,MAAM,MAAM,UAAU;AACtB,MAAI,GAAG;AACP,OAAK,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AACxB,QAAM,OAAO,UAAU,CAAC;AACxB,QAAI,CAACA,KAAI,IAAI,GAAG;AACd,UAAM,MAAM,MAAM,KAAK,IAAI;AAC3B,UAAI,QAAQ,IAAI;AAChB,UAAI,CAAC,SAAS,IAAI,aAAa,WAAW;AACxC,gBAAQ,cAAM;;AAEhB,oBACE,IAAI,mBAAW;QACb;QACA,iBAAiB,IAAI;QACrB,eAAe,IAAI;QACnB;OACD,CAAC;;;AAIR,OAAK,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AACxB,QAAM,QAAQ,UAAU,CAAC;AACzB,QAAM,QAAQA,KAAI,KAAK;AACvB,SAAK,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AACxB,UAAM,QAAQ,UAAU,CAAC;AACzB,UAAM,QAAQA,KAAI,KAAK;AACvB,UAAI,CAAC,IAAa,OAAO,KAAK,GAAG;AAC/B,YAAI,MAAM,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,GAAG;AAC3C,mCAAyB,CAAC,OAAO,KAAK,CAAC;eAClC;AACL,cAAM,YAAY,MAAM,OAAO,KAAK;AACpC,kCACE,OACA,OACA,8BAA8B,OAAO,OAAO,UAAU,OAAO,GAC7D,8BAA8B,OAAO,OAAO,UAAU,OAAO,CAAC;;;;;AAM1E;",
  "names": ["get"]
}

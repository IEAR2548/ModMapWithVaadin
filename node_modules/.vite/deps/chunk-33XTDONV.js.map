{
  "version": 3,
  "sources": ["../../ol/src/geom/flat/deflate.js", "../../ol/src/geom/Point.js"],
  "sourcesContent": ["/**\r\n * @module ol/geom/flat/deflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\r\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\r\n    flatCoordinates[offset++] = coordinate[i];\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinates,\r\n  stride\r\n) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    const coordinate = coordinates[i];\r\n    for (let j = 0; j < stride; ++j) {\r\n      flatCoordinates[offset++] = coordinate[j];\r\n    }\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [opt_ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\r\nexport function deflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatess,\r\n  stride,\r\n  opt_ends\r\n) {\r\n  const ends = opt_ends ? opt_ends : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\r\n    const end = deflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatess[j],\r\n      stride\r\n    );\r\n    ends[i++] = end;\r\n    offset = end;\r\n  }\r\n  ends.length = i;\r\n  return ends;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [opt_endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\r\nexport function deflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatesss,\r\n  stride,\r\n  opt_endss\r\n) {\r\n  const endss = opt_endss ? opt_endss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\r\n    const ends = deflateCoordinatesArray(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatesss[j],\r\n      stride,\r\n      endss[i]\r\n    );\r\n    endss[i++] = ends;\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  endss.length = i;\r\n  return endss;\r\n}\r\n", "/**\r\n * @module ol/geom/Point\r\n */\r\nimport GeometryType from './GeometryType.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\r\nimport {deflateCoordinate} from './flat/deflate.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\n\r\n/**\r\n * @classdesc\r\n * Point geometry.\r\n *\r\n * @api\r\n */\r\nclass Point extends SimpleGeometry {\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   */\r\n  constructor(coordinates, opt_layout) {\r\n    super();\r\n    this.setCoordinates(coordinates, opt_layout);\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Point} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\r\n    point.applyProperties(this);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[0],\r\n      flatCoordinates[1]\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      const stride = this.stride;\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    } else {\r\n      return minSquaredDistance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate of the point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.POINT;\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\r\n  }\r\n\r\n  /**\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 0);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinate(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Point;\r\n"],
  "mappings": "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",
  "names": ["Point", "squaredDistance"]
}

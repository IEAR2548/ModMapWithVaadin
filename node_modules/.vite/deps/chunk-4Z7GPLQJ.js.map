{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/input-field-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { InputControlMixin } from './input-control-mixin.js';\r\n\r\n/**\r\n * A mixin to provide logic for vaadin-text-field and related components.\r\n *\r\n * @polymerMixin\r\n * @mixes InputControlMixin\r\n */\r\nexport const InputFieldMixin = (superclass) =>\r\n  class InputFieldMixinClass extends InputControlMixin(superclass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Whether the value of the control can be automatically completed by the browser.\r\n         * List of available options at:\r\n         * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\r\n         */\r\n        autocomplete: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * This is a property supported by Safari that is used to control whether\r\n         * autocorrection should be enabled when the user is entering/editing the text.\r\n         * Possible values are:\r\n         * on: Enable autocorrection.\r\n         * off: Disable autocorrection.\r\n         */\r\n        autocorrect: {\r\n          type: String,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * This is a property supported by Safari and Chrome that is used to control whether\r\n         * autocapitalization should be enabled when the user is entering/editing the text.\r\n         * Possible values are:\r\n         * characters: Characters capitalization.\r\n         * words: Words capitalization.\r\n         * sentences: Sentences capitalization.\r\n         * none: No capitalization.\r\n         */\r\n        autocapitalize: {\r\n          type: String,\r\n          reflectToAttribute: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get delegateAttrs() {\r\n      return [...super.delegateAttrs, 'autocapitalize', 'autocomplete', 'autocorrect'];\r\n    }\r\n\r\n    // Workaround for https://github.com/Polymer/polymer/issues/5259\r\n    get __data() {\r\n      return this.__dataValue || {};\r\n    }\r\n\r\n    set __data(value) {\r\n      this.__dataValue = value;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} input\r\n     * @protected\r\n     * @override\r\n     */\r\n    _inputElementChanged(input) {\r\n      super._inputElementChanged(input);\r\n\r\n      if (input) {\r\n        // Discard value set on the custom slotted input.\r\n        if (input.value && input.value !== this.value) {\r\n          console.warn(`Please define value on the <${this.localName}> component!`);\r\n          input.value = '';\r\n        }\r\n\r\n        if (this.value) {\r\n          input.value = this.value;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `FocusMixin`.\r\n     * @param {boolean} focused\r\n     * @protected\r\n     * @override\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      // Do not validate when focusout is caused by document\r\n      // losing focus, which happens on browser tab switch.\r\n      if (!focused && document.hasFocus()) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `InputMixin`\r\n     * to mark as valid after user started typing.\r\n     * @param {Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onInput(event) {\r\n      super._onInput(event);\r\n\r\n      if (this.invalid) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an observer from `InputMixin` to validate the field\r\n     * when a new value is set programmatically.\r\n     *\r\n     * @param {string | undefined} newValue\r\n     * @param {string | undefined} oldValue\r\n     * @protected\r\n     * @override\r\n     */\r\n    _valueChanged(newValue, oldValue) {\r\n      super._valueChanged(newValue, oldValue);\r\n\r\n      if (oldValue === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (this.invalid) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n  };\r\n"],
  "mappings": ";;;;;AAaO,IAAM,kBAAkB,CAAC,eAC9B,MAAM,6BAA6B,kBAAkB,UAAU,EAAE;AAAA,EAC/D,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAML,cAAc;AAAA,QACZ,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,aAAa;AAAA,QACX,MAAM;AAAA,QACN,oBAAoB;AAAA,MACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,gBAAgB;AAAA,QACd,MAAM;AAAA,QACN,oBAAoB;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe,kBAAkB,gBAAgB,aAAa;AAAA,EACjF;AAAA;AAAA,EAGA,IAAI,SAAS;AACX,WAAO,KAAK,eAAe,CAAC;AAAA,EAC9B;AAAA,EAEA,IAAI,OAAO,OAAO;AAChB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,OAAO;AAC1B,UAAM,qBAAqB,KAAK;AAEhC,QAAI,OAAO;AAET,UAAI,MAAM,SAAS,MAAM,UAAU,KAAK,OAAO;AAC7C,gBAAQ,KAAK,+BAA+B,KAAK,SAAS,cAAc;AACxE,cAAM,QAAQ;AAAA,MAChB;AAEA,UAAI,KAAK,OAAO;AACd,cAAM,QAAQ,KAAK;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,SAAS;AACnB,UAAM,YAAY,OAAO;AAIzB,QAAI,CAAC,WAAW,SAAS,SAAS,GAAG;AACnC,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,SAAS,OAAO;AACd,UAAM,SAAS,KAAK;AAEpB,QAAI,KAAK,SAAS;AAChB,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAc,UAAU,UAAU;AAChC,UAAM,cAAc,UAAU,QAAQ;AAEtC,QAAI,aAAa,QAAW;AAC1B;AAAA,IACF;AAEA,QAAI,KAAK,SAAS;AAChB,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AACF;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/a11y-base/src/tabindex-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { DisabledMixin } from './disabled-mixin.js';\r\n\r\n/**\r\n * A mixin to toggle the `tabindex` attribute.\r\n *\r\n * The attribute is set to -1 whenever the user disables the element\r\n * and restored with the last known value once the element is enabled.\r\n *\r\n * @polymerMixin\r\n * @mixes DisabledMixin\r\n */\r\nexport const TabindexMixin = (superclass) =>\r\n  class TabindexMixinClass extends DisabledMixin(superclass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\r\n         *\r\n         * @protected\r\n         */\r\n        tabindex: {\r\n          type: Number,\r\n          reflectToAttribute: true,\r\n          observer: '_tabindexChanged',\r\n        },\r\n\r\n        /**\r\n         * Stores the last known tabindex since the element has been disabled.\r\n         *\r\n         * @protected\r\n         */\r\n        _lastTabIndex: {\r\n          type: Number,\r\n        },\r\n      };\r\n    }\r\n\r\n    /**\r\n     * When the element gets disabled, the observer saves the last known tabindex\r\n     * and makes the element not focusable by setting tabindex to -1.\r\n     * As soon as the element gets enabled, the observer restores the last known tabindex\r\n     * so that the element can be focusable again.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _disabledChanged(disabled, oldDisabled) {\r\n      super._disabledChanged(disabled, oldDisabled);\r\n\r\n      if (this.__shouldAllowFocusWhenDisabled()) {\r\n        return;\r\n      }\r\n\r\n      if (disabled) {\r\n        if (this.tabindex !== undefined) {\r\n          this._lastTabIndex = this.tabindex;\r\n        }\r\n        this.tabindex = -1;\r\n      } else if (oldDisabled) {\r\n        this.tabindex = this._lastTabIndex;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * When the user has changed tabindex while the element is disabled,\r\n     * the observer reverts tabindex to -1 and rather saves the new tabindex value to apply it later.\r\n     * The new value will be applied as soon as the element becomes enabled.\r\n     *\r\n     * @protected\r\n     */\r\n    _tabindexChanged(tabindex) {\r\n      if (this.__shouldAllowFocusWhenDisabled()) {\r\n        return;\r\n      }\r\n\r\n      if (this.disabled && tabindex !== -1) {\r\n        this._lastTabIndex = tabindex;\r\n        this.tabindex = -1;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Overrides the native `focus` method in order to prevent\r\n     * focusing the element when it is disabled. Note, setting\r\n     * `tabindex` to -1 does not prevent the element from being\r\n     * programmatically focusable.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    focus() {\r\n      if (!this.disabled || this.__shouldAllowFocusWhenDisabled()) {\r\n        super.focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the component should be focusable when disabled.\r\n     * Returns false by default.\r\n     *\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    __shouldAllowFocusWhenDisabled() {\r\n      return false;\r\n    }\r\n  };\r\n"],
  "mappings": ";;;;;AAgBO,IAAM,gBAAgB,CAAC,eAC5B,MAAM,2BAA2B,cAAc,UAAU,EAAE;AAAA,EACzD,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAML,UAAU;AAAA,QACR,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,UAAU;AAAA,MACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,eAAe;AAAA,QACb,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,iBAAiB,UAAU,aAAa;AACtC,UAAM,iBAAiB,UAAU,WAAW;AAE5C,QAAI,KAAK,+BAA+B,GAAG;AACzC;AAAA,IACF;AAEA,QAAI,UAAU;AACZ,UAAI,KAAK,aAAa,QAAW;AAC/B,aAAK,gBAAgB,KAAK;AAAA,MAC5B;AACA,WAAK,WAAW;AAAA,IAClB,WAAW,aAAa;AACtB,WAAK,WAAW,KAAK;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,UAAU;AACzB,QAAI,KAAK,+BAA+B,GAAG;AACzC;AAAA,IACF;AAEA,QAAI,KAAK,YAAY,aAAa,IAAI;AACpC,WAAK,gBAAgB;AACrB,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ;AACN,QAAI,CAAC,KAAK,YAAY,KAAK,+BAA+B,GAAG;AAC3D,YAAM,MAAM;AAAA,IACd;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iCAAiC;AAC/B,WAAO;AAAA,EACT;AACF;",
  "names": []
}

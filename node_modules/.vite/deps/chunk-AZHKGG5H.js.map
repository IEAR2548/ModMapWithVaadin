{
  "version": 3,
  "sources": ["../../ol/src/obj.js", "../../ol/src/util.js", "../../ol/src/AssertionError.js"],
  "sourcesContent": ["/**\r\n * @module ol/obj\r\n */\r\n\r\n/**\r\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\r\n * one or more source objects to a target object.\r\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\r\n *\r\n * @param {!Object} target The target object.\r\n * @param {...Object} var_sources The source object(s).\r\n * @return {!Object} The modified target object.\r\n */\r\nexport const assign =\r\n  typeof Object.assign === 'function'\r\n    ? Object.assign\r\n    : function (target, var_sources) {\r\n        if (target === undefined || target === null) {\r\n          throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n\r\n        const output = Object(target);\r\n        for (let i = 1, ii = arguments.length; i < ii; ++i) {\r\n          const source = arguments[i];\r\n          if (source !== undefined && source !== null) {\r\n            for (const key in source) {\r\n              if (source.hasOwnProperty(key)) {\r\n                output[key] = source[key];\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return output;\r\n      };\r\n\r\n/**\r\n * Removes all properties from an object.\r\n * @param {Object} object The object to clear.\r\n */\r\nexport function clear(object) {\r\n  for (const property in object) {\r\n    delete object[property];\r\n  }\r\n}\r\n\r\n/**\r\n * Polyfill for Object.values().  Get an array of property values from an object.\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\r\n *\r\n * @param {!Object<K,V>} object The object from which to get the values.\r\n * @return {!Array<V>} The property values.\r\n * @template K,V\r\n */\r\nexport const getValues =\r\n  typeof Object.values === 'function'\r\n    ? Object.values\r\n    : function (object) {\r\n        const values = [];\r\n        for (const property in object) {\r\n          values.push(object[property]);\r\n        }\r\n        return values;\r\n      };\r\n\r\n/**\r\n * Determine if an object has any properties.\r\n * @param {Object} object The object to check.\r\n * @return {boolean} The object is empty.\r\n */\r\nexport function isEmpty(object) {\r\n  let property;\r\n  for (property in object) {\r\n    return false;\r\n  }\r\n  return !property;\r\n}\r\n", "/**\r\n * @module ol/util\r\n */\r\n\r\n/**\r\n * @return {?} Any return.\r\n */\r\nexport function abstract() {\r\n  return /** @type {?} */ (\r\n    (function () {\r\n      throw new Error('Unimplemented abstract method.');\r\n    })()\r\n  );\r\n}\r\n\r\n/**\r\n * Counter for getUid.\r\n * @type {number}\r\n * @private\r\n */\r\nlet uidCounter_ = 0;\r\n\r\n/**\r\n * Gets a unique ID for an object. This mutates the object so that further calls\r\n * with the same object as a parameter returns the same value. Unique IDs are generated\r\n * as a strictly increasing sequence. Adapted from goog.getUid.\r\n *\r\n * @param {Object} obj The object to get the unique ID for.\r\n * @return {string} The unique ID for the object.\r\n * @api\r\n */\r\nexport function getUid(obj) {\r\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\r\n}\r\n\r\n/**\r\n * OpenLayers version.\r\n * @type {string}\r\n */\r\nexport const VERSION = 'latest';\r\n", "/**\r\n * @module ol/AssertionError\r\n */\r\nimport {VERSION} from './util.js';\r\n\r\n/**\r\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\r\n * extended with a `code` property.\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\r\n */\r\nclass AssertionError extends Error {\r\n  /**\r\n   * @param {number} code Error code.\r\n   */\r\n  constructor(code) {\r\n    const path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\r\n    const message =\r\n      'Assertion failed. See https://openlayers.org/en/' +\r\n      path +\r\n      '/doc/errors/#' +\r\n      code +\r\n      ' for details.';\r\n\r\n    super(message);\r\n\r\n    /**\r\n     * Error code. The meaning of the code can be found on\r\n     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\r\n     * the version found in the OpenLayers script's header comment if a version\r\n     * other than the latest is used).\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.code = code;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.name = 'AssertionError';\r\n\r\n    // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport default AssertionError;\r\n"],
  "mappings": ";AAaO,IAAM,SACX,OAAO,OAAO,WAAW,aACrB,OAAO,SACP,SAAU,QAAQ,aAAW;AAC3B,MAAI,WAAW,UAAa,WAAW,MAAM;AAC3C,UAAM,IAAI,UAAU,4CAA4C;;AAGlE,MAAM,SAAS,OAAO,MAAM;AAC5B,WAAS,IAAI,GAAG,KAAK,UAAU,QAAQ,IAAI,IAAI,EAAE,GAAG;AAClD,QAAM,SAAS,UAAU,CAAC;AAC1B,QAAI,WAAW,UAAa,WAAW,MAAM;AAC3C,eAAW,OAAO,QAAQ;AACxB,YAAI,OAAO,eAAe,GAAG,GAAG;AAC9B,iBAAO,GAAG,IAAI,OAAO,GAAG;;;;;AAKhC,SAAO;AACT;AAMA,SAAU,MAAM,QAAM;AAC1B,WAAW,YAAY,QAAQ;AAC7B,WAAO,OAAO,QAAQ;;AAE1B;AAUO,IAAM,YACX,OAAO,OAAO,WAAW,aACrB,OAAO,SACP,SAAU,QAAM;AACd,MAAM,SAAS,CAAA;AACf,WAAW,YAAY,QAAQ;AAC7B,WAAO,KAAK,OAAO,QAAQ,CAAC;;AAE9B,SAAO;AACT;AAOA,SAAU,QAAQ,QAAM;AAC5B,MAAI;AACJ,OAAK,YAAY,QAAQ;AACvB,WAAO;;AAET,SAAO,CAAC;AACV;;;ACpEM,SAAU,WAAQ;AACtB;;IACG,WAAA;AACC,YAAM,IAAI,MAAM,gCAAgC;IAClD,EAAE;;AAEN;AAOA,IAAI,cAAc;AAWZ,SAAU,OAAO,KAAG;AACxB,SAAO,IAAI,WAAW,IAAI,SAAS,OAAO,EAAE,WAAW;AACzD;AAMO,IAAM,UAAU;;;;;;;;;;;;;;;;;;;;;;AC7BvB,IAAA;;EAAA,SAAA,QAAA;AAA6B,cAAAA,iBAAA,MAAA;AAI3B,aAAAA,gBAAY,MAAI;AAAhB,UAAA,QAAA;AACE,UAAM,OAAO,YAAY,WAAW,UAAU,MAAM,QAAQ,MAAM,GAAG,EAAE,CAAC;AACxE,UAAM,UACJ,qDACA,OACA,kBACA,OACA;cAEF,OAAA,KAAA,MAAM,OAAO,KAAC;AAUd,YAAK,OAAO;AAKZ,YAAK,OAAO;AAGZ,YAAK,UAAU;;IACjB;AACF,WAAAA;EAAA,EAjC6B,KAAK;;AAmClC,IAAA,yBAAe;",
  "names": ["AssertionError"]
}

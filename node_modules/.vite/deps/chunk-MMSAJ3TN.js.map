{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/elements/dom-module.js", "../../@polymer/polymer/lib/utils/style-gather.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\nimport '../utils/boot.js';\r\n\r\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\r\nimport { strictTemplatePolicy } from '../utils/settings.js';\r\n\r\nlet modules = {};\r\nlet lcModules = {};\r\n/**\r\n * Sets a dom-module into the global registry by id.\r\n *\r\n * @param {string} id dom-module id\r\n * @param {DomModule} module dom-module instance\r\n * @return {void}\r\n */\r\nfunction setModule(id, module) {\r\n  // store id separate from lowercased id so that\r\n  // in all cases mixedCase id will stored distinctly\r\n  // and lowercase version is a fallback\r\n  modules[id] = lcModules[id.toLowerCase()] = module;\r\n}\r\n/**\r\n * Retrieves a dom-module from the global registry by id.\r\n *\r\n * @param {string} id dom-module id\r\n * @return {DomModule!} dom-module instance\r\n */\r\nfunction findModule(id) {\r\n  return modules[id] || lcModules[id.toLowerCase()];\r\n}\r\n\r\nfunction styleOutsideTemplateCheck(inst) {\r\n  if (inst.querySelector('style')) {\r\n    console.warn('dom-module %s has style outside template', inst.id);\r\n  }\r\n}\r\n\r\n/**\r\n * The `dom-module` element registers the dom it contains to the name given\r\n * by the module's id attribute. It provides a unified database of dom\r\n * accessible via its static `import` API.\r\n *\r\n * A key use case of `dom-module` is for providing custom element `<template>`s\r\n * via HTML imports that are parsed by the native HTML parser, that can be\r\n * relocated during a bundling pass and still looked up by `id`.\r\n *\r\n * Example:\r\n *\r\n *     <dom-module id=\"foo\">\r\n *       <img src=\"stuff.png\">\r\n *     </dom-module>\r\n *\r\n * Then in code in some other location that cannot access the dom-module above\r\n *\r\n *     let img = customElements.get('dom-module').import('foo', 'img');\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @summary Custom element that provides a registry of relocatable DOM content\r\n *   by `id` that is agnostic to bundling.\r\n * @unrestricted\r\n */\r\nexport class DomModule extends HTMLElement {\r\n\r\n  /** @override */\r\n  static get observedAttributes() { return ['id']; }\r\n\r\n  /**\r\n   * Retrieves the element specified by the css `selector` in the module\r\n   * registered by `id`. For example, this.import('foo', 'img');\r\n   * @param {string} id The id of the dom-module in which to search.\r\n   * @param {string=} selector The css selector by which to find the element.\r\n   * @return {Element} Returns the element which matches `selector` in the\r\n   * module registered at the specified `id`.\r\n   *\r\n   * @export\r\n   * @nocollapse Referred to indirectly in style-gather.js\r\n   */\r\n  static import(id, selector) {\r\n    if (id) {\r\n      let m = findModule(id);\r\n      if (m && selector) {\r\n        return m.querySelector(selector);\r\n      }\r\n      return m;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* eslint-disable no-unused-vars */\r\n  /**\r\n   * @param {string} name Name of attribute.\r\n   * @param {?string} old Old value of attribute.\r\n   * @param {?string} value Current value of attribute.\r\n   * @param {?string} namespace Attribute namespace.\r\n   * @return {void}\r\n   * @override\r\n   */\r\n  attributeChangedCallback(name, old, value, namespace) {\r\n    if (old !== value) {\r\n      this.register();\r\n    }\r\n  }\r\n  /* eslint-enable no-unused-args */\r\n\r\n  /**\r\n   * The absolute URL of the original location of this `dom-module`.\r\n   *\r\n   * This value will differ from this element's `ownerDocument` in the\r\n   * following ways:\r\n   * - Takes into account any `assetpath` attribute added during bundling\r\n   *   to indicate the original location relative to the bundled location\r\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\r\n   *   the path is relative to the import document's location since\r\n   *   `ownerDocument` is not currently polyfilled\r\n   */\r\n  get assetpath() {\r\n    // Don't override existing assetpath.\r\n    if (!this.__assetpath) {\r\n      // note: assetpath set via an attribute must be relative to this\r\n      // element's location; accommodate polyfilled HTMLImports\r\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\r\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\r\n      const url = resolveUrl(\r\n        this.getAttribute('assetpath') || '', owner.baseURI);\r\n      this.__assetpath = pathFromUrl(url);\r\n    }\r\n    return this.__assetpath;\r\n  }\r\n\r\n  /**\r\n   * Registers the dom-module at a given id. This method should only be called\r\n   * when a dom-module is imperatively created. For\r\n   * example, `document.createElement('dom-module').register('foo')`.\r\n   * @param {string=} id The id at which to register the dom-module.\r\n   * @return {void}\r\n   */\r\n  register(id) {\r\n    id = id || this.id;\r\n    if (id) {\r\n      // Under strictTemplatePolicy, reject and null out any re-registered\r\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\r\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\r\n        setModule(id, null);\r\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\r\n      }\r\n      this.id = id;\r\n      setModule(id, this);\r\n      styleOutsideTemplateCheck(this);\r\n    }\r\n  }\r\n}\r\n\r\nDomModule.prototype['modules'] = modules;\r\n\r\ncustomElements.define('dom-module', DomModule);\r\n", "/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Module with utilities for collection CSS text from `<templates>`, external\r\n * stylesheets, and `dom-module`s.\r\n *\r\n * @summary Module with utilities for collection CSS text from various sources.\r\n */\r\n\r\nimport { DomModule } from '../elements/dom-module.js';\r\nimport { resolveCss } from './resolve-url.js';\r\n\r\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\r\nconst INCLUDE_ATTR = 'include';\r\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\r\n\r\n/**\r\n * @param {string} moduleId .\r\n * @return {?DomModule} .\r\n */\r\nfunction importModule(moduleId) {\r\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\r\n}\r\n\r\nfunction styleForImport(importDoc) {\r\n  // NOTE: polyfill affordance.\r\n  // under the HTMLImports polyfill, there will be no 'body',\r\n  // but the import pseudo-doc can be used directly.\r\n  let container = importDoc.body ? importDoc.body : importDoc;\r\n  const importCss = resolveCss(container.textContent,\r\n    importDoc.baseURI);\r\n  const style = document.createElement('style');\r\n  style.textContent = importCss;\r\n  return style;\r\n}\r\n\r\n/** @typedef {{assetpath: string}} */\r\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\r\n\r\n\r\n/**\r\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\r\n *\r\n * @function\r\n * @param {string} moduleIds List of dom-module id's within which to\r\n * search for css.\r\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\r\n */\r\nexport function stylesFromModules(moduleIds) {\r\n const modules = moduleIds.trim().split(/\\s+/);\r\n const styles = [];\r\n for (let i=0; i < modules.length; i++) {\r\n   styles.push(...stylesFromModule(modules[i]));\r\n }\r\n return styles;\r\n}\r\n\r\n/**\r\n * Returns a list of <style> elements in a given `dom-module`.\r\n * Styles in a `dom-module` can come either from `<style>`s within the\r\n * first `<template>`, or else from one or more\r\n * `<link rel=\"import\" type=\"css\">` links outside the template.\r\n *\r\n * @param {string} moduleId dom-module id to gather styles from\r\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\r\n */\r\nexport function stylesFromModule(moduleId) {\r\n  const m = importModule(moduleId);\r\n\r\n  if (!m) {\r\n    console.warn('Could not find style data in module named', moduleId);\r\n    return [];\r\n  }\r\n\r\n  if (m._styles === undefined) {\r\n    const styles = [];\r\n    // module imports: <link rel=\"import\" type=\"css\">\r\n    styles.push(..._stylesFromModuleImports(m));\r\n    // include css from the first template in the module\r\n    const template = /** @type {?HTMLTemplateElement} */(\r\n        m.querySelector('template'));\r\n    if (template) {\r\n      styles.push(...stylesFromTemplate(template,\r\n        /** @type {templateWithAssetPath} */(m).assetpath));\r\n    }\r\n\r\n    m._styles = styles;\r\n  }\r\n\r\n  return m._styles;\r\n}\r\n\r\n/**\r\n * Returns the `<style>` elements within a given template.\r\n *\r\n * @param {!HTMLTemplateElement} template Template to gather styles from\r\n * @param {string=} baseURI baseURI for style content\r\n * @return {!Array<!HTMLStyleElement>} Array of styles\r\n */\r\nexport function stylesFromTemplate(template, baseURI) {\r\n  if (!template._styles) {\r\n    const styles = [];\r\n    // if element is a template, get content from its .content\r\n    const e$ = template.content.querySelectorAll('style');\r\n    for (let i=0; i < e$.length; i++) {\r\n      let e = e$[i];\r\n      // support style sharing by allowing styles to \"include\"\r\n      // other dom-modules that contain styling\r\n      let include = e.getAttribute(INCLUDE_ATTR);\r\n      if (include) {\r\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\r\n          return self.indexOf(item) === index;\r\n        }));\r\n      }\r\n      if (baseURI) {\r\n        e.textContent =\r\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\r\n      }\r\n      styles.push(e);\r\n    }\r\n    template._styles = styles;\r\n  }\r\n  return template._styles;\r\n}\r\n\r\n/**\r\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\r\n *\r\n * @param {string} moduleId Id of `dom-module` to gather CSS from\r\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\r\n */\r\nexport function stylesFromModuleImports(moduleId) {\r\n let m = importModule(moduleId);\r\n return m ? _stylesFromModuleImports(m) : [];\r\n}\r\n\r\n/**\r\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\r\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\r\n */\r\nfunction _stylesFromModuleImports(module) {\r\n  const styles = [];\r\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\r\n  for (let i=0; i < p$.length; i++) {\r\n    let p = p$[i];\r\n    if (p.import) {\r\n      const importDoc = p.import;\r\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\r\n      if (unscoped && !importDoc._unscopedStyle) {\r\n        const style = styleForImport(importDoc);\r\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\r\n        importDoc._unscopedStyle = style;\r\n      } else if (!importDoc._style) {\r\n        importDoc._style = styleForImport(importDoc);\r\n      }\r\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\r\n    }\r\n  }\r\n  return styles;\r\n}\r\n\r\n/**\r\n *\r\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\r\n * Note: This method is deprecated, use `stylesFromModules` instead.\r\n *\r\n * @deprecated\r\n * @param {string} moduleIds List of dom-module id's within which to\r\n * search for css.\r\n * @return {string} Concatenated CSS content from specified `dom-module`s\r\n */\r\nexport function cssFromModules(moduleIds) {\r\n let modules = moduleIds.trim().split(/\\s+/);\r\n let cssText = '';\r\n for (let i=0; i < modules.length; i++) {\r\n   cssText += cssFromModule(modules[i]);\r\n }\r\n return cssText;\r\n}\r\n\r\n/**\r\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\r\n * can come either from `<style>`s within the first `<template>`, or else\r\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\r\n * template.\r\n *\r\n * Any `<styles>` processed are removed from their original location.\r\n * Note: This method is deprecated, use `styleFromModule` instead.\r\n *\r\n * @deprecated\r\n * @param {string} moduleId dom-module id to gather styles from\r\n * @return {string} Concatenated CSS content from specified `dom-module`\r\n */\r\nexport function cssFromModule(moduleId) {\r\n  let m = importModule(moduleId);\r\n  if (m && m._cssText === undefined) {\r\n    // module imports: <link rel=\"import\" type=\"css\">\r\n    let cssText = _cssFromModuleImports(m);\r\n    // include css from the first template in the module\r\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\r\n    if (t) {\r\n      cssText += cssFromTemplate(t,\r\n        /** @type {templateWithAssetPath} */(m).assetpath);\r\n    }\r\n    m._cssText = cssText || null;\r\n  }\r\n  if (!m) {\r\n    console.warn('Could not find style data in module named', moduleId);\r\n  }\r\n  return m && m._cssText || '';\r\n}\r\n\r\n/**\r\n * Returns CSS text of `<styles>` within a given template.\r\n *\r\n * Any `<styles>` processed are removed from their original location.\r\n * Note: This method is deprecated, use `styleFromTemplate` instead.\r\n *\r\n * @deprecated\r\n * @param {!HTMLTemplateElement} template Template to gather styles from\r\n * @param {string} baseURI Base URI to resolve the URL against\r\n * @return {string} Concatenated CSS content from specified template\r\n */\r\nexport function cssFromTemplate(template, baseURI) {\r\n  let cssText = '';\r\n  const e$ = stylesFromTemplate(template, baseURI);\r\n  // if element is a template, get content from its .content\r\n  for (let i=0; i < e$.length; i++) {\r\n    let e = e$[i];\r\n    if (e.parentNode) {\r\n      e.parentNode.removeChild(e);\r\n    }\r\n    cssText += e.textContent;\r\n  }\r\n  return cssText;\r\n}\r\n\r\n/**\r\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\r\n * links within the specified `dom-module`.\r\n *\r\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\r\n *\r\n * @deprecated\r\n *\r\n * @param {string} moduleId Id of `dom-module` to gather CSS from\r\n * @return {string} Concatenated CSS content from links in specified `dom-module`\r\n */\r\nexport function cssFromModuleImports(moduleId) {\r\n  let m = importModule(moduleId);\r\n  return m ? _cssFromModuleImports(m) : '';\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\r\n * @return {string} Concatenated CSS content from links in the dom-module\r\n */\r\nfunction _cssFromModuleImports(module) {\r\n  let cssText = '';\r\n  let styles = _stylesFromModuleImports(module);\r\n  for (let i=0; i < styles.length; i++) {\r\n    cssText += styles[i].textContent;\r\n  }\r\n  return cssText;\r\n}\r\n"],
  "mappings": "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",
  "names": ["modules"]
}

{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/resize-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\n\r\nconst observer = new ResizeObserver((entries) => {\r\n  setTimeout(() => {\r\n    entries.forEach((entry) => {\r\n      if (!entry.target.isConnected) {\r\n        return;\r\n      }\r\n\r\n      // Notify child resizables, if any\r\n      if (entry.target.resizables) {\r\n        entry.target.resizables.forEach((resizable) => {\r\n          resizable._onResize(entry.contentRect);\r\n        });\r\n      } else {\r\n        entry.target._onResize(entry.contentRect);\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n/**\r\n * A mixin that uses a ResizeObserver to listen to host size changes.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const ResizeMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class ResizeMixinClass extends superclass {\r\n      /**\r\n       * When true, the parent element resize will be also observed.\r\n       * Override this getter and return `true` to enable this.\r\n       *\r\n       * @protected\r\n       */\r\n      get _observeParent() {\r\n        return false;\r\n      }\r\n\r\n      /** @protected */\r\n      connectedCallback() {\r\n        super.connectedCallback();\r\n        observer.observe(this);\r\n\r\n        if (this._observeParent) {\r\n          const parent = this.parentNode instanceof ShadowRoot ? this.parentNode.host : this.parentNode;\r\n\r\n          if (!parent.resizables) {\r\n            parent.resizables = new Set();\r\n            observer.observe(parent);\r\n          }\r\n\r\n          parent.resizables.add(this);\r\n          this.__parent = parent;\r\n        }\r\n      }\r\n\r\n      /** @protected */\r\n      disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        observer.unobserve(this);\r\n\r\n        const parent = this.__parent;\r\n        if (this._observeParent && parent) {\r\n          const resizables = parent.resizables;\r\n\r\n          if (resizables) {\r\n            resizables.delete(this);\r\n\r\n            if (resizables.size === 0) {\r\n              observer.unobserve(parent);\r\n            }\r\n          }\r\n\r\n          this.__parent = null;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * A handler invoked on host resize. By default, it does nothing.\r\n       * Override the method to implement your own behavior.\r\n       *\r\n       * @protected\r\n       */\r\n      _onResize(_contentRect) {\r\n        // To be implemented.\r\n      }\r\n    },\r\n);\r\n"],
  "mappings": ";;;;;AAOA,IAAM,WAAW,IAAI,eAAe,CAAC,YAAY;AAC/C,aAAW,MAAM;AACf,YAAQ,QAAQ,CAAC,UAAU;AACzB,UAAI,CAAC,MAAM,OAAO,aAAa;AAC7B;AAAA,MACF;AAGA,UAAI,MAAM,OAAO,YAAY;AAC3B,cAAM,OAAO,WAAW,QAAQ,CAAC,cAAc;AAC7C,oBAAU,UAAU,MAAM,WAAW;AAAA,QACvC,CAAC;AAAA,MACH,OAAO;AACL,cAAM,OAAO,UAAU,MAAM,WAAW;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH,CAAC;AAOM,IAAM,cAAc;AAAA,EACzB,CAAC,eACC,MAAM,yBAAyB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOxC,IAAI,iBAAiB;AACnB,aAAO;AAAA,IACT;AAAA;AAAA,IAGA,oBAAoB;AAClB,YAAM,kBAAkB;AACxB,eAAS,QAAQ,IAAI;AAErB,UAAI,KAAK,gBAAgB;AACvB,cAAM,SAAS,KAAK,sBAAsB,aAAa,KAAK,WAAW,OAAO,KAAK;AAEnF,YAAI,CAAC,OAAO,YAAY;AACtB,iBAAO,aAAa,oBAAI,IAAI;AAC5B,mBAAS,QAAQ,MAAM;AAAA,QACzB;AAEA,eAAO,WAAW,IAAI,IAAI;AAC1B,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA;AAAA,IAGA,uBAAuB;AACrB,YAAM,qBAAqB;AAC3B,eAAS,UAAU,IAAI;AAEvB,YAAM,SAAS,KAAK;AACpB,UAAI,KAAK,kBAAkB,QAAQ;AACjC,cAAM,aAAa,OAAO;AAE1B,YAAI,YAAY;AACd,qBAAW,OAAO,IAAI;AAEtB,cAAI,WAAW,SAAS,GAAG;AACzB,qBAAS,UAAU,MAAM;AAAA,UAC3B;AAAA,QACF;AAEA,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,UAAU,cAAc;AAAA,IAExB;AAAA,EACF;AACJ;",
  "names": []
}

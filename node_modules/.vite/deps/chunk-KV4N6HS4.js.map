{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/async.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * @fileoverview\r\n *\r\n * This module provides a number of strategies for enqueuing asynchronous\r\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\r\n * handle, and a `cancel(handle)` interface for canceling async tasks before\r\n * they run.\r\n *\r\n * @summary Module that provides a number of strategies for enqueuing\r\n * asynchronous tasks.\r\n */\r\n\r\nimport './boot.js';\r\n\r\n// Microtask implemented using Mutation Observer\r\nlet microtaskCurrHandle = 0;\r\nlet microtaskLastHandle = 0;\r\nlet microtaskCallbacks = [];\r\nlet microtaskNodeContent = 0;\r\nlet microtaskScheduled = false;\r\nlet microtaskNode = document.createTextNode('');\r\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\r\n\r\nfunction microtaskFlush() {\r\n  microtaskScheduled = false;\r\n  const len = microtaskCallbacks.length;\r\n  for (let i = 0; i < len; i++) {\r\n    let cb = microtaskCallbacks[i];\r\n    if (cb) {\r\n      try {\r\n        cb();\r\n      } catch (e) {\r\n        setTimeout(() => { throw e; });\r\n      }\r\n    }\r\n  }\r\n  microtaskCallbacks.splice(0, len);\r\n  microtaskLastHandle += len;\r\n}\r\n\r\n/**\r\n * Async interface wrapper around `setTimeout`.\r\n *\r\n * @namespace\r\n * @summary Async interface wrapper around `setTimeout`.\r\n */\r\nconst timeOut = {\r\n  /**\r\n   * Returns a sub-module with the async interface providing the provided\r\n   * delay.\r\n   *\r\n   * @memberof timeOut\r\n   * @param {number=} delay Time to wait before calling callbacks in ms\r\n   * @return {!AsyncInterface} An async timeout interface\r\n   */\r\n  after(delay) {\r\n    return {\r\n      run(fn) { return window.setTimeout(fn, delay); },\r\n      cancel(handle) {\r\n        window.clearTimeout(handle);\r\n      }\r\n    };\r\n  },\r\n  /**\r\n   * Enqueues a function called in the next task.\r\n   *\r\n   * @memberof timeOut\r\n   * @param {!Function} fn Callback to run\r\n   * @param {number=} delay Delay in milliseconds\r\n   * @return {number} Handle used for canceling task\r\n   */\r\n  run(fn, delay) {\r\n    return window.setTimeout(fn, delay);\r\n  },\r\n  /**\r\n   * Cancels a previously enqueued `timeOut` callback.\r\n   *\r\n   * @memberof timeOut\r\n   * @param {number} handle Handle returned from `run` of callback to cancel\r\n   * @return {void}\r\n   */\r\n  cancel(handle) {\r\n    window.clearTimeout(handle);\r\n  }\r\n};\r\nexport {timeOut};\r\n\r\n/**\r\n * Async interface wrapper around `requestAnimationFrame`.\r\n *\r\n * @namespace\r\n * @summary Async interface wrapper around `requestAnimationFrame`.\r\n */\r\nconst animationFrame = {\r\n  /**\r\n   * Enqueues a function called at `requestAnimationFrame` timing.\r\n   *\r\n   * @memberof animationFrame\r\n   * @param {function(number):void} fn Callback to run\r\n   * @return {number} Handle used for canceling task\r\n   */\r\n  run(fn) {\r\n    return window.requestAnimationFrame(fn);\r\n  },\r\n  /**\r\n   * Cancels a previously enqueued `animationFrame` callback.\r\n   *\r\n   * @memberof animationFrame\r\n   * @param {number} handle Handle returned from `run` of callback to cancel\r\n   * @return {void}\r\n   */\r\n  cancel(handle) {\r\n    window.cancelAnimationFrame(handle);\r\n  }\r\n};\r\nexport {animationFrame};\r\n\r\n/**\r\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\r\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\r\n *\r\n * @namespace\r\n * @summary Async interface wrapper around `requestIdleCallback`.\r\n */\r\nconst idlePeriod = {\r\n  /**\r\n   * Enqueues a function called at `requestIdleCallback` timing.\r\n   *\r\n   * @memberof idlePeriod\r\n   * @param {function(!IdleDeadline):void} fn Callback to run\r\n   * @return {number} Handle used for canceling task\r\n   */\r\n  run(fn) {\r\n    return window.requestIdleCallback ?\r\n      window.requestIdleCallback(fn) :\r\n      window.setTimeout(fn, 16);\r\n  },\r\n  /**\r\n   * Cancels a previously enqueued `idlePeriod` callback.\r\n   *\r\n   * @memberof idlePeriod\r\n   * @param {number} handle Handle returned from `run` of callback to cancel\r\n   * @return {void}\r\n   */\r\n  cancel(handle) {\r\n    window.cancelIdleCallback ?\r\n      window.cancelIdleCallback(handle) :\r\n      window.clearTimeout(handle);\r\n  }\r\n};\r\nexport {idlePeriod};\r\n\r\n/**\r\n * Async interface for enqueuing callbacks that run at microtask timing.\r\n *\r\n * Note that microtask timing is achieved via a single `MutationObserver`,\r\n * and thus callbacks enqueued with this API will all run in a single\r\n * batch, and not interleaved with other microtasks such as promises.\r\n * Promises are avoided as an implementation choice for the time being\r\n * due to Safari bugs that cause Promises to lack microtask guarantees.\r\n *\r\n * @namespace\r\n * @summary Async interface for enqueuing callbacks that run at microtask\r\n *   timing.\r\n */\r\nconst microTask = {\r\n\r\n  /**\r\n   * Enqueues a function called at microtask timing.\r\n   *\r\n   * @memberof microTask\r\n   * @param {!Function=} callback Callback to run\r\n   * @return {number} Handle used for canceling task\r\n   */\r\n  run(callback) {\r\n    if (!microtaskScheduled) {\r\n      microtaskScheduled = true;\r\n      microtaskNode.textContent = microtaskNodeContent++;\r\n    }\r\n    microtaskCallbacks.push(callback);\r\n    return microtaskCurrHandle++;\r\n  },\r\n\r\n  /**\r\n   * Cancels a previously enqueued `microTask` callback.\r\n   *\r\n   * @memberof microTask\r\n   * @param {number} handle Handle returned from `run` of callback to cancel\r\n   * @return {void}\r\n   */\r\n  cancel(handle) {\r\n    const idx = handle - microtaskLastHandle;\r\n    if (idx >= 0) {\r\n      if (!microtaskCallbacks[idx]) {\r\n        throw new Error('invalid async handle: ' + handle);\r\n      }\r\n      microtaskCallbacks[idx] = null;\r\n    }\r\n  }\r\n\r\n};\r\nexport {microTask};\r\n"],
  "mappings": ";AAyBA,IAAI,sBAAsB;AAC1B,IAAI,sBAAsB;AAC1B,IAAI,qBAAqB,CAAC;AAC1B,IAAI,uBAAuB;AAC3B,IAAI,qBAAqB;AACzB,IAAI,gBAAgB,SAAS,eAAe,EAAE;AAC9C,IAAI,OAAO,iBAAiB,cAAc,EAAE,QAAQ,eAAe,EAAC,eAAe,KAAI,CAAC;AAExF,SAAS,iBAAiB;AACxB,uBAAqB;AACrB,QAAM,MAAM,mBAAmB;AAC/B,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,QAAI,KAAK,mBAAmB,CAAC;AAC7B,QAAI,IAAI;AACN,UAAI;AACF,WAAG;AAAA,MACL,SAAS,GAAG;AACV,mBAAW,MAAM;AAAE,gBAAM;AAAA,QAAG,CAAC;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AACA,qBAAmB,OAAO,GAAG,GAAG;AAChC,yBAAuB;AACzB;AAQA,IAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,OAAO;AACX,WAAO;AAAA,MACL,IAAI,IAAI;AAAE,eAAO,OAAO,WAAW,IAAI,KAAK;AAAA,MAAG;AAAA,MAC/C,OAAO,QAAQ;AACb,eAAO,aAAa,MAAM;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,IAAI,OAAO;AACb,WAAO,OAAO,WAAW,IAAI,KAAK;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACb,WAAO,aAAa,MAAM;AAAA,EAC5B;AACF;AASA,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,IAAI,IAAI;AACN,WAAO,OAAO,sBAAsB,EAAE;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACb,WAAO,qBAAqB,MAAM;AAAA,EACpC;AACF;AAUA,IAAM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjB,IAAI,IAAI;AACN,WAAO,OAAO,sBACZ,OAAO,oBAAoB,EAAE,IAC7B,OAAO,WAAW,IAAI,EAAE;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACb,WAAO,qBACL,OAAO,mBAAmB,MAAM,IAChC,OAAO,aAAa,MAAM;AAAA,EAC9B;AACF;AAgBA,IAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,IAAI,UAAU;AACZ,QAAI,CAAC,oBAAoB;AACvB,2BAAqB;AACrB,oBAAc,cAAc;AAAA,IAC9B;AACA,uBAAmB,KAAK,QAAQ;AAChC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,QAAQ;AACb,UAAM,MAAM,SAAS;AACrB,QAAI,OAAO,GAAG;AACZ,UAAI,CAAC,mBAAmB,GAAG,GAAG;AAC5B,cAAM,IAAI,MAAM,2BAA2B,MAAM;AAAA,MACnD;AACA,yBAAmB,GAAG,IAAI;AAAA,IAC5B;AAAA,EACF;AAEF;",
  "names": []
}

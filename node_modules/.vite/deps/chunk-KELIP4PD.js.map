{
  "version": 3,
  "sources": ["../../@vaadin/date-picker/src/vaadin-date-picker-helper.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * Get ISO 8601 week number for the given date.\r\n *\r\n * @param {!Date} Date object\r\n * @return {number} Week number\r\n */\r\nexport function getISOWeekNumber(date) {\r\n  // Ported from Vaadin Framework method com.vaadin.client.DateTimeService.getISOWeekNumber(date)\r\n  let dayOfWeek = date.getDay(); // 0 == sunday\r\n\r\n  // ISO 8601 use weeks that start on monday so we use\r\n  // mon=1,tue=2,...sun=7;\r\n  if (dayOfWeek === 0) {\r\n    dayOfWeek = 7;\r\n  }\r\n  // Find nearest thursday (defines the week in ISO 8601). The week number\r\n  // for the nearest thursday is the same as for the target date.\r\n  const nearestThursdayDiff = 4 - dayOfWeek; // 4 is thursday\r\n  const nearestThursday = new Date(date.getTime() + nearestThursdayDiff * 24 * 3600 * 1000);\r\n\r\n  const firstOfJanuary = new Date(0, 0);\r\n  firstOfJanuary.setFullYear(nearestThursday.getFullYear());\r\n\r\n  const timeDiff = nearestThursday.getTime() - firstOfJanuary.getTime();\r\n\r\n  // Rounding the result, as the division doesn't result in an integer\r\n  // when the given date is inside daylight saving time period.\r\n  const daysSinceFirstOfJanuary = Math.round(timeDiff / (24 * 3600 * 1000));\r\n\r\n  return Math.floor(daysSinceFirstOfJanuary / 7 + 1);\r\n}\r\n\r\n/**\r\n * Creates a new object with the same date, but sets the hours, minutes, seconds and milliseconds to 0.\r\n *\r\n * @param {Date} date in system timezone\r\n * @return {Date} The same date with time elements set to 0, in UTC timezone.\r\n */\r\nexport function normalizeDate(date) {\r\n  const normalizedDate = new Date(date);\r\n  normalizedDate.setHours(0, 0, 0, 0);\r\n  return normalizedDate;\r\n}\r\n\r\n/**\r\n * Creates a new object with the same date, but sets the hours, minutes, seconds and milliseconds to 0.\r\n *\r\n * Uses UTC date components to allow handling date instances independently of\r\n * the system time-zone.\r\n *\r\n * @param {Date} date in UTC timezone\r\n * @return {Date} The same date with time elements set to 0, in UTC timezone.\r\n */\r\nexport function normalizeUTCDate(date) {\r\n  return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0, 0));\r\n}\r\n\r\n/**\r\n * Check if two dates are equal.\r\n *\r\n * @param {Date} date1\r\n * @param {Date} date2\r\n * @param {function(Date): Date} normalizer\r\n * @return {boolean} True if the given date objects refer to the same date\r\n */\r\nexport function dateEquals(date1, date2, normalizer = normalizeDate) {\r\n  return date1 instanceof Date && date2 instanceof Date && normalizer(date1).getTime() === normalizer(date2).getTime();\r\n}\r\n\r\n/**\r\n * Extracts the basic component parts of a date (day, month and year)\r\n * to the expected format.\r\n * @param {!Date} date\r\n * @return {{day: number, month: number, year: number}}\r\n */\r\nexport function extractDateParts(date) {\r\n  return {\r\n    day: date.getDate(),\r\n    month: date.getMonth(),\r\n    year: date.getFullYear(),\r\n  };\r\n}\r\n\r\n/**\r\n * Check if the given date is in the range of allowed dates.\r\n *\r\n * @param {!Date} date The date to check\r\n * @param {Date} min Range start\r\n * @param {Date} max Range end\r\n * @param {function(!DatePickerDate): boolean} isDateDisabled Callback to check if the date is disabled\r\n * @return {boolean} True if the date is in the range\r\n */\r\nexport function dateAllowed(date, min, max, isDateDisabled) {\r\n  let dateIsDisabled = false;\r\n  if (typeof isDateDisabled === 'function' && !!date) {\r\n    const dateToCheck = extractDateParts(date);\r\n    dateIsDisabled = isDateDisabled(dateToCheck);\r\n  }\r\n\r\n  return (!min || date >= min) && (!max || date <= max) && !dateIsDisabled;\r\n}\r\n\r\n/**\r\n * Get closest date from array of dates.\r\n *\r\n * @param {!Date} date The date to compare dates with\r\n * @param {!Array<!Date>} dates Array of date objects\r\n * @return {!Date} Closest date\r\n */\r\nexport function getClosestDate(date, dates) {\r\n  return dates\r\n    .filter((date) => date !== undefined)\r\n    .reduce((closestDate, candidate) => {\r\n      if (!candidate) {\r\n        return closestDate;\r\n      }\r\n\r\n      if (!closestDate) {\r\n        return candidate;\r\n      }\r\n\r\n      const candidateDiff = Math.abs(date.getTime() - candidate.getTime());\r\n      const closestDateDiff = Math.abs(closestDate.getTime() - date.getTime());\r\n      return candidateDiff < closestDateDiff ? candidate : closestDate;\r\n    });\r\n}\r\n\r\n/**\r\n * Get difference in months between today and given months value.\r\n *\r\n * @param {number} months\r\n * @return {number}\r\n */\r\nexport function dateAfterXMonths(months) {\r\n  const today = new Date();\r\n  const result = new Date(today);\r\n  result.setDate(1);\r\n  result.setMonth(parseInt(months) + today.getMonth());\r\n  return result;\r\n}\r\n\r\n/**\r\n * Calculate the year of the date based on the provided reference date.\r\n * Gets a two-digit year and returns a full year.\r\n * @param {!Date} referenceDate The date to act as basis in the calculation\r\n * @param {!number} year Should be in the range of [0, 99]\r\n * @param {number} month\r\n * @param {number} day\r\n * @return {!number} Adjusted year value\r\n */\r\nexport function getAdjustedYear(referenceDate, year, month = 0, day = 1) {\r\n  if (year > 99) {\r\n    throw new Error('The provided year cannot have more than 2 digits.');\r\n  }\r\n  if (year < 0) {\r\n    throw new Error('The provided year cannot be negative.');\r\n  }\r\n  // Year values up to 2 digits are parsed based on the reference date.\r\n  let adjustedYear = year + Math.floor(referenceDate.getFullYear() / 100) * 100;\r\n  if (referenceDate < new Date(adjustedYear - 50, month, day)) {\r\n    adjustedYear -= 100;\r\n  } else if (referenceDate > new Date(adjustedYear + 50, month, day)) {\r\n    adjustedYear += 100;\r\n  }\r\n  return adjustedYear;\r\n}\r\n\r\n/**\r\n * Parse date string of one of the following date formats:\r\n * - ISO 8601 `\"YYYY-MM-DD\"`\r\n * - 6-digit extended ISO 8601 `\"+YYYYYY-MM-DD\"`, `\"-YYYYYY-MM-DD\"`\r\n * @param {!string} str Date string to parse\r\n * @return {Date} Parsed date in system timezone\r\n */\r\nexport function parseDate(str) {\r\n  // Parsing with RegExp to ensure correct format\r\n  const parts = /^([-+]\\d{1}|\\d{2,4}|[-+]\\d{6})-(\\d{1,2})-(\\d{1,2})$/u.exec(str);\r\n  if (!parts) {\r\n    return undefined;\r\n  }\r\n\r\n  const date = new Date(0, 0); // Wrong date (1900-01-01), but with midnight in local time\r\n  date.setFullYear(parseInt(parts[1], 10));\r\n  date.setMonth(parseInt(parts[2], 10) - 1);\r\n  date.setDate(parseInt(parts[3], 10));\r\n  return date;\r\n}\r\n\r\n/**\r\n * Parse date string of one of the following date formats:\r\n * - ISO 8601 `\"YYYY-MM-DD\"`\r\n * - 6-digit extended ISO 8601 `\"+YYYYYY-MM-DD\"`, `\"-YYYYYY-MM-DD\"`\r\n *\r\n * Uses UTC date components to allow handling date instances independently of\r\n * the system time-zone.\r\n *\r\n * @param {!string} str Date string to parse\r\n * @return {Date} Parsed date in UTC timezone\r\n */\r\nexport function parseUTCDate(str) {\r\n  // Parsing with RegExp to ensure correct format\r\n  const parts = /^([-+]\\d{1}|\\d{2,4}|[-+]\\d{6})-(\\d{1,2})-(\\d{1,2})$/u.exec(str);\r\n  if (!parts) {\r\n    return undefined;\r\n  }\r\n\r\n  const date = new Date(Date.UTC(0, 0)); // Wrong date (1900-01-01), but with midnight in UTC\r\n  date.setUTCFullYear(parseInt(parts[1], 10));\r\n  date.setUTCMonth(parseInt(parts[2], 10) - 1);\r\n  date.setUTCDate(parseInt(parts[3], 10));\r\n\r\n  return date;\r\n}\r\n\r\nfunction formatISODateBase(dateParts) {\r\n  const pad = (num, fmt = '00') => (fmt + num).substr((fmt + num).length - fmt.length);\r\n\r\n  let yearSign = '';\r\n  let yearFmt = '0000';\r\n  let yearAbs = dateParts.year;\r\n  if (yearAbs < 0) {\r\n    yearAbs = -yearAbs;\r\n    yearSign = '-';\r\n    yearFmt = '000000';\r\n  } else if (dateParts.year >= 10000) {\r\n    yearSign = '+';\r\n    yearFmt = '000000';\r\n  }\r\n\r\n  const year = yearSign + pad(yearAbs, yearFmt);\r\n  const month = pad(dateParts.month + 1);\r\n  const day = pad(dateParts.day);\r\n  return [year, month, day].join('-');\r\n}\r\n\r\n/**\r\n * Format a date instance in ISO 8601 (`\"YYYY-MM-DD\"`) or 6-digit extended ISO\r\n * 8601 (`\"+YYYYYY-MM-DD\"`, `\"-YYYYYY-MM-DD\"`) format.\r\n * @param {Date} date in system timezone\r\n * @returns {string}\r\n */\r\nexport function formatISODate(date) {\r\n  if (!(date instanceof Date)) {\r\n    return '';\r\n  }\r\n\r\n  return formatISODateBase({\r\n    year: date.getFullYear(),\r\n    month: date.getMonth(),\r\n    day: date.getDate(),\r\n  });\r\n}\r\n\r\n/**\r\n * Format a date instance in ISO 8601 (`\"YYYY-MM-DD\"`) or 6-digit extended ISO\r\n * 8601 (`\"+YYYYYY-MM-DD\"`, `\"-YYYYYY-MM-DD\"`) format.\r\n *\r\n * Uses UTC date components to allow handling date instances independently of\r\n * the system time-zone.\r\n *\r\n * @param {Date} date in UTC timezone\r\n * @returns {string}\r\n */\r\nexport function formatUTCISODate(date) {\r\n  if (!(date instanceof Date)) {\r\n    return '';\r\n  }\r\n\r\n  return formatISODateBase({\r\n    year: date.getUTCFullYear(),\r\n    month: date.getUTCMonth(),\r\n    day: date.getUTCDate(),\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": ["date"]
}

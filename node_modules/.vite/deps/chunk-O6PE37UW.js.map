{
  "version": 3,
  "sources": ["../../@vaadin/board/src/vaadin-board-row-mixin.js", "../../@vaadin/board/src/vaadin-board-row.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2000 - 2025 Vaadin Ltd.\r\n *\r\n * This program is available under Vaadin Commercial License and Service Terms.\r\n *\r\n *\r\n * See https://vaadin.com/commercial-license-and-service-terms for the full\r\n * license.\r\n */\r\nimport { isElementHidden } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\n\r\nconst CLASSES = {\r\n  SMALL: 'small',\r\n  MEDIUM: 'medium',\r\n  LARGE: 'large',\r\n};\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes ResizeMixin\r\n */\r\nexport const BoardRowMixin = (superClass) =>\r\n  class BoardRowMixinClass extends ResizeMixin(superClass) {\r\n    constructor() {\r\n      super();\r\n      this._oldWidth = 0;\r\n      this._oldBreakpoints = { smallSize: 600, mediumSize: 960 };\r\n      this._oldFlexBasis = [];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.$.insertionPoint.addEventListener('slotchange', () => this.redraw());\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Adds styles for board row based on width.\r\n     * @private\r\n     */\r\n    _addStyleNames(width, breakpoints) {\r\n      if (width < breakpoints.smallSize) {\r\n        this.classList.add(CLASSES.SMALL);\r\n        this.classList.remove(CLASSES.MEDIUM);\r\n        this.classList.remove(CLASSES.LARGE);\r\n      } else if (width < breakpoints.mediumSize) {\r\n        this.classList.remove(CLASSES.SMALL);\r\n        this.classList.add(CLASSES.MEDIUM);\r\n        this.classList.remove(CLASSES.LARGE);\r\n      } else {\r\n        this.classList.remove(CLASSES.SMALL);\r\n        this.classList.remove(CLASSES.MEDIUM);\r\n        this.classList.add(CLASSES.LARGE);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculates flex basis based on colSpan, width and breakpoints.\r\n     * @param {number} colSpan colspan value of the row\r\n     * @param {number} width width of the row in px\r\n     * @param {number} colsInRow number of columns in the row\r\n     * @param {object} breakpoints object with smallSize and mediumSize number properties, which tells\r\n     * where the row should switch rendering size in pixels.\r\n     * @private\r\n     */\r\n    _calculateFlexBasis(colSpan, width, colsInRow, breakpoints) {\r\n      if (width < breakpoints.smallSize) {\r\n        colsInRow = 1;\r\n      } else if (width < breakpoints.mediumSize && colsInRow === 4) {\r\n        colsInRow = 2;\r\n      }\r\n      let flexBasis = (colSpan / colsInRow) * 100;\r\n      flexBasis = flexBasis > 100 ? 100 : flexBasis;\r\n      return `${flexBasis}%`;\r\n    }\r\n\r\n    /** @private */\r\n    _reportError() {\r\n      const errorMessage = 'The column configuration is not valid; column count should add up to 3 or 4.';\r\n      console.warn(errorMessage, `check: \\r\\n${this.outerHTML}`);\r\n    }\r\n\r\n    /**\r\n     * Parses board-cols from DOM.\r\n     * If there is not enough space in the row drop board cols.\r\n     * @param {!Array<!Node>} nodes array of nodes\r\n     * @return {!Array<number>} array of boardCols\r\n     * @private\r\n     */\r\n    _parseBoardCols(nodes) {\r\n      const boardCols = nodes.map((node) => {\r\n        if (node.getAttribute('board-cols')) {\r\n          return parseInt(node.getAttribute('board-cols'));\r\n        }\r\n        return 1;\r\n      });\r\n\r\n      let spaceLeft = 4;\r\n      let returnBoardCols = [];\r\n      nodes.forEach((_node, i) => {\r\n        spaceLeft -= boardCols[i];\r\n      });\r\n\r\n      if (spaceLeft < 0) {\r\n        this._reportError();\r\n        boardCols.forEach((_node, i) => {\r\n          returnBoardCols[i] = 1;\r\n        });\r\n      } else {\r\n        returnBoardCols = boardCols.slice(0);\r\n      }\r\n\r\n      return returnBoardCols;\r\n    }\r\n\r\n    /**\r\n     * If there is not enough space in the row.\r\n     * Extra items are dropped from DOM.\r\n     * @param {!Array<number>} boardCols array of board-cols for every node\r\n     * @param {!Array<!Node>} nodes array of nodes\r\n     * @return {!Array<!Node>} filtered array of nodes\r\n     * @private\r\n     */\r\n    _removeExtraNodesFromDOM(boardCols, nodes) {\r\n      let isErrorReported = false;\r\n      let spaceLeft = 4;\r\n      const returnNodes = [];\r\n      nodes.forEach((node, i) => {\r\n        spaceLeft -= boardCols[i];\r\n        if (spaceLeft < 0) {\r\n          if (!isErrorReported) {\r\n            isErrorReported = true;\r\n            this._reportError();\r\n          }\r\n          this.removeChild(node);\r\n        } else {\r\n          returnNodes[i] = node;\r\n        }\r\n      });\r\n      return returnNodes;\r\n    }\r\n\r\n    /**\r\n     * Redraws the row, if necessary.\r\n     *\r\n     * In most cases, a board row will redraw itself if your reconfigure it.\r\n     * If you dynamically change breakpoints\r\n     * --vaadin-board-width-small or --vaadin-board-width-medium,\r\n     * then you need to call this method.\r\n     */\r\n    redraw() {\r\n      this._recalculateFlexBasis(true);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onResize() {\r\n      this._recalculateFlexBasis(false);\r\n    }\r\n\r\n    /** @private */\r\n    _recalculateFlexBasis(forceResize) {\r\n      const width = this.getBoundingClientRect().width;\r\n      const breakpoints = this._measureBreakpointsInPx();\r\n      if (forceResize || this._shouldRecalculate(width, breakpoints)) {\r\n        const nodes = this.$.insertionPoint.assignedNodes({ flatten: true });\r\n        const filteredNodes = nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE);\r\n        this._addStyleNames(width, breakpoints);\r\n        const boardCols = this._parseBoardCols(filteredNodes);\r\n        const colsInRow = boardCols.reduce((a, b) => a + b, 0);\r\n        this._removeExtraNodesFromDOM(boardCols, filteredNodes).forEach((e, i) => {\r\n          const newFlexBasis = this._calculateFlexBasis(boardCols[i], width, colsInRow, breakpoints);\r\n          if (forceResize || !this._oldFlexBasis[i] || this._oldFlexBasis[i] !== newFlexBasis) {\r\n            this._oldFlexBasis[i] = newFlexBasis;\r\n            e.style.flexBasis = newFlexBasis;\r\n          }\r\n        });\r\n        this._oldWidth = width;\r\n        this._oldBreakpoints = breakpoints;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _shouldRecalculate(width, breakpoints) {\r\n      // Should not recalculate if row is invisible\r\n      if (isElementHidden(this)) {\r\n        return false;\r\n      }\r\n      return (\r\n        width !== this._oldWidth ||\r\n        breakpoints.smallSize !== this._oldBreakpoints.smallSize ||\r\n        breakpoints.mediumSize !== this._oldBreakpoints.mediumSize\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Measure the breakpoints in pixels.\r\n     *\r\n     * The breakpoints for `small` and `medium` can be given in any unit: `px`, `em`, `in` etc.\r\n     * We need to know them in `px` so that they are comparable with the actual size.\r\n     *\r\n     * @return {object} object with smallSize and mediumSize number properties, which tells\r\n     * where the row should switch rendering size in pixels.\r\n     * @private\r\n     */\r\n    _measureBreakpointsInPx() {\r\n      // Convert minWidth to px units for comparison\r\n      const breakpoints = {};\r\n      const tmpStyleProp = 'background-position';\r\n      const smallSize = getComputedStyle(this).getPropertyValue('--small-size');\r\n      const mediumSize = getComputedStyle(this).getPropertyValue('--medium-size');\r\n      this.style.setProperty(tmpStyleProp, smallSize);\r\n      breakpoints.smallSize = parseFloat(getComputedStyle(this).getPropertyValue(tmpStyleProp));\r\n      this.style.setProperty(tmpStyleProp, mediumSize);\r\n      breakpoints.mediumSize = parseFloat(getComputedStyle(this).getPropertyValue(tmpStyleProp));\r\n      this.style.removeProperty(tmpStyleProp);\r\n      return breakpoints;\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2000 - 2025 Vaadin Ltd.\r\n *\r\n * This program is available under Vaadin Commercial License and Service Terms.\r\n *\r\n *\r\n * See https://vaadin.com/commercial-license-and-service-terms for the full\r\n * license.\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { BoardRowMixin } from './vaadin-board-row-mixin.js';\r\n\r\n/**\r\n * `<vaadin-board-row>` is a web component that together with `<vaadin-board>` component allows\r\n * to create flexible responsive layouts and build nice looking dashboard.\r\n *\r\n * Each row can contain up to four elements (fewer if colspan is used) and is automatically responsive.\r\n * The row changes between `large`, `medium` and `small` modes depending on the available width and\r\n * the set breakpoints.\r\n *\r\n * In `large` mode, typically all content is shown side-by-side, in `medium` half of the content is\r\n * side by side and in `small` mode, content is laid out vertically.\r\n *\r\n * The breakpoints can be set using custom CSS properties.\r\n * By default the breakpoints are `small: <600px`, `medium: < 960px`, `large >= 960px`.\r\n *\r\n * ```html\r\n * <vaadin-board>\r\n *   <vaadin-board-row>\r\n *     <div>This could be chart 1</div>\r\n *     <div>This could be chart 2</div>\r\n *     <div>This could be chart 3</div>\r\n *     <div>This could be chart 4</div>\r\n *   </vaadin-board-row>\r\n * </vaadin-board>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following custom properties are available for styling:\r\n *\r\n * Custom property | Description | Default\r\n * ----------------|-------------|-------------\r\n * `--vaadin-board-width-small` | Determines the width where mode changes from `small` to `medium` | `600px`\r\n * `--vaadin-board-width-medium` | Determines the width where mode changes from `medium` to `large` | `960px`\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes BoardRowMixin\r\n */\r\nclass BoardRow extends BoardRowMixin(ElementMixin(PolymerElement)) {\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: flex;\r\n          flex-flow: row wrap;\r\n          align-items: stretch;\r\n          --small-size: var(--vaadin-board-width-small, 600px);\r\n          --medium-size: var(--vaadin-board-width-medium, 960px);\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n\r\n        :host ::slotted(*) {\r\n          box-sizing: border-box;\r\n          flex-grow: 1;\r\n          overflow: hidden;\r\n        }\r\n      </style>\r\n      <slot id=\"insertionPoint\"></slot>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-board-row';\r\n  }\r\n}\r\n\r\ndefineCustomElement(BoardRow);\r\n\r\nexport { BoardRow };\r\n"],
  "mappings": "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",
  "names": []
}

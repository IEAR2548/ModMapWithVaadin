{
  "version": 3,
  "sources": ["../../ol/src/layer/BaseImage.js", "../../ol/src/renderer/canvas/ImageLayer.js", "../../ol/src/layer/Image.js"],
  "sourcesContent": ["/**\r\n * @module ol/layer/BaseImage\r\n */\r\nimport Layer from './Layer.js';\r\n\r\n/**\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\r\n * @property {ImageSourceType} [source] Source for this layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @template {import(\"../renderer/Layer.js\").default} RendererType\r\n * @extends {Layer<ImageSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseImageLayer extends Layer {\r\n  /**\r\n   * @param {Options<ImageSourceType>} [opt_options] Layer options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n    super(options);\r\n  }\r\n}\r\n\r\nexport default BaseImageLayer;\r\n", "/**\r\n * @module ol/renderer/canvas/ImageLayer\r\n */\r\nimport CanvasLayerRenderer from './Layer.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {ENABLE_RASTER_REPROJECTION} from '../../reproj/common.js';\r\nimport {IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED} from './common.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  makeInverse,\r\n  toString as toTransformString,\r\n} from '../../transform.js';\r\nimport {assign} from '../../obj.js';\r\nimport {\r\n  containsCoordinate,\r\n  containsExtent,\r\n  getHeight,\r\n  getIntersection,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  isEmpty,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for image layers.\r\n * @api\r\n */\r\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\r\n   */\r\n  constructor(imageLayer) {\r\n    super(imageLayer);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?import(\"../../ImageBase.js\").default}\r\n     */\r\n    this.image_ = null;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   */\r\n  getImage() {\r\n    return !this.image_ ? null : this.image_.getImage();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewResolution = viewState.resolution;\r\n\r\n    const imageSource = this.getLayer().getSource();\r\n\r\n    const hints = frameState.viewHints;\r\n\r\n    let renderedExtent = frameState.extent;\r\n    if (layerState.extent !== undefined) {\r\n      renderedExtent = getIntersection(\r\n        renderedExtent,\r\n        fromUserExtent(layerState.extent, viewState.projection)\r\n      );\r\n    }\r\n\r\n    if (\r\n      !hints[ViewHint.ANIMATING] &&\r\n      !hints[ViewHint.INTERACTING] &&\r\n      !isEmpty(renderedExtent)\r\n    ) {\r\n      if (imageSource) {\r\n        let projection = viewState.projection;\r\n        if (!ENABLE_RASTER_REPROJECTION) {\r\n          const sourceProjection = imageSource.getProjection();\r\n          if (sourceProjection) {\r\n            projection = sourceProjection;\r\n          }\r\n        }\r\n        const image = imageSource.getImage(\r\n          renderedExtent,\r\n          viewResolution,\r\n          pixelRatio,\r\n          projection\r\n        );\r\n        if (image && this.loadImage(image)) {\r\n          this.image_ = image;\r\n        } else {\r\n          this.image_ = null;\r\n        }\r\n      } else {\r\n        this.image_ = null;\r\n      }\r\n    }\r\n\r\n    return !!this.image_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray} Data at the pixel location.\r\n   */\r\n  getData(pixel) {\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice()\r\n    );\r\n\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (!containsCoordinate(layerExtent, coordinate)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const imageExtent = this.image_.getExtent();\r\n    const img = this.image_.getImage();\r\n\r\n    const imageMapWidth = getWidth(imageExtent);\r\n    const col = Math.floor(\r\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\r\n    );\r\n    if (col < 0 || col >= img.width) {\r\n      return null;\r\n    }\r\n\r\n    const imageMapHeight = getHeight(imageExtent);\r\n    const row = Math.floor(\r\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\r\n    );\r\n    if (row < 0 || row >= img.height) {\r\n      return null;\r\n    }\r\n\r\n    return this.getImageData(img, col, row);\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const image = this.image_;\r\n    const imageExtent = image.getExtent();\r\n    const imageResolution = image.getResolution();\r\n    const imagePixelRatio = image.getPixelRatio();\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewCenter = viewState.center;\r\n    const viewResolution = viewState.resolution;\r\n    const size = frameState.size;\r\n    const scale =\r\n      (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\r\n\r\n    let width = Math.round(size[0] * pixelRatio);\r\n    let height = Math.round(size[1] * pixelRatio);\r\n    const rotation = viewState.rotation;\r\n    if (rotation) {\r\n      const size = Math.round(Math.sqrt(width * width + height * height));\r\n      width = size;\r\n      height = size;\r\n    }\r\n\r\n    // set forward and inverse pixel transforms\r\n    composeTransform(\r\n      this.pixelTransform,\r\n      frameState.size[0] / 2,\r\n      frameState.size[1] / 2,\r\n      1 / pixelRatio,\r\n      1 / pixelRatio,\r\n      rotation,\r\n      -width / 2,\r\n      -height / 2\r\n    );\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    const canvasTransform = toTransformString(this.pixelTransform);\r\n\r\n    this.useContainer(\r\n      target,\r\n      canvasTransform,\r\n      layerState.opacity,\r\n      this.getBackground(frameState)\r\n    );\r\n\r\n    const context = this.context;\r\n    const canvas = context.canvas;\r\n\r\n    if (canvas.width != width || canvas.height != height) {\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n    } else if (!this.containerReused) {\r\n      context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    // clipped rendering if layer extent is set\r\n    let clipped = false;\r\n    let render = true;\r\n    if (layerState.extent) {\r\n      const layerExtent = fromUserExtent(\r\n        layerState.extent,\r\n        viewState.projection\r\n      );\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (clipped) {\r\n        this.clipUnrotated(context, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    const img = image.getImage();\r\n\r\n    const transform = composeTransform(\r\n      this.tempTransform,\r\n      width / 2,\r\n      height / 2,\r\n      scale,\r\n      scale,\r\n      0,\r\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution,\r\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution\r\n    );\r\n\r\n    this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\r\n\r\n    const dw = img.width * transform[0];\r\n    const dh = img.height * transform[3];\r\n\r\n    if (!this.getLayer().getSource().getInterpolate()) {\r\n      assign(context, IMAGE_SMOOTHING_DISABLED);\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n    if (render && dw >= 0.5 && dh >= 0.5) {\r\n      const dx = transform[4];\r\n      const dy = transform[5];\r\n      const opacity = layerState.opacity;\r\n      let previousAlpha;\r\n      if (opacity !== 1) {\r\n        previousAlpha = context.globalAlpha;\r\n        context.globalAlpha = opacity;\r\n      }\r\n      context.drawImage(\r\n        img,\r\n        0,\r\n        0,\r\n        +img.width,\r\n        +img.height,\r\n        Math.round(dx),\r\n        Math.round(dy),\r\n        Math.round(dw),\r\n        Math.round(dh)\r\n      );\r\n      if (opacity !== 1) {\r\n        context.globalAlpha = previousAlpha;\r\n      }\r\n    }\r\n    this.postRender(context, frameState);\r\n\r\n    if (clipped) {\r\n      context.restore();\r\n    }\r\n    assign(context, IMAGE_SMOOTHING_ENABLED);\r\n\r\n    if (canvasTransform !== canvas.style.transform) {\r\n      canvas.style.transform = canvasTransform;\r\n    }\r\n\r\n    return this.container;\r\n  }\r\n}\r\n\r\nexport default CanvasImageLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Image\r\n */\r\nimport BaseImageLayer from './BaseImage.js';\r\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\r\n * @api\r\n */\r\nclass ImageLayer extends BaseImageLayer {\r\n  /**\r\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [opt_options] Layer options.\r\n   */\r\n  constructor(opt_options) {\r\n    super(opt_options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasImageLayerRenderer(this);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\r\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\r\n   * source's `crossOrigin` property is set.\r\n   *\r\n   * ```js\r\n   * // display layer data on every pointer move\r\n   * map.on('pointermove', (event) => {\r\n   *   console.log(layer.getData(event.pixel));\r\n   * });\r\n   * ```\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   * @api\r\n   */\r\n  getData(pixel) {\r\n    return super.getData(pixel);\r\n  }\r\n}\r\n\r\nexport default ImageLayer;\r\n"],
  "mappings": "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",
  "names": ["BaseImageLayer", "__extends", "CanvasImageLayerRenderer", "Layer_default", "__extends", "ImageLayer"]
}

{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/slot-controller.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isEmptyTextNode } from './dom-utils.js';\r\nimport { SlotObserver } from './slot-observer.js';\r\nimport { generateUniqueId } from './unique-id-utils.js';\r\n\r\n/**\r\n * A controller for providing content to slot element and observing changes.\r\n */\r\nexport class SlotController extends EventTarget {\r\n  /**\r\n   * Ensure that every instance has unique ID.\r\n   *\r\n   * @param {HTMLElement} host\r\n   * @param {string} slotName\r\n   * @return {string}\r\n   * @protected\r\n   */\r\n  static generateId(host, prefix = 'default') {\r\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\r\n  }\r\n\r\n  constructor(host, slotName, tagName, config = {}) {\r\n    super();\r\n\r\n    const { initializer, multiple, observe, useUniqueId, uniqueIdPrefix } = config;\r\n\r\n    this.host = host;\r\n    this.slotName = slotName;\r\n    this.tagName = tagName;\r\n    this.observe = typeof observe === 'boolean' ? observe : true;\r\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\r\n    this.slotInitializer = initializer;\r\n\r\n    if (multiple) {\r\n      this.nodes = [];\r\n    }\r\n\r\n    // Only generate the default ID if requested by the controller.\r\n    if (useUniqueId) {\r\n      this.defaultId = this.constructor.generateId(host, uniqueIdPrefix || slotName);\r\n    }\r\n  }\r\n\r\n  hostConnected() {\r\n    if (!this.initialized) {\r\n      if (this.multiple) {\r\n        this.initMultiple();\r\n      } else {\r\n        this.initSingle();\r\n      }\r\n\r\n      if (this.observe) {\r\n        this.observeSlot();\r\n      }\r\n\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /** @protected */\r\n  initSingle() {\r\n    let node = this.getSlotChild();\r\n\r\n    if (!node) {\r\n      node = this.attachDefaultNode();\r\n      this.initNode(node);\r\n    } else {\r\n      this.node = node;\r\n      this.initAddedNode(node);\r\n    }\r\n  }\r\n\r\n  /** @protected */\r\n  initMultiple() {\r\n    const children = this.getSlotChildren();\r\n\r\n    if (children.length === 0) {\r\n      const defaultNode = this.attachDefaultNode();\r\n      if (defaultNode) {\r\n        this.nodes = [defaultNode];\r\n        this.initNode(defaultNode);\r\n      }\r\n    } else {\r\n      this.nodes = children;\r\n      children.forEach((node) => {\r\n        this.initAddedNode(node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and attach default node using the provided tag name, if any.\r\n   * @return {Node | undefined}\r\n   * @protected\r\n   */\r\n  attachDefaultNode() {\r\n    const { host, slotName, tagName } = this;\r\n\r\n    // Check if the node was created previously and if so, reuse it.\r\n    let node = this.defaultNode;\r\n\r\n    // Tag name is optional, sometimes we don't init default content.\r\n    if (!node && tagName) {\r\n      node = document.createElement(tagName);\r\n      if (node instanceof Element) {\r\n        if (slotName !== '') {\r\n          node.setAttribute('slot', slotName);\r\n        }\r\n        this.defaultNode = node;\r\n      }\r\n    }\r\n\r\n    if (node) {\r\n      this.node = node;\r\n      host.appendChild(node);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Return the list of nodes matching the slot managed by the controller.\r\n   * @return {Node}\r\n   */\r\n  getSlotChildren() {\r\n    const { slotName } = this;\r\n    return Array.from(this.host.childNodes).filter((node) => {\r\n      // Either an element (any slot) or a text node (only un-named slot).\r\n      return (\r\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\r\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return a reference to the node managed by the controller.\r\n   * @return {Node}\r\n   */\r\n  getSlotChild() {\r\n    return this.getSlotChildren()[0];\r\n  }\r\n\r\n  /**\r\n   * Run `slotInitializer` for the node managed by the controller.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  initNode(node) {\r\n    const { slotInitializer } = this;\r\n    // Don't try to bind `this` to initializer (normally it's arrow function).\r\n    // Instead, pass the host as a first argument to access component's state.\r\n    if (slotInitializer) {\r\n      slotInitializer(node, this.host);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom node.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   */\r\n  initCustomNode(_node) {}\r\n\r\n  /**\r\n   * Override to teardown slotted node when it's removed.\r\n   *\r\n   * @param {Node} _node\r\n   * @protected\r\n   */\r\n  teardownNode(_node) {}\r\n\r\n  /**\r\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   */\r\n  initAddedNode(node) {\r\n    if (node !== this.defaultNode) {\r\n      this.initCustomNode(node);\r\n      this.initNode(node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the observer to manage slot content changes.\r\n   * @protected\r\n   */\r\n  observeSlot() {\r\n    const { slotName } = this;\r\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\r\n    const slot = this.host.shadowRoot.querySelector(selector);\r\n\r\n    this.__slotObserver = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\r\n      const current = this.multiple ? this.nodes : [this.node];\r\n\r\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\r\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\r\n      const newNodes = addedNodes.filter((node) => !isEmptyTextNode(node) && !current.includes(node));\r\n\r\n      if (removedNodes.length) {\r\n        this.nodes = current.filter((node) => !removedNodes.includes(node));\r\n\r\n        removedNodes.forEach((node) => {\r\n          this.teardownNode(node);\r\n        });\r\n      }\r\n\r\n      if (newNodes && newNodes.length > 0) {\r\n        if (this.multiple) {\r\n          // Remove default node if exists\r\n          if (this.defaultNode) {\r\n            this.defaultNode.remove();\r\n          }\r\n          this.nodes = [...current, ...newNodes].filter((node) => node !== this.defaultNode);\r\n          newNodes.forEach((node) => {\r\n            this.initAddedNode(node);\r\n          });\r\n        } else {\r\n          // Remove previous node if exists\r\n          if (this.node) {\r\n            this.node.remove();\r\n          }\r\n          this.node = newNodes[0];\r\n          this.initAddedNode(this.node);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

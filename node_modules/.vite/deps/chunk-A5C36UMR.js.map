{
  "version": 3,
  "sources": ["../../@vaadin/number-field/theme/lumo/vaadin-number-field-styles.js", "../../@vaadin/number-field/src/vaadin-number-field-mixin.js", "../../@vaadin/number-field/src/vaadin-number-field-styles.js", "../../@vaadin/number-field/src/vaadin-number-field.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container-styles.js';\r\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst numberField = css`\r\n  :host([step-buttons-visible]:not([theme~='align-right'])) ::slotted(input) {\r\n    text-align: center;\r\n  }\r\n\r\n  :host(:not([disabled])) [part$='button'][disabled] {\r\n    opacity: 0.2;\r\n  }\r\n\r\n  :host([step-buttons-visible]) [part='input-field'] {\r\n    padding: 0;\r\n  }\r\n\r\n  [part$='button'] {\r\n    cursor: pointer;\r\n    font-size: var(--lumo-icon-size-s);\r\n    width: 1.6em;\r\n    height: 1.6em;\r\n  }\r\n\r\n  [part$='button']::before {\r\n    margin-top: 0.3em;\r\n  }\r\n\r\n  [part='decrease-button']::before {\r\n    content: var(--lumo-icons-minus);\r\n  }\r\n\r\n  [part='increase-button']::before {\r\n    content: var(--lumo-icons-plus);\r\n  }\r\n\r\n  /* RTL specific styles */\r\n  :host([dir='rtl']:not([theme~='align-right'])) ::slotted(input) {\r\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-number-field', [inputFieldShared, numberField], {\r\n  moduleId: 'lumo-number-field',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\n\r\n// [type=number] value returns an empty string for invalid numbers,\r\n// while valueAsNumber returns NaN for empty strings, which makes\r\n// invalid and empty values indistinguishable. It's only possible\r\n// to detect unparsable input by checking the validity.badInput\r\n// boolean property. This string is used in _inputElementValue\r\n// as a marker to help Flow detect and clear unparsable values\r\n// through that property.\r\nconst BAD_INPUT_STRING = 'NaN';\r\n\r\n/**\r\n * A mixin providing common number field functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes InputFieldMixin\r\n */\r\nexport const NumberFieldMixin = (superClass) =>\r\n  class NumberFieldMixinClass extends InputFieldMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The minimum value of the field.\r\n         */\r\n        min: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * The maximum value of the field.\r\n         */\r\n        max: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * Specifies the allowed number intervals of the field.\r\n         * @type {number}\r\n         */\r\n        step: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * Set to true to show increase/decrease buttons.\r\n         * @attr {boolean} step-buttons-visible\r\n         */\r\n        stepButtonsVisible: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_stepChanged(step, inputElement)'];\r\n    }\r\n\r\n    static get delegateProps() {\r\n      return [...super.delegateProps, 'min', 'max'];\r\n    }\r\n\r\n    static get constraints() {\r\n      return [...super.constraints, 'min', 'max', 'step'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this._setType('number');\r\n      this.__onWheel = this.__onWheel.bind(this);\r\n    }\r\n\r\n    /** @protected */\r\n    get slotStyles() {\r\n      const tag = this.localName;\r\n      return [\r\n        `\r\n          ${tag} input[type=\"number\"]::-webkit-outer-spin-button,\r\n          ${tag} input[type=\"number\"]::-webkit-inner-spin-button {\r\n            -webkit-appearance: none;\r\n            margin: 0;\r\n          }\r\n\r\n          ${tag} input[type=\"number\"] {\r\n            -moz-appearance: textfield;\r\n          }\r\n\r\n          ${tag}[dir='rtl'] input[type=\"number\"]::placeholder {\r\n            direction: rtl;\r\n          }\r\n\r\n          ${tag}[dir='rtl']:not([step-buttons-visible]) input[type=\"number\"]::placeholder {\r\n            text-align: left;\r\n          }\r\n        `,\r\n      ];\r\n    }\r\n\r\n    /**\r\n     * Used by `InputControlMixin` as a reference to the clear button element.\r\n     * @protected\r\n     */\r\n    get clearElement() {\r\n      return this.$.clearButton;\r\n    }\r\n\r\n    /**\r\n     * Whether the input element's value is unparsable.\r\n     *\r\n     * @private\r\n     */\r\n    get __hasUnparsableValue() {\r\n      return this._inputElementValue === BAD_INPUT_STRING;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(\r\n        new InputController(this, (input) => {\r\n          this._setInputElement(input);\r\n          this._setFocusElement(input);\r\n          this.stateTarget = input;\r\n          this.ariaTarget = input;\r\n        }),\r\n      );\r\n\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this.addController(this._tooltipController);\r\n      this._tooltipController.setPosition('top');\r\n      this._tooltipController.setAriaTarget(this.inputElement);\r\n    }\r\n\r\n    /**\r\n     * Override the method from `InputConstraintsMixin`\r\n     * to enforce HTML constraint validation even if\r\n     * the user didn't add any constraints explicitly:\r\n     * the field has to be regardless checked for bad input.\r\n     *\r\n     * @override\r\n     */\r\n    checkValidity() {\r\n      if (this.inputElement) {\r\n        return this.inputElement.checkValidity();\r\n      }\r\n\r\n      return !this.invalid;\r\n    }\r\n\r\n    /**\r\n     * Override the method from `InputMixin` to add\r\n     * a wheel event listener to the input element.\r\n     *\r\n     * @param {HTMLElement} input\r\n     * @override\r\n     * @protected\r\n     */\r\n    _addInputListeners(input) {\r\n      super._addInputListeners(input);\r\n      input.addEventListener('wheel', this.__onWheel);\r\n    }\r\n\r\n    /**\r\n     * Override the method from `InputMixin` to remove\r\n     * the wheel event listener from the input element.\r\n     *\r\n     * @param {HTMLElement} input\r\n     * @override\r\n     * @protected\r\n     */\r\n    _removeInputListeners(input) {\r\n      super._removeInputListeners(input);\r\n      input.removeEventListener('wheel', this.__onWheel);\r\n    }\r\n\r\n    /**\r\n     * Prevents default browser behavior for wheel events on the input element\r\n     * when it's focused. More precisely, this prevents the browser from attempting\r\n     * to increment or decrement the value when the mouse wheel is used within\r\n     * the input element.\r\n     *\r\n     * CAVEAT: As a side-effect, this also prevents page scrolling when\r\n     * the pointer is positioned over the field and the field is focused.\r\n     *\r\n     * @param {WheelEvent} event\r\n     * @private\r\n     */\r\n    __onWheel(event) {\r\n      if (this.hasAttribute('focused')) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onDecreaseButtonTouchend(e) {\r\n      // Cancel the following click and focus events. If the event is not cancelable,\r\n      // it means scrolling is in progress, therefore we shouldn't update field value.\r\n      if (e.cancelable) {\r\n        e.preventDefault();\r\n        this.__blurActiveElement();\r\n        this._decreaseValue();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onIncreaseButtonTouchend(e) {\r\n      // Cancel the following click and focus events. If the event is not cancelable,\r\n      // it means scrolling is in progress, therefore we shouldn't update field value.\r\n      if (e.cancelable) {\r\n        e.preventDefault();\r\n        this.__blurActiveElement();\r\n        this._increaseValue();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __blurActiveElement() {\r\n      // If another element is focused, blur it on step button touch to hide\r\n      // the mobile keyboard that might still be open for the other element.\r\n      // See https://github.com/vaadin/web-components/issues/7494\r\n      const activeElement = getDeepActiveElement();\r\n      if (activeElement && activeElement !== this.inputElement) {\r\n        activeElement.blur();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onDecreaseButtonClick() {\r\n      this._decreaseValue();\r\n    }\r\n\r\n    /** @protected */\r\n    _onIncreaseButtonClick() {\r\n      this._increaseValue();\r\n    }\r\n\r\n    /** @private */\r\n    _decreaseValue() {\r\n      this._incrementValue(-1);\r\n    }\r\n\r\n    /** @private */\r\n    _increaseValue() {\r\n      this._incrementValue(1);\r\n    }\r\n\r\n    /** @private */\r\n    _incrementValue(incr) {\r\n      if (this.disabled || this.readonly) {\r\n        return;\r\n      }\r\n\r\n      const step = this.step || 1;\r\n      let value = parseFloat(this.value);\r\n\r\n      if (!this.value) {\r\n        if ((this.min === 0 && incr < 0) || (this.max === 0 && incr > 0) || (this.max === 0 && this.min === 0)) {\r\n          incr = 0;\r\n          value = 0;\r\n        } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {\r\n          value = 0;\r\n        } else if (this.min > 0) {\r\n          value = this.min;\r\n          if (this.max < 0 && incr < 0) {\r\n            value = this.max;\r\n          }\r\n          incr = 0;\r\n        } else if (this.max < 0) {\r\n          value = this.max;\r\n          if (incr < 0) {\r\n            incr = 0;\r\n          } else if (this._getIncrement(1, value - step) > this.max) {\r\n            value -= 2 * step;\r\n            // FIXME(yuriy): find a proper solution to make correct step back\r\n          } else {\r\n            value -= step;\r\n          }\r\n        }\r\n      } else if (value < this.min) {\r\n        incr = 0;\r\n        value = this.min;\r\n      } else if (value > this.max) {\r\n        incr = 0;\r\n        value = this.max;\r\n      }\r\n\r\n      const newValue = this._getIncrement(incr, value);\r\n      if (!this.value || incr === 0 || this._incrementIsInsideTheLimits(incr, value)) {\r\n        this.inputElement.value = String(parseFloat(newValue));\r\n        this.inputElement.dispatchEvent(new Event('input', { bubbles: true, composed: true }));\r\n        this.__commitValueChange();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _getIncrement(incr, currentValue) {\r\n      let step = this.step || 1,\r\n        min = this.min || 0;\r\n\r\n      // To avoid problems with decimal math, multiplying to operate with integers.\r\n      const multiplier = Math.max(\r\n        this._getMultiplier(currentValue),\r\n        this._getMultiplier(step),\r\n        this._getMultiplier(min),\r\n      );\r\n\r\n      step *= multiplier;\r\n      currentValue = Math.round(currentValue * multiplier);\r\n      min *= multiplier;\r\n\r\n      const margin = (currentValue - min) % step;\r\n\r\n      if (incr > 0) {\r\n        return (currentValue - margin + step) / multiplier;\r\n      } else if (incr < 0) {\r\n        return (currentValue - (margin || step)) / multiplier;\r\n      }\r\n      return currentValue / multiplier;\r\n    }\r\n\r\n    /** @private */\r\n    _getDecimalCount(number) {\r\n      const s = String(number);\r\n      const i = s.indexOf('.');\r\n      return i === -1 ? 1 : s.length - i - 1;\r\n    }\r\n\r\n    /** @private */\r\n    _getMultiplier(number) {\r\n      if (!isNaN(number)) {\r\n        return 10 ** this._getDecimalCount(number);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _incrementIsInsideTheLimits(incr, value) {\r\n      if (incr < 0) {\r\n        return this.min == null || this._getIncrement(incr, value) >= this.min;\r\n      } else if (incr > 0) {\r\n        return this.max == null || this._getIncrement(incr, value) <= this.max;\r\n      }\r\n      return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\r\n    }\r\n\r\n    /** @protected */\r\n    _isButtonEnabled(sign) {\r\n      const incr = sign * (this.step || 1);\r\n      const value = parseFloat(this.value);\r\n      return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\r\n    }\r\n\r\n    /**\r\n     * @param {number} step\r\n     * @param {HTMLElement | undefined} inputElement\r\n     * @protected\r\n     */\r\n    _stepChanged(step, inputElement) {\r\n      if (inputElement) {\r\n        inputElement.step = step || 'any';\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {unknown} newVal\r\n     * @param {unknown} oldVal\r\n     * @protected\r\n     * @override\r\n     */\r\n    _valueChanged(newVal, oldVal) {\r\n      // Validate value to be numeric\r\n      if (newVal && isNaN(parseFloat(newVal))) {\r\n        this.value = '';\r\n      } else if (typeof this.value !== 'string') {\r\n        this.value = String(this.value);\r\n      }\r\n\r\n      super._valueChanged(this.value, oldVal);\r\n\r\n      if (!this.__keepCommittedValue) {\r\n        this.__committedValue = this.value;\r\n        this.__committedUnparsableValueStatus = false;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `InputControlMixin`\r\n     * to avoid adding a separate listener.\r\n     * @param {!KeyboardEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(event) {\r\n      if (event.key === 'ArrowUp') {\r\n        event.preventDefault();\r\n        this._increaseValue();\r\n      } else if (event.key === 'ArrowDown') {\r\n        event.preventDefault();\r\n        this._decreaseValue();\r\n      }\r\n\r\n      super._onKeyDown(event);\r\n    }\r\n\r\n    /**\r\n     * Override this method from `InputMixin` to prevent\r\n     * the value change caused by user input from being treated\r\n     * as initiated programmatically by the developer and therefore\r\n     * from getting silently committed by the value observer without\r\n     * any change event. The value change will be committed later\r\n     * on blur or Enter.\r\n     *\r\n     * @param {InputEvent} event\r\n     * @override\r\n     * @protected\r\n     */\r\n    _onInput(event) {\r\n      this.__keepCommittedValue = true;\r\n      super._onInput(event);\r\n      this.__keepCommittedValue = false;\r\n    }\r\n\r\n    /**\r\n     * Override this method from `InputControlMixin`\r\n     * to stop propagation of the native change event.\r\n     *\r\n     * @param {Event}\r\n     * @override\r\n     * @protected\r\n     */\r\n    _onChange(event) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * Override this method from `ClearButtonMixin`\r\n     * to properly commit the empty value since\r\n     * the change handler doesn't do that anymore.\r\n     *\r\n     * @param {MouseEvent} event\r\n     * @override\r\n     * @protected\r\n     */\r\n    _onClearAction(event) {\r\n      super._onClearAction(event);\r\n      this.__commitValueChange();\r\n    }\r\n\r\n    /**\r\n     * Override this method from `FocusMixin`\r\n     * to commit a possible pending value change on blur.\r\n     *\r\n     * @param {boolean} focused\r\n     * @override\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      if (!focused) {\r\n        this.__commitValueChange();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override this method from `KeyboardMixin`\r\n     * to commit a possible pending value change on Enter.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     * @override\r\n     * @protected\r\n     */\r\n    _onEnter(event) {\r\n      super._onEnter(event);\r\n      this.__commitValueChange();\r\n    }\r\n\r\n    /**\r\n     * Depending on the nature of the value change that has occurred since\r\n     * the last commit attempt, triggers validation and fires an event:\r\n     *\r\n     * Value change             | Event\r\n     * :------------------------|:------------------\r\n     * empty => parsable        | change\r\n     * empty => unparsable      | unparsable-change\r\n     * parsable => empty        | change\r\n     * parsable => parsable     | change\r\n     * parsable => unparsable   | change\r\n     * unparsable => empty      | unparsable-change\r\n     * unparsable => parsable   | change\r\n     * unparsable => unparsable | -\r\n     *\r\n     * Note, there is currently no way to detect unparsable => unparsable changes\r\n     * because the browser doesn't provide access to unparsable values of native\r\n     * [type=number] inputs.\r\n     *\r\n     * @private\r\n     */\r\n    __commitValueChange() {\r\n      if (this.__committedValue !== this.value) {\r\n        this._requestValidation();\r\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\r\n      } else if (this.__committedUnparsableValueStatus !== this.__hasUnparsableValue) {\r\n        this._requestValidation();\r\n        this.dispatchEvent(new CustomEvent('unparsable-change'));\r\n      }\r\n\r\n      this.__committedValue = this.value;\r\n      this.__committedUnparsableValueStatus = this.__hasUnparsableValue;\r\n    }\r\n\r\n    /** @override */\r\n    get _inputElementValue() {\r\n      if (this.inputElement && this.inputElement.validity.badInput) {\r\n        return BAD_INPUT_STRING;\r\n      }\r\n\r\n      return super._inputElementValue;\r\n    }\r\n\r\n    /** @override */\r\n    set _inputElementValue(value) {\r\n      super._inputElementValue = value;\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const numberFieldStyles = css`\r\n  :host([readonly]) [part$='button'] {\r\n    pointer-events: none;\r\n  }\r\n\r\n  [part='decrease-button']::before {\r\n    content: '\\\\2212';\r\n  }\r\n\r\n  [part='increase-button']::before {\r\n    content: '+';\r\n  }\r\n\r\n  [part='decrease-button'],\r\n  [part='increase-button'] {\r\n    -webkit-user-select: none;\r\n    user-select: none;\r\n  }\r\n\r\n  :host([dir='rtl']) [part='input-field'] {\r\n    direction: ltr;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport { html, PolymerElement } from '@polymer/polymer';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { NumberFieldMixin } from './vaadin-number-field-mixin.js';\r\nimport { numberFieldStyles } from './vaadin-number-field-styles.js';\r\n\r\nregisterStyles('vaadin-number-field', [inputFieldShared, numberFieldStyles], {\r\n  moduleId: 'vaadin-number-field-styles',\r\n});\r\n\r\n/**\r\n * `<vaadin-number-field>` is an input field web component that only accepts numeric input.\r\n *\r\n * ```html\r\n * <vaadin-number-field label=\"Balance\"></vaadin-number-field>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * `<vaadin-number-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\r\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\r\n *\r\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\r\n *\r\n * Part name         | Description\r\n * ------------------|-------------------------\r\n * `increase-button` | Increase (\"plus\") button\r\n * `decrease-button` | Decrease (\"minus\") button\r\n *\r\n * Note, the `input-prevented` state attribute is only supported when `allowedCharPattern` is set.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * ### Change events\r\n *\r\n * Depending on the nature of the value change that the user attempts to commit e.g. by pressing Enter,\r\n * the component can fire either a `change` event or an `unparsable-change` event:\r\n *\r\n * Value change             | Event\r\n * :------------------------|:------------------\r\n * empty => parsable        | change\r\n * empty => unparsable      | unparsable-change\r\n * parsable => empty        | change\r\n * parsable => parsable     | change\r\n * parsable => unparsable   | change\r\n * unparsable => empty      | unparsable-change\r\n * unparsable => parsable   | change\r\n * unparsable => unparsable | -\r\n *\r\n * Note, there is currently no way to detect unparsable => unparsable changes because the browser\r\n * doesn't provide access to unparsable values of native [type=number] inputs.\r\n *\r\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {Event} unparsable-change - Fired when the user commits an unparsable value change and there is no change event.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes NumberFieldMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n */\r\nexport class NumberField extends NumberFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-number-field';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-field-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-input-container\r\n          part=\"input-field\"\r\n          readonly=\"[[readonly]]\"\r\n          disabled=\"[[disabled]]\"\r\n          invalid=\"[[invalid]]\"\r\n          theme$=\"[[_theme]]\"\r\n        >\r\n          <div\r\n            disabled$=\"[[!_isButtonEnabled(-1, value, min, max, step)]]\"\r\n            part=\"decrease-button\"\r\n            on-click=\"_onDecreaseButtonClick\"\r\n            on-touchend=\"_onDecreaseButtonTouchend\"\r\n            hidden$=\"[[!stepButtonsVisible]]\"\r\n            aria-hidden=\"true\"\r\n            slot=\"prefix\"\r\n          ></div>\r\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n          <slot name=\"input\"></slot>\r\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n          <div\r\n            disabled$=\"[[!_isButtonEnabled(1, value, min, max, step)]]\"\r\n            part=\"increase-button\"\r\n            on-click=\"_onIncreaseButtonClick\"\r\n            on-touchend=\"_onIncreaseButtonTouchend\"\r\n            hidden$=\"[[!stepButtonsVisible]]\"\r\n            aria-hidden=\"true\"\r\n            slot=\"suffix\"\r\n          ></div>\r\n        </vaadin-input-container>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(NumberField);\r\n"],
  "mappings": "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",
  "names": ["inputFieldShared"]
}

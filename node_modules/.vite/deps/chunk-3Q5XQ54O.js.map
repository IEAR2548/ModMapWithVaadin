{
  "version": 3,
  "sources": ["../../@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js", "../../@vaadin/combo-box/theme/lumo/vaadin-combo-box-overlay-styles.js", "../../@vaadin/combo-box/src/vaadin-combo-box-mixin.js", "../../@vaadin/combo-box/src/vaadin-combo-box-item-mixin.js", "../../@vaadin/combo-box/src/vaadin-combo-box-overlay-mixin.js", "../../@vaadin/combo-box/src/vaadin-combo-box-scroller-mixin.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport { item } from '@vaadin/item/theme/lumo/vaadin-item-styles.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst comboBoxItem = css`\r\n  :host {\r\n    transition: background-color 100ms;\r\n    overflow: hidden;\r\n    --_lumo-item-selected-icon-display: block;\r\n    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));\r\n    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);\r\n  }\r\n\r\n  :host([focused]:not([disabled])) {\r\n    box-shadow: inset 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-combo-box-item', [item, comboBoxItem], {\r\n  moduleId: 'lumo-combo-box-item',\r\n});\r\n\r\nexport { comboBoxItem };\r\n", "import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport { loader } from '@vaadin/vaadin-lumo-styles/mixins/loader.js';\r\nimport { menuOverlayCore } from '@vaadin/vaadin-lumo-styles/mixins/menu-overlay.js';\r\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst comboBoxOverlay = css`\r\n  [part='content'] {\r\n    padding: 0;\r\n  }\r\n\r\n  /* When items are empty, the spinner needs some room */\r\n  :host(:not([closing])) [part~='content'] {\r\n    min-height: calc(2 * var(--lumo-space-s) + var(--lumo-icon-size-s));\r\n  }\r\n\r\n  [part~='overlay'] {\r\n    position: relative;\r\n  }\r\n\r\n  :host([top-aligned]) [part~='overlay'] {\r\n    margin-top: var(--lumo-space-xs);\r\n  }\r\n\r\n  :host([bottom-aligned]) [part~='overlay'] {\r\n    margin-bottom: var(--lumo-space-xs);\r\n  }\r\n`;\r\n\r\nconst comboBoxLoader = css`\r\n  [part~='loader'] {\r\n    position: absolute;\r\n    z-index: 1;\r\n    inset-inline: var(--lumo-space-s);\r\n    top: var(--lumo-space-s);\r\n    margin-inline: auto 0;\r\n  }\r\n`;\r\n\r\nregisterStyles(\r\n  'vaadin-combo-box-overlay',\r\n  [\r\n    overlay,\r\n    menuOverlayCore,\r\n    comboBoxOverlay,\r\n    loader,\r\n    comboBoxLoader,\r\n    css`\r\n      :host {\r\n        --_vaadin-combo-box-items-container-border-width: var(--lumo-space-xs);\r\n        --_vaadin-combo-box-items-container-border-style: solid;\r\n      }\r\n    `,\r\n  ],\r\n  { moduleId: 'lumo-combo-box-overlay' },\r\n);\r\n\r\nexport { comboBoxLoader, comboBoxOverlay };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2015 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\r\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\r\nimport { isElementFocused, isKeyboardActive } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\r\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\r\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\r\nimport { VirtualKeyboardController } from '@vaadin/field-base/src/virtual-keyboard-controller.js';\r\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\r\n\r\n/**\r\n * Checks if the value is supported as an item value in this control.\r\n *\r\n * @param {unknown} value\r\n * @return {boolean}\r\n */\r\nfunction isValidValue(value) {\r\n  return value !== undefined && value !== null;\r\n}\r\n\r\n/**\r\n * Returns the index of the first item that satisfies the provided testing function\r\n * ignoring placeholder items.\r\n *\r\n * @param {Array<ComboBoxItem | string>} items\r\n * @param {Function} callback\r\n * @return {number}\r\n */\r\nfunction findItemIndex(items, callback) {\r\n  return items.findIndex((item) => {\r\n    if (item instanceof ComboBoxPlaceholder) {\r\n      return false;\r\n    }\r\n\r\n    return callback(item);\r\n  });\r\n}\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes ControllerMixin\r\n * @mixes ValidateMixin\r\n * @mixes DisabledMixin\r\n * @mixes InputMixin\r\n * @mixes KeyboardMixin\r\n * @mixes FocusMixin\r\n * @mixes OverlayClassMixin\r\n * @param {function(new:HTMLElement)} subclass\r\n */\r\nexport const ComboBoxMixin = (subclass) =>\r\n  class ComboBoxMixinClass extends OverlayClassMixin(\r\n    ControllerMixin(ValidateMixin(FocusMixin(KeyboardMixin(InputMixin(DisabledMixin(subclass)))))),\r\n  ) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * True if the dropdown is open, false otherwise.\r\n         * @type {boolean}\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          notify: true,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n          observer: '_openedChanged',\r\n        },\r\n\r\n        /**\r\n         * Set true to prevent the overlay from opening automatically.\r\n         * @attr {boolean} auto-open-disabled\r\n         */\r\n        autoOpenDisabled: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When present, it specifies that the field is read-only.\r\n         * @type {boolean}\r\n         */\r\n        readonly: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the content of every item.\r\n         * Receives three arguments:\r\n         *\r\n         * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\r\n         * - `comboBox` The reference to the `<vaadin-combo-box>` element.\r\n         * - `model` The object with the properties related with the rendered\r\n         *   item, contains:\r\n         *   - `model.index` The index of the rendered item.\r\n         *   - `model.item` The item.\r\n         * @type {ComboBoxRenderer | undefined}\r\n         */\r\n        renderer: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A full set of items to filter the visible options from.\r\n         * The items can be of either `String` or `Object` type.\r\n         * @type {!Array<!ComboBoxItem | string> | undefined}\r\n         */\r\n        items: {\r\n          type: Array,\r\n          sync: true,\r\n          observer: '_itemsChanged',\r\n        },\r\n\r\n        /**\r\n         * If `true`, the user can input a value that is not present in the items list.\r\n         * `value` property will be set to the input value in this case.\r\n         * Also, when `value` is set programmatically, the input value will be set\r\n         * to reflect that value.\r\n         * @attr {boolean} allow-custom-value\r\n         * @type {boolean}\r\n         */\r\n        allowCustomValue: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * A subset of items, filtered based on the user input. Filtered items\r\n         * can be assigned directly to omit the internal filtering functionality.\r\n         * The items can be of either `String` or `Object` type.\r\n         * @type {!Array<!ComboBoxItem | string> | undefined}\r\n         */\r\n        filteredItems: {\r\n          type: Array,\r\n          observer: '_filteredItemsChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Used to detect user value changes and fire `change` events.\r\n         * @private\r\n         */\r\n        _lastCommittedValue: String,\r\n\r\n        /**\r\n         * When set to `true`, \"loading\" attribute is added to host and the overlay element.\r\n         * @type {boolean}\r\n         */\r\n        loading: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {number}\r\n         * @protected\r\n         */\r\n        _focusedIndex: {\r\n          type: Number,\r\n          observer: '_focusedIndexChanged',\r\n          value: -1,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Filtering string the user has typed into the input field.\r\n         * @type {string}\r\n         */\r\n        filter: {\r\n          type: String,\r\n          value: '',\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The selected item from the `items` array.\r\n         * @type {ComboBoxItem | string | undefined}\r\n         */\r\n        selectedItem: {\r\n          type: Object,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function used to generate CSS class names for dropdown\r\n         * items based on the item. The return value should be the\r\n         * generated class name as a string, or multiple class names\r\n         * separated by whitespace characters.\r\n         */\r\n        itemClassNameGenerator: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * Path for label of the item. If `items` is an array of objects, the\r\n         * `itemLabelPath` is used to fetch the displayed string label for each\r\n         * item.\r\n         *\r\n         * The item label is also used for matching items when processing user\r\n         * input, i.e., for filtering and selecting items.\r\n         * @attr {string} item-label-path\r\n         * @type {string}\r\n         */\r\n        itemLabelPath: {\r\n          type: String,\r\n          value: 'label',\r\n          observer: '_itemLabelPathChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path for the value of the item. If `items` is an array of objects, the\r\n         * `itemValuePath:` is used to fetch the string value for the selected\r\n         * item.\r\n         *\r\n         * The item value is used in the `value` property of the combo box,\r\n         * to provide the form value.\r\n         * @attr {string} item-value-path\r\n         * @type {string}\r\n         */\r\n        itemValuePath: {\r\n          type: String,\r\n          value: 'value',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path for the id of the item. If `items` is an array of objects,\r\n         * the `itemIdPath` is used to compare and identify the same item\r\n         * in `selectedItem` and `filteredItems` (items given by the\r\n         * `dataProvider` callback).\r\n         * @attr {string} item-id-path\r\n         */\r\n        itemIdPath: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * @type {!HTMLElement | undefined}\r\n         * @protected\r\n         */\r\n        _toggleElement: {\r\n          type: Object,\r\n          observer: '_toggleElementChanged',\r\n        },\r\n\r\n        /**\r\n         * Set of items to be rendered in the dropdown.\r\n         * @protected\r\n         */\r\n        _dropdownItems: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _closeOnBlurIsPrevented: Boolean,\r\n\r\n        /** @private */\r\n        _scroller: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _overlayOpened: {\r\n          type: Boolean,\r\n          sync: true,\r\n          observer: '_overlayOpenedChanged',\r\n        },\r\n\r\n        /** @private */\r\n        __keepOverlayOpened: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)',\r\n        '_openedOrItemsChanged(opened, _dropdownItems, loading, __keepOverlayOpened)',\r\n        '_updateScroller(_scroller, _dropdownItems, opened, loading, selectedItem, itemIdPath, _focusedIndex, renderer, _theme, itemClassNameGenerator)',\r\n      ];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this._boundOverlaySelectedItemChanged = this._overlaySelectedItemChanged.bind(this);\r\n      this._boundOnClearButtonMouseDown = this.__onClearButtonMouseDown.bind(this);\r\n      this._boundOnClick = this._onClick.bind(this);\r\n      this._boundOnOverlayTouchAction = this._onOverlayTouchAction.bind(this);\r\n      this._boundOnTouchend = this._onTouchend.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Tag name prefix used by scroller and items.\r\n     * @protected\r\n     * @return {string}\r\n     */\r\n    get _tagNamePrefix() {\r\n      return 'vaadin-combo-box';\r\n    }\r\n\r\n    /**\r\n     * Get a reference to the native `<input>` element.\r\n     * Override to provide a custom input.\r\n     * @protected\r\n     * @return {HTMLInputElement | undefined}\r\n     */\r\n    get _nativeInput() {\r\n      return this.inputElement;\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin`\r\n     * to customize the input element.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _inputElementChanged(inputElement) {\r\n      super._inputElementChanged(inputElement);\r\n\r\n      const input = this._nativeInput;\r\n\r\n      if (input) {\r\n        input.autocomplete = 'off';\r\n        input.autocapitalize = 'off';\r\n\r\n        input.setAttribute('role', 'combobox');\r\n        input.setAttribute('aria-autocomplete', 'list');\r\n        input.setAttribute('aria-expanded', !!this.opened);\r\n\r\n        // Disable the macOS Safari spell check auto corrections.\r\n        input.setAttribute('spellcheck', 'false');\r\n\r\n        // Disable iOS autocorrect suggestions.\r\n        input.setAttribute('autocorrect', 'off');\r\n\r\n        this._revertInputValueToValue();\r\n\r\n        if (this.clearElement) {\r\n          this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this._initOverlay();\r\n      this._initScroller();\r\n\r\n      this._lastCommittedValue = this.value;\r\n\r\n      this.addEventListener('click', this._boundOnClick);\r\n      this.addEventListener('touchend', this._boundOnTouchend);\r\n\r\n      const bringToFrontListener = () => {\r\n        requestAnimationFrame(() => {\r\n          this._overlayElement.bringToFront();\r\n        });\r\n      };\r\n\r\n      this.addEventListener('mousedown', bringToFrontListener);\r\n      this.addEventListener('touchstart', bringToFrontListener);\r\n\r\n      processTemplates(this);\r\n\r\n      this.addController(new VirtualKeyboardController(this));\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n\r\n      // Close the overlay on detach\r\n      this.close();\r\n    }\r\n\r\n    /**\r\n     * Requests an update for the content of items.\r\n     * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\r\n     *\r\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\r\n     */\r\n    requestContentUpdate() {\r\n      if (!this._scroller) {\r\n        return;\r\n      }\r\n\r\n      this._scroller.requestContentUpdate();\r\n\r\n      this._getItemElements().forEach((item) => {\r\n        item.requestContentUpdate();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Opens the dropdown list.\r\n     */\r\n    open() {\r\n      // Prevent _open() being called when input is disabled or read-only\r\n      if (!this.disabled && !this.readonly) {\r\n        this.opened = true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Closes the dropdown list.\r\n     */\r\n    close() {\r\n      this.opened = false;\r\n    }\r\n\r\n    /**\r\n     * Override Polymer lifecycle callback to handle `filter` property change after\r\n     * the observer for `opened` property is triggered. This is needed when opening\r\n     * combo-box on user input to ensure the focused index is set correctly.\r\n     *\r\n     * @param {!Object} currentProps Current accessor values\r\n     * @param {?Object} changedProps Properties changed since the last call\r\n     * @param {?Object} oldProps Previous values for each changed property\r\n     * @protected\r\n     * @override\r\n     */\r\n    _propertiesChanged(currentProps, changedProps, oldProps) {\r\n      super._propertiesChanged(currentProps, changedProps, oldProps);\r\n\r\n      if (changedProps.filter !== undefined) {\r\n        this._filterChanged(changedProps.filter);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override LitElement lifecycle callback to handle filter property change.\r\n     * @param {Object} props\r\n     * @protected\r\n     */\r\n    updated(props) {\r\n      super.updated(props);\r\n\r\n      if (props.has('filter')) {\r\n        this._filterChanged(this.filter);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _initOverlay() {\r\n      const overlay = this.$.overlay;\r\n\r\n      // Store instance for detecting \"dir\" attribute on opening\r\n      overlay._comboBox = this;\r\n\r\n      overlay.addEventListener('touchend', this._boundOnOverlayTouchAction);\r\n      overlay.addEventListener('touchmove', this._boundOnOverlayTouchAction);\r\n\r\n      // Prevent blurring the input when clicking inside the overlay\r\n      overlay.addEventListener('mousedown', (e) => e.preventDefault());\r\n\r\n      // Manual two-way binding for the overlay \"opened\" property\r\n      overlay.addEventListener('opened-changed', (e) => {\r\n        this._overlayOpened = e.detail.value;\r\n      });\r\n\r\n      this._overlayElement = overlay;\r\n    }\r\n\r\n    /**\r\n     * Create and initialize the scroller element.\r\n     * Override to provide custom host reference.\r\n     *\r\n     * @protected\r\n     */\r\n    _initScroller(host) {\r\n      const scroller = document.createElement(`${this._tagNamePrefix}-scroller`);\r\n\r\n      scroller.owner = host || this;\r\n      scroller.getItemLabel = this._getItemLabel.bind(this);\r\n      scroller.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\r\n\r\n      const overlay = this._overlayElement;\r\n\r\n      overlay.renderer = (root) => {\r\n        if (!root.innerHTML) {\r\n          root.appendChild(scroller);\r\n        }\r\n      };\r\n\r\n      // Ensure the scroller is rendered\r\n      overlay.requestContentUpdate();\r\n\r\n      // Trigger the observer to set properties\r\n      this._scroller = scroller;\r\n    }\r\n\r\n    /** @private */\r\n    // eslint-disable-next-line @typescript-eslint/max-params\r\n    _updateScroller(\r\n      scroller,\r\n      items,\r\n      opened,\r\n      loading,\r\n      selectedItem,\r\n      itemIdPath,\r\n      focusedIndex,\r\n      renderer,\r\n      theme,\r\n      itemClassNameGenerator,\r\n    ) {\r\n      if (scroller) {\r\n        if (opened) {\r\n          scroller.style.maxHeight =\r\n            getComputedStyle(this).getPropertyValue(`--${this._tagNamePrefix}-overlay-max-height`) || '65vh';\r\n        }\r\n\r\n        scroller.setProperties({\r\n          items: opened ? items : [],\r\n          opened,\r\n          loading,\r\n          selectedItem,\r\n          itemIdPath,\r\n          focusedIndex,\r\n          renderer,\r\n          theme,\r\n          itemClassNameGenerator,\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _openedOrItemsChanged(opened, items, loading, keepOverlayOpened) {\r\n      // Close the overlay if there are no items to display.\r\n      // See https://github.com/vaadin/vaadin-combo-box/pull/964\r\n      this._overlayOpened = opened && (keepOverlayOpened || loading || !!(items && items.length));\r\n    }\r\n\r\n    /** @private */\r\n    _overlayOpenedChanged(opened, wasOpened) {\r\n      if (opened) {\r\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', { bubbles: true, composed: true }));\r\n\r\n        this._onOpened();\r\n      } else if (wasOpened && this._dropdownItems && this._dropdownItems.length) {\r\n        this.close();\r\n\r\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', { bubbles: true, composed: true }));\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _focusedIndexChanged(index, oldIndex) {\r\n      if (oldIndex === undefined) {\r\n        return;\r\n      }\r\n      this._updateActiveDescendant(index);\r\n    }\r\n\r\n    /** @protected */\r\n    _isInputFocused() {\r\n      return this.inputElement && isElementFocused(this.inputElement);\r\n    }\r\n\r\n    /** @private */\r\n    _updateActiveDescendant(index) {\r\n      const input = this._nativeInput;\r\n      if (!input) {\r\n        return;\r\n      }\r\n\r\n      const item = this._getItemElements().find((el) => el.index === index);\r\n      if (item) {\r\n        input.setAttribute('aria-activedescendant', item.id);\r\n      } else {\r\n        input.removeAttribute('aria-activedescendant');\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _openedChanged(opened, wasOpened) {\r\n      // Prevent _close() being called when opened is set to its default value (false).\r\n      if (wasOpened === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (opened) {\r\n        // For touch devices, we don't want to popup virtual keyboard\r\n        // unless input element is explicitly focused by the user.\r\n        if (!this._isInputFocused() && !isTouch) {\r\n          if (this.inputElement) {\r\n            this.inputElement.focus();\r\n          }\r\n        }\r\n      } else {\r\n        this._onClosed();\r\n      }\r\n\r\n      const input = this._nativeInput;\r\n      if (input) {\r\n        input.setAttribute('aria-expanded', !!opened);\r\n\r\n        if (opened) {\r\n          input.setAttribute('aria-controls', this._scroller.id);\r\n        } else {\r\n          input.removeAttribute('aria-controls');\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onOverlayTouchAction() {\r\n      // On touch devices, blur the input on touch start inside the overlay, in order to hide\r\n      // the virtual keyboard. But don't close the overlay on this blur.\r\n      this._closeOnBlurIsPrevented = true;\r\n      this.inputElement.blur();\r\n      this._closeOnBlurIsPrevented = false;\r\n    }\r\n\r\n    /** @protected */\r\n    _isClearButton(event) {\r\n      return event.composedPath()[0] === this.clearElement;\r\n    }\r\n\r\n    /** @private */\r\n    __onClearButtonMouseDown(event) {\r\n      event.preventDefault(); // Prevent native focusout event\r\n      this.inputElement.focus();\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     * @protected\r\n     */\r\n    _onClearButtonClick(event) {\r\n      event.preventDefault();\r\n      this._onClearAction();\r\n\r\n      // De-select dropdown item\r\n      if (this.opened) {\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     * @private\r\n     */\r\n    _onToggleButtonClick(event) {\r\n      // Prevent parent components such as `vaadin-grid`\r\n      // from handling the click event after it bubbles.\r\n      event.preventDefault();\r\n\r\n      if (this.opened) {\r\n        this.close();\r\n      } else {\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     * @protected\r\n     */\r\n    _onHostClick(event) {\r\n      if (!this.autoOpenDisabled) {\r\n        event.preventDefault();\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onClick(event) {\r\n      if (this._isClearButton(event)) {\r\n        this._onClearButtonClick(event);\r\n      } else if (event.composedPath().includes(this._toggleElement)) {\r\n        this._onToggleButtonClick(event);\r\n      } else {\r\n        this._onHostClick(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(e) {\r\n      super._onKeyDown(e);\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        this._onArrowDown();\r\n\r\n        // Prevent caret from moving\r\n        e.preventDefault();\r\n      } else if (e.key === 'ArrowUp') {\r\n        this._onArrowUp();\r\n\r\n        // Prevent caret from moving\r\n        e.preventDefault();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _getItemLabel(item) {\r\n      let label = item && this.itemLabelPath ? get(this.itemLabelPath, item) : undefined;\r\n      if (label === undefined || label === null) {\r\n        label = item ? item.toString() : '';\r\n      }\r\n      return label;\r\n    }\r\n\r\n    /** @private */\r\n    _getItemValue(item) {\r\n      let value = item && this.itemValuePath ? get(this.itemValuePath, item) : undefined;\r\n      if (value === undefined) {\r\n        value = item ? item.toString() : '';\r\n      }\r\n      return value;\r\n    }\r\n\r\n    /** @private */\r\n    _onArrowDown() {\r\n      if (this.opened) {\r\n        const items = this._dropdownItems;\r\n        if (items) {\r\n          this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\r\n          this._prefillFocusedItemLabel();\r\n        }\r\n      } else {\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onArrowUp() {\r\n      if (this.opened) {\r\n        if (this._focusedIndex > -1) {\r\n          this._focusedIndex = Math.max(0, this._focusedIndex - 1);\r\n        } else {\r\n          const items = this._dropdownItems;\r\n          if (items) {\r\n            this._focusedIndex = items.length - 1;\r\n          }\r\n        }\r\n\r\n        this._prefillFocusedItemLabel();\r\n      } else {\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _prefillFocusedItemLabel() {\r\n      if (this._focusedIndex > -1) {\r\n        const focusedItem = this._dropdownItems[this._focusedIndex];\r\n        this._inputElementValue = this._getItemLabel(focusedItem);\r\n        this._markAllSelectionRange();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _setSelectionRange(start, end) {\r\n      // Setting selection range focuses and/or moves the caret in some browsers,\r\n      // and there's no need to modify the selection range if the input isn't focused anyway.\r\n      // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\r\n      // the next focusable element instead of the combo-box itself.\r\n      if (this._isInputFocused() && this.inputElement.setSelectionRange) {\r\n        this.inputElement.setSelectionRange(start, end);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _markAllSelectionRange() {\r\n      if (this._inputElementValue !== undefined) {\r\n        this._setSelectionRange(0, this._inputElementValue.length);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _clearSelectionRange() {\r\n      if (this._inputElementValue !== undefined) {\r\n        const pos = this._inputElementValue ? this._inputElementValue.length : 0;\r\n        this._setSelectionRange(pos, pos);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _closeOrCommit() {\r\n      if (!this.opened && !this.loading) {\r\n        this._commitValue();\r\n      } else {\r\n        this.close();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onEnter(e) {\r\n      // Do not commit value when custom values are disallowed and input value is not a valid option\r\n      // also stop propagation of the event, otherwise the user could submit a form while the input\r\n      // still contains an invalid value\r\n      if (!this._hasValidInputValue()) {\r\n        // Do not submit the surrounding form.\r\n        e.preventDefault();\r\n        // Do not trigger global listeners\r\n        e.stopPropagation();\r\n        return;\r\n      }\r\n\r\n      // Stop propagation of the enter event only if the dropdown is opened, this\r\n      // \"consumes\" the enter event for the action of closing the dropdown\r\n      if (this.opened) {\r\n        // Do not submit the surrounding form.\r\n        e.preventDefault();\r\n        // Do not trigger global listeners\r\n        e.stopPropagation();\r\n      }\r\n\r\n      this._closeOrCommit();\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _hasValidInputValue() {\r\n      const hasInvalidOption =\r\n        this._focusedIndex < 0 &&\r\n        this._inputElementValue !== '' &&\r\n        this._getItemLabel(this.selectedItem) !== this._inputElementValue;\r\n\r\n      return this.allowCustomValue || !hasInvalidOption;\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     * Do not call `super` in order to override clear\r\n     * button logic defined in `InputControlMixin`.\r\n     *\r\n     * @param {!KeyboardEvent} e\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onEscape(e) {\r\n      if (\r\n        this.autoOpenDisabled &&\r\n        (this.opened || (this.value !== this._inputElementValue && this._inputElementValue.length > 0))\r\n      ) {\r\n        // Auto-open is disabled\r\n        // The overlay is open or\r\n        // The input value has changed but the change hasn't been committed, so cancel it.\r\n        e.stopPropagation();\r\n        this._focusedIndex = -1;\r\n        this.cancel();\r\n      } else if (this.opened) {\r\n        // Auto-open is enabled\r\n        // The overlay is open\r\n        e.stopPropagation();\r\n\r\n        if (this._focusedIndex > -1) {\r\n          // An item is focused, revert the input to the filtered value\r\n          this._focusedIndex = -1;\r\n          this._revertInputValue();\r\n        } else {\r\n          // No item is focused, cancel the change and close the overlay\r\n          this.cancel();\r\n        }\r\n      } else if (this.clearButtonVisible && !!this.value && !this.readonly) {\r\n        e.stopPropagation();\r\n        // The clear button is visible and the overlay is closed, so clear the value.\r\n        this._onClearAction();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _toggleElementChanged(toggleElement) {\r\n      if (toggleElement) {\r\n        // Don't blur the input on toggle mousedown\r\n        toggleElement.addEventListener('mousedown', (e) => e.preventDefault());\r\n        // Unfocus previously focused element if focus is not inside combo box (on touch devices)\r\n        toggleElement.addEventListener('click', () => {\r\n          if (isTouch && !this._isInputFocused()) {\r\n            document.activeElement.blur();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Clears the current value.\r\n     * @protected\r\n     */\r\n    _onClearAction() {\r\n      this.selectedItem = null;\r\n\r\n      if (this.allowCustomValue) {\r\n        this.value = '';\r\n      }\r\n\r\n      this._detectAndDispatchChange();\r\n    }\r\n\r\n    /**\r\n     * Clears the current filter. Should be used instead of setting the property\r\n     * directly in order to allow overriding this in multi-select combo box.\r\n     * @protected\r\n     */\r\n    _clearFilter() {\r\n      this.filter = '';\r\n    }\r\n\r\n    /**\r\n     * Reverts back to original value.\r\n     */\r\n    cancel() {\r\n      this._revertInputValueToValue();\r\n      // In the next _detectAndDispatchChange() call, the change detection should not pass\r\n      this._lastCommittedValue = this.value;\r\n      this._closeOrCommit();\r\n    }\r\n\r\n    /** @private */\r\n    _onOpened() {\r\n      // _detectAndDispatchChange() should not consider value changes done before opening\r\n      this._lastCommittedValue = this.value;\r\n    }\r\n\r\n    /** @private */\r\n    _onClosed() {\r\n      if (!this.loading || this.allowCustomValue) {\r\n        this._commitValue();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _commitValue() {\r\n      if (this._focusedIndex > -1) {\r\n        const focusedItem = this._dropdownItems[this._focusedIndex];\r\n        if (this.selectedItem !== focusedItem) {\r\n          this.selectedItem = focusedItem;\r\n        }\r\n        // Make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\r\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\r\n        this._focusedIndex = -1;\r\n      } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\r\n        this.selectedItem = null;\r\n\r\n        if (this.allowCustomValue) {\r\n          this.value = '';\r\n        }\r\n      } else {\r\n        // Try to find an item which label matches the input value.\r\n        const items = [this.selectedItem, ...(this._dropdownItems || [])];\r\n        const itemMatchingInputValue = items[this.__getItemIndexByLabel(items, this._inputElementValue)];\r\n\r\n        if (\r\n          this.allowCustomValue &&\r\n          // To prevent a repetitive input value being saved after pressing ESC and Tab.\r\n          !itemMatchingInputValue\r\n        ) {\r\n          const customValue = this._inputElementValue;\r\n\r\n          // Store reference to the last custom value for checking it on focusout.\r\n          this._lastCustomValue = customValue;\r\n\r\n          // An item matching by label was not found, but custom values are allowed.\r\n          // Dispatch a custom-value-set event with the input value.\r\n          const e = new CustomEvent('custom-value-set', {\r\n            detail: customValue,\r\n            composed: true,\r\n            cancelable: true,\r\n            bubbles: true,\r\n          });\r\n          this.dispatchEvent(e);\r\n          if (!e.defaultPrevented) {\r\n            this.value = customValue;\r\n          }\r\n        } else if (!this.allowCustomValue && !this.opened && itemMatchingInputValue) {\r\n          // An item matching by label was found, select it.\r\n          this.value = this._getItemValue(itemMatchingInputValue);\r\n        } else {\r\n          // Revert the input value\r\n          this._revertInputValueToValue();\r\n        }\r\n      }\r\n\r\n      this._detectAndDispatchChange();\r\n\r\n      this._clearSelectionRange();\r\n\r\n      this._clearFilter();\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `InputMixin`.\r\n     * @param {!Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onInput(event) {\r\n      const filter = this._inputElementValue;\r\n\r\n      // When opening dropdown on user input, both `opened` and `filter` properties are set.\r\n      // Perform a batched property update instead of relying on sync property observers.\r\n      // This is necessary to avoid an extra data-provider request for loading first page.\r\n      const props = {};\r\n\r\n      if (this.filter === filter) {\r\n        // Filter and input value might get out of sync, while keyboard navigating for example.\r\n        // Afterwards, input value might be changed to the same value as used in filtering.\r\n        // In situation like these, we need to make sure all the filter changes handlers are run.\r\n        this._filterChanged(this.filter);\r\n      } else {\r\n        props.filter = filter;\r\n      }\r\n\r\n      if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\r\n        props.opened = true;\r\n      }\r\n\r\n      this.setProperties(props);\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `InputMixin`.\r\n     * @param {!Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onChange(event) {\r\n      // Suppress the native change event fired on the native input.\r\n      // We use `_detectAndDispatchChange` to fire a custom event.\r\n      event.stopPropagation();\r\n    }\r\n\r\n    /** @private */\r\n    _itemLabelPathChanged(itemLabelPath) {\r\n      if (typeof itemLabelPath !== 'string') {\r\n        console.error('You should set itemLabelPath to a valid string');\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _filterChanged(filter) {\r\n      // Scroll to the top of the list whenever the filter changes.\r\n      this._scrollIntoView(0);\r\n\r\n      this._focusedIndex = -1;\r\n\r\n      if (this.items) {\r\n        this.filteredItems = this._filterItems(this.items, filter);\r\n      } else {\r\n        // With certain use cases (e. g., external filtering), `items` are\r\n        // undefined. Filtering is unnecessary per se, but the filteredItems\r\n        // observer should still be invoked to update focused item.\r\n        this._filteredItemsChanged(this.filteredItems);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _revertInputValue() {\r\n      if (this.filter !== '') {\r\n        this._inputElementValue = this.filter;\r\n      } else {\r\n        this._revertInputValueToValue();\r\n      }\r\n      this._clearSelectionRange();\r\n    }\r\n\r\n    /** @private */\r\n    _revertInputValueToValue() {\r\n      if (this.allowCustomValue && !this.selectedItem) {\r\n        this._inputElementValue = this.value;\r\n      } else {\r\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _selectedItemChanged(selectedItem) {\r\n      if (selectedItem === null || selectedItem === undefined) {\r\n        if (this.filteredItems) {\r\n          if (!this.allowCustomValue) {\r\n            this.value = '';\r\n          }\r\n\r\n          this._toggleHasValue(this._hasValue);\r\n          this._inputElementValue = this.value;\r\n        }\r\n      } else {\r\n        const value = this._getItemValue(selectedItem);\r\n        if (this.value !== value) {\r\n          this.value = value;\r\n          if (this.value !== value) {\r\n            // The value was changed to something else in value-changed listener,\r\n            // so prevent from resetting it to the previous value.\r\n            return;\r\n          }\r\n        }\r\n\r\n        this._toggleHasValue(true);\r\n        this._inputElementValue = this._getItemLabel(selectedItem);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an observer from `InputMixin`.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _valueChanged(value, oldVal) {\r\n      if (value === '' && oldVal === undefined) {\r\n        // Initializing, no need to do anything\r\n        // See https://github.com/vaadin/vaadin-combo-box/issues/554\r\n        return;\r\n      }\r\n\r\n      if (isValidValue(value)) {\r\n        if (this._getItemValue(this.selectedItem) !== value) {\r\n          this._selectItemForValue(value);\r\n        }\r\n\r\n        if (!this.selectedItem && this.allowCustomValue) {\r\n          this._inputElementValue = value;\r\n        }\r\n\r\n        this._toggleHasValue(this._hasValue);\r\n      } else {\r\n        this.selectedItem = null;\r\n      }\r\n\r\n      this._clearFilter();\r\n\r\n      // In the next _detectAndDispatchChange() call, the change detection should pass\r\n      this._lastCommittedValue = undefined;\r\n    }\r\n\r\n    /** @private */\r\n    _detectAndDispatchChange() {\r\n      // Do not validate when focusout is caused by document\r\n      // losing focus, which happens on browser tab switch.\r\n      if (document.hasFocus()) {\r\n        this._requestValidation();\r\n      }\r\n\r\n      if (this.value !== this._lastCommittedValue) {\r\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\r\n        this._lastCommittedValue = this.value;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _itemsChanged(items, oldItems) {\r\n      this._ensureItemsOrDataProvider(() => {\r\n        this.items = oldItems;\r\n      });\r\n\r\n      if (items) {\r\n        this.filteredItems = items.slice(0);\r\n      } else if (oldItems) {\r\n        // Only clear filteredItems if the component had items previously but got cleared\r\n        this.filteredItems = null;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _filteredItemsChanged(filteredItems) {\r\n      this._setDropdownItems(filteredItems);\r\n    }\r\n\r\n    /** @private */\r\n    _filterItems(arr, filter) {\r\n      if (!arr) {\r\n        return arr;\r\n      }\r\n\r\n      const filteredItems = arr.filter((item) => {\r\n        filter = filter ? filter.toString().toLowerCase() : '';\r\n        // Check if item contains input value.\r\n        return this._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\r\n      });\r\n\r\n      return filteredItems;\r\n    }\r\n\r\n    /** @private */\r\n    _selectItemForValue(value) {\r\n      const valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\r\n      const previouslySelectedItem = this.selectedItem;\r\n\r\n      if (valueIndex >= 0) {\r\n        this.selectedItem = this.filteredItems[valueIndex];\r\n      } else if (this.dataProvider && this.selectedItem === undefined) {\r\n        this.selectedItem = undefined;\r\n      } else {\r\n        this.selectedItem = null;\r\n      }\r\n\r\n      if (this.selectedItem === null && previouslySelectedItem === null) {\r\n        this._selectedItemChanged(this.selectedItem);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Provide items to be rendered in the dropdown.\r\n     * Override this method to show custom items.\r\n     *\r\n     * @protected\r\n     */\r\n    _setDropdownItems(newItems) {\r\n      const oldItems = this._dropdownItems;\r\n      this._dropdownItems = newItems;\r\n\r\n      // Store the currently focused item if any. The focused index preserves\r\n      // in the case when more filtered items are loading but it is reset\r\n      // when the user types in a filter query.\r\n      const focusedItem = oldItems ? oldItems[this._focusedIndex] : null;\r\n\r\n      // Try to sync `selectedItem` based on `value` once a new set of `filteredItems` is available\r\n      // (as a result of external filtering or when they have been loaded by the data provider).\r\n      // When `value` is specified but `selectedItem` is not, it means that there was no item\r\n      // matching `value` at the moment `value` was set, so `selectedItem` has remained unsynced.\r\n      const valueIndex = this.__getItemIndexByValue(newItems, this.value);\r\n      if ((this.selectedItem === null || this.selectedItem === undefined) && valueIndex >= 0) {\r\n        this.selectedItem = newItems[valueIndex];\r\n      }\r\n\r\n      // Try to first set focus on the item that had been focused before `newItems` were updated\r\n      // if it is still present in the `newItems` array. Otherwise, set the focused index\r\n      // depending on the selected item or the filter query.\r\n      const focusedItemIndex = this.__getItemIndexByValue(newItems, this._getItemValue(focusedItem));\r\n      if (focusedItemIndex > -1) {\r\n        this._focusedIndex = focusedItemIndex;\r\n      } else {\r\n        // When the user filled in something that is different from the current value = filtering is enabled,\r\n        // set the focused index to the item that matches the filter query.\r\n        this._focusedIndex = this.__getItemIndexByLabel(newItems, this.filter);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _getItemElements() {\r\n      return Array.from(this._scroller.querySelectorAll(`${this._tagNamePrefix}-item`));\r\n    }\r\n\r\n    /** @private */\r\n    _scrollIntoView(index) {\r\n      if (!this._scroller) {\r\n        return;\r\n      }\r\n      this._scroller.scrollIntoView(index);\r\n    }\r\n\r\n    /**\r\n     * Returns the first item that matches the provided value.\r\n     *\r\n     * @private\r\n     */\r\n    __getItemIndexByValue(items, value) {\r\n      if (!items || !isValidValue(value)) {\r\n        return -1;\r\n      }\r\n\r\n      return findItemIndex(items, (item) => {\r\n        return this._getItemValue(item) === value;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Returns the first item that matches the provided label.\r\n     * Labels are matched against each other case insensitively.\r\n     *\r\n     * @private\r\n     */\r\n    __getItemIndexByLabel(items, label) {\r\n      if (!items || !label) {\r\n        return -1;\r\n      }\r\n\r\n      return findItemIndex(items, (item) => {\r\n        return this._getItemLabel(item).toString().toLowerCase() === label.toString().toLowerCase();\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _overlaySelectedItemChanged(e) {\r\n      // Stop this private event from leaking outside.\r\n      e.stopPropagation();\r\n\r\n      if (e.detail.item instanceof ComboBoxPlaceholder) {\r\n        // Placeholder items should not be selectable.\r\n        return;\r\n      }\r\n\r\n      if (this.opened) {\r\n        this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\r\n        this.close();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin`\r\n     * to close the overlay on blur and commit the value.\r\n     *\r\n     * @param {boolean} focused\r\n     * @protected\r\n     * @override\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      if (!focused && !this.readonly && !this._closeOnBlurIsPrevented) {\r\n        // User's logic in `custom-value-set` event listener might cause input to blur,\r\n        // which will result in attempting to commit the same custom value once again.\r\n        if (!this.opened && this.allowCustomValue && this._inputElementValue === this._lastCustomValue) {\r\n          delete this._lastCustomValue;\r\n          return;\r\n        }\r\n\r\n        if (isKeyboardActive()) {\r\n          // Close on Tab key causing blur. With mouse, close on outside click instead.\r\n          this._closeOrCommit();\r\n          return;\r\n        }\r\n\r\n        if (!this.opened) {\r\n          this._commitValue();\r\n        } else if (!this._overlayOpened) {\r\n          // Combo-box is opened, but overlay is not visible -> custom value was entered.\r\n          // Make sure we close here as there won't be an \"outside click\" in this case.\r\n          this.close();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin` to not remove focused\r\n     * state when focus moves to the overlay.\r\n     *\r\n     * @param {FocusEvent} event\r\n     * @return {boolean}\r\n     * @protected\r\n     * @override\r\n     */\r\n    _shouldRemoveFocus(event) {\r\n      // VoiceOver on iOS fires `focusout` event when moving focus to the item in the dropdown.\r\n      // Do not focus the input in this case, because it would break announcement for the item.\r\n      if (event.relatedTarget && event.relatedTarget.localName === `${this._tagNamePrefix}-item`) {\r\n        return false;\r\n      }\r\n\r\n      // Do not blur when focus moves to the overlay\r\n      // Also, fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\r\n      if (event.relatedTarget === this._overlayElement) {\r\n        event.composedPath()[0].focus();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /** @private */\r\n    _onTouchend(event) {\r\n      if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\r\n        return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      this._onClearAction();\r\n    }\r\n\r\n    /**\r\n     * Fired when the value changes.\r\n     *\r\n     * @event value-changed\r\n     * @param {Object} detail\r\n     * @param {String} detail.value the combobox value\r\n     */\r\n\r\n    /**\r\n     * Fired when selected item changes.\r\n     *\r\n     * @event selected-item-changed\r\n     * @param {Object} detail\r\n     * @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\r\n     */\r\n\r\n    /**\r\n     * Fired when the user sets a custom value.\r\n     * @event custom-value-set\r\n     * @param {String} detail the custom value\r\n     */\r\n\r\n    /**\r\n     * Fired when the user commits a value change.\r\n     * @event change\r\n     */\r\n\r\n    /**\r\n     * Fired after the `vaadin-combo-box-overlay` opens.\r\n     *\r\n     * @event vaadin-combo-box-dropdown-opened\r\n     */\r\n\r\n    /**\r\n     * Fired after the `vaadin-combo-box-overlay` closes.\r\n     *\r\n     * @event vaadin-combo-box-dropdown-closed\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2015 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ComboBoxItemMixin = (superClass) =>\r\n  class ComboBoxItemMixinClass extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The index of the item.\r\n         */\r\n        index: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * The item to render.\r\n         */\r\n        item: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * The text to render in the item.\r\n         */\r\n        label: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * True when item is selected.\r\n         */\r\n        selected: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * True when item is focused.\r\n         */\r\n        focused: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the item content.\r\n         */\r\n        renderer: {\r\n          type: Function,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__rendererOrItemChanged(renderer, index, item, selected, focused)', '__updateLabel(label, renderer)'];\r\n    }\r\n\r\n    static get observedAttributes() {\r\n      return [...super.observedAttributes, 'hidden'];\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n      if (name === 'hidden' && newValue !== null) {\r\n        // The element is being hidden (by virtualizer). Mark one of the __rendererOrItemChanged\r\n        // dependencies as undefined to make sure it's called when the element is shown again\r\n        // and assigned properties with possibly identical values as before hiding.\r\n        this.index = undefined;\r\n      } else {\r\n        super.attributeChangedCallback(name, oldValue, newValue);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      this._owner = this.parentNode.owner;\r\n\r\n      const hostDir = this._owner.getAttribute('dir');\r\n      if (hostDir) {\r\n        this.setAttribute('dir', hostDir);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Requests an update for the content of the item.\r\n     * While performing the update, it invokes the renderer passed in the `renderer` property.\r\n     *\r\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\r\n     */\r\n    requestContentUpdate() {\r\n      if (!this.renderer || this.hidden) {\r\n        return;\r\n      }\r\n\r\n      const model = {\r\n        index: this.index,\r\n        item: this.item,\r\n        focused: this.focused,\r\n        selected: this.selected,\r\n      };\r\n\r\n      this.renderer(this, this._owner, model);\r\n    }\r\n\r\n    /** @private */\r\n    __rendererOrItemChanged(renderer, index, item) {\r\n      if (item === undefined || index === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (this._oldRenderer !== renderer) {\r\n        this.innerHTML = '';\r\n        // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\r\n        // When clearing the rendered content, this part needs to be manually disposed of.\r\n        // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\r\n        delete this._$litPart$;\r\n      }\r\n\r\n      if (renderer) {\r\n        this._oldRenderer = renderer;\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateLabel(label, renderer) {\r\n      if (renderer) {\r\n        return;\r\n      }\r\n\r\n      this.textContent = label;\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2015 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isElementFocusable } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { PositionMixin } from '@vaadin/overlay/src/vaadin-overlay-position-mixin.js';\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes PositionMixin\r\n */\r\nexport const ComboBoxOverlayMixin = (superClass) =>\r\n  class ComboBoxOverlayMixin extends PositionMixin(superClass) {\r\n    static get observers() {\r\n      return ['_setOverlayWidth(positionTarget, opened)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.requiredVerticalSpace = 200;\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      const comboBox = this._comboBox;\r\n\r\n      const hostDir = comboBox && comboBox.getAttribute('dir');\r\n      if (hostDir) {\r\n        this.setAttribute('dir', hostDir);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `Overlay`\r\n     * to not close on position target click.\r\n     *\r\n     * @param {Event} event\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _shouldCloseOnOutsideClick(event) {\r\n      const eventPath = event.composedPath();\r\n      return !eventPath.includes(this.positionTarget) && !eventPath.includes(this);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _mouseDownListener(event) {\r\n      super._mouseDownListener(event);\r\n\r\n      // Prevent global mousedown event to avoid losing focus on outside click,\r\n      // unless the clicked element is also focusable (e.g. in date-time-picker).\r\n      if (this._shouldCloseOnOutsideClick(event) && !isElementFocusable(event.composedPath()[0])) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _updateOverlayWidth() {\r\n      const propPrefix = this.localName;\r\n      this.style.setProperty(`--_${propPrefix}-default-width`, `${this.positionTarget.clientWidth}px`);\r\n\r\n      const customWidth = getComputedStyle(this._comboBox).getPropertyValue(`--${propPrefix}-width`);\r\n\r\n      if (customWidth === '') {\r\n        this.style.removeProperty(`--${propPrefix}-width`);\r\n      } else {\r\n        this.style.setProperty(`--${propPrefix}-width`, customWidth);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _setOverlayWidth(positionTarget, opened) {\r\n      if (positionTarget && opened) {\r\n        this._updateOverlayWidth();\r\n\r\n        this._updatePosition();\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2015 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\nimport { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';\r\nimport { Virtualizer } from '@vaadin/component-base/src/virtualizer.js';\r\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ComboBoxScrollerMixin = (superClass) =>\r\n  class ComboBoxScrollerMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * A full set of items to filter the visible options from.\r\n         * Set to an empty array when combo-box is not opened.\r\n         */\r\n        items: {\r\n          type: Array,\r\n          sync: true,\r\n          observer: '__itemsChanged',\r\n        },\r\n\r\n        /**\r\n         * Index of an item that has focus outline and is scrolled into view.\r\n         * The actual focus still remains in the input field.\r\n         */\r\n        focusedIndex: {\r\n          type: Number,\r\n          sync: true,\r\n          observer: '__focusedIndexChanged',\r\n        },\r\n\r\n        /**\r\n         * Set to true while combo-box fetches new page from the data provider.\r\n         */\r\n        loading: {\r\n          type: Boolean,\r\n          sync: true,\r\n          observer: '__loadingChanged',\r\n        },\r\n\r\n        /**\r\n         * Whether the combo-box is currently opened or not. If set to false,\r\n         * calling `scrollIntoView` does not have any effect.\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          sync: true,\r\n          observer: '__openedChanged',\r\n        },\r\n\r\n        /**\r\n         * The selected item from the `items` array.\r\n         */\r\n        selectedItem: {\r\n          type: Object,\r\n          sync: true,\r\n          observer: '__selectedItemChanged',\r\n        },\r\n\r\n        /**\r\n         * A function used to generate CSS class names for dropdown\r\n         * items based on the item. The return value should be the\r\n         * generated class name as a string, or multiple class names\r\n         * separated by whitespace characters.\r\n         */\r\n        itemClassNameGenerator: {\r\n          type: Object,\r\n          observer: '__itemClassNameGeneratorChanged',\r\n        },\r\n\r\n        /**\r\n         * Path for the id of the item, used to detect whether the item is selected.\r\n         */\r\n        itemIdPath: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * Reference to the owner (combo-box owner), used by the item elements.\r\n         */\r\n        owner: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * Function used to set a label for every combo-box item.\r\n         */\r\n        getItemLabel: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * Function used to render the content of every combo-box item.\r\n         */\r\n        renderer: {\r\n          type: Object,\r\n          sync: true,\r\n          observer: '__rendererChanged',\r\n        },\r\n\r\n        /**\r\n         * Used to propagate the `theme` attribute from the host element.\r\n         */\r\n        theme: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.__boundOnItemClick = this.__onItemClick.bind(this);\r\n    }\r\n\r\n    /** @private */\r\n    get _viewportTotalPaddingBottom() {\r\n      if (this._cachedViewportTotalPaddingBottom === undefined) {\r\n        const itemsStyle = window.getComputedStyle(this.$.selector);\r\n        this._cachedViewportTotalPaddingBottom = [itemsStyle.paddingBottom, itemsStyle.borderBottomWidth]\r\n          .map((v) => {\r\n            return parseInt(v, 10);\r\n          })\r\n          .reduce((sum, v) => {\r\n            return sum + v;\r\n          });\r\n      }\r\n\r\n      return this._cachedViewportTotalPaddingBottom;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.setAttribute('role', 'listbox');\r\n\r\n      // Ensure every instance has unique ID\r\n      this.id = `${this.localName}-${generateUniqueId()}`;\r\n\r\n      // Allow extensions to customize tag name for the items\r\n      this.__hostTagName = this.constructor.is.replace('-scroller', '');\r\n\r\n      this.addEventListener('click', (e) => e.stopPropagation());\r\n\r\n      this.__patchWheelOverScrolling();\r\n    }\r\n\r\n    /**\r\n     * Updates the virtualizer's size and items.\r\n     */\r\n    requestContentUpdate() {\r\n      if (!this.__virtualizer) {\r\n        return;\r\n      }\r\n\r\n      if (this.items) {\r\n        this.__virtualizer.size = this.items.length;\r\n      }\r\n\r\n      if (this.opened) {\r\n        this.__virtualizer.update();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Scrolls an item at given index into view and adjusts `scrollTop`\r\n     * so that the element gets fully visible on Arrow Down key press.\r\n     * @param {number} index\r\n     */\r\n    scrollIntoView(index) {\r\n      if (!this.__virtualizer || !(this.opened && index >= 0)) {\r\n        return;\r\n      }\r\n\r\n      const visibleItemsCount = this._visibleItemsCount();\r\n\r\n      let targetIndex = index;\r\n\r\n      if (index > this.__virtualizer.lastVisibleIndex - 1) {\r\n        // Index is below the bottom, scrolling down. Make the item appear at the bottom.\r\n        // First scroll to target (will be at the top of the scroller) to make sure it's rendered.\r\n        this.__virtualizer.scrollToIndex(index);\r\n        // Then calculate the index for the following scroll (to get the target to bottom of the scroller).\r\n        targetIndex = index - visibleItemsCount + 1;\r\n      } else if (index > this.__virtualizer.firstVisibleIndex) {\r\n        // The item is already visible, scrolling is unnecessary per se. But we need to trigger iron-list to set\r\n        // the correct scrollTop on the scrollTarget. Scrolling to firstVisibleIndex.\r\n        targetIndex = this.__virtualizer.firstVisibleIndex;\r\n      }\r\n      this.__virtualizer.scrollToIndex(Math.max(0, targetIndex));\r\n\r\n      // Sometimes the item is partly below the bottom edge, detect and adjust.\r\n      const lastPhysicalItem = [...this.children].find(\r\n        (el) => !el.hidden && el.index === this.__virtualizer.lastVisibleIndex,\r\n      );\r\n      if (!lastPhysicalItem || index !== lastPhysicalItem.index) {\r\n        return;\r\n      }\r\n      const lastPhysicalItemRect = lastPhysicalItem.getBoundingClientRect();\r\n      const scrollerRect = this.getBoundingClientRect();\r\n      const scrollTopAdjust = lastPhysicalItemRect.bottom - scrollerRect.bottom + this._viewportTotalPaddingBottom;\r\n      if (scrollTopAdjust > 0) {\r\n        this.scrollTop += scrollTopAdjust;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string | object} item\r\n     * @param {string | object} selectedItem\r\n     * @param {string} itemIdPath\r\n     * @protected\r\n     */\r\n    _isItemSelected(item, selectedItem, itemIdPath) {\r\n      if (item instanceof ComboBoxPlaceholder) {\r\n        return false;\r\n      } else if (itemIdPath && item !== undefined && selectedItem !== undefined) {\r\n        return get(itemIdPath, item) === get(itemIdPath, selectedItem);\r\n      }\r\n      return item === selectedItem;\r\n    }\r\n\r\n    /** @private */\r\n    __initVirtualizer() {\r\n      this.__virtualizer = new Virtualizer({\r\n        createElements: this.__createElements.bind(this),\r\n        updateElement: this._updateElement.bind(this),\r\n        elementsContainer: this,\r\n        scrollTarget: this,\r\n        scrollContainer: this.$.selector,\r\n        reorderElements: true,\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __itemsChanged(items) {\r\n      if (items && this.__virtualizer) {\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __loadingChanged() {\r\n      this.requestContentUpdate();\r\n    }\r\n\r\n    /** @private */\r\n    __openedChanged(opened) {\r\n      if (opened) {\r\n        if (!this.__virtualizer) {\r\n          this.__initVirtualizer();\r\n        }\r\n\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __selectedItemChanged() {\r\n      this.requestContentUpdate();\r\n    }\r\n\r\n    /** @private */\r\n    __itemClassNameGeneratorChanged(generator, oldGenerator) {\r\n      if (generator || oldGenerator) {\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __focusedIndexChanged(index, oldIndex) {\r\n      if (index !== oldIndex) {\r\n        this.requestContentUpdate();\r\n      }\r\n\r\n      // Do not jump back to the previously focused item while loading\r\n      // when requesting next page from the data provider on scroll.\r\n      if (index >= 0 && !this.loading) {\r\n        this.scrollIntoView(index);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __rendererChanged(renderer, oldRenderer) {\r\n      if (renderer || oldRenderer) {\r\n        this.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __createElements(count) {\r\n      return [...Array(count)].map(() => {\r\n        const item = document.createElement(`${this.__hostTagName}-item`);\r\n        item.addEventListener('click', this.__boundOnItemClick);\r\n        // Negative tabindex prevents the item content from being focused.\r\n        item.tabIndex = '-1';\r\n        item.style.width = '100%';\r\n        return item;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {number} index\r\n     * @protected\r\n     */\r\n    _updateElement(el, index) {\r\n      const item = this.items[index];\r\n      const focusedIndex = this.focusedIndex;\r\n      const selected = this._isItemSelected(item, this.selectedItem, this.itemIdPath);\r\n\r\n      el.setProperties({\r\n        item,\r\n        index,\r\n        label: this.getItemLabel(item),\r\n        selected,\r\n        renderer: this.renderer,\r\n        focused: !this.loading && focusedIndex === index,\r\n      });\r\n\r\n      if (typeof this.itemClassNameGenerator === 'function') {\r\n        el.className = this.itemClassNameGenerator(item);\r\n      } else if (el.className !== '') {\r\n        el.className = '';\r\n      }\r\n\r\n      el.id = `${this.__hostTagName}-item-${index}`;\r\n      el.setAttribute('role', index !== undefined ? 'option' : false);\r\n      el.setAttribute('aria-selected', selected.toString());\r\n      el.setAttribute('aria-posinset', index + 1);\r\n      el.setAttribute('aria-setsize', this.items.length);\r\n\r\n      if (this.theme) {\r\n        el.setAttribute('theme', this.theme);\r\n      } else {\r\n        el.removeAttribute('theme');\r\n      }\r\n\r\n      if (item instanceof ComboBoxPlaceholder) {\r\n        this.__requestItemByIndex(index);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onItemClick(e) {\r\n      this.dispatchEvent(new CustomEvent('selection-changed', { detail: { item: e.currentTarget.item } }));\r\n    }\r\n\r\n    /**\r\n     * We want to prevent the kinetic scrolling energy from being transferred from the overlay contents over to the parent.\r\n     * Further improvement ideas: after the contents have been scrolled to the top or bottom and scrolling has stopped, it could allow\r\n     * scrolling the parent similarly to touch scrolling.\r\n     * @private\r\n     */\r\n    __patchWheelOverScrolling() {\r\n      this.$.selector.addEventListener('wheel', (e) => {\r\n        const scrolledToTop = this.scrollTop === 0;\r\n        const scrolledToBottom = this.scrollHeight - this.scrollTop - this.clientHeight <= 1;\r\n        if (scrolledToTop && e.deltaY < 0) {\r\n          e.preventDefault();\r\n        } else if (scrolledToBottom && e.deltaY > 0) {\r\n          e.preventDefault();\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Dispatches an `index-requested` event for the given index to notify\r\n     * the data provider that it should start loading the page containing the requested index.\r\n     *\r\n     * The event is dispatched asynchronously to prevent an immediate page request and therefore\r\n     * a possible infinite recursion in case the data provider implements page request cancelation logic\r\n     * by invoking data provider page callbacks with an empty array.\r\n     * The infinite recursion may occur otherwise since invoking a data provider page callback with an empty array\r\n     * triggers a synchronous scroller update and, if the callback corresponds to the currently visible page,\r\n     * the scroller will synchronously request the page again which may lead to looping in the end.\r\n     * That was the case for the Flow counterpart:\r\n     * https://github.com/vaadin/flow-components/issues/3553#issuecomment-1239344828\r\n     * @private\r\n     */\r\n    __requestItemByIndex(index) {\r\n      requestAnimationFrame(() => {\r\n        this.dispatchEvent(\r\n          new CustomEvent('index-requested', {\r\n            detail: {\r\n              index,\r\n            },\r\n          }),\r\n        );\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _visibleItemsCount() {\r\n      // Ensure items are positioned\r\n      this.__virtualizer.scrollToIndex(this.__virtualizer.firstVisibleIndex);\r\n      const hasItems = this.__virtualizer.size > 0;\r\n      return hasItems ? this.__virtualizer.lastVisibleIndex - this.__virtualizer.firstVisibleIndex + 1 : 0;\r\n    }\r\n  };\r\n"],
  "mappings": "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",
  "names": ["item", "overlay", "item", "item"]
}

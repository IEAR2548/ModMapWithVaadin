{
  "version": 3,
  "sources": ["../../@vaadin/custom-field/src/vaadin-custom-field-mixin.js", "../../@vaadin/custom-field/src/vaadin-custom-field-styles.js", "../../@vaadin/custom-field/src/vaadin-custom-field.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\r\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\r\nimport { getFlattenedElements } from '@vaadin/component-base/src/dom-utils.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\r\n\r\n/**\r\n * Default implementation of the parse function that creates individual field\r\n * values from the single component value.\r\n * @param value\r\n * @returns {*}\r\n */\r\nconst defaultParseValue = (value) => {\r\n  return value.split('\\t');\r\n};\r\n\r\n/**\r\n * Default implementation of the format function that creates a single component\r\n * value from individual field values.\r\n * @param inputValues\r\n * @returns {*}\r\n */\r\nconst defaultFormatValue = (inputValues) => {\r\n  return inputValues.join('\\t');\r\n};\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes FieldMixin\r\n * @mixes FocusMixin\r\n * @mixes KeyboardMixin\r\n */\r\nexport const CustomFieldMixin = (superClass) =>\r\n  class CustomFieldMixin extends FieldMixin(FocusMixin(KeyboardMixin(superClass))) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        name: String,\r\n\r\n        /**\r\n         * The value of the field. When wrapping several inputs, it will contain `\\t`\r\n         * (Tab character) as a delimiter indicating parts intended to be used as the\r\n         * corresponding inputs values.\r\n         * Use the [`formatValue`](#/elements/vaadin-custom-field#property-formatValue)\r\n         * and [`parseValue`](#/elements/vaadin-custom-field#property-parseValue)\r\n         * properties to customize this behavior.\r\n         */\r\n        value: {\r\n          type: String,\r\n          observer: '__valueChanged',\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Array of available input nodes\r\n         * @type {!Array<!HTMLElement> | undefined}\r\n         */\r\n        inputs: {\r\n          type: Array,\r\n          readOnly: true,\r\n          observer: '__inputsChanged',\r\n        },\r\n\r\n        /**\r\n         * A function to format the values of the individual fields contained by\r\n         * the custom field into a single component value. The function receives\r\n         * an array of all values of the individual fields in the order of their\r\n         * presence in the DOM, and must return a single component value.\r\n         * This function is called each time a value of an internal field is\r\n         * changed.\r\n         *\r\n         * Example:\r\n         * ```js\r\n         * customField.formatValue = (fieldValues) => {\r\n         *   return fieldValues.join(\"-\");\r\n         * }\r\n         * ```\r\n         * @type {!CustomFieldFormatValueFn | undefined}\r\n         */\r\n        formatValue: {\r\n          type: Function,\r\n        },\r\n\r\n        /**\r\n         * A function to parse the component value into values for the individual\r\n         * fields contained by the custom field. The function receives the\r\n         * component value, and must return an array of values for the individual\r\n         * fields in the order of their presence in the DOM.\r\n         * The function is called each time the value of the component changes.\r\n         *\r\n         * Example:\r\n         * ```js\r\n         * customField.parseValue = (componentValue) => {\r\n         *   return componentValue.split(\"-\");\r\n         * }\r\n         * ```\r\n         * @type {!CustomFieldParseValueFn | undefined}\r\n         */\r\n        parseValue: {\r\n          type: Function,\r\n        },\r\n      };\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      // See https://github.com/vaadin/vaadin-web-components/issues/94\r\n      this.setAttribute('role', 'group');\r\n\r\n      this.ariaTarget = this;\r\n\r\n      this.__childrenObserver = new MutationObserver(() => {\r\n        this.__setInputsFromSlot();\r\n      });\r\n\r\n      this.__setInputsFromSlot();\r\n      this.$.slot.addEventListener('slotchange', () => {\r\n        this.__setInputsFromSlot();\r\n\r\n        // Observe changes to any children except inputs\r\n        // to allow wrapping `<input>` with `<div>` etc.\r\n        getFlattenedElements(this.$.slot)\r\n          .filter((el) => !this.__isInput(el))\r\n          .forEach((el) => {\r\n            this.__childrenObserver.observe(el, { childList: true });\r\n          });\r\n      });\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this.addController(this._tooltipController);\r\n      this._tooltipController.setShouldShow((target) => {\r\n        const inputs = target.inputs || [];\r\n        return !inputs.some((el) => el.opened);\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    focus() {\r\n      if (this.inputs && this.inputs[0]) {\r\n        this.inputs[0].focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin` to validate on blur.\r\n     * @param {boolean} focused\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      if (!focused) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin` to not remove focused\r\n     * state when focus moves to another input in the custom field.\r\n     * @param {FocusEvent} event\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _shouldRemoveFocus(event) {\r\n      const { relatedTarget } = event;\r\n      return !this.inputs || !this.inputs.some((el) => relatedTarget === (el.focusElement || el));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current inputs values satisfy all constraints (if any).\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    checkValidity() {\r\n      const hasInvalidFields =\r\n        this.inputs && this.inputs.some((input) => !(input.validate || input.checkValidity).call(input));\r\n\r\n      if (hasInvalidFields || (this.required && !(this.value && this.value.trim()))) {\r\n        // Either 1. one of the input fields is invalid or\r\n        // 2. the custom field itself is required but doesn't have a value\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Override an observer from `FieldMixin`\r\n     * to validate when required is removed.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _requiredChanged(required) {\r\n      super._requiredChanged(required);\r\n\r\n      if (required === false) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {KeyboardEvent} e\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(e) {\r\n      if (e.key === 'Tab') {\r\n        const inputs = this.inputs || [];\r\n        if (\r\n          (inputs.indexOf(e.target) < inputs.length - 1 && !e.shiftKey) ||\r\n          (inputs.indexOf(e.target) > 0 && e.shiftKey)\r\n        ) {\r\n          this.dispatchEvent(new CustomEvent('internal-tab'));\r\n        } else {\r\n          // FIXME(yuriy): remove this workaround when value should not be updated before focusout\r\n          this.__setValue();\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _onInputChange(event) {\r\n      // Stop native change events\r\n      event.stopPropagation();\r\n\r\n      this.__setValue();\r\n      this._requestValidation();\r\n      this.dispatchEvent(\r\n        new CustomEvent('change', {\r\n          bubbles: true,\r\n          cancelable: false,\r\n          detail: {\r\n            value: this.value,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    __setValue() {\r\n      this.__settingValue = true;\r\n      const formatFn = this.formatValue || defaultFormatValue;\r\n      this.value = formatFn.apply(this, [this.inputs.map((input) => input.value)]);\r\n      this.__settingValue = false;\r\n    }\r\n\r\n    /** @private */\r\n    __isInput(node) {\r\n      const isSlottedInput = node.getAttribute('slot') === 'input' || node.getAttribute('slot') === 'textarea';\r\n      return !isSlottedInput && (node.validate || node.checkValidity);\r\n    }\r\n\r\n    /** @private */\r\n    __getInputsFromSlot() {\r\n      return getFlattenedElements(this.$.slot).filter((node) => this.__isInput(node));\r\n    }\r\n\r\n    /** @private */\r\n    __setInputsFromSlot() {\r\n      this._setInputs(this.__getInputsFromSlot());\r\n    }\r\n\r\n    /** @private */\r\n    __inputsChanged(inputs, oldInputs) {\r\n      if (inputs.length === 0) {\r\n        if (oldInputs && oldInputs.length > 0) {\r\n          this.__setValue();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // When inputs are first initialized, apply value set with property.\r\n      if (this.value && this.value !== '\\t' && (!oldInputs || oldInputs.length === 0)) {\r\n        this.__applyInputsValue(this.value);\r\n      } else {\r\n        this.__setValue();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __toggleHasValue(value) {\r\n      this.toggleAttribute('has-value', value !== null && value.trim() !== '');\r\n    }\r\n\r\n    /** @private */\r\n    __valueChanged(value, oldValue) {\r\n      this.__toggleHasValue(value);\r\n\r\n      if (this.__settingValue || !this.inputs) {\r\n        return;\r\n      }\r\n\r\n      this.__applyInputsValue(value || '\\t');\r\n\r\n      if (oldValue !== undefined) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __applyInputsValue(value) {\r\n      const parseFn = this.parseValue || defaultParseValue;\r\n      const valuesArray = parseFn.apply(this, [value]);\r\n\r\n      if (!valuesArray || valuesArray.length === 0) {\r\n        console.warn('Value parser has not provided values array');\r\n        return;\r\n      }\r\n\r\n      this.inputs.forEach((input, idx) => {\r\n        input.value = valuesArray[idx];\r\n      });\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const customFieldStyles = css`\r\n  :host {\r\n    display: inline-flex;\r\n  }\r\n\r\n  :host::before {\r\n    content: '\\\\2003';\r\n    width: 0;\r\n    display: inline-block;\r\n    /* Size and position this element on the same vertical position as the input-field element\r\n           to make vertical align for the host element work as expected */\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  .vaadin-custom-field-container {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .inputs-wrapper {\r\n    flex: none;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { CustomFieldMixin } from './vaadin-custom-field-mixin.js';\r\nimport { customFieldStyles } from './vaadin-custom-field-styles.js';\r\n\r\nregisterStyles('vaadin-custom-field', customFieldStyles, { moduleId: 'vaadin-custom-field-styles' });\r\n\r\n/**\r\n * `<vaadin-custom-field>` is a web component for wrapping multiple components as a single field.\r\n *\r\n * ```\r\n * <vaadin-custom-field label=\"Appointment time\">\r\n *   <vaadin-date-picker></vaadin-date-picker>\r\n *   <vaadin-time-picker></vaadin-time-picker>\r\n * </vaadin-custom-field>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name            | Description\r\n * ---------------------|----------------\r\n * `label`              | The slotted label element wrapper\r\n * `helper-text`        | The slotted helper text element wrapper\r\n * `error-message`      | The slotted error message element wrapper\r\n * `required-indicator` | The `required` state indicator element\r\n * `input-fields`       | The slotted input elements wrapper\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute           | Description                               | Part name\r\n * --------------------|-------------------------------------------|------------\r\n * `invalid`           | Set when the element is invalid           | :host\r\n * `focused`           | Set when the element is focused           | :host\r\n * `has-label`         | Set when the element has a label          | :host\r\n * `has-value`         | Set when the element has a value          | :host\r\n * `has-helper`        | Set when the element has helper text      | :host\r\n * `has-error-message` | Set when the element has an error message | :host\r\n *\r\n * You may also manually set `disabled` or `readonly` attribute on this component to make the label\r\n * part look visually the same as on a `<vaadin-text-field>` when it is disabled or readonly.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {Event} change - Fired when the user commits a value change for any of the internal inputs.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes CustomFieldMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n */\r\nclass CustomField extends CustomFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-custom-field';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-custom-field-container\">\r\n        <div part=\"label\" on-click=\"focus\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\r\n        </div>\r\n\r\n        <div class=\"inputs-wrapper\" part=\"input-fields\" on-change=\"_onInputChange\">\r\n          <slot id=\"slot\"></slot>\r\n        </div>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Fired when the user commits a value change for any of the internal inputs.\r\n   *\r\n   * @event change\r\n   */\r\n}\r\n\r\ndefineCustomElement(CustomField);\r\n\r\nexport { CustomField };\r\n"],
  "mappings": "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",
  "names": []
}

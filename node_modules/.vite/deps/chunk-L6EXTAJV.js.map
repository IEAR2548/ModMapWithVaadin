{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-active-item-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\nimport { isElementFocusable } from '@vaadin/a11y-base/src/focus-utils.js';\r\n\r\n/**\r\n * @param {!Element} target\r\n * @return {boolean}\r\n * @protected\r\n */\r\nexport const isFocusable = (target) => {\r\n  return (\r\n    target.offsetParent &&\r\n    !target.part.contains('body-cell') &&\r\n    isElementFocusable(target) &&\r\n    getComputedStyle(target).visibility !== 'hidden'\r\n  );\r\n};\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ActiveItemMixin = (superClass) =>\r\n  class ActiveItemMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The item user has last interacted with. Turns to `null` after user deactivates\r\n         * the item by re-interacting with the currently active item.\r\n         * @type {GridItem}\r\n         */\r\n        activeItem: {\r\n          type: Object,\r\n          notify: true,\r\n          value: null,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.$.scroller.addEventListener('click', this._onClick.bind(this));\r\n      this.addEventListener('cell-activate', this._activateItem.bind(this));\r\n      this.addEventListener('row-activate', this._activateItem.bind(this));\r\n    }\r\n\r\n    /** @private */\r\n    _activateItem(e) {\r\n      const model = e.detail.model;\r\n      const clickedItem = model ? model.item : null;\r\n\r\n      if (clickedItem) {\r\n        this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the click event should not activate the cell on which it occurred.\r\n     *\r\n     * @protected\r\n     */\r\n    _shouldPreventCellActivationOnClick(e) {\r\n      const { cell } = this._getGridEventLocation(e);\r\n      return (\r\n        // Something has handled this click already, e. g., <vaadin-grid-sorter>\r\n        e.defaultPrevented ||\r\n        // No clicked cell available\r\n        !cell ||\r\n        // Cell is a details cell\r\n        cell.getAttribute('part').includes('details-cell') ||\r\n        // Cell is the empty state cell\r\n        cell === this.$.emptystatecell ||\r\n        // Cell content is focused\r\n        cell._content.contains(this.getRootNode().activeElement) ||\r\n        // Clicked on a focusable element\r\n        this._isFocusable(e.target) ||\r\n        // Clicked on a label element\r\n        e.target instanceof HTMLLabelElement\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @param {!MouseEvent} e\r\n     * @protected\r\n     */\r\n    _onClick(e) {\r\n      if (this._shouldPreventCellActivationOnClick(e)) {\r\n        return;\r\n      }\r\n\r\n      const { cell } = this._getGridEventLocation(e);\r\n      if (cell) {\r\n        this.dispatchEvent(\r\n          new CustomEvent('cell-activate', {\r\n            detail: {\r\n              model: this.__getRowModel(cell.parentElement),\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!Element} target\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isFocusable(target) {\r\n      return isFocusable(target);\r\n    }\r\n\r\n    /**\r\n     * Fired when the `activeItem` property changes.\r\n     *\r\n     * @event active-item-changed\r\n     */\r\n\r\n    /**\r\n     * Fired when the cell is activated with click or keyboard.\r\n     *\r\n     * @event cell-activate\r\n     */\r\n  };\r\n"],
  "mappings": ";;;;;AAaO,IAAM,cAAc,CAAC,WAAW;AACrC,SACE,OAAO,gBACP,CAAC,OAAO,KAAK,SAAS,WAAW,KACjC,mBAAmB,MAAM,KACzB,iBAAiB,MAAM,EAAE,eAAe;AAE5C;AAKO,IAAM,kBAAkB,CAAC,eAC9B,MAAM,wBAAwB,WAAW;AAAA,EACvC,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAML,YAAY;AAAA,QACV,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,EAAE,SAAS,iBAAiB,SAAS,KAAK,SAAS,KAAK,IAAI,CAAC;AAClE,SAAK,iBAAiB,iBAAiB,KAAK,cAAc,KAAK,IAAI,CAAC;AACpE,SAAK,iBAAiB,gBAAgB,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,EACrE;AAAA;AAAA,EAGA,cAAc,GAAG;AACf,UAAM,QAAQ,EAAE,OAAO;AACvB,UAAM,cAAc,QAAQ,MAAM,OAAO;AAEzC,QAAI,aAAa;AACf,WAAK,aAAa,CAAC,KAAK,YAAY,KAAK,YAAY,WAAW,IAAI,cAAc;AAAA,IACpF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oCAAoC,GAAG;AACrC,UAAM,EAAE,KAAK,IAAI,KAAK,sBAAsB,CAAC;AAC7C;AAAA;AAAA,MAEE,EAAE;AAAA,MAEF,CAAC;AAAA,MAED,KAAK,aAAa,MAAM,EAAE,SAAS,cAAc;AAAA,MAEjD,SAAS,KAAK,EAAE;AAAA,MAEhB,KAAK,SAAS,SAAS,KAAK,YAAY,EAAE,aAAa;AAAA,MAEvD,KAAK,aAAa,EAAE,MAAM;AAAA,MAE1B,EAAE,kBAAkB;AAAA;AAAA,EAExB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,GAAG;AACV,QAAI,KAAK,oCAAoC,CAAC,GAAG;AAC/C;AAAA,IACF;AAEA,UAAM,EAAE,KAAK,IAAI,KAAK,sBAAsB,CAAC;AAC7C,QAAI,MAAM;AACR,WAAK;AAAA,QACH,IAAI,YAAY,iBAAiB;AAAA,UAC/B,QAAQ;AAAA,YACN,OAAO,KAAK,cAAc,KAAK,aAAa;AAAA,UAC9C;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,QAAQ;AACnB,WAAO,YAAY,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaF;",
  "names": []
}

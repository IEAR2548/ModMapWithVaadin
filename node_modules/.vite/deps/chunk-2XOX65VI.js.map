{
  "version": 3,
  "sources": ["../../@open-wc/dedupe-mixin/src/dedupeMixin.js", "../../@vaadin/component-base/src/polylit-mixin.js"],
  "sourcesContent": ["const appliedClassMixins = new WeakMap();\r\n\r\n/** Vefify if the Mixin was previously applyed\r\n * @private\r\n * @param {function} mixin      Mixin being applyed\r\n * @param {object} superClass   Class receiving the new mixin\r\n * @returns {boolean}\r\n */\r\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\r\n  let klass = superClass;\r\n  while (klass) {\r\n    if (appliedClassMixins.get(klass) === mixin) {\r\n      return true;\r\n    }\r\n    klass = Object.getPrototypeOf(klass);\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\r\n * @export\r\n * @param {function} mixin      Mixin to be applyed\r\n * @returns {object}            Mixed class with mixin applied\r\n */\r\nexport function dedupeMixin(mixin) {\r\n  return superClass => {\r\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\r\n      return superClass;\r\n    }\r\n    const mixedClass = mixin(superClass);\r\n    appliedClassMixins.set(mixedClass, mixin);\r\n    return mixedClass;\r\n  };\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\r\nimport { notEqual } from 'lit';\r\nimport { get, set } from './path-utils.js';\r\n\r\nconst caseMap = {};\r\n\r\nconst CAMEL_TO_DASH = /([A-Z])/gu;\r\n\r\nfunction camelToDash(camel) {\r\n  if (!caseMap[camel]) {\r\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase();\r\n  }\r\n  return caseMap[camel];\r\n}\r\n\r\nfunction upper(name) {\r\n  return name[0].toUpperCase() + name.substring(1);\r\n}\r\n\r\nfunction parseObserver(observerString) {\r\n  const [method, rest] = observerString.split('(');\r\n  const observerProps = rest\r\n    .replace(')', '')\r\n    .split(',')\r\n    .map((prop) => prop.trim());\r\n\r\n  return {\r\n    method,\r\n    observerProps,\r\n  };\r\n}\r\n\r\nfunction getOrCreateMap(obj, name) {\r\n  if (!Object.prototype.hasOwnProperty.call(obj, name)) {\r\n    // Clone any existing entries (superclasses)\r\n    obj[name] = new Map(obj[name]);\r\n  }\r\n  return obj[name];\r\n}\r\n\r\nconst PolylitMixinImplementation = (superclass) => {\r\n  class PolylitMixinClass extends superclass {\r\n    static createProperty(name, options) {\r\n      if ([String, Boolean, Number, Array].includes(options)) {\r\n        options = {\r\n          type: options,\r\n        };\r\n      }\r\n\r\n      if (options && options.reflectToAttribute) {\r\n        options.reflect = true;\r\n      }\r\n\r\n      super.createProperty(name, options);\r\n    }\r\n\r\n    static getOrCreateMap(name) {\r\n      return getOrCreateMap(this, name);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    static finalize() {\r\n      super.finalize();\r\n\r\n      if (Array.isArray(this.observers)) {\r\n        const complexObservers = this.getOrCreateMap('__complexObservers');\r\n\r\n        this.observers.forEach((observer) => {\r\n          const { method, observerProps } = parseObserver(observer);\r\n          complexObservers.set(method, observerProps);\r\n        });\r\n      }\r\n    }\r\n\r\n    static addCheckedInitializer(initializer) {\r\n      super.addInitializer((instance) => {\r\n        // Prevent initializer from affecting superclass\r\n        if (instance instanceof this) {\r\n          initializer(instance);\r\n        }\r\n      });\r\n    }\r\n\r\n    static getPropertyDescriptor(name, key, options) {\r\n      const defaultDescriptor = super.getPropertyDescriptor(name, key, options);\r\n\r\n      let result = defaultDescriptor;\r\n\r\n      // Set the key for this property\r\n      this.getOrCreateMap('__propKeys').set(name, key);\r\n\r\n      if (options.sync) {\r\n        result = {\r\n          get: defaultDescriptor.get,\r\n          set(value) {\r\n            const oldValue = this[name];\r\n\r\n            if (notEqual(value, oldValue)) {\r\n              this[key] = value;\r\n              this.requestUpdate(name, oldValue, options);\r\n\r\n              // Enforce synchronous update\r\n              if (this.hasUpdated) {\r\n                this.performUpdate();\r\n              }\r\n            }\r\n          },\r\n          configurable: true,\r\n          enumerable: true,\r\n        };\r\n      }\r\n\r\n      if (options.readOnly) {\r\n        const setter = result.set;\r\n\r\n        this.addCheckedInitializer((instance) => {\r\n          // This is run during construction of the element\r\n          instance[`_set${upper(name)}`] = function (value) {\r\n            setter.call(instance, value);\r\n          };\r\n        });\r\n\r\n        result = {\r\n          get: result.get,\r\n          set() {\r\n            // Do nothing, property is read-only.\r\n          },\r\n          configurable: true,\r\n          enumerable: true,\r\n        };\r\n      }\r\n\r\n      if ('value' in options) {\r\n        // Set the default value\r\n        this.addCheckedInitializer((instance) => {\r\n          const value = typeof options.value === 'function' ? options.value.call(instance) : options.value;\r\n\r\n          if (options.readOnly) {\r\n            instance[`_set${upper(name)}`](value);\r\n          } else {\r\n            instance[name] = value;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.observer) {\r\n        const method = options.observer;\r\n\r\n        // Set this method\r\n        this.getOrCreateMap('__observers').set(name, method);\r\n\r\n        this.addCheckedInitializer((instance) => {\r\n          if (!instance[method]) {\r\n            console.warn(`observer method ${method} not defined`);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.notify) {\r\n        if (!this.__notifyProps) {\r\n          this.__notifyProps = new Set();\r\n          // eslint-disable-next-line no-prototype-builtins\r\n        } else if (!this.hasOwnProperty('__notifyProps')) {\r\n          // Clone any existing observers (superclasses)\r\n          const notifyProps = this.__notifyProps;\r\n          this.__notifyProps = new Set(notifyProps);\r\n        }\r\n\r\n        // Set this method\r\n        this.__notifyProps.add(name);\r\n      }\r\n\r\n      if (options.computed) {\r\n        const assignComputedMethod = `__assignComputed${name}`;\r\n        const observer = parseObserver(options.computed);\r\n        this.prototype[assignComputedMethod] = function (...props) {\r\n          this[name] = this[observer.method](...props);\r\n        };\r\n\r\n        this.getOrCreateMap('__computedObservers').set(assignComputedMethod, observer.observerProps);\r\n      }\r\n\r\n      if (!options.attribute) {\r\n        options.attribute = camelToDash(name);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    static get polylitConfig() {\r\n      return {\r\n        asyncFirstRender: false,\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.__hasPolylitMixin = true;\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      // Components like `vaadin-overlay` are teleported to the body element when opened.\r\n      // If their opened state is set as an attribute, the teleportation happens immediately\r\n      // after they are connected to the DOM. This means they will be outside the scope of\r\n      // querySelectorAll in the parent component's `firstUpdated()`. To ensure their reference\r\n      // is still registered in the $ map, we propagate the reference here.\r\n      const parentHost = this.getRootNode().host;\r\n      if (parentHost && parentHost.__hasPolylitMixin && this.id) {\r\n        parentHost.$ ||= {};\r\n        parentHost.$[this.id] = this;\r\n      }\r\n\r\n      const { polylitConfig } = this.constructor;\r\n      if (!this.hasUpdated && !polylitConfig.asyncFirstRender) {\r\n        this.performUpdate();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    firstUpdated() {\r\n      super.firstUpdated();\r\n\r\n      if (!this.$) {\r\n        this.$ = {};\r\n      }\r\n\r\n      [...Object.values(this.$), this.renderRoot].forEach((node) => {\r\n        node.querySelectorAll('[id]').forEach((node) => {\r\n          this.$[node.id] = node;\r\n        });\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {}\r\n\r\n    /** @protected */\r\n    willUpdate(props) {\r\n      if (this.constructor.__computedObservers) {\r\n        this.__runComplexObservers(props, this.constructor.__computedObservers);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    updated(props) {\r\n      const wasReadyInvoked = this.__isReadyInvoked;\r\n      this.__isReadyInvoked = true;\r\n\r\n      if (this.constructor.__observers) {\r\n        this.__runObservers(props, this.constructor.__observers);\r\n      }\r\n\r\n      if (this.constructor.__complexObservers) {\r\n        this.__runComplexObservers(props, this.constructor.__complexObservers);\r\n      }\r\n\r\n      if (this.__dynamicPropertyObservers) {\r\n        this.__runDynamicObservers(props, this.__dynamicPropertyObservers);\r\n      }\r\n\r\n      if (this.__dynamicMethodObservers) {\r\n        this.__runComplexObservers(props, this.__dynamicMethodObservers);\r\n      }\r\n\r\n      if (this.constructor.__notifyProps) {\r\n        this.__runNotifyProps(props, this.constructor.__notifyProps);\r\n      }\r\n\r\n      if (!wasReadyInvoked) {\r\n        this.ready();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set several properties at once and perform synchronous update.\r\n     * @protected\r\n     */\r\n    setProperties(props) {\r\n      Object.entries(props).forEach(([name, value]) => {\r\n        // Use private key and not setter to not trigger\r\n        // update for properties marked as `sync: true`.\r\n        const key = this.constructor.__propKeys.get(name);\r\n        const oldValue = this[key];\r\n        this[key] = value;\r\n        this.requestUpdate(name, oldValue);\r\n      });\r\n\r\n      // Perform sync update\r\n      if (this.hasUpdated) {\r\n        this.performUpdate();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _createMethodObserver(observer) {\r\n      const dynamicObservers = getOrCreateMap(this, '__dynamicMethodObservers');\r\n      const { method, observerProps } = parseObserver(observer);\r\n      dynamicObservers.set(method, observerProps);\r\n    }\r\n\r\n    /** @protected */\r\n    _createPropertyObserver(property, method) {\r\n      const dynamicObservers = getOrCreateMap(this, '__dynamicPropertyObservers');\r\n      dynamicObservers.set(method, property);\r\n    }\r\n\r\n    /** @private */\r\n    __runComplexObservers(props, observers) {\r\n      observers.forEach((observerProps, method) => {\r\n        if (observerProps.some((prop) => props.has(prop))) {\r\n          if (!this[method]) {\r\n            console.warn(`observer method ${method} not defined`);\r\n          } else {\r\n            this[method](...observerProps.map((prop) => this[prop]));\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __runDynamicObservers(props, observers) {\r\n      observers.forEach((prop, method) => {\r\n        if (props.has(prop) && this[method]) {\r\n          this[method](this[prop], props.get(prop));\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __runObservers(props, observers) {\r\n      props.forEach((v, k) => {\r\n        const observer = observers.get(k);\r\n        if (observer !== undefined && this[observer]) {\r\n          this[observer](this[k], v);\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    __runNotifyProps(props, notifyProps) {\r\n      props.forEach((_, k) => {\r\n        if (notifyProps.has(k)) {\r\n          this.dispatchEvent(\r\n            new CustomEvent(`${camelToDash(k)}-changed`, {\r\n              detail: {\r\n                value: this[k],\r\n              },\r\n            }),\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @protected */\r\n    _get(path, object) {\r\n      return get(path, object);\r\n    }\r\n\r\n    /** @protected */\r\n    _set(path, value, object) {\r\n      set(path, value, object);\r\n    }\r\n  }\r\n\r\n  return PolylitMixinClass;\r\n};\r\n\r\nexport const PolylitMixin = dedupeMixin(PolylitMixinImplementation);\r\n"],
  "mappings": "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",
  "names": ["node"]
}

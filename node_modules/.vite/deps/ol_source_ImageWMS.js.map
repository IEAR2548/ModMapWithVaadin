{
  "version": 3,
  "sources": ["../../ol/src/reproj/Image.js", "../../ol/src/source/Image.js", "../../ol/src/source/ImageWMS.js"],
  "sourcesContent": ["/**\r\n * @module ol/reproj/Image\r\n */\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageBase from '../ImageBase.js';\r\nimport ImageState from '../ImageState.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {\r\n  calculateSourceResolution,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport {getCenter, getHeight, getIntersection, getWidth} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected image.\r\n * See {@link module:ol/source/Image~ImageSource}.\r\n */\r\nclass ReprojImage extends ImageBase {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\r\n   * @param {number} targetResolution Target resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {FunctionType} getImageFunction\r\n   *     Function returning source images (extent, resolution, pixelRatio).\r\n   * @param {boolean} interpolate Use linear interpolation when resampling.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    targetProj,\r\n    targetExtent,\r\n    targetResolution,\r\n    pixelRatio,\r\n    getImageFunction,\r\n    interpolate\r\n  ) {\r\n    const maxSourceExtent = sourceProj.getExtent();\r\n    const maxTargetExtent = targetProj.getExtent();\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    const targetCenter = getCenter(limitedTargetExtent);\r\n    const sourceResolution = calculateSourceResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      targetCenter,\r\n      targetResolution\r\n    );\r\n\r\n    const errorThresholdInPixels = ERROR_THRESHOLD;\r\n\r\n    const triangulation = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution\r\n    );\r\n\r\n    const sourceExtent = triangulation.calculateSourceExtent();\r\n    const sourceImage = getImageFunction(\r\n      sourceExtent,\r\n      sourceResolution,\r\n      pixelRatio\r\n    );\r\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\r\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\r\n\r\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.targetProj_ = targetProj;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.maxSourceExtent_ = maxSourceExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = triangulation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.targetResolution_ = targetResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.targetExtent_ = targetExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageBase.js\").default}\r\n     */\r\n    this.sourceImage_ = sourceImage;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourcePixelRatio_ = sourcePixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate_ = interpolate;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\r\n    this.sourceListenerKey_ = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    if (this.state == ImageState.LOADING) {\r\n      this.unlistenSource_();\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  getProjection() {\r\n    return this.targetProj_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const sourceState = this.sourceImage_.getState();\r\n    if (sourceState == ImageState.LOADED) {\r\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\r\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\r\n\r\n      this.canvas_ = renderReprojected(\r\n        width,\r\n        height,\r\n        this.sourcePixelRatio_,\r\n        this.sourceImage_.getResolution(),\r\n        this.maxSourceExtent_,\r\n        this.targetResolution_,\r\n        this.targetExtent_,\r\n        this.triangulation_,\r\n        [\r\n          {\r\n            extent: this.sourceImage_.getExtent(),\r\n            image: this.sourceImage_.getImage(),\r\n          },\r\n        ],\r\n        0,\r\n        undefined,\r\n        this.interpolate_\r\n      );\r\n    }\r\n    this.state = sourceState;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      this.state = ImageState.LOADING;\r\n      this.changed();\r\n\r\n      const sourceState = this.sourceImage_.getState();\r\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\r\n        this.reproject_();\r\n      } else {\r\n        this.sourceListenerKey_ = listen(\r\n          this.sourceImage_,\r\n          EventType.CHANGE,\r\n          function (e) {\r\n            const sourceState = this.sourceImage_.getState();\r\n            if (\r\n              sourceState == ImageState.LOADED ||\r\n              sourceState == ImageState.ERROR\r\n            ) {\r\n              this.unlistenSource_();\r\n              this.reproject_();\r\n            }\r\n          },\r\n          this\r\n        );\r\n        this.sourceImage_.load();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSource_() {\r\n    unlistenByKey(\r\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\r\n    );\r\n    this.sourceListenerKey_ = null;\r\n  }\r\n}\r\n\r\nexport default ReprojImage;\r\n", "/**\r\n * @module ol/source/Image\r\n */\r\nimport Event from '../events/Event.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ReprojImage from '../reproj/Image.js';\r\nimport Source from './Source.js';\r\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\r\nimport {abstract} from '../util.js';\r\nimport {equals} from '../extent.js';\r\nimport {equivalent} from '../proj.js';\r\nimport {linearFindNearest} from '../array.js';\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport const ImageSourceEventType = {\r\n  /**\r\n   * Triggered when an image starts loading.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\r\n   * @api\r\n   */\r\n  IMAGELOADSTART: 'imageloadstart',\r\n\r\n  /**\r\n   * Triggered when an image finishes loading.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\r\n   * @api\r\n   */\r\n  IMAGELOADEND: 'imageloadend',\r\n\r\n  /**\r\n   * Triggered if image loading results in an error.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\r\n   * @api\r\n   */\r\n  IMAGELOADERROR: 'imageloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\r\n * type.\r\n */\r\nexport class ImageSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Image.js\").default} image The image.\r\n   */\r\n  constructor(type, image) {\r\n    super(type);\r\n\r\n    /**\r\n     * The image related to the event.\r\n     * @type {import(\"../Image.js\").default}\r\n     * @api\r\n     */\r\n    this.image = image;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\r\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * @property {import(\"./State.js\").default} [state] State.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing a single image.\r\n * @abstract\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageSource extends Source {\r\n  /**\r\n   * @param {Options} options Single image source options.\r\n   */\r\n  constructor(options) {\r\n    let interpolate =\r\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\r\n    if (options.interpolate !== undefined) {\r\n      interpolate = options.interpolate;\r\n    }\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      interpolate: interpolate,\r\n    });\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.resolutions_ =\r\n      options.resolutions !== undefined ? options.resolutions : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../reproj/Image.js\").default}\r\n     */\r\n    this.reprojectedImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.reprojectedRevision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {number} resolution Resolution.\r\n   * @return {number} Resolution.\r\n   */\r\n  findNearestResolution(resolution) {\r\n    if (this.resolutions_) {\r\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\r\n      resolution = this.resolutions_[idx];\r\n    }\r\n    return resolution;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageBase.js\").default} Single image.\r\n   */\r\n  getImage(extent, resolution, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (\r\n      !ENABLE_RASTER_REPROJECTION ||\r\n      !sourceProjection ||\r\n      !projection ||\r\n      equivalent(sourceProjection, projection)\r\n    ) {\r\n      if (sourceProjection) {\r\n        projection = sourceProjection;\r\n      }\r\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\r\n    } else {\r\n      if (this.reprojectedImage_) {\r\n        if (\r\n          this.reprojectedRevision_ == this.getRevision() &&\r\n          equivalent(this.reprojectedImage_.getProjection(), projection) &&\r\n          this.reprojectedImage_.getResolution() == resolution &&\r\n          equals(this.reprojectedImage_.getExtent(), extent)\r\n        ) {\r\n          return this.reprojectedImage_;\r\n        }\r\n        this.reprojectedImage_.dispose();\r\n        this.reprojectedImage_ = null;\r\n      }\r\n\r\n      this.reprojectedImage_ = new ReprojImage(\r\n        sourceProjection,\r\n        projection,\r\n        extent,\r\n        resolution,\r\n        pixelRatio,\r\n        function (extent, resolution, pixelRatio) {\r\n          return this.getImageInternal(\r\n            extent,\r\n            resolution,\r\n            pixelRatio,\r\n            sourceProjection\r\n          );\r\n        }.bind(this),\r\n        this.getInterpolate()\r\n      );\r\n      this.reprojectedRevision_ = this.getRevision();\r\n\r\n      return this.reprojectedImage_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageBase.js\").default} Single image.\r\n   * @protected\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Handle image change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\r\n  handleImageChange(event) {\r\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\r\n    let type;\r\n    switch (image.getState()) {\r\n      case ImageState.LOADING:\r\n        this.loading = true;\r\n        type = ImageSourceEventType.IMAGELOADSTART;\r\n        break;\r\n      case ImageState.LOADED:\r\n        this.loading = false;\r\n        type = ImageSourceEventType.IMAGELOADEND;\r\n        break;\r\n      case ImageState.ERROR:\r\n        this.loading = false;\r\n        type = ImageSourceEventType.IMAGELOADERROR;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    if (this.hasListener(type)) {\r\n      this.dispatchEvent(new ImageSourceEvent(type, image));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Default image load function for image sources that use import(\"../Image.js\").Image image\r\n * instances.\r\n * @param {import(\"../Image.js\").default} image Image.\r\n * @param {string} src Source.\r\n */\r\nexport function defaultImageLoadFunction(image, src) {\r\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\r\n}\r\n\r\nexport default ImageSource;\r\n", "/**\r\n * @module ol/source/ImageWMS\r\n */\r\n\r\nimport {DEFAULT_WMS_VERSION} from './common.js';\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport WMSServerType from './WMSServerType.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assert} from '../asserts.js';\r\nimport {assign} from '../obj.js';\r\nimport {calculateSourceResolution} from '../reproj.js';\r\nimport {ceil, floor, round} from '../math.js';\r\nimport {compareVersions} from '../string.js';\r\nimport {\r\n  containsExtent,\r\n  getCenter,\r\n  getForViewAndSize,\r\n  getHeight,\r\n  getWidth,\r\n} from '../extent.js';\r\nimport {get as getProjection, transform} from '../proj.js';\r\n\r\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\r\nconst DECIMALS = 4;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\r\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\r\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object<string,*>} params WMS request parameters.\r\n * At least a `LAYERS` param is required. `STYLES` is\r\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\r\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\r\n * twice the width and height of the map viewport, and so on. Must be `1` or\r\n * higher.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * If specified, requests will be made for these resolutions only.\r\n * @property {string} url WMS service URL.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for WMS servers providing single, untiled images.\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageWMS extends ImageSource {\r\n  /**\r\n   * @param {Options} [opt_options] ImageWMS options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    let interpolate =\r\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\r\n    if (options.interpolate !== undefined) {\r\n      interpolate = options.interpolate;\r\n    }\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: interpolate,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.v13_ = true;\r\n    this.updateV13_();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./WMSServerType.js\").default|undefined}\r\n     */\r\n    this.serverType_ =\r\n      /** @type {import(\"./WMSServerType.js\").default|undefined} */ (\r\n        options.serverType\r\n      );\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.imageSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n  }\r\n\r\n  /**\r\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\r\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\r\n   * constructed.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\r\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\r\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\r\n   *     specified here.\r\n   * @return {string|undefined} GetFeatureInfo URL.\r\n   * @api\r\n   */\r\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\r\n    if (this.url_ === undefined) {\r\n      return undefined;\r\n    }\r\n    const projectionObj = getProjection(projection);\r\n    const sourceProjectionObj = this.getProjection();\r\n\r\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\r\n      resolution = calculateSourceResolution(\r\n        sourceProjectionObj,\r\n        projectionObj,\r\n        coordinate,\r\n        resolution\r\n      );\r\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\r\n    }\r\n\r\n    const extent = getForViewAndSize(\r\n      coordinate,\r\n      resolution,\r\n      0,\r\n      GETFEATUREINFO_IMAGE_SIZE\r\n    );\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_WMS_VERSION,\r\n      'REQUEST': 'GetFeatureInfo',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n      'QUERY_LAYERS': this.params_['LAYERS'],\r\n    };\r\n    assign(baseParams, this.params_, params);\r\n\r\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\r\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\r\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\r\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\r\n\r\n    return this.getRequestUrl_(\r\n      extent,\r\n      GETFEATUREINFO_IMAGE_SIZE,\r\n      1,\r\n      sourceProjectionObj || projectionObj,\r\n      baseParams\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\r\n   * resolution and possibly including any passed specific parameters. Returns\r\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\r\n   *\r\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\r\n   *     will not be calculated and included in URL.\r\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\r\n   *     request is generated for this wms layer, else it will try to use the\r\n   *     configured wms layer. Default `FORMAT` is `image/png`.\r\n   *     `VERSION` should not be specified here.\r\n   * @return {string|undefined} GetLegendGraphic URL.\r\n   * @api\r\n   */\r\n  getLegendUrl(resolution, params) {\r\n    if (this.url_ === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_WMS_VERSION,\r\n      'REQUEST': 'GetLegendGraphic',\r\n      'FORMAT': 'image/png',\r\n    };\r\n\r\n    if (params === undefined || params['LAYER'] === undefined) {\r\n      const layers = this.params_.LAYERS;\r\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\r\n      if (!isSingleLayer) {\r\n        return undefined;\r\n      }\r\n      baseParams['LAYER'] = layers;\r\n    }\r\n\r\n    if (resolution !== undefined) {\r\n      const mpu = this.getProjection()\r\n        ? this.getProjection().getMetersPerUnit()\r\n        : 1;\r\n      const pixelSize = 0.00028;\r\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\r\n    }\r\n\r\n    assign(baseParams, params);\r\n\r\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    if (this.url_ === undefined) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n\r\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const imageResolution = resolution / pixelRatio;\r\n\r\n    const center = getCenter(extent);\r\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\r\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\r\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\r\n      viewWidth,\r\n      viewHeight,\r\n    ]);\r\n    const requestWidth = ceil(\r\n      (this.ratio_ * getWidth(extent)) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    const requestHeight = ceil(\r\n      (this.ratio_ * getHeight(extent)) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\r\n      requestWidth,\r\n      requestHeight,\r\n    ]);\r\n\r\n    const image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), viewExtent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    const params = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_WMS_VERSION,\r\n      'REQUEST': 'GetMap',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n    };\r\n    assign(params, this.params_);\r\n\r\n    this.imageSize_[0] = round(\r\n      getWidth(requestExtent) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    this.imageSize_[1] = round(\r\n      getHeight(requestExtent) / imageResolution,\r\n      DECIMALS\r\n    );\r\n\r\n    const url = this.getRequestUrl_(\r\n      requestExtent,\r\n      this.imageSize_,\r\n      pixelRatio,\r\n      projection,\r\n      params\r\n    );\r\n\r\n    this.image_ = new ImageWrapper(\r\n      requestExtent,\r\n      resolution,\r\n      pixelRatio,\r\n      url,\r\n      this.crossOrigin_,\r\n      this.imageLoadFunction_\r\n    );\r\n\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.image_.addEventListener(\r\n      EventType.CHANGE,\r\n      this.handleImageChange.bind(this)\r\n    );\r\n\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\r\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\r\n\r\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\r\n\r\n    if (!('STYLES' in this.params_)) {\r\n      params['STYLES'] = '';\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      switch (this.serverType_) {\r\n        case WMSServerType.GEOSERVER:\r\n          const dpi = (90 * pixelRatio + 0.5) | 0;\r\n          if ('FORMAT_OPTIONS' in params) {\r\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\r\n          } else {\r\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\r\n          }\r\n          break;\r\n        case WMSServerType.MAPSERVER:\r\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\r\n          break;\r\n        case WMSServerType.CARMENTA_SERVER:\r\n        case WMSServerType.QGIS:\r\n          params['DPI'] = 90 * pixelRatio;\r\n          break;\r\n        default:\r\n          assert(false, 8); // Unknown `serverType` configured\r\n          break;\r\n      }\r\n    }\r\n\r\n    params['WIDTH'] = size[0];\r\n    params['HEIGHT'] = size[1];\r\n\r\n    const axisOrientation = projection.getAxisOrientation();\r\n    let bbox;\r\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\r\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\r\n    } else {\r\n      bbox = extent;\r\n    }\r\n    params['BBOX'] = bbox.join(',');\r\n\r\n    return appendParams(/** @type {string} */ (this.url_), params);\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this WMS source.\r\n   * @return {string|undefined} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string|undefined} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    if (url != this.url_) {\r\n      this.url_ = url;\r\n      this.image_ = null;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.updateV13_();\r\n    this.image_ = null;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateV13_() {\r\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\r\n    this.v13_ = compareVersions(version, '1.3') >= 0;\r\n  }\r\n}\r\n\r\nexport default ImageWMS;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAA;;EAAA,SAAA,QAAA;AAA0B,cAAAA,cAAA,MAAA;AAWxB,aAAAA,aACE,YACA,YACA,cACA,kBACA,YACA,kBACA,aAAW;AAPb,UAAA,QAAA;AASE,UAAM,kBAAkB,WAAW,UAAS;AAC5C,UAAM,kBAAkB,WAAW,UAAS;AAE5C,UAAM,sBAAsB,kBACxB,gBAAgB,cAAc,eAAe,IAC7C;AAEJ,UAAM,eAAe,UAAU,mBAAmB;AAClD,UAAM,mBAAmB,0BACvB,YACA,YACA,cACA,gBAAgB;AAGlB,UAAM,yBAAyB;AAE/B,UAAM,gBAAgB,IAAI,sBACxB,YACA,YACA,qBACA,iBACA,mBAAmB,wBACnB,gBAAgB;AAGlB,UAAM,eAAe,cAAc,sBAAqB;AACxD,UAAM,cAAc,iBAClB,cACA,kBACA,UAAU;AAEZ,UAAM,QAAQ,cAAc,mBAAW,OAAO,mBAAW;AACzD,UAAM,mBAAmB,cAAc,YAAY,cAAa,IAAK;cAErE,OAAA,KAAA,MAAM,cAAc,kBAAkB,kBAAkB,KAAK,KAAC;AAM9D,YAAK,cAAc;AAMnB,YAAK,mBAAmB;AAMxB,YAAK,iBAAiB;AAMtB,YAAK,oBAAoB;AAMzB,YAAK,gBAAgB;AAMrB,YAAK,eAAe;AAMpB,YAAK,oBAAoB;AAMzB,YAAK,eAAe;AAMpB,YAAK,UAAU;AAMf,YAAK,qBAAqB;;IAC5B;AAKA,IAAAA,aAAA,UAAA,kBAAA,WAAA;AACE,UAAI,KAAK,SAAS,mBAAW,SAAS;AACpC,aAAK,gBAAe;;AAEtB,aAAA,UAAM,gBAAe,KAAA,IAAA;IACvB;AAKA,IAAAA,aAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAKA,IAAAA,aAAA,UAAA,gBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAKA,IAAAA,aAAA,UAAA,aAAA,WAAA;AACE,UAAM,cAAc,KAAK,aAAa,SAAQ;AAC9C,UAAI,eAAe,mBAAW,QAAQ;AACpC,YAAM,QAAQ,SAAS,KAAK,aAAa,IAAI,KAAK;AAClD,YAAM,SAAS,UAAU,KAAK,aAAa,IAAI,KAAK;AAEpD,aAAK,UAAU,OACb,OACA,QACA,KAAK,mBACL,KAAK,aAAa,cAAa,GAC/B,KAAK,kBACL,KAAK,mBACL,KAAK,eACL,KAAK,gBACL;UACE;YACE,QAAQ,KAAK,aAAa,UAAS;YACnC,OAAO,KAAK,aAAa,SAAQ;;WAGrC,GACA,QACA,KAAK,YAAY;;AAGrB,WAAK,QAAQ;AACb,WAAK,QAAO;IACd;AAKA,IAAAA,aAAA,UAAA,OAAA,WAAA;AACE,UAAI,KAAK,SAAS,mBAAW,MAAM;AACjC,aAAK,QAAQ,mBAAW;AACxB,aAAK,QAAO;AAEZ,YAAM,cAAc,KAAK,aAAa,SAAQ;AAC9C,YAAI,eAAe,mBAAW,UAAU,eAAe,mBAAW,OAAO;AACvE,eAAK,WAAU;eACV;AACL,eAAK,qBAAqB,OACxB,KAAK,cACL,kBAAU,QACV,SAAU,GAAC;AACT,gBAAMC,eAAc,KAAK,aAAa,SAAQ;AAC9C,gBACEA,gBAAe,mBAAW,UAC1BA,gBAAe,mBAAW,OAC1B;AACA,mBAAK,gBAAe;AACpB,mBAAK,WAAU;;UAEnB,GACA,IAAI;AAEN,eAAK,aAAa,KAAI;;;IAG5B;AAKA,IAAAD,aAAA,UAAA,kBAAA,WAAA;AACE;;QACoD,KAAK;MAAmB;AAE5E,WAAK,qBAAqB;IAC5B;AACF,WAAAA;EAAA,EAxN0B,iBAAS;;AA0NnC,IAAAE,iBAAe;;;;;;;;;;;;;;;;;;;;;;ACnOR,IAAM,uBAAuB;;;;;;EAMlC,gBAAgB;;;;;;EAOhB,cAAc;;;;;;EAOd,gBAAgB;;AAYlB,IAAA;;EAAA,SAAA,QAAA;AAAsC,IAAAC,WAAAC,mBAAA,MAAA;AAKpC,aAAAA,kBAAY,MAAM,OAAK;AAAvB,UAAA,QACE,OAAA,KAAA,MAAM,IAAI,KAAC;AAOX,YAAK,QAAQ;;IACf;AACF,WAAAA;EAAA,EAfsC,aAAK;;AA8C3C,IAAA;;EAAA,SAAA,QAAA;AAA0B,IAAAC,WAAAC,cAAA,MAAA;AAIxB,aAAAA,aAAY,SAAO;AAAnB,UAAA,QAAA;AACE,UAAI,cACF,QAAQ,mBAAmB,SAAY,QAAQ,iBAAiB;AAClE,UAAI,QAAQ,gBAAgB,QAAW;AACrC,sBAAc,QAAQ;;cAGxB,OAAA,KAAA,MAAM;QACJ,cAAc,QAAQ;QACtB,YAAY,QAAQ;QACpB,OAAO,QAAQ;QACf;OACD,KAAC;AAKF,YAAK;AAKL,YAAK;AAKL,YAAK;AAML,YAAK,eACH,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAM5D,YAAK,oBAAoB;AAMzB,YAAK,uBAAuB;;IAC9B;AAKA,IAAAA,aAAA,UAAA,iBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,aAAA,UAAA,wBAAA,SAAsB,YAAU;AAC9B,UAAI,KAAK,cAAc;AACrB,YAAM,MAAM,kBAAkB,KAAK,cAAc,YAAY,CAAC;AAC9D,qBAAa,KAAK,aAAa,GAAG;;AAEpC,aAAO;IACT;AASA,IAAAA,aAAA,UAAA,WAAA,SAAS,QAAQ,YAAY,YAAY,YAAU;AACjD,UAAM,mBAAmB,KAAK,cAAa;AAC3C,UACE,CAAC,8BACD,CAAC,oBACD,CAAC,cACD,WAAW,kBAAkB,UAAU,GACvC;AACA,YAAI,kBAAkB;AACpB,uBAAa;;AAEf,eAAO,KAAK,iBAAiB,QAAQ,YAAY,YAAY,UAAU;aAClE;AACL,YAAI,KAAK,mBAAmB;AAC1B,cACE,KAAK,wBAAwB,KAAK,YAAW,KAC7C,WAAW,KAAK,kBAAkB,cAAa,GAAI,UAAU,KAC7D,KAAK,kBAAkB,cAAa,KAAM,cAC1C,OAAO,KAAK,kBAAkB,UAAS,GAAI,MAAM,GACjD;AACA,mBAAO,KAAK;;AAEd,eAAK,kBAAkB,QAAO;AAC9B,eAAK,oBAAoB;;AAG3B,aAAK,oBAAoB,IAAIC,eAC3B,kBACA,YACA,QACA,YACA,aACA,SAAUC,SAAQC,aAAYC,aAAU;AACtC,iBAAO,KAAK,iBACVF,SACAC,aACAC,aACA,gBAAgB;QAEpB,GAAE,KAAK,IAAI,GACX,KAAK,eAAc,CAAE;AAEvB,aAAK,uBAAuB,KAAK,YAAW;AAE5C,eAAO,KAAK;;IAEhB;AAWA,IAAAJ,aAAA,UAAA,mBAAA,SAAiB,QAAQ,YAAY,YAAY,YAAU;AACzD,aAAO,SAAQ;IACjB;AAOA,IAAAA,aAAA,UAAA,oBAAA,SAAkB,OAAK;AACrB,UAAM;;QAAsD,MAAM;;AAClE,UAAI;AACJ,cAAQ,MAAM,SAAQ,GAAI;QACxB,KAAK,mBAAW;AACd,eAAK,UAAU;AACf,iBAAO,qBAAqB;AAC5B;QACF,KAAK,mBAAW;AACd,eAAK,UAAU;AACf,iBAAO,qBAAqB;AAC5B;QACF,KAAK,mBAAW;AACd,eAAK,UAAU;AACf,iBAAO,qBAAqB;AAC5B;QACF;AACE;;AAEJ,UAAI,KAAK,YAAY,IAAI,GAAG;AAC1B,aAAK,cAAc,IAAI,iBAAiB,MAAM,KAAK,CAAC;;IAExD;AACF,WAAAA;EAAA,EAzK0B,cAAM;;AAiL1B,SAAU,yBAAyB,OAAO,KAAG;AACA,EAAC,MAAM,SAAQ,EAAI,MAAM;AAC5E;AAEA,IAAAC,iBAAe;;;;;;;;;;;;;;;;;;;;;;ACtPf,IAAM,WAAW;AAMjB,IAAM,4BAA4B,CAAC,KAAK,GAAG;AAoC3C,IAAA;;EAAA,SAAA,QAAA;AAAuB,IAAAI,WAAAC,WAAA,MAAA;AAIrB,aAAAA,UAAY,aAAW;AAAvB,UAAA,QAAA;AACE,UAAM,UAAU,cAAc,cAAc,CAAA;AAE5C,UAAI,cACF,QAAQ,mBAAmB,SAAY,QAAQ,iBAAiB;AAClE,UAAI,QAAQ,gBAAgB,QAAW;AACrC,sBAAc,QAAQ;;cAGxB,OAAA,KAAA,MAAM;QACJ,cAAc,QAAQ;QACtB;QACA,YAAY,QAAQ;QACpB,aAAa,QAAQ;OACtB,KAAC;AAMF,YAAK,eACH,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAM5D,YAAK,OAAO,QAAQ;AAMpB,YAAK,qBACH,QAAQ,sBAAsB,SAC1B,QAAQ,oBACR;AAMN,YAAK,UAAU,QAAQ,UAAU,CAAA;AAMjC,YAAK,OAAO;AACZ,YAAK,WAAU;AAMf,YAAK;MAED,QAAQ;AAOZ,YAAK,SAAS,QAAQ,UAAU,SAAY,QAAQ,QAAQ;AAM5D,YAAK,SAAS;AAMd,YAAK,aAAa,CAAC,GAAG,CAAC;AAMvB,YAAK,oBAAoB;AAMzB,YAAK,SAAS,QAAQ,UAAU,SAAY,QAAQ,QAAQ;;IAC9D;AAgBA,IAAAA,UAAA,UAAA,oBAAA,SAAkB,YAAY,YAAY,YAAY,QAAM;AAC1D,UAAI,KAAK,SAAS,QAAW;AAC3B,eAAO;;AAET,UAAM,gBAAgB,IAAc,UAAU;AAC9C,UAAM,sBAAsB,KAAK,cAAa;AAE9C,UAAI,uBAAuB,wBAAwB,eAAe;AAChE,qBAAa,0BACX,qBACA,eACA,YACA,UAAU;AAEZ,qBAAa,UAAU,YAAY,eAAe,mBAAmB;;AAGvE,UAAM,SAAS,kBACb,YACA,YACA,GACA,yBAAyB;AAG3B,UAAM,aAAa;QACjB,WAAW;QACX,WAAW;QACX,WAAW;QACX,UAAU;QACV,eAAe;QACf,gBAAgB,KAAK,QAAQ,QAAQ;;AAEvC,aAAO,YAAY,KAAK,SAAS,MAAM;AAEvC,UAAM,IAAI,OAAO,WAAW,CAAC,IAAI,OAAO,CAAC,KAAK,YAAY,QAAQ;AAClE,UAAM,IAAI,OAAO,OAAO,CAAC,IAAI,WAAW,CAAC,KAAK,YAAY,QAAQ;AAClE,iBAAW,KAAK,OAAO,MAAM,GAAG,IAAI;AACpC,iBAAW,KAAK,OAAO,MAAM,GAAG,IAAI;AAEpC,aAAO,KAAK,eACV,QACA,2BACA,GACA,uBAAuB,eACvB,UAAU;IAEd;AAgBA,IAAAA,UAAA,UAAA,eAAA,SAAa,YAAY,QAAM;AAC7B,UAAI,KAAK,SAAS,QAAW;AAC3B,eAAO;;AAGT,UAAM,aAAa;QACjB,WAAW;QACX,WAAW;QACX,WAAW;QACX,UAAU;;AAGZ,UAAI,WAAW,UAAa,OAAO,OAAO,MAAM,QAAW;AACzD,YAAM,SAAS,KAAK,QAAQ;AAC5B,YAAM,gBAAgB,CAAC,MAAM,QAAQ,MAAM,KAAK,OAAO,WAAW;AAClE,YAAI,CAAC,eAAe;AAClB,iBAAO;;AAET,mBAAW,OAAO,IAAI;;AAGxB,UAAI,eAAe,QAAW;AAC5B,YAAM,MAAM,KAAK,cAAa,IAC1B,KAAK,cAAa,EAAG,iBAAgB,IACrC;AACJ,YAAM,YAAY;AAClB,mBAAW,OAAO,IAAK,aAAa,MAAO;;AAG7C,aAAO,YAAY,MAAM;AAEzB,aAAO;;QAAoC,KAAK;QAAO;MAAU;IACnE;AAQA,IAAAA,UAAA,UAAA,YAAA,WAAA;AACE,aAAO,KAAK;IACd;AASA,IAAAA,UAAA,UAAA,mBAAA,SAAiB,QAAQ,YAAY,YAAY,YAAU;AACzD,UAAI,KAAK,SAAS,QAAW;AAC3B,eAAO;;AAGT,mBAAa,KAAK,sBAAsB,UAAU;AAElD,UAAI,cAAc,MAAM,CAAC,KAAK,UAAU,KAAK,gBAAgB,SAAY;AACvE,qBAAa;;AAGf,UAAM,kBAAkB,aAAa;AAErC,UAAM,SAAS,UAAU,MAAM;AAC/B,UAAM,YAAY,KAAK,SAAS,MAAM,IAAI,iBAAiB,QAAQ;AACnE,UAAM,aAAa,KAAK,UAAU,MAAM,IAAI,iBAAiB,QAAQ;AACrE,UAAM,aAAa,kBAAkB,QAAQ,iBAAiB,GAAG;QAC/D;QACA;OACD;AACD,UAAM,eAAe,KAClB,KAAK,SAAS,SAAS,MAAM,IAAK,iBACnC,QAAQ;AAEV,UAAM,gBAAgB,KACnB,KAAK,SAAS,UAAU,MAAM,IAAK,iBACpC,QAAQ;AAEV,UAAM,gBAAgB,kBAAkB,QAAQ,iBAAiB,GAAG;QAClE;QACA;OACD;AAED,UAAM,QAAQ,KAAK;AACnB,UACE,SACA,KAAK,qBAAqB,KAAK,YAAW,KAC1C,MAAM,cAAa,KAAM,cACzB,MAAM,cAAa,KAAM,cACzB,eAAe,MAAM,UAAS,GAAI,UAAU,GAC5C;AACA,eAAO;;AAGT,UAAM,SAAS;QACb,WAAW;QACX,WAAW;QACX,WAAW;QACX,UAAU;QACV,eAAe;;AAEjB,aAAO,QAAQ,KAAK,OAAO;AAE3B,WAAK,WAAW,CAAC,IAAI,MACnB,SAAS,aAAa,IAAI,iBAC1B,QAAQ;AAEV,WAAK,WAAW,CAAC,IAAI,MACnB,UAAU,aAAa,IAAI,iBAC3B,QAAQ;AAGV,UAAM,MAAM,KAAK,eACf,eACA,KAAK,YACL,YACA,YACA,MAAM;AAGR,WAAK,SAAS,IAAI,cAChB,eACA,YACA,YACA,KACA,KAAK,cACL,KAAK,kBAAkB;AAGzB,WAAK,oBAAoB,KAAK,YAAW;AAEzC,WAAK,OAAO,iBACV,kBAAU,QACV,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAGnC,aAAO,KAAK;IACd;AAOA,IAAAA,UAAA,UAAA,uBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAWA,IAAAA,UAAA,UAAA,iBAAA,SAAe,QAAQ,MAAM,YAAY,YAAY,QAAM;AACzD,aAAO,KAAK,SAAS,QAAW,CAAC;AAEjC,aAAO,KAAK,OAAO,QAAQ,KAAK,IAAI,WAAW,QAAO;AAEtD,UAAI,EAAE,YAAY,KAAK,UAAU;AAC/B,eAAO,QAAQ,IAAI;;AAGrB,UAAI,cAAc,GAAG;AACnB,gBAAQ,KAAK,aAAa;UACxB,KAAK,sBAAc;AACjB,gBAAM,MAAO,KAAK,aAAa,MAAO;AACtC,gBAAI,oBAAoB,QAAQ;AAC9B,qBAAO,gBAAgB,KAAK,UAAU;mBACjC;AACL,qBAAO,gBAAgB,IAAI,SAAS;;AAEtC;UACF,KAAK,sBAAc;AACjB,mBAAO,gBAAgB,IAAI,KAAK;AAChC;UACF,KAAK,sBAAc;UACnB,KAAK,sBAAc;AACjB,mBAAO,KAAK,IAAI,KAAK;AACrB;UACF;AACE,mBAAO,OAAO,CAAC;AACf;;;AAIN,aAAO,OAAO,IAAI,KAAK,CAAC;AACxB,aAAO,QAAQ,IAAI,KAAK,CAAC;AAEzB,UAAM,kBAAkB,WAAW,mBAAkB;AACrD,UAAI;AACJ,UAAI,KAAK,QAAQ,gBAAgB,OAAO,GAAG,CAAC,KAAK,MAAM;AACrD,eAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;aAC7C;AACL,eAAO;;AAET,aAAO,MAAM,IAAI,KAAK,KAAK,GAAG;AAE9B,aAAO;;QAAoC,KAAK;QAAO;MAAM;IAC/D;AAOA,IAAAA,UAAA,UAAA,SAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,UAAA,UAAA,uBAAA,SAAqB,mBAAiB;AACpC,WAAK,SAAS;AACd,WAAK,qBAAqB;AAC1B,WAAK,QAAO;IACd;AAOA,IAAAA,UAAA,UAAA,SAAA,SAAO,KAAG;AACR,UAAI,OAAO,KAAK,MAAM;AACpB,aAAK,OAAO;AACZ,aAAK,SAAS;AACd,aAAK,QAAO;;IAEhB;AAOA,IAAAA,UAAA,UAAA,eAAA,SAAa,QAAM;AACjB,aAAO,KAAK,SAAS,MAAM;AAC3B,WAAK,WAAU;AACf,WAAK,SAAS;AACd,WAAK,QAAO;IACd;AAKA,IAAAA,UAAA,UAAA,aAAA,WAAA;AACE,UAAM,UAAU,KAAK,QAAQ,SAAS,KAAK;AAC3C,WAAK,OAAO,gBAAgB,SAAS,KAAK,KAAK;IACjD;AACF,WAAAA;EAAA,EA5auBC,cAAW;;AA8alC,IAAA,mBAAe;",
  "names": ["ReprojImage", "sourceState", "Image_default", "__extends", "ImageSourceEvent", "__extends", "ImageSource", "Image_default", "extent", "resolution", "pixelRatio", "__extends", "ImageWMS", "Image_default"]
}

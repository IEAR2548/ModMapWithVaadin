{
  "version": 3,
  "sources": ["../../@vaadin/overlay/theme/lumo/vaadin-overlay-styles.js", "../../@vaadin/overlay/src/vaadin-overlay.js"],
  "sourcesContent": ["import { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\r\nimport { registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles('vaadin-overlay', overlay, { moduleId: 'lumo-vaadin-overlay' });\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { OverlayMixin } from './vaadin-overlay-mixin.js';\r\nimport { overlayStyles } from './vaadin-overlay-styles.js';\r\n\r\nregisterStyles('vaadin-overlay', overlayStyles, { moduleId: 'vaadin-overlay-styles' });\r\n\r\n/**\r\n * `<vaadin-overlay>` is a Web Component for creating overlays. The content of the overlay\r\n * can be populated imperatively by using `renderer` callback function.\r\n *\r\n * ### Rendering\r\n *\r\n * The renderer function provides `root`, `owner`, `model` arguments when applicable.\r\n * Generate DOM content by using `model` object properties if needed, append it to the `root`\r\n * element and control the state of the host element by accessing `owner`. Before generating new\r\n * content, users are able to check if there is already content in `root` for reusing it.\r\n *\r\n * ```html\r\n * <vaadin-overlay id=\"overlay\"></vaadin-overlay>\r\n * ```\r\n * ```js\r\n * const overlay = document.querySelector('#overlay');\r\n * overlay.renderer = function(root) {\r\n *  root.textContent = \"Overlay content\";\r\n * };\r\n * ```\r\n *\r\n * Renderer is called on the opening of the overlay and each time the related model is updated.\r\n * DOM generated during the renderer call can be reused\r\n * in the next renderer call and will be provided with the `root` argument.\r\n * On first call it will be empty.\r\n *\r\n * ### Styling\r\n *\r\n * The following Shadow DOM parts are available for styling:\r\n *\r\n * Part name  | Description\r\n * -----------|---------------------------------------------------------|\r\n * `backdrop` | Backdrop of the overlay\r\n * `overlay`  | Container for position/sizing/alignment of the content\r\n * `content`  | Content of the overlay\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute | Description | Part\r\n * ---|---|---\r\n * `opening` | Applied just after the overlay is attached to the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\r\n * `closing` | Applied just before the overlay is detached from the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\r\n *\r\n * The following custom CSS properties are available for styling:\r\n *\r\n * Custom CSS property | Description | Default value\r\n * ---|---|---\r\n * `--vaadin-overlay-viewport-bottom` | Bottom offset of the visible viewport area | `0` or detected offset\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n * @fires {CustomEvent} vaadin-overlay-open - Fired after the overlay is opened.\r\n * @fires {CustomEvent} vaadin-overlay-close - Fired when the opened overlay is about to be closed. Calling `preventDefault()` on the event cancels the closing.\r\n * @fires {CustomEvent} vaadin-overlay-closing - Fired when the overlay starts to close. Closing the overlay can be asynchronous depending on the animation.\r\n * @fires {CustomEvent} vaadin-overlay-closed - Fired after the overlay is closed.\r\n * @fires {CustomEvent} vaadin-overlay-outside-click - Fired before the overlay is closed on outside click. Calling `preventDefault()` on the event cancels the closing.\r\n * @fires {CustomEvent} vaadin-overlay-escape-press - Fired before the overlay is closed on Escape key press. Calling `preventDefault()` on the event cancels the closing.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ThemableMixin\r\n * @mixes DirMixin\r\n * @mixes OverlayMixin\r\n */\r\nclass Overlay extends OverlayMixin(ThemableMixin(DirMixin(PolymerElement))) {\r\n  static get template() {\r\n    return html`\r\n      <div id=\"backdrop\" part=\"backdrop\" hidden$=\"[[!withBackdrop]]\"></div>\r\n      <div part=\"overlay\" id=\"overlay\" tabindex=\"0\">\r\n        <div part=\"content\" id=\"content\">\r\n          <slot></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-overlay';\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    processTemplates(this);\r\n  }\r\n\r\n  /**\r\n   * @event vaadin-overlay-open\r\n   * Fired after the overlay is opened.\r\n   */\r\n\r\n  /**\r\n   * @event vaadin-overlay-close\r\n   * Fired when the opened overlay is about to be closed.\r\n   * Calling `preventDefault()` on the event cancels the closing.\r\n   */\r\n\r\n  /**\r\n   * @event vaadin-overlay-closing\r\n   * Fired when the overlay starts to close.\r\n   * Closing the overlay can be asynchronous depending on the animation.\r\n   */\r\n\r\n  /**\r\n   * @event vaadin-overlay-closed\r\n   * Fired after the overlay is closed.\r\n   */\r\n\r\n  /**\r\n   * @event vaadin-overlay-escape-press\r\n   * Fired before the overlay is closed on Escape key press.\r\n   * Calling `preventDefault()` on the event cancels the closing.\r\n   */\r\n\r\n  /**\r\n   * @event vaadin-overlay-outside-click\r\n   * Fired before the overlay is closed on outside click.\r\n   * Calling `preventDefault()` on the event cancels the closing.\r\n   */\r\n}\r\n\r\ndefineCustomElement(Overlay);\r\n\r\nexport { Overlay };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,eAAe,kBAAkB,SAAS,EAAE,UAAU,sBAAsB,CAAC;;;ACU7E,eAAe,kBAAkB,eAAe,EAAE,UAAU,wBAAwB,CAAC;AAmErF,IAAM,UAAN,cAAsB,aAAa,cAAc,SAAS,cAAc,CAAC,CAAC,EAAE;AAAA,EAC1E,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT;AAAA,EAEA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,qBAAiB,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCF;AAEA,oBAAoB,OAAO;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/accordion/src/vaadin-accordion-mixin.js", "../../@vaadin/accordion/src/vaadin-accordion.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { KeyboardDirectionMixin } from '@vaadin/a11y-base/src/keyboard-direction-mixin.js';\r\nimport { SlotObserver } from '@vaadin/component-base/src/slot-observer.js';\r\n\r\n/**\r\n * A mixin providing common accordion functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes KeyboardDirectionMixin\r\n */\r\nexport const AccordionMixin = (superClass) =>\r\n  class AccordionMixinClass extends KeyboardDirectionMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The index of currently opened panel. First panel is opened by\r\n         * default. Only one panel can be opened at the same time.\r\n         * Setting null or undefined closes all the accordion panels.\r\n         * @type {number}\r\n         */\r\n        opened: {\r\n          type: Number,\r\n          value: 0,\r\n          notify: true,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * The list of `<vaadin-accordion-panel>` child elements.\r\n         * It is populated from the elements passed to the light DOM,\r\n         * and updated dynamically when adding or removing panels.\r\n         * @type {!Array<!AccordionPanel>}\r\n         */\r\n        items: {\r\n          type: Array,\r\n          readOnly: true,\r\n          notify: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_updateItems(items, opened)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this._boundUpdateOpened = this._updateOpened.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Override getter from `KeyboardDirectionMixin`\r\n     * to check if the heading element has focus.\r\n     *\r\n     * @return {Element | null}\r\n     * @protected\r\n     * @override\r\n     */\r\n    get focused() {\r\n      return (this._getItems() || []).find((item) => isElementFocused(item.focusElement));\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    focus() {\r\n      if (this._observer) {\r\n        this._observer.flush();\r\n      }\r\n      super.focus();\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      const slot = this.shadowRoot.querySelector('slot');\r\n      this._observer = new SlotObserver(slot, (info) => {\r\n        this._setItems(this._filterItems(Array.from(this.children)));\r\n\r\n        this._filterItems(info.addedNodes).forEach((el) => {\r\n          el.addEventListener('opened-changed', this._boundUpdateOpened);\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `KeyboardDirectionMixin`\r\n     * to use the stored list of accordion panels as items.\r\n     *\r\n     * @return {Element[]}\r\n     * @protected\r\n     * @override\r\n     */\r\n    _getItems() {\r\n      return this.items;\r\n    }\r\n\r\n    /**\r\n     * @param {!Array<!Element>} array\r\n     * @return {!Array<!AccordionPanel>}\r\n     * @protected\r\n     */\r\n    _filterItems(array) {\r\n      return array.filter((el) => el instanceof customElements.get('vaadin-accordion-panel'));\r\n    }\r\n\r\n    /** @private */\r\n    _updateItems(items, opened) {\r\n      if (items) {\r\n        const itemToOpen = items[opened];\r\n        items.forEach((item) => {\r\n          item.opened = item === itemToOpen;\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`\r\n     * to only handle details toggle buttons events.\r\n     *\r\n     * @param {!KeyboardEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(event) {\r\n      // Only check keyboard events on details toggle buttons\r\n      if (!this.items.some((item) => item.focusElement === event.target)) {\r\n        return;\r\n      }\r\n\r\n      super._onKeyDown(event);\r\n    }\r\n\r\n    /** @private */\r\n    _updateOpened(e) {\r\n      const target = this._filterItems(e.composedPath())[0];\r\n      const idx = this.items.indexOf(target);\r\n      if (e.detail.value) {\r\n        if (target.disabled || idx === -1) {\r\n          return;\r\n        }\r\n\r\n        this.opened = idx;\r\n      } else if (!this.items.some((item) => item.opened)) {\r\n        this.opened = null;\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-accordion-panel.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { AccordionMixin } from './vaadin-accordion-mixin.js';\r\n\r\n/**\r\n * `<vaadin-accordion>` is a Web Component implementing accordion widget:\r\n * a vertically stacked set of expandable panels. The component should be\r\n * used as a wrapper for two or more `<vaadin-accordion-panel>` components.\r\n *\r\n * Panel headings function as controls that enable users to open (expand)\r\n * or hide (collapse) their associated sections of content. The user can\r\n * toggle panels by mouse click, Enter and Space keys.\r\n *\r\n * Only one panel can be opened at a time, opening a new one forces\r\n * previous panel to close and hide its content.\r\n *\r\n * ```\r\n * <vaadin-accordion>\r\n *   <vaadin-accordion-panel>\r\n *     <vaadin-accordion-heading slot=\"summary\">Panel 1</vaadin-accordion-heading>\r\n *     <div>This panel is opened, so the text is visible by default.</div>\r\n *   </vaadin-accordion-panel>\r\n *   <vaadin-accordion-panel>\r\n *     <vaadin-accordion-heading slot=\"summary\">Panel 2</vaadin-accordion-heading>\r\n *     <div>After opening this panel, the first one becomes closed.</div>\r\n *   </vaadin-accordion-panel>\r\n * </vaadin-accordion>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * See the [`<vaadin-accordion-panel>`](#/elements/vaadin-accordion-panel)\r\n * documentation for the available state attributes and stylable shadow parts.\r\n *\r\n * **Note:** You can apply the theme to `<vaadin-accordion>` component itself,\r\n * especially by using the following CSS selector:\r\n *\r\n * ```\r\n * :host ::slotted(vaadin-accordion-panel) {\r\n *   margin-bottom: 5px;\r\n * }\r\n * ```\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {CustomEvent} items-changed - Fired when the `items` property changes.\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes AccordionMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n */\r\nclass Accordion extends AccordionMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n      <slot></slot>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-accordion';\r\n  }\r\n}\r\n\r\ndefineCustomElement(Accordion);\r\n\r\nexport { Accordion };\r\n"],
  "mappings": "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",
  "names": []
}

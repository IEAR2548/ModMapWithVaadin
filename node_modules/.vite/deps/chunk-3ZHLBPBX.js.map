{
  "version": 3,
  "sources": ["../../@vaadin/react-components/src/renderers/useRenderer.ts", "../../@vaadin/react-components/src/utils/flushMicrotask.ts", "../../@vaadin/react-components/src/renderers/useSimpleRenderer.ts", "../../@vaadin/react-components/src/renderers/useSimpleOrChildrenRenderer.ts"],
  "sourcesContent": ["import {\n  type ComponentType,\n  createElement,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useReducer,\n} from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport type { Slice, WebComponentRenderer } from './renderer.js';\nimport { flushMicrotask } from '../utils/flushMicrotask.js';\n\nexport type UseRendererResult<W extends WebComponentRenderer> = readonly [\n  portals?: ReadonlyArray<ReactElement | null>,\n  renderer?: W,\n];\n\nconst initialState = new Map();\n\nfunction rendererReducer<W extends WebComponentRenderer>(\n  state: Map<HTMLElement, Slice<Parameters<W>, 1>>,\n  [root, ...args]: Parameters<W>,\n): Map<HTMLElement, Slice<Parameters<W>, 1>> {\n  return new Map(state).set(root, args as Slice<Parameters<W>, 1>);\n}\n\nexport type RendererConfig<W extends WebComponentRenderer> = {\n  renderMode?: 'default' | 'sync' | 'microtask';\n  shouldRenderPortal?(root: HTMLElement, ...args: Slice<Parameters<W>, 1>): boolean;\n};\n\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  node: ReactNode,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig<W>,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRenderer: ComponentType<P> | null | undefined,\n  convert: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig<W>,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRendererOrNode: ReactNode | ComponentType<P> | null | undefined,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig<W>,\n): UseRendererResult<W> {\n  const [map, update] = useReducer<typeof rendererReducer<W>>(rendererReducer, initialState);\n  const renderer = useCallback(\n    ((...args: Parameters<W>) => {\n      if (config?.renderMode === 'microtask') {\n        flushMicrotask(() => update(args));\n      } else if (config?.renderMode === 'sync') {\n        flushSync(() => update(args));\n      } else {\n        update(args);\n      }\n    }) as W,\n    [],\n  );\n\n  return reactRendererOrNode\n    ? [\n        Array.from(map.entries())\n          .filter(([root, args]) => {\n            return config?.shouldRenderPortal?.(root, ...args) ?? true;\n          })\n          .map(([root, args]) =>\n            createPortal(\n              convert\n                ? createElement<P>(reactRendererOrNode as ComponentType<P>, convert(args))\n                : (reactRendererOrNode as ReactNode),\n              root,\n            ),\n          ),\n        renderer,\n      ]\n    : [];\n}\n", "import { flushSync } from 'react-dom';\n\nconst callbackQueue: Function[] = [];\n\nexport function flushMicrotask(callback: Function) {\n  callbackQueue.push(callback);\n\n  if (callbackQueue.length === 1) {\n    queueMicrotask(() => {\n      flushSync(() => {\n        callbackQueue.splice(0).forEach((callback) => callback());\n      });\n    });\n  }\n}\n", "import type { ComponentType, PropsWithChildren } from 'react';\nimport type { Slice } from './renderer.js';\nimport { useRenderer, type RendererConfig, type UseRendererResult } from './useRenderer.js';\n\nexport type ReactSimpleRendererProps<O extends HTMLElement> = Readonly<{\n  original: O;\n}>;\nexport type WebComponentSimpleRenderer<O extends HTMLElement> = (root: HTMLElement, original: O) => void;\n\nfunction convertSimpleRendererArgs<O extends HTMLElement>([original]: Slice<\n  Parameters<WebComponentSimpleRenderer<O>>,\n  1\n>): PropsWithChildren<ReactSimpleRendererProps<O>> {\n  return { original };\n}\n\nexport function useSimpleRenderer<O extends HTMLElement>(\n  reactRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n  config?: RendererConfig<WebComponentSimpleRenderer<O>>,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  return useRenderer(reactRenderer, convertSimpleRendererArgs, config);\n}\n", "import type { ComponentType, ReactNode } from 'react';\nimport { useRenderer } from './useRenderer.js';\nimport type { RendererConfig, UseRendererResult } from './useRenderer.js';\nimport {\n  type ReactSimpleRendererProps,\n  useSimpleRenderer,\n  type WebComponentSimpleRenderer,\n} from './useSimpleRenderer.js';\n\nexport function useSimpleOrChildrenRenderer<O extends HTMLElement>(\n  fnRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n  children?: ReactNode | ComponentType<ReactSimpleRendererProps<O>>,\n  config?: RendererConfig<WebComponentSimpleRenderer<O>>,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  let _children: ReactNode | undefined;\n  let _fnRenderer: ComponentType<ReactSimpleRendererProps<O>> | null | undefined;\n  let shouldUseSimpleRendererResult = false;\n\n  if (typeof children === 'function') {\n    _children = undefined;\n    _fnRenderer = children;\n    shouldUseSimpleRendererResult = true;\n  } else {\n    _children = children;\n    _fnRenderer = fnRenderer;\n    shouldUseSimpleRendererResult = !!_fnRenderer;\n  }\n\n  const useChildrenRendererResult = useRenderer(_children, undefined, config);\n  const useSimpleRendererResult = useSimpleRenderer(_fnRenderer, config);\n\n  return shouldUseSimpleRendererResult ? useSimpleRendererResult : useChildrenRendererResult;\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,mBAQO;AACP,IAAAA,oBAAwC;;;ACTxC,uBAA0B;AAE1B,IAAMC,IAA4B,CAAC;AAE5B,SAASC,EAAeC,GAAoB;AACjDF,IAAc,KAAKE,CAAQ,GAEvBF,EAAc,WAAW,KAC3B,eAAe,MAAM;AACnBG,yBAAAA,WAAU,MAAM;AACdH,QAAc,OAAO,CAAC,EAAE,QAASE,CAAAA,OAAaA,GAAS,CAAC;IAC1D,CAAC;EACH,CAAC;AAEL;;;ADIA,IAAME,IAAe,oBAAI;AAEzB,SAASC,EACPC,GACA,CAACC,IAAM,GAAGC,EAAI,GAC6B;AAC3C,SAAO,IAAI,IAAIF,CAAK,EAAE,IAAIC,IAAMC,EAA+B;AACjE;AAiBO,SAASC,EACdC,GACAC,IACAC,IACsB;AACtB,QAAM,CAACC,GAAKC,CAAM,QAAIC,aAAAA,YAAsCV,GAAiBD,CAAY,GACnFY,QAAWC,aAAAA,aACd,IAAIT,MAAwB;AACvBI,KAAAA,MAAAA,gBAAAA,GAAQ,gBAAe,cACzBM,EAAe,MAAMJ,EAAON,CAAI,CAAC,KACxBI,MAAAA,gBAAAA,GAAQ,gBAAe,aAChCO,kBAAAA,WAAU,MAAML,EAAON,CAAI,CAAC,IAE5BM,EAAON,CAAI;EAEf,GACA,CAAC,CACH;AAEA,SAAOE,IACH,CACE,MAAM,KAAKG,EAAI,QAAQ,CAAC,EACrB,OAAO,CAAC,CAACN,GAAMC,CAAI,MAAA;AAhE9B;AAiEmBI,kBAAAA,MAAAA,gBAAAA,GAAQ,uBAARA,wBAAAA,IAA6BL,GAAM,GAAGC,OAAS;GACvD,EACA,IAAI,CAAC,CAACD,GAAMC,CAAI,UACfY,kBAAAA,cACET,SACIU,aAAAA,eAAiBX,GAAyCC,GAAQH,CAAI,CAAC,IACtEE,GACLH,CACF,CACF,GACFS,CACF,IACA,CAAC;AACP;;;AErEA,SAASM,EAAiD,CAACC,CAAQ,GAGhB;AACjD,SAAO,EAAE,UAAAA,EAAS;AACpB;AAEO,SAASC,GACdC,GACAC,GACkD;AAClD,SAAOC,EAAYF,GAAeH,GAA2BI,CAAM;AACrE;;;ACZO,SAASE,GACdC,IACAC,GACAC,GACkD;AAClD,MAAIC,IACAC,GACAC,KAAgC;AAEhC,SAAOJ,KAAa,cACtBE,KAAY,QACZC,IAAcH,GACdI,KAAgC,SAEhCF,KAAYF,GACZG,IAAcJ,IACdK,KAAgC,CAAC,CAACD;AAGpC,QAAME,IAA4BC,EAAYJ,IAAW,QAAWD,CAAM,GACpEM,KAA0BC,GAAkBL,GAAaF,CAAM;AAErE,SAAOG,KAAgCG,KAA0BF;AACnE;",
  "names": ["import_react_dom", "callbackQueue", "flushMicrotask", "callback", "flushSync", "initialState", "rendererReducer", "state", "root", "args", "useRenderer", "reactRendererOrNode", "convert", "config", "map", "update", "useReducer", "renderer", "useCallback", "flushMicrotask", "flushSync", "createPortal", "createElement", "convertSimpleRendererArgs", "original", "useSimpleRenderer", "reactRenderer", "config", "useRenderer", "useSimpleOrChildrenRenderer", "fnRenderer", "children", "config", "_children", "_fnRenderer", "shouldUseSimpleRendererResult", "useChildrenRendererResult", "useRenderer", "useSimpleRendererResult", "useSimpleRenderer"]
}

{
  "version": 3,
  "sources": ["../../@vaadin/a11y-base/src/focus-trap-controller.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { getFocusableElements, isElementFocused } from './focus-utils.js';\r\n\r\nconst instances = [];\r\n\r\n/**\r\n * A controller for trapping focus within a DOM node.\r\n */\r\nexport class FocusTrapController {\r\n  /**\r\n   * @param {HTMLElement} host\r\n   */\r\n  constructor(host) {\r\n    /**\r\n     * The controller host element.\r\n     *\r\n     * @type {HTMLElement}\r\n     */\r\n    this.host = host;\r\n\r\n    /**\r\n     * A node for trapping focus in.\r\n     *\r\n     * @type {HTMLElement | null}\r\n     * @private\r\n     */\r\n    this.__trapNode = null;\r\n\r\n    this.__onKeyDown = this.__onKeyDown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * An array of tab-ordered focusable elements inside the trap node.\r\n   *\r\n   * @return {HTMLElement[]}\r\n   * @private\r\n   */\r\n  get __focusableElements() {\r\n    return getFocusableElements(this.__trapNode);\r\n  }\r\n\r\n  /**\r\n   * The index of the element inside the trap node that currently has focus.\r\n   *\r\n   * @return {HTMLElement | undefined}\r\n   * @private\r\n   */\r\n  get __focusedElementIndex() {\r\n    const focusableElements = this.__focusableElements;\r\n    return focusableElements.indexOf(focusableElements.filter(isElementFocused).pop());\r\n  }\r\n\r\n  hostConnected() {\r\n    document.addEventListener('keydown', this.__onKeyDown);\r\n  }\r\n\r\n  hostDisconnected() {\r\n    document.removeEventListener('keydown', this.__onKeyDown);\r\n  }\r\n\r\n  /**\r\n   * Activates a focus trap for a DOM node that will prevent focus from escaping the node.\r\n   * The trap can be deactivated with the `.releaseFocus()` method.\r\n   *\r\n   * If focus is initially outside the trap, the method will move focus inside,\r\n   * on the first focusable element of the trap in the tab order.\r\n   * The first focusable element can be the trap node itself if it is focusable\r\n   * and comes first in the tab order.\r\n   *\r\n   * If there are no focusable elements, the method will throw an exception\r\n   * and the trap will not be set.\r\n   *\r\n   * @param {HTMLElement} trapNode\r\n   */\r\n  trapFocus(trapNode) {\r\n    this.__trapNode = trapNode;\r\n\r\n    if (this.__focusableElements.length === 0) {\r\n      this.__trapNode = null;\r\n      throw new Error('The trap node should have at least one focusable descendant or be focusable itself.');\r\n    }\r\n\r\n    instances.push(this);\r\n\r\n    if (this.__focusedElementIndex === -1) {\r\n      this.__focusableElements[0].focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivates the focus trap set with the `.trapFocus()` method\r\n   * so that it becomes possible to tab outside the trap node.\r\n   */\r\n  releaseFocus() {\r\n    this.__trapNode = null;\r\n\r\n    instances.pop();\r\n  }\r\n\r\n  /**\r\n   * A `keydown` event handler that manages tabbing navigation when the trap is enabled.\r\n   *\r\n   * - Moves focus to the next focusable element of the trap on `Tab` press.\r\n   * When no next element to focus, the method moves focus to the first focusable element.\r\n   * - Moves focus to the prev focusable element of the trap on `Shift+Tab` press.\r\n   * When no prev element to focus, the method moves focus to the last focusable element.\r\n   *\r\n   * @param {KeyboardEvent} event\r\n   * @private\r\n   */\r\n  __onKeyDown(event) {\r\n    if (!this.__trapNode) {\r\n      return;\r\n    }\r\n\r\n    // Only handle events for the last instance\r\n    if (this !== Array.from(instances).pop()) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault();\r\n\r\n      const backward = event.shiftKey;\r\n      this.__focusNextElement(backward);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * - Moves focus to the next focusable element if `backward === false`.\r\n   * When no next element to focus, the method moves focus to the first focusable element.\r\n   * - Moves focus to the prev focusable element if `backward === true`.\r\n   * When no prev element to focus the method moves focus to the last focusable element.\r\n   *\r\n   * If no focusable elements, the method returns immediately.\r\n   *\r\n   * @param {boolean} backward\r\n   * @private\r\n   */\r\n  __focusNextElement(backward = false) {\r\n    const focusableElements = this.__focusableElements;\r\n    const step = backward ? -1 : 1;\r\n    const currentIndex = this.__focusedElementIndex;\r\n    const nextIndex = (focusableElements.length + currentIndex + step) % focusableElements.length;\r\n    const element = focusableElements[nextIndex];\r\n    element.focus();\r\n    if (element.localName === 'input') {\r\n      element.select();\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;AAOA,IAAM,YAAY,CAAC;AAKZ,IAAM,sBAAN,MAA0B;AAAA;AAAA;AAAA;AAAA,EAI/B,YAAY,MAAM;AAMhB,SAAK,OAAO;AAQZ,SAAK,aAAa;AAElB,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,sBAAsB;AACxB,WAAO,qBAAqB,KAAK,UAAU;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,wBAAwB;AAC1B,UAAM,oBAAoB,KAAK;AAC/B,WAAO,kBAAkB,QAAQ,kBAAkB,OAAO,gBAAgB,EAAE,IAAI,CAAC;AAAA,EACnF;AAAA,EAEA,gBAAgB;AACd,aAAS,iBAAiB,WAAW,KAAK,WAAW;AAAA,EACvD;AAAA,EAEA,mBAAmB;AACjB,aAAS,oBAAoB,WAAW,KAAK,WAAW;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,UAAU,UAAU;AAClB,SAAK,aAAa;AAElB,QAAI,KAAK,oBAAoB,WAAW,GAAG;AACzC,WAAK,aAAa;AAClB,YAAM,IAAI,MAAM,qFAAqF;AAAA,IACvG;AAEA,cAAU,KAAK,IAAI;AAEnB,QAAI,KAAK,0BAA0B,IAAI;AACrC,WAAK,oBAAoB,CAAC,EAAE,MAAM;AAAA,IACpC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,SAAK,aAAa;AAElB,cAAU,IAAI;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,OAAO;AACjB,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AAGA,QAAI,SAAS,MAAM,KAAK,SAAS,EAAE,IAAI,GAAG;AACxC;AAAA,IACF;AAEA,QAAI,MAAM,QAAQ,OAAO;AACvB,YAAM,eAAe;AAErB,YAAM,WAAW,MAAM;AACvB,WAAK,mBAAmB,QAAQ;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,mBAAmB,WAAW,OAAO;AACnC,UAAM,oBAAoB,KAAK;AAC/B,UAAM,OAAO,WAAW,KAAK;AAC7B,UAAM,eAAe,KAAK;AAC1B,UAAM,aAAa,kBAAkB,SAAS,eAAe,QAAQ,kBAAkB;AACvF,UAAM,UAAU,kBAAkB,SAAS;AAC3C,YAAQ,MAAM;AACd,QAAI,QAAQ,cAAc,SAAS;AACjC,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF;AACF;",
  "names": []
}

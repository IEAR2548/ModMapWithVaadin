{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-column-group-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-group.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\r\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\r\nimport { ColumnBaseMixin } from './vaadin-grid-column-mixin.js';\r\nimport { ColumnObserver, updateColumnOrders } from './vaadin-grid-helpers.js';\r\n\r\n/**\r\n * A mixin providing common vaadin-grid-column-group functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes ColumnBaseMixin\r\n */\r\nexport const GridColumnGroupMixin = (superClass) =>\r\n  class extends ColumnBaseMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /** @private */\r\n        _childColumns: {\r\n          value() {\r\n            return this._getChildColumns(this);\r\n          },\r\n        },\r\n\r\n        /**\r\n         * Flex grow ratio for the column group as the sum of the ratios of its child columns.\r\n         * @attr {number} flex-grow\r\n         */\r\n        flexGrow: {\r\n          type: Number,\r\n          readOnly: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Width of the column group as the sum of the widths of its child columns.\r\n         */\r\n        width: {\r\n          type: String,\r\n          readOnly: true,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _visibleChildColumns: Array,\r\n\r\n        /** @private */\r\n        _colSpan: Number,\r\n\r\n        /** @private */\r\n        _rootColumns: Array,\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '_groupFrozenChanged(frozen, _rootColumns)',\r\n        '_groupFrozenToEndChanged(frozenToEnd, _rootColumns)',\r\n        '_groupHiddenChanged(hidden)',\r\n        '_colSpanChanged(_colSpan, _headerCell, _footerCell)',\r\n        '_groupOrderChanged(_order, _rootColumns)',\r\n        '_groupReorderStatusChanged(_reorderStatus, _rootColumns)',\r\n        '_groupResizableChanged(resizable, _rootColumns)',\r\n      ];\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      this._addNodeObserver();\r\n      this._updateFlexAndWidth();\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      if (this._observer) {\r\n        this._observer.disconnect();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string} path\r\n     * @param {unknown=} value\r\n     * @protected\r\n     */\r\n    _columnPropChanged(path, value) {\r\n      if (path === 'hidden') {\r\n        // Prevent synchronization of the hidden state to child columns.\r\n        // If the group is currently auto-hidden, and one column is made visible,\r\n        // we don't want the other columns to become visible as well.\r\n        this._preventHiddenSynchronization = true;\r\n        this._updateVisibleChildColumns(this._childColumns);\r\n        this._preventHiddenSynchronization = false;\r\n      }\r\n\r\n      if (/flexGrow|width|hidden|_childColumns/u.test(path)) {\r\n        this._updateFlexAndWidth();\r\n      }\r\n\r\n      // Don't unfreeze the frozen group because of a non-frozen child\r\n      if (path === 'frozen' && !this.frozen) {\r\n        this.frozen = value;\r\n      }\r\n\r\n      // Don't unfreeze the frozen group because of a non-frozen child\r\n      if (path === 'lastFrozen' && !this._lastFrozen) {\r\n        this._lastFrozen = value;\r\n      }\r\n\r\n      // Don't unfreeze the frozen group because of a non-frozen child\r\n      if (path === 'frozenToEnd' && !this.frozenToEnd) {\r\n        this.frozenToEnd = value;\r\n      }\r\n\r\n      // Don't unfreeze the frozen group because of a non-frozen child\r\n      if (path === 'firstFrozenToEnd' && !this._firstFrozenToEnd) {\r\n        this._firstFrozenToEnd = value;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _groupOrderChanged(order, rootColumns) {\r\n      if (rootColumns) {\r\n        const _rootColumns = rootColumns.slice(0);\r\n\r\n        if (!order) {\r\n          _rootColumns.forEach((column) => {\r\n            column._order = 0;\r\n          });\r\n          return;\r\n        }\r\n        // The parent column order number cascades downwards to it's children\r\n        // so that the resulting order numbering constructs as follows:\r\n        // [             1000              ]\r\n        // [     1100    ] | [     1200    ]\r\n        // [1110] | [1120] | [1210] | [1220]\r\n\r\n        // Trailing zeros are counted so we know the level on which we're working on.\r\n        const trailingZeros = /(0+)$/u.exec(order).pop().length; // NOSONAR\r\n\r\n        // In an unlikely situation where a group has more than 9 child columns,\r\n        // the child scope must have 1 digit less...\r\n        // Log^a_b = Ln(a)/Ln(b)\r\n        // Number of digits of a number is equal to floor(Log(number)_10) + 1\r\n        const childCountDigits = ~~(Math.log(rootColumns.length) / Math.LN10) + 1;\r\n\r\n        // Final scope for the child columns needs to mind both factors.\r\n        const scope = 10 ** (trailingZeros - childCountDigits);\r\n\r\n        if (_rootColumns[0] && _rootColumns[0]._order) {\r\n          _rootColumns.sort((a, b) => a._order - b._order);\r\n        }\r\n        updateColumnOrders(_rootColumns, scope, order);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _groupReorderStatusChanged(reorderStatus, rootColumns) {\r\n      if (reorderStatus === undefined || rootColumns === undefined) {\r\n        return;\r\n      }\r\n\r\n      rootColumns.forEach((column) => {\r\n        column._reorderStatus = reorderStatus;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _groupResizableChanged(resizable, rootColumns) {\r\n      if (resizable === undefined || rootColumns === undefined) {\r\n        return;\r\n      }\r\n\r\n      rootColumns.forEach((column) => {\r\n        column.resizable = resizable;\r\n      });\r\n    }\r\n\r\n    /** @private */\r\n    _updateVisibleChildColumns(childColumns) {\r\n      this._visibleChildColumns = Array.prototype.filter.call(childColumns, (col) => !col.hidden);\r\n      this._colSpan = this._visibleChildColumns.length;\r\n      this._updateAutoHidden();\r\n    }\r\n\r\n    /** @protected */\r\n    _updateFlexAndWidth() {\r\n      if (!this._visibleChildColumns) {\r\n        return;\r\n      }\r\n\r\n      if (this._visibleChildColumns.length > 0) {\r\n        const width = this._visibleChildColumns\r\n          .reduce((prev, curr) => {\r\n            prev += ` + ${(curr.width || '0px').replace('calc', '')}`;\r\n            return prev;\r\n          }, '')\r\n          .substring(3);\r\n        this._setWidth(`calc(${width})`);\r\n      } else {\r\n        this._setWidth('0px');\r\n      }\r\n\r\n      this._setFlexGrow(\r\n        Array.prototype.reduce.call(this._visibleChildColumns, (prev, curr) => prev + curr.flexGrow, 0),\r\n      );\r\n    }\r\n\r\n    /**\r\n     * This method is called before the group's frozen value is being propagated to the child columns.\r\n     * In case some of the child columns are frozen, while others are not, the non-frozen ones\r\n     * will get automatically frozen as well. As this may sometimes be unintended, this method\r\n     * shows a warning in the console in such cases.\r\n     * @private\r\n     */\r\n    __scheduleAutoFreezeWarning(columns, frozenProp) {\r\n      if (this._grid) {\r\n        // Derive the attribute name from the property name\r\n        const frozenAttr = frozenProp.replace(/([A-Z])/gu, '-$1').toLowerCase();\r\n\r\n        // Check if all the columns have the same frozen value\r\n        const firstColumnFrozen = columns[0][frozenProp] || columns[0].hasAttribute(frozenAttr);\r\n        const allSameFrozen = columns.every((column) => {\r\n          return (column[frozenProp] || column.hasAttribute(frozenAttr)) === firstColumnFrozen;\r\n        });\r\n\r\n        if (!allSameFrozen) {\r\n          // Some of the child columns are frozen, some are not. Show a warning.\r\n          this._grid.__autoFreezeWarningDebouncer = Debouncer.debounce(\r\n            this._grid.__autoFreezeWarningDebouncer,\r\n            animationFrame,\r\n            () => {\r\n              console.warn(\r\n                `WARNING: Joining ${frozenProp} and non-${frozenProp} Grid columns inside the same column group! ` +\r\n                  `This will automatically freeze all the joined columns to avoid rendering issues. ` +\r\n                  `If this was intentional, consider marking each joined column explicitly as ${frozenProp}. ` +\r\n                  `Otherwise, exclude the ${frozenProp} columns from the joined group.`,\r\n              );\r\n            },\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _groupFrozenChanged(frozen, rootColumns) {\r\n      if (rootColumns === undefined || frozen === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Don't propagate the default `false` value.\r\n      if (frozen !== false) {\r\n        this.__scheduleAutoFreezeWarning(rootColumns, 'frozen');\r\n\r\n        Array.from(rootColumns).forEach((col) => {\r\n          col.frozen = frozen;\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _groupFrozenToEndChanged(frozenToEnd, rootColumns) {\r\n      if (rootColumns === undefined || frozenToEnd === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Don't propagate the default `false` value.\r\n      if (frozenToEnd !== false) {\r\n        this.__scheduleAutoFreezeWarning(rootColumns, 'frozenToEnd');\r\n\r\n        Array.from(rootColumns).forEach((col) => {\r\n          col.frozenToEnd = frozenToEnd;\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _groupHiddenChanged(hidden) {\r\n      // When initializing the hidden property, only sync hidden state to columns\r\n      // if group is actually hidden. Otherwise, we could override a hidden column\r\n      // to be visible.\r\n      // We always want to run this though if the property is actually changed.\r\n      if (hidden || this.__groupHiddenInitialized) {\r\n        this._synchronizeHidden();\r\n      }\r\n      this.__groupHiddenInitialized = true;\r\n    }\r\n\r\n    /** @private */\r\n    _updateAutoHidden() {\r\n      const wasAutoHidden = this._autoHidden;\r\n      this._autoHidden = (this._visibleChildColumns || []).length === 0;\r\n      // Only modify hidden state if group was auto-hidden, or becomes auto-hidden\r\n      if (wasAutoHidden || this._autoHidden) {\r\n        this.hidden = this._autoHidden;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _synchronizeHidden() {\r\n      if (this._childColumns && !this._preventHiddenSynchronization) {\r\n        this._childColumns.forEach((column) => {\r\n          column.hidden = this.hidden;\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _colSpanChanged(colSpan, headerCell, footerCell) {\r\n      if (headerCell) {\r\n        headerCell.setAttribute('colspan', colSpan);\r\n        if (this._grid) {\r\n          this._grid._a11yUpdateCellColspan(headerCell, colSpan);\r\n        }\r\n      }\r\n      if (footerCell) {\r\n        footerCell.setAttribute('colspan', colSpan);\r\n        if (this._grid) {\r\n          this._grid._a11yUpdateCellColspan(footerCell, colSpan);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!GridColumnGroup} el\r\n     * @return {!Array<!GridColumn>}\r\n     * @protected\r\n     */\r\n    _getChildColumns(el) {\r\n      return ColumnObserver.getColumns(el);\r\n    }\r\n\r\n    /** @private */\r\n    _addNodeObserver() {\r\n      this._observer = new ColumnObserver(this, () => {\r\n        // Prevent synchronization of the hidden state to child columns.\r\n        // If the group is currently auto-hidden, and a visible column is added,\r\n        // we don't want the other columns to become visible as well.\r\n        this._preventHiddenSynchronization = true;\r\n        this._rootColumns = this._getChildColumns(this);\r\n        this._childColumns = this._rootColumns;\r\n        this._updateVisibleChildColumns(this._childColumns);\r\n        this._preventHiddenSynchronization = false;\r\n\r\n        // Update the column tree\r\n        if (this._grid && this._grid._debounceUpdateColumnTree) {\r\n          this._grid._debounceUpdateColumnTree();\r\n        }\r\n      });\r\n      this._observer.flush();\r\n    }\r\n\r\n    /**\r\n     * @param {!Node} node\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _isColumnElement(node) {\r\n      return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/u.test(node.localName);\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { GridColumnGroupMixin } from './vaadin-grid-column-group-mixin.js';\r\nexport * from './vaadin-grid-column-group-mixin.js';\r\n\r\n/**\r\n * A `<vaadin-grid-column-group>` is used to make groups of columns in `<vaadin-grid>` and\r\n * to configure additional headers and footers.\r\n *\r\n * Groups can be nested to create complex header and footer configurations.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid-column-group resizable id=\"columnGroup\">\r\n *   <vaadin-grid-column id=\"column1\"></vaadin-grid-column>\r\n *   <vaadin-grid-column id=\"column2\"></vaadin-grid-column>\r\n * </vaadin-grid-column-group>\r\n * ```\r\n *\r\n * ```js\r\n * const columnGroup = document.querySelector('#columnGroup');\r\n * columnGroup.headerRenderer = (root, columnGroup) => {\r\n *   root.textContent = 'header';\r\n * }\r\n *\r\n * const column1 = document.querySelector('#column1');\r\n * column1.headerRenderer = (root, column) => { ... };\r\n * column1.renderer = (root, column, model) => { ... };\r\n *\r\n * const column2 = document.querySelector('#column2');\r\n * column2.headerRenderer = (root, column) => { ... };\r\n * column2.renderer = (root, column, model) => { ... };\r\n * ```\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes GridColumnGroupMixin\r\n */\r\nclass GridColumnGroup extends GridColumnGroupMixin(PolymerElement) {\r\n  static get is() {\r\n    return 'vaadin-grid-column-group';\r\n  }\r\n}\r\n\r\ndefineCustomElement(GridColumnGroup);\r\n\r\nexport { GridColumnGroup };\r\n"],
  "mappings": "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",
  "names": []
}

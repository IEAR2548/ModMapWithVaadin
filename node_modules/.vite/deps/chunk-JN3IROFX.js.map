{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/tooltip-controller.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotController } from './slot-controller.js';\r\n\r\n/**\r\n * A controller that manages the slotted tooltip element.\r\n */\r\nexport class TooltipController extends SlotController {\r\n  constructor(host) {\r\n    // Do not provide slot factory to create tooltip lazily.\r\n    super(host, 'tooltip');\r\n\r\n    this.setTarget(host);\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom tooltip.\r\n   *\r\n   * @param {Node} tooltipNode\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(tooltipNode) {\r\n    tooltipNode.target = this.target;\r\n\r\n    if (this.ariaTarget !== undefined) {\r\n      tooltipNode.ariaTarget = this.ariaTarget;\r\n    }\r\n\r\n    if (this.context !== undefined) {\r\n      tooltipNode.context = this.context;\r\n    }\r\n\r\n    if (this.manual !== undefined) {\r\n      tooltipNode.manual = this.manual;\r\n    }\r\n\r\n    if (this.opened !== undefined) {\r\n      tooltipNode.opened = this.opened;\r\n    }\r\n\r\n    if (this.position !== undefined) {\r\n      tooltipNode._position = this.position;\r\n    }\r\n\r\n    if (this.shouldShow !== undefined) {\r\n      tooltipNode.shouldShow = this.shouldShow;\r\n    }\r\n\r\n    this.__notifyChange();\r\n  }\r\n\r\n  /**\r\n   * Override to notify the host when the tooltip is removed.\r\n   *\r\n   * @param {Node} tooltipNode\r\n   * @protected\r\n   * @override\r\n   */\r\n  teardownNode() {\r\n    this.__notifyChange();\r\n  }\r\n\r\n  /**\r\n   * Set an HTML element for linking with the tooltip overlay\r\n   * via `aria-describedby` attribute used by screen readers.\r\n   * @param {HTMLElement} ariaTarget\r\n   */\r\n  setAriaTarget(ariaTarget) {\r\n    this.ariaTarget = ariaTarget;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.ariaTarget = ariaTarget;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a context object to be used by generator.\r\n   * @param {object} context\r\n   */\r\n  setContext(context) {\r\n    this.context = context;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.context = context;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle manual state on the slotted tooltip.\r\n   * @param {boolean} manual\r\n   */\r\n  setManual(manual) {\r\n    this.manual = manual;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.manual = manual;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle opened state on the slotted tooltip.\r\n   * @param {boolean} opened\r\n   */\r\n  setOpened(opened) {\r\n    this.opened = opened;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.opened = opened;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set default position for the slotted tooltip.\r\n   * This can be overridden by setting the position\r\n   * using corresponding property or attribute.\r\n   * @param {string} position\r\n   */\r\n  setPosition(position) {\r\n    this.position = position;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode._position = position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set function used to detect whether to show\r\n   * the tooltip based on a condition.\r\n   * @param {Function} shouldShow\r\n   */\r\n  setShouldShow(shouldShow) {\r\n    this.shouldShow = shouldShow;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.shouldShow = shouldShow;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set an HTML element to attach the tooltip to.\r\n   * @param {HTMLElement} target\r\n   */\r\n  setTarget(target) {\r\n    this.target = target;\r\n\r\n    const tooltipNode = this.node;\r\n    if (tooltipNode) {\r\n      tooltipNode.target = target;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __notifyChange() {\r\n    this.dispatchEvent(new CustomEvent('tooltip-changed', { detail: { node: this.node } }));\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAUO,IAAM,oBAAN,cAAgC,eAAe;AAAA,EACpD,YAAY,MAAM;AAEhB,UAAM,MAAM,SAAS;AAErB,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,aAAa;AAC1B,gBAAY,SAAS,KAAK;AAE1B,QAAI,KAAK,eAAe,QAAW;AACjC,kBAAY,aAAa,KAAK;AAAA,IAChC;AAEA,QAAI,KAAK,YAAY,QAAW;AAC9B,kBAAY,UAAU,KAAK;AAAA,IAC7B;AAEA,QAAI,KAAK,WAAW,QAAW;AAC7B,kBAAY,SAAS,KAAK;AAAA,IAC5B;AAEA,QAAI,KAAK,WAAW,QAAW;AAC7B,kBAAY,SAAS,KAAK;AAAA,IAC5B;AAEA,QAAI,KAAK,aAAa,QAAW;AAC/B,kBAAY,YAAY,KAAK;AAAA,IAC/B;AAEA,QAAI,KAAK,eAAe,QAAW;AACjC,kBAAY,aAAa,KAAK;AAAA,IAChC;AAEA,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe;AACb,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,YAAY;AACxB,SAAK,aAAa;AAElB,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,aAAa;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,SAAS;AAClB,SAAK,UAAU;AAEf,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,UAAU;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAQ;AAChB,SAAK,SAAS;AAEd,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,SAAS;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAQ;AAChB,SAAK,SAAS;AAEd,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,SAAS;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,UAAU;AACpB,SAAK,WAAW;AAEhB,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,YAAY;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,YAAY;AACxB,SAAK,aAAa;AAElB,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,aAAa;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAQ;AAChB,SAAK,SAAS;AAEd,UAAM,cAAc,KAAK;AACzB,QAAI,aAAa;AACf,kBAAY,SAAS;AAAA,IACvB;AAAA,EACF;AAAA;AAAA,EAGA,iBAAiB;AACf,SAAK,cAAc,IAAI,YAAY,mBAAmB,EAAE,QAAQ,EAAE,MAAM,KAAK,KAAK,EAAE,CAAC,CAAC;AAAA,EACxF;AACF;",
  "names": []
}

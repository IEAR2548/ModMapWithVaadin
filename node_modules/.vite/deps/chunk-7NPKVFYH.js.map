{
  "version": 3,
  "sources": ["../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-chip-styles.js", "../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-styles.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-styles.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-chip.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-container.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-item.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-overlay.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-scroller.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-internal-mixin.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-internal.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-mixin.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst chip = css`\r\n  :host {\r\n    font-size: var(--lumo-font-size-xxs);\r\n    line-height: 1;\r\n    color: var(--lumo-body-text-color);\r\n    border-radius: var(--lumo-border-radius-s);\r\n    background-color: var(--lumo-contrast-20pct);\r\n    cursor: var(--lumo-clickable-cursor);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  :host([disabled]) {\r\n    background-color: var(--lumo-contrast-10pct);\r\n  }\r\n\r\n  :host([focused]) [part='remove-button'] {\r\n    color: inherit;\r\n  }\r\n\r\n  :host([slot='overflow']) {\r\n    position: relative;\r\n    min-width: var(--lumo-size-xxs);\r\n    margin-inline-start: var(--lumo-space-s);\r\n  }\r\n\r\n  :host([slot='overflow'])::before,\r\n  :host([slot='overflow'])::after {\r\n    position: absolute;\r\n    content: '';\r\n    width: 100%;\r\n    height: 100%;\r\n    border-left: calc(var(--lumo-space-s) / 4) solid;\r\n    border-radius: var(--lumo-border-radius-s);\r\n    border-color: var(--lumo-contrast-30pct);\r\n  }\r\n\r\n  :host([slot='overflow'])::before {\r\n    left: calc(-1 * var(--lumo-space-s) / 2);\r\n  }\r\n\r\n  :host([slot='overflow'])::after {\r\n    left: calc(-1 * var(--lumo-space-s));\r\n  }\r\n\r\n  :host([count='2']) {\r\n    margin-inline-start: calc(var(--lumo-space-s) / 2);\r\n  }\r\n\r\n  :host([count='2'])::after {\r\n    display: none;\r\n  }\r\n\r\n  :host([count='1']) {\r\n    margin-inline-start: 0;\r\n  }\r\n\r\n  :host([count='1'])::before,\r\n  :host([count='1'])::after {\r\n    display: none;\r\n  }\r\n\r\n  [part='label'] {\r\n    font-weight: 500;\r\n    line-height: 1.25;\r\n  }\r\n\r\n  [part='remove-button'] {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -0.3125em;\r\n    margin-bottom: -0.3125em;\r\n    margin-inline-start: auto;\r\n    width: 1.25em;\r\n    height: 1.25em;\r\n    font-size: 1.5em;\r\n    transition: none;\r\n  }\r\n\r\n  [part='remove-button']::before {\r\n    content: var(--lumo-icons-cross);\r\n  }\r\n\r\n  :host([disabled]) [part='label'] {\r\n    color: var(--lumo-disabled-text-color);\r\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\r\n    pointer-events: none;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box-chip', [fieldButton, chip], {\r\n  moduleId: 'lumo-multi-select-combo-box-chip',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container-styles.js';\r\nimport '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { comboBoxItem } from '@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js';\r\nimport { comboBoxLoader, comboBoxOverlay } from '@vaadin/combo-box/theme/lumo/vaadin-combo-box-overlay-styles.js';\r\nimport { item } from '@vaadin/item/theme/lumo/vaadin-item-styles.js';\r\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\r\nimport { loader } from '@vaadin/vaadin-lumo-styles/mixins/loader.js';\r\nimport { menuOverlayCore } from '@vaadin/vaadin-lumo-styles/mixins/menu-overlay.js';\r\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst multiSelectComboBoxItem = css`\r\n  @media (any-hover: hover) {\r\n    :host(:hover[readonly]) {\r\n      background-color: transparent;\r\n      cursor: default;\r\n    }\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box-item', [item, comboBoxItem, multiSelectComboBoxItem], {\r\n  moduleId: 'lumo-multi-select-combo-box-item',\r\n});\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-overlay',\r\n  [\r\n    overlay,\r\n    menuOverlayCore,\r\n    comboBoxOverlay,\r\n    loader,\r\n    comboBoxLoader,\r\n    css`\r\n      :host {\r\n        --_vaadin-multi-select-combo-box-items-container-border-width: var(--lumo-space-xs);\r\n        --_vaadin-multi-select-combo-box-items-container-border-style: solid;\r\n      }\r\n    `,\r\n  ],\r\n  { moduleId: 'lumo-multi-select-combo-box-overlay' },\r\n);\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-container',\r\n  css`\r\n    :host([auto-expand-vertically]) {\r\n      padding-block: var(--lumo-space-xs);\r\n    }\r\n  `,\r\n  { moduleId: 'lumo-multi-select-combo-box-container' },\r\n);\r\n\r\nconst multiSelectComboBox = css`\r\n  :host([has-value]) {\r\n    padding-inline-start: 0;\r\n  }\r\n\r\n  :host([has-value]) ::slotted(input:placeholder-shown) {\r\n    caret-color: var(--lumo-body-text-color) !important;\r\n  }\r\n\r\n  [part='label'] {\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  /* Override input-container styles */\r\n  [part='input-field'] ::slotted([slot='chip']),\r\n  [part='input-field'] ::slotted([slot='overflow']) {\r\n    min-height: auto;\r\n    padding: 0.3125em calc(0.5em + var(--lumo-border-radius-s) / 4);\r\n    color: var(--lumo-body-text-color);\r\n    -webkit-mask-image: none;\r\n    mask-image: none;\r\n  }\r\n\r\n  :host([auto-expand-vertically]) ::slotted([slot='chip']) {\r\n    margin-block: calc(var(--lumo-space-xs) / 2);\r\n  }\r\n\r\n  ::slotted([slot='chip']:not([readonly]):not([disabled])) {\r\n    padding-inline-end: 0;\r\n  }\r\n\r\n  :host([auto-expand-vertically]) ::slotted([slot='input']) {\r\n    min-height: calc(var(--lumo-text-field-size, var(--lumo-size-m)) - 2 * var(--lumo-space-xs));\r\n  }\r\n\r\n  ::slotted([slot='chip']:not(:last-of-type)),\r\n  ::slotted([slot='overflow']:not(:last-of-type)) {\r\n    margin-inline-end: var(--lumo-space-xs);\r\n  }\r\n\r\n  ::slotted([slot='chip'][focused]) {\r\n    background-color: var(--vaadin-selection-color, var(--lumo-primary-color));\r\n    color: var(--lumo-primary-contrast-color);\r\n  }\r\n\r\n  [part='toggle-button']::before {\r\n    content: var(--lumo-icons-dropdown);\r\n  }\r\n\r\n  :host([readonly][has-value]) [part='toggle-button'] {\r\n    color: var(--lumo-contrast-60pct);\r\n    cursor: var(--lumo-clickable-cursor);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\r\n  moduleId: 'lumo-multi-select-combo-box',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const multiSelectComboBox = css`\r\n  :host {\r\n    --input-min-width: var(--vaadin-multi-select-combo-box-input-min-width, 4em);\r\n    --_chip-min-width: var(--vaadin-multi-select-combo-box-chip-min-width, 50px);\r\n  }\r\n\r\n  #chips {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  ::slotted(input) {\r\n    box-sizing: border-box;\r\n    flex: 1 0 var(--input-min-width);\r\n  }\r\n\r\n  ::slotted([slot='chip']),\r\n  ::slotted([slot='overflow']) {\r\n    flex: 0 1 auto;\r\n  }\r\n\r\n  ::slotted([slot='chip']) {\r\n    overflow: hidden;\r\n  }\r\n\r\n  :host(:is([readonly], [disabled])) ::slotted(input) {\r\n    flex-grow: 0;\r\n    flex-basis: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  :host([auto-expand-vertically]) #chips {\r\n    display: contents;\r\n  }\r\n\r\n  :host([auto-expand-horizontally]) [class$='container'] {\r\n    width: auto;\r\n  }\r\n`;\r\n\r\nexport const multiSelectComboBoxChip = css`\r\n  :host {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    align-self: center;\r\n    white-space: nowrap;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  [part='label'] {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  :host([hidden]),\r\n  :host(:is([readonly], [disabled], [slot='overflow'])) [part='remove-button'] {\r\n    display: none !important;\r\n  }\r\n\r\n  @media (forced-colors: active) {\r\n    :host {\r\n      outline: 1px solid;\r\n      outline-offset: -1px;\r\n    }\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { multiSelectComboBoxChip } from './vaadin-multi-select-combo-box-styles.js';\r\n\r\nregisterStyles('vaadin-multi-select-combo-box-chip', multiSelectComboBoxChip, {\r\n  moduleId: 'vaadin-multi-select-combo-box-chip',\r\n});\r\n\r\n/**\r\n * An element used by `<vaadin-multi-select-combo-box>` to display selected items.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name        | Description\r\n * -----------------|-------------\r\n * `label`          | Element containing the label\r\n * `remove-button`  | Remove button\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @private\r\n */\r\nclass MultiSelectComboBoxChip extends ThemableMixin(PolymerElement) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-chip';\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      disabled: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      readonly: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      label: {\r\n        type: String,\r\n      },\r\n\r\n      item: {\r\n        type: Object,\r\n      },\r\n    };\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div part=\"label\">[[label]]</div>\r\n      <div part=\"remove-button\" on-click=\"_onRemoveClick\"></div>\r\n    `;\r\n  }\r\n\r\n  /** @private */\r\n  _onRemoveClick(event) {\r\n    event.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('item-removed', {\r\n        detail: {\r\n          item: this.item,\r\n        },\r\n        bubbles: true,\r\n        composed: true,\r\n      }),\r\n    );\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxChip);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { InputContainer } from '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-container',\r\n  css`\r\n    #wrapper {\r\n      display: flex;\r\n      width: 100%;\r\n      min-width: 0;\r\n    }\r\n\r\n    :host([auto-expand-vertically]) #wrapper {\r\n      flex-wrap: wrap;\r\n    }\r\n  `,\r\n  {\r\n    moduleId: 'vaadin-multi-select-combo-box-container-styles',\r\n  },\r\n);\r\n\r\nlet memoizedTemplate;\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends InputContainer\r\n * @private\r\n */\r\nclass MultiSelectComboBoxContainer extends InputContainer {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-container';\r\n  }\r\n\r\n  static get template() {\r\n    if (!memoizedTemplate) {\r\n      memoizedTemplate = super.template.cloneNode(true);\r\n      const content = memoizedTemplate.content;\r\n      const slots = content.querySelectorAll('slot');\r\n\r\n      const wrapper = document.createElement('div');\r\n      wrapper.setAttribute('id', 'wrapper');\r\n      content.insertBefore(wrapper, slots[2]);\r\n\r\n      wrapper.appendChild(slots[0]);\r\n      wrapper.appendChild(slots[1]);\r\n    }\r\n    return memoizedTemplate;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /**\r\n       * Set to true to not collapse selected items chips into the overflow\r\n       * chip and instead always expand vertically, causing input field to\r\n       * wrap into multiple lines when width is limited.\r\n       * @attr {boolean} auto-expand-vertically\r\n       */\r\n      autoExpandVertically: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxContainer);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxItemMixin } from '@vaadin/combo-box/src/vaadin-combo-box-item-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An item element used by the `<vaadin-multi-select-combo-box>` dropdown.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name   | Description\r\n * ------------|--------------\r\n * `checkmark` | The graphical checkmark shown for a selected item\r\n * `content`   | The element that wraps the item content\r\n *\r\n * The following state attributes are exposed for styling:\r\n *\r\n * Attribute    | Description\r\n * -------------|-------------\r\n * `selected`   | Set when the item is selected\r\n * `focused`    | Set when the item is focused\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @customElement\r\n * @mixes ComboBoxItemMixin\r\n * @mixes ThemableMixin\r\n * @mixes DirMixin\r\n * @private\r\n */\r\nexport class MultiSelectComboBoxItem extends ComboBoxItemMixin(ThemableMixin(DirMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-item';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n      <span part=\"checkmark\" aria-hidden=\"true\"></span>\r\n      <div part=\"content\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxItem);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxOverlayMixin } from '@vaadin/combo-box/src/vaadin-combo-box-overlay-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { OverlayMixin } from '@vaadin/overlay/src/vaadin-overlay-mixin.js';\r\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\r\nimport { css, registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst multiSelectComboBoxOverlayStyles = css`\r\n  #overlay {\r\n    width: var(\r\n      --vaadin-multi-select-combo-box-overlay-width,\r\n      var(--_vaadin-multi-select-combo-box-overlay-default-width, auto)\r\n    );\r\n  }\r\n\r\n  [part='content'] {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box-overlay', [overlayStyles, multiSelectComboBoxOverlayStyles], {\r\n  moduleId: 'vaadin-multi-select-combo-box-overlay-styles',\r\n});\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ComboBoxOverlayMixin\r\n * @mixes DirMixin\r\n * @mixes OverlayMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nclass MultiSelectComboBoxOverlay extends ComboBoxOverlayMixin(OverlayMixin(DirMixin(ThemableMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-overlay';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div id=\"backdrop\" part=\"backdrop\" hidden></div>\r\n      <div part=\"overlay\" id=\"overlay\">\r\n        <div part=\"loader\"></div>\r\n        <div part=\"content\" id=\"content\"><slot></slot></div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxOverlay);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\r\nimport { ComboBoxScrollerMixin } from '@vaadin/combo-box/src/vaadin-combo-box-scroller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ComboBoxScrollerMixin\r\n * @private\r\n */\r\nexport class MultiSelectComboBoxScroller extends ComboBoxScrollerMixin(PolymerElement) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-scroller';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n          min-height: 1px;\r\n          overflow: auto;\r\n\r\n          /* Fixes item background from getting on top of scrollbars on Safari */\r\n          transform: translate3d(0, 0, 0);\r\n\r\n          /* Enable momentum scrolling on iOS */\r\n          -webkit-overflow-scrolling: touch;\r\n\r\n          /* Fixes scrollbar disappearing when 'Show scroll bars: Always' enabled in Safari */\r\n          box-shadow: 0 0 0 white;\r\n        }\r\n\r\n        #selector {\r\n          border-width: var(--_vaadin-multi-select-combo-box-items-container-border-width);\r\n          border-style: var(--_vaadin-multi-select-combo-box-items-container-border-style);\r\n          border-color: var(--_vaadin-multi-select-combo-box-items-container-border-color, transparent);\r\n          position: relative;\r\n        }\r\n      </style>\r\n      <div id=\"selector\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.setAttribute('aria-multiselectable', 'true');\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @override\r\n   */\r\n  _isItemSelected(item, _selectedItem, itemIdPath) {\r\n    if (item instanceof ComboBoxPlaceholder) {\r\n      return false;\r\n    }\r\n\r\n    if (this.owner.readonly) {\r\n      return false;\r\n    }\r\n\r\n    return this.owner._findIndex(item, this.owner.selectedItems, itemIdPath) > -1;\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} el\r\n   * @param {number} index\r\n   * @protected\r\n   * @override\r\n   */\r\n  _updateElement(el, index) {\r\n    super._updateElement(el, index);\r\n\r\n    el.toggleAttribute('readonly', this.owner.readonly);\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxScroller);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ComboBoxDataProviderMixin } from '@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js';\r\nimport { ComboBoxMixin } from '@vaadin/combo-box/src/vaadin-combo-box-mixin.js';\r\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes ComboBoxDataProviderMixin\r\n * @mixes ComboBoxMixin\r\n */\r\nexport const MultiSelectComboBoxInternalMixin = (superClass) =>\r\n  class MultiSelectComboBoxInternalMixinClass extends ComboBoxDataProviderMixin(ComboBoxMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * A subset of items, filtered based on the user input.\r\n         */\r\n        filteredItems: {\r\n          type: Array,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When true, filter string isn't cleared after selecting an item.\r\n         */\r\n        keepFilter: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * When set to `true`, \"loading\" attribute is set\r\n         * on the host and the overlay element.\r\n         * @type {boolean}\r\n         */\r\n        loading: {\r\n          type: Boolean,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Total number of items.\r\n         * @type {number | undefined}\r\n         */\r\n        size: {\r\n          type: Number,\r\n          notify: true,\r\n          observer: '_sizeChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Selected items to render in the dropdown\r\n         * when the component is read-only.\r\n         */\r\n        selectedItems: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n\r\n        /**\r\n         * Set to true to group selected items at the top of the overlay.\r\n         * @attr {boolean} selected-items-on-top\r\n         */\r\n        selectedItemsOnTop: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Last input value entered by the user before value is updated.\r\n         * Used to store `filter` property value before clearing it.\r\n         */\r\n        lastFilter: {\r\n          type: String,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A subset of items to be shown at the top of the overlay.\r\n         */\r\n        topGroup: {\r\n          type: Array,\r\n          observer: '_topGroupChanged',\r\n          sync: true,\r\n        },\r\n\r\n        _target: {\r\n          type: Object,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_readonlyChanged(readonly)'];\r\n    }\r\n\r\n    /**\r\n     * Reference to the clear button element.\r\n     * @protected\r\n     * @return {!HTMLElement}\r\n     */\r\n    get clearElement() {\r\n      return this.querySelector('[part=\"clear-button\"]');\r\n    }\r\n\r\n    /**\r\n     * Tag name prefix used by scroller and items.\r\n     * @protected\r\n     * @return {string}\r\n     */\r\n    get _tagNamePrefix() {\r\n      return 'vaadin-multi-select-combo-box';\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.addEventListener('custom-value-set', this.__onCustomValueSet.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to allow opening dropdown when readonly.\r\n     * @override\r\n     */\r\n    open() {\r\n      if (!this.disabled && !(this.readonly && this.selectedItems.length === 0)) {\r\n        this.opened = true;\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this._target = this;\r\n      this._toggleElement = this.querySelector('.toggle-button');\r\n    }\r\n\r\n    /** @protected */\r\n    _updateOverlayWidth() {\r\n      this.$.overlay._updateOverlayWidth();\r\n    }\r\n\r\n    /** @private */\r\n    _readonlyChanged() {\r\n      this._setDropdownItems(this.filteredItems);\r\n    }\r\n\r\n    /**\r\n     * Override combo-box method to group selected\r\n     * items at the top of the overlay.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _setDropdownItems(items) {\r\n      if (this.readonly) {\r\n        super._setDropdownItems(this.selectedItems);\r\n        return;\r\n      }\r\n\r\n      if (this.filter || !this.selectedItemsOnTop) {\r\n        super._setDropdownItems(items);\r\n        return;\r\n      }\r\n\r\n      if (items && items.length && this.topGroup && this.topGroup.length) {\r\n        // Filter out items included to the top group.\r\n        const filteredItems = items.filter(\r\n          (item) => this._comboBox._findIndex(item, this.topGroup, this.itemIdPath) === -1,\r\n        );\r\n\r\n        super._setDropdownItems(this.topGroup.concat(filteredItems));\r\n        return;\r\n      }\r\n\r\n      super._setDropdownItems(items);\r\n    }\r\n\r\n    /** @private */\r\n    _topGroupChanged(topGroup) {\r\n      if (topGroup) {\r\n        this._setDropdownItems(this.filteredItems);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override combo-box method to set correct owner for using by item renderers.\r\n     * This needs to be done before the scroller gets added to the DOM to ensure\r\n     * Lit directive works in case when combo-box is opened using attribute.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _initScroller() {\r\n      const comboBox = this.getRootNode().host;\r\n\r\n      this._comboBox = comboBox;\r\n\r\n      super._initScroller(comboBox);\r\n    }\r\n\r\n    /**\r\n     * Override Enter handler to keep overlay open\r\n     * when item is selected or unselected.\r\n     * @param {!Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onEnter(event) {\r\n      if (this.opened) {\r\n        // Do not submit the surrounding form.\r\n        event.preventDefault();\r\n        // Do not trigger global listeners.\r\n        event.stopPropagation();\r\n\r\n        if (this.readonly) {\r\n          this.close();\r\n        } else if (this._hasValidInputValue()) {\r\n          // Keep selected item focused after committing on Enter.\r\n          const focusedItem = this._dropdownItems[this._focusedIndex];\r\n          this._commitValue();\r\n          this._focusedIndex = this._dropdownItems.indexOf(focusedItem);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      super._onEnter(event);\r\n    }\r\n\r\n    /**\r\n     * Override Escape handler to not clear\r\n     * selected items when readonly.\r\n     * @param {!Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onEscape(event) {\r\n      if (this.readonly) {\r\n        event.stopPropagation();\r\n        if (this.opened) {\r\n          this.close();\r\n        }\r\n        return;\r\n      }\r\n\r\n      super._onEscape(event);\r\n    }\r\n\r\n    /**\r\n     * Override from combo-box to ignore requests to clear the filter if the\r\n     * keepFilter option is enabled. Exceptions are when the dropdown is closed,\r\n     * so the filter is still cleared on cancel and focus out.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _clearFilter() {\r\n      if (!this.keepFilter || !this.opened) {\r\n        super._clearFilter();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method from combo-box to always clear the filter when reverting\r\n     * the input value, regardless of the keepFilter option.\r\n     * @override\r\n     * @protected\r\n     */\r\n    _revertInputValueToValue() {\r\n      super._revertInputValueToValue();\r\n      this.filter = '';\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @override\r\n     */\r\n    _commitValue() {\r\n      // Store filter value for checking if user input is matching\r\n      // an item which is already selected, to not un-select it.\r\n      this.lastFilter = this.filter;\r\n\r\n      super._commitValue();\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not update focused item when readonly.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onArrowDown() {\r\n      if (!this.readonly) {\r\n        super._onArrowDown();\r\n      } else if (!this.opened) {\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not update focused item when readonly.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onArrowUp() {\r\n      if (!this.readonly) {\r\n        super._onArrowUp();\r\n      } else if (!this.opened) {\r\n        this.open();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to close dropdown on blur when readonly.\r\n     * @param {boolean} focused\r\n     * @protected\r\n     * @override\r\n     */\r\n    _setFocused(focused) {\r\n      // Disable combo-box logic that updates selectedItem\r\n      // based on the overlay focused index on input blur\r\n      if (!focused) {\r\n        this._ignoreCommitValue = true;\r\n      }\r\n\r\n      super._setFocused(focused);\r\n\r\n      if (!focused && this.readonly && !this._closeOnBlurIsPrevented) {\r\n        this.close();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not commit an already selected item again\r\n     * after closing overlay on outside click.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onClosed() {\r\n      this._ignoreCommitValue = true;\r\n\r\n      super._onClosed();\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not commit an already selected item again\r\n     * on blur, which would result in un-selecting.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _detectAndDispatchChange() {\r\n      if (this._ignoreCommitValue) {\r\n        this._ignoreCommitValue = false;\r\n\r\n        // Reset internal combo-box state\r\n        this.clear();\r\n        this._inputElementValue = '';\r\n        return;\r\n      }\r\n\r\n      super._detectAndDispatchChange();\r\n    }\r\n\r\n    /**\r\n     * @param {CustomEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _overlaySelectedItemChanged(event) {\r\n      event.stopPropagation();\r\n\r\n      // Do not un-select on click when readonly\r\n      if (this.readonly) {\r\n        return;\r\n      }\r\n\r\n      if (event.detail.item instanceof ComboBoxPlaceholder) {\r\n        return;\r\n      }\r\n\r\n      if (this.opened) {\r\n        // Store filter value for checking if user input is matching\r\n        // an item which is already selected, to not un-select it.\r\n        this.lastFilter = this.filter;\r\n\r\n        this.dispatchEvent(\r\n          new CustomEvent('combo-box-item-selected', {\r\n            detail: {\r\n              item: event.detail.item,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not request data provider when read-only.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _shouldFetchData() {\r\n      if (this.readonly) {\r\n        return false;\r\n      }\r\n\r\n      return super._shouldFetchData();\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from the combo-box\r\n     * to not clear the data provider cache when read-only.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    clearCache() {\r\n      if (this.readonly) {\r\n        return;\r\n      }\r\n\r\n      super.clearCache();\r\n    }\r\n\r\n    /** @private */\r\n    __onCustomValueSet(event) {\r\n      // Prevent setting custom value on input blur or outside click,\r\n      // so it can be only committed explicitly by pressing Enter.\r\n      if (this._ignoreCommitValue) {\r\n        event.stopImmediatePropagation();\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-multi-select-combo-box-item.js';\r\nimport './vaadin-multi-select-combo-box-overlay.js';\r\nimport './vaadin-multi-select-combo-box-scroller.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { MultiSelectComboBoxInternalMixin } from './vaadin-multi-select-combo-box-internal-mixin.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes MultiSelectComboBoxInternalMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nclass MultiSelectComboBoxInternal extends MultiSelectComboBoxInternalMixin(ThemableMixin(PolymerElement)) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-internal';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host([opened]) {\r\n          pointer-events: auto;\r\n        }\r\n      </style>\r\n\r\n      <slot></slot>\r\n\r\n      <vaadin-multi-select-combo-box-overlay\r\n        id=\"overlay\"\r\n        opened=\"[[_overlayOpened]]\"\r\n        loading$=\"[[loading]]\"\r\n        theme$=\"[[_theme]]\"\r\n        position-target=\"[[_target]]\"\r\n        no-vertical-overlap\r\n        restore-focus-node=\"[[inputElement]]\"\r\n      ></vaadin-multi-select-combo-box-overlay>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBoxInternal);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { announce } from '@vaadin/a11y-base/src/announce.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes InputControlMixin\r\n * @mixes ResizeMixin\r\n */\r\nexport const MultiSelectComboBoxMixin = (superClass) =>\r\n  class MultiSelectComboBoxMixinClass extends InputControlMixin(ResizeMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Set to true to auto expand horizontally, causing input field to\r\n         * grow until max width is reached.\r\n         * @attr {boolean} auto-expand-horizontally\r\n         */\r\n        autoExpandHorizontally: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          observer: '_autoExpandHorizontallyChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set to true to not collapse selected items chips into the overflow\r\n         * chip and instead always expand vertically, causing input field to\r\n         * wrap into multiple lines when width is limited.\r\n         * @attr {boolean} auto-expand-vertically\r\n         */\r\n        autoExpandVertically: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          observer: '_autoExpandVerticallyChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set true to prevent the overlay from opening automatically.\r\n         * @attr {boolean} auto-open-disabled\r\n         */\r\n        autoOpenDisabled: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set to true to display the clear icon which clears the input.\r\n         * @attr {boolean} clear-button-visible\r\n         */\r\n        clearButtonVisible: {\r\n          type: Boolean,\r\n          reflectToAttribute: true,\r\n          observer: '_clearButtonVisibleChanged',\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A full set of items to filter the visible options from.\r\n         * The items can be of either `String` or `Object` type.\r\n         */\r\n        items: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A function used to generate CSS class names for dropdown\r\n         * items and selected chips based on the item. The return\r\n         * value should be the generated class name as a string, or\r\n         * multiple class names separated by whitespace characters.\r\n         */\r\n        itemClassNameGenerator: {\r\n          type: Object,\r\n          observer: '__itemClassNameGeneratorChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The item property used for a visual representation of the item.\r\n         * @attr {string} item-label-path\r\n         */\r\n        itemLabelPath: {\r\n          type: String,\r\n          value: 'label',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path for the value of the item. If `items` is an array of objects,\r\n         * this property is used as a string value for the selected item.\r\n         * @attr {string} item-value-path\r\n         */\r\n        itemValuePath: {\r\n          type: String,\r\n          value: 'value',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Path for the id of the item, used to detect whether the item is selected.\r\n         * @attr {string} item-id-path\r\n         */\r\n        itemIdPath: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The object used to localize this component.\r\n         * To change the default localization, replace the entire\r\n         * _i18n_ object or just the property you want to modify.\r\n         *\r\n         * The object has the following JSON structure and default values:\r\n         * ```\r\n         * {\r\n         *   // Screen reader announcement on clear button click.\r\n         *   cleared: 'Selection cleared',\r\n         *   // Screen reader announcement when a chip is focused.\r\n         *   focused: ' focused. Press Backspace to remove',\r\n         *   // Screen reader announcement when item is selected.\r\n         *   selected: 'added to selection',\r\n         *   // Screen reader announcement when item is deselected.\r\n         *   deselected: 'removed from selection',\r\n         *   // Screen reader announcement of the selected items count.\r\n         *   // {count} is replaced with the actual count of items.\r\n         *   total: '{count} items selected',\r\n         * }\r\n         * ```\r\n         * @type {!MultiSelectComboBoxI18n}\r\n         * @default {English/US}\r\n         */\r\n        i18n: {\r\n          type: Object,\r\n          value: () => {\r\n            return {\r\n              cleared: 'Selection cleared',\r\n              focused: 'focused. Press Backspace to remove',\r\n              selected: 'added to selection',\r\n              deselected: 'removed from selection',\r\n              total: '{count} items selected',\r\n            };\r\n          },\r\n        },\r\n\r\n        /**\r\n         * When true, filter string isn't cleared after selecting an item.\r\n         */\r\n        keepFilter: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * True when loading items from the data provider, false otherwise.\r\n         */\r\n        loading: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A space-delimited list of CSS class names to set on the overlay element.\r\n         *\r\n         * @attr {string} overlay-class\r\n         */\r\n        overlayClass: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When present, it specifies that the field is read-only.\r\n         */\r\n        readonly: {\r\n          type: Boolean,\r\n          value: false,\r\n          observer: '_readonlyChanged',\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The list of selected items.\r\n         * Note: modifying the selected items creates a new array each time.\r\n         */\r\n        selectedItems: {\r\n          type: Array,\r\n          value: () => [],\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * True if the dropdown is open, false otherwise.\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          notify: true,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Total number of items.\r\n         */\r\n        size: {\r\n          type: Number,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Number of items fetched at a time from the data provider.\r\n         * @attr {number} page-size\r\n         */\r\n        pageSize: {\r\n          type: Number,\r\n          value: 50,\r\n          observer: '_pageSizeChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Function that provides items lazily. Receives two arguments:\r\n         *\r\n         * - `params` - Object with the following properties:\r\n         *   - `params.page` Requested page index\r\n         *   - `params.pageSize` Current page size\r\n         *   - `params.filter` Currently applied filter\r\n         *\r\n         * - `callback(items, size)` - Callback function with arguments:\r\n         *   - `items` Current page of items\r\n         *   - `size` Total number of items.\r\n         */\r\n        dataProvider: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When true, the user can input a value that is not present in the items list.\r\n         * @attr {boolean} allow-custom-value\r\n         */\r\n        allowCustomValue: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * A hint to the user of what can be entered in the control.\r\n         * The placeholder will be only displayed in the case when\r\n         * there is no item selected.\r\n         */\r\n        placeholder: {\r\n          type: String,\r\n          observer: '_placeholderChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Custom function for rendering the content of every item.\r\n         * Receives three arguments:\r\n         *\r\n         * - `root` The `<vaadin-multi-select-combo-box-item>` internal container DOM element.\r\n         * - `comboBox` The reference to the `<vaadin-multi-select-combo-box>` element.\r\n         * - `model` The object with the properties related with the rendered\r\n         *   item, contains:\r\n         *   - `model.index` The index of the rendered item.\r\n         *   - `model.item` The item.\r\n         */\r\n        renderer: {\r\n          type: Function,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Filtering string the user has typed into the input field.\r\n         */\r\n        filter: {\r\n          type: String,\r\n          value: '',\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A subset of items, filtered based on the user input. Filtered items\r\n         * can be assigned directly to omit the internal filtering functionality.\r\n         * The items can be of either `String` or `Object` type.\r\n         */\r\n        filteredItems: {\r\n          type: Array,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set to true to group selected items at the top of the overlay.\r\n         * @attr {boolean} selected-items-on-top\r\n         */\r\n        selectedItemsOnTop: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        value: {\r\n          type: String,\r\n        },\r\n\r\n        /** @private */\r\n        _overflowItems: {\r\n          type: Array,\r\n          value: () => [],\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _focusedChipIndex: {\r\n          type: Number,\r\n          value: -1,\r\n          observer: '_focusedChipIndexChanged',\r\n        },\r\n\r\n        /** @private */\r\n        _lastFilter: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _topGroup: {\r\n          type: Array,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '_selectedItemsChanged(selectedItems)',\r\n        '__updateOverflowChip(_overflow, _overflowItems, disabled, readonly)',\r\n        '__updateTopGroup(selectedItemsOnTop, selectedItems, opened)',\r\n      ];\r\n    }\r\n\r\n    /** @protected */\r\n    get slotStyles() {\r\n      const tag = this.localName;\r\n      return [\r\n        ...super.slotStyles,\r\n        `\r\n        ${tag}[has-value] input::placeholder {\r\n          color: transparent !important;\r\n          forced-color-adjust: none;\r\n        }\r\n      `,\r\n      ];\r\n    }\r\n\r\n    /**\r\n     * Used by `InputControlMixin` as a reference to the clear button element.\r\n     * @protected\r\n     * @return {!HTMLElement}\r\n     */\r\n    get clearElement() {\r\n      return this.$.clearButton;\r\n    }\r\n\r\n    /** @protected */\r\n    get _chips() {\r\n      return [...this.querySelectorAll('[slot=\"chip\"]')];\r\n    }\r\n\r\n    /**\r\n     * Override a getter from `InputMixin` to compute\r\n     * the presence of value based on `selectedItems`.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    get _hasValue() {\r\n      return this.selectedItems && this.selectedItems.length > 0;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(\r\n        new InputController(this, (input) => {\r\n          this._setInputElement(input);\r\n          this._setFocusElement(input);\r\n          this.stateTarget = input;\r\n          this.ariaTarget = input;\r\n        }),\r\n      );\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this.addController(this._tooltipController);\r\n      this._tooltipController.setPosition('top');\r\n      this._tooltipController.setAriaTarget(this.inputElement);\r\n      this._tooltipController.setShouldShow((target) => !target.opened);\r\n\r\n      this._inputField = this.shadowRoot.querySelector('[part=\"input-field\"]');\r\n\r\n      this._overflowController = new SlotController(this, 'overflow', 'vaadin-multi-select-combo-box-chip', {\r\n        initializer: (chip) => {\r\n          chip.addEventListener('mousedown', (e) => this._preventBlur(e));\r\n          this._overflow = chip;\r\n        },\r\n      });\r\n      this.addController(this._overflowController);\r\n\r\n      this.__updateChips();\r\n\r\n      processTemplates(this);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current input value satisfies all constraints (if any).\r\n     * @return {boolean}\r\n     */\r\n    checkValidity() {\r\n      return this.required && !this.readonly ? this._hasValue : true;\r\n    }\r\n\r\n    /**\r\n     * Clears the selected items.\r\n     */\r\n    clear() {\r\n      this.__updateSelection([]);\r\n\r\n      announce(this.i18n.cleared);\r\n    }\r\n\r\n    /**\r\n     * Clears the cached pages and reloads data from data provider when needed.\r\n     */\r\n    clearCache() {\r\n      if (this.$ && this.$.comboBox) {\r\n        this.$.comboBox.clearCache();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Requests an update for the content of items.\r\n     * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\r\n     *\r\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\r\n     */\r\n    requestContentUpdate() {\r\n      if (this.$ && this.$.comboBox) {\r\n        this.$.comboBox.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `DisabledMixin` to forward disabled to chips.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _disabledChanged(disabled, oldDisabled) {\r\n      super._disabledChanged(disabled, oldDisabled);\r\n\r\n      if (disabled || oldDisabled) {\r\n        this.__updateChips();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin` to forward the input to combo-box.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _inputElementChanged(input) {\r\n      super._inputElementChanged(input);\r\n\r\n      if (input) {\r\n        this.$.comboBox._setInputElement(input);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin` to validate on blur.\r\n     * @param {boolean} focused\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      // Do not validate when focusout is caused by document\r\n      // losing focus, which happens on browser tab switch.\r\n      if (!focused && document.hasFocus()) {\r\n        this._focusedChipIndex = -1;\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Implement callback from `ResizeMixin` to update chips.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onResize() {\r\n      this.__updateChips();\r\n    }\r\n\r\n    /**\r\n     * Override method from `DelegateStateMixin` to set required state\r\n     * using `aria-required` attribute instead of `required`, in order\r\n     * to prevent screen readers from announcing \"invalid entry\".\r\n     * @protected\r\n     * @override\r\n     */\r\n    _delegateAttribute(name, value) {\r\n      if (!this.stateTarget) {\r\n        return;\r\n      }\r\n\r\n      if (name === 'required') {\r\n        this._delegateAttribute('aria-required', value ? 'true' : false);\r\n        return;\r\n      }\r\n\r\n      super._delegateAttribute(name, value);\r\n    }\r\n\r\n    /** @private */\r\n    _autoExpandHorizontallyChanged(autoExpand, oldAutoExpand) {\r\n      if (autoExpand || oldAutoExpand) {\r\n        this.__updateChips();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _autoExpandVerticallyChanged(autoExpand, oldAutoExpand) {\r\n      if (autoExpand || oldAutoExpand) {\r\n        this.__updateChips();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Setting clear button visible reduces total space available\r\n     * for rendering chips, and making it hidden increases it.\r\n     * @private\r\n     */\r\n    _clearButtonVisibleChanged(visible, oldVisible) {\r\n      if (visible || oldVisible) {\r\n        this.__updateChips();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Implement two-way binding for the `filteredItems` property\r\n     * that can be set on the internal combo-box element.\r\n     *\r\n     * @param {CustomEvent} event\r\n     * @private\r\n     */\r\n    _onFilteredItemsChanged(event) {\r\n      const { value } = event.detail;\r\n      if (Array.isArray(value) || value == null) {\r\n        this.filteredItems = value;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _readonlyChanged(readonly, oldReadonly) {\r\n      if (readonly || oldReadonly) {\r\n        this.__updateChips();\r\n      }\r\n\r\n      if (this.dataProvider) {\r\n        this.clearCache();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __itemClassNameGeneratorChanged(generator, oldGenerator) {\r\n      if (generator || oldGenerator) {\r\n        this.__updateChips();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _pageSizeChanged(pageSize, oldPageSize) {\r\n      if (Math.floor(pageSize) !== pageSize || pageSize <= 0) {\r\n        this.pageSize = oldPageSize;\r\n        console.error('\"pageSize\" value must be an integer > 0');\r\n      }\r\n\r\n      this.$.comboBox.pageSize = this.pageSize;\r\n    }\r\n\r\n    /** @private */\r\n    _placeholderChanged(placeholder) {\r\n      const tmpPlaceholder = this.__tmpA11yPlaceholder;\r\n      // Do not store temporary placeholder\r\n      if (tmpPlaceholder !== placeholder) {\r\n        this.__savedPlaceholder = placeholder;\r\n\r\n        if (tmpPlaceholder) {\r\n          this.placeholder = tmpPlaceholder;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _selectedItemsChanged(selectedItems) {\r\n      this._toggleHasValue(this._hasValue);\r\n\r\n      // Use placeholder for announcing items\r\n      if (this._hasValue) {\r\n        const tmpPlaceholder = this._mergeItemLabels(selectedItems);\r\n        if (this.__tmpA11yPlaceholder === undefined) {\r\n          this.__savedPlaceholder = this.placeholder;\r\n        }\r\n        this.__tmpA11yPlaceholder = tmpPlaceholder;\r\n        this.placeholder = tmpPlaceholder;\r\n      } else if (this.__tmpA11yPlaceholder !== undefined) {\r\n        delete this.__tmpA11yPlaceholder;\r\n        this.placeholder = this.__savedPlaceholder;\r\n      }\r\n\r\n      // Re-render chips\r\n      this.__updateChips();\r\n\r\n      // Update selected for dropdown items\r\n      this.requestContentUpdate();\r\n\r\n      if (this.opened) {\r\n        this.$.comboBox._updateOverlayWidth();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _getItemLabel(item) {\r\n      return this.$.comboBox._getItemLabel(item);\r\n    }\r\n\r\n    /** @private */\r\n    _mergeItemLabels(items) {\r\n      return items.map((item) => this._getItemLabel(item)).join(', ');\r\n    }\r\n\r\n    /** @private */\r\n    _findIndex(item, selectedItems, itemIdPath) {\r\n      if (itemIdPath && item) {\r\n        for (let index = 0; index < selectedItems.length; index++) {\r\n          if (selectedItems[index] && selectedItems[index][itemIdPath] === item[itemIdPath]) {\r\n            return index;\r\n          }\r\n        }\r\n        return -1;\r\n      }\r\n\r\n      return selectedItems.indexOf(item);\r\n    }\r\n\r\n    /**\r\n     * Clear the internal combo box value and filter. Filter will not be cleared\r\n     * when the `keepFilter` option is enabled. Using `force` can enforce clearing\r\n     * the filter.\r\n     * @param {boolean} force overrides the keepFilter option\r\n     * @private\r\n     */\r\n    __clearInternalValue(force = false) {\r\n      if (!this.keepFilter || force) {\r\n        // Clear both combo box value and filter.\r\n        this.filter = '';\r\n        this.$.comboBox.clear();\r\n      } else {\r\n        // Only clear combo box value. This effectively resets _lastCommittedValue\r\n        // which allows toggling the same item multiple times via keyboard.\r\n        this.$.comboBox.clear();\r\n        // Restore input to the filter value. Needed when items are\r\n        // navigated with keyboard, which overrides the input value\r\n        // with the item label.\r\n        this._inputElementValue = this.filter;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __announceItem(itemLabel, isSelected, itemCount) {\r\n      const state = isSelected ? 'selected' : 'deselected';\r\n      const total = this.i18n.total.replace('{count}', itemCount || 0);\r\n      announce(`${itemLabel} ${this.i18n[state]} ${total}`);\r\n    }\r\n\r\n    /** @private */\r\n    __removeItem(item) {\r\n      const itemsCopy = [...this.selectedItems];\r\n      itemsCopy.splice(itemsCopy.indexOf(item), 1);\r\n      this.__updateSelection(itemsCopy);\r\n      const itemLabel = this._getItemLabel(item);\r\n      this.__announceItem(itemLabel, false, itemsCopy.length);\r\n    }\r\n\r\n    /** @private */\r\n    __selectItem(item) {\r\n      const itemsCopy = [...this.selectedItems];\r\n\r\n      const index = this._findIndex(item, itemsCopy, this.itemIdPath);\r\n      const itemLabel = this._getItemLabel(item);\r\n\r\n      let isSelected = false;\r\n\r\n      if (index !== -1) {\r\n        const lastFilter = this._lastFilter;\r\n        // Do not unselect when manually typing and committing an already selected item.\r\n        if (lastFilter && lastFilter.toLowerCase() === itemLabel.toLowerCase()) {\r\n          this.__clearInternalValue();\r\n          return;\r\n        }\r\n\r\n        itemsCopy.splice(index, 1);\r\n      } else {\r\n        itemsCopy.push(item);\r\n        isSelected = true;\r\n      }\r\n\r\n      this.__updateSelection(itemsCopy);\r\n\r\n      // Suppress `value-changed` event.\r\n      this.__clearInternalValue();\r\n\r\n      this.__announceItem(itemLabel, isSelected, itemsCopy.length);\r\n    }\r\n\r\n    /** @private */\r\n    __updateSelection(selectedItems) {\r\n      this.selectedItems = selectedItems;\r\n\r\n      this._requestValidation();\r\n\r\n      this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\r\n    }\r\n\r\n    /** @private */\r\n    __updateTopGroup(selectedItemsOnTop, selectedItems, opened) {\r\n      if (!selectedItemsOnTop) {\r\n        this._topGroup = [];\r\n      } else if (!opened) {\r\n        this._topGroup = [...selectedItems];\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __createChip(item) {\r\n      const chip = document.createElement('vaadin-multi-select-combo-box-chip');\r\n      chip.setAttribute('slot', 'chip');\r\n\r\n      chip.item = item;\r\n      chip.disabled = this.disabled;\r\n      chip.readonly = this.readonly;\r\n\r\n      const label = this._getItemLabel(item);\r\n      chip.label = label;\r\n      chip.setAttribute('title', label);\r\n\r\n      if (typeof this.itemClassNameGenerator === 'function') {\r\n        chip.className = this.itemClassNameGenerator(item);\r\n      }\r\n\r\n      chip.addEventListener('item-removed', (e) => this._onItemRemoved(e));\r\n      chip.addEventListener('mousedown', (e) => this._preventBlur(e));\r\n\r\n      return chip;\r\n    }\r\n\r\n    /** @private */\r\n    __getOverflowWidth() {\r\n      const chip = this._overflow;\r\n\r\n      chip.style.visibility = 'hidden';\r\n      chip.removeAttribute('hidden');\r\n\r\n      const count = chip.getAttribute('count');\r\n\r\n      // Detect max possible width of the overflow chip\r\n      // by measuring it with widest number (2 digits)\r\n      chip.setAttribute('count', '99');\r\n      const overflowStyle = getComputedStyle(chip);\r\n      const overflowWidth = chip.clientWidth + parseInt(overflowStyle.marginInlineStart);\r\n\r\n      chip.setAttribute('count', count);\r\n      chip.setAttribute('hidden', '');\r\n      chip.style.visibility = '';\r\n\r\n      return overflowWidth;\r\n    }\r\n\r\n    /** @private */\r\n    __updateChips() {\r\n      if (!this._inputField || !this.inputElement) {\r\n        return;\r\n      }\r\n\r\n      // Clear all chips except the overflow\r\n      this._chips.forEach((chip) => {\r\n        chip.remove();\r\n      });\r\n\r\n      const items = [...this.selectedItems];\r\n\r\n      // Detect available remaining width for chips\r\n      const totalWidth = this._inputField.$.wrapper.clientWidth;\r\n      const inputWidth = parseInt(getComputedStyle(this.inputElement).flexBasis);\r\n\r\n      let remainingWidth = totalWidth - inputWidth;\r\n\r\n      if (items.length > 1) {\r\n        remainingWidth -= this.__getOverflowWidth();\r\n      }\r\n\r\n      const chipMinWidth = parseInt(getComputedStyle(this).getPropertyValue('--_chip-min-width'));\r\n\r\n      if (this.autoExpandHorizontally) {\r\n        const chips = [];\r\n\r\n        // First, add all chips to make the field fully expand\r\n        for (let i = items.length - 1, refNode = null; i >= 0; i--) {\r\n          const chip = this.__createChip(items[i]);\r\n          this.insertBefore(chip, refNode);\r\n          refNode = chip;\r\n          chips.unshift(chip);\r\n        }\r\n\r\n        const overflowItems = [];\r\n        const availableWidth = this._inputField.$.wrapper.clientWidth - this.$.chips.clientWidth;\r\n\r\n        // When auto expanding vertically, no need to measure width\r\n        if (!this.autoExpandVertically && availableWidth < inputWidth) {\r\n          // Always show at least last item as a chip\r\n          while (chips.length > 1) {\r\n            const lastChip = chips.pop();\r\n            lastChip.remove();\r\n            overflowItems.unshift(items.pop());\r\n\r\n            // Remove chips until there is enough width for the input element to fit\r\n            const neededWidth = overflowItems.length > 0 ? inputWidth + this.__getOverflowWidth() : inputWidth;\r\n            if (this._inputField.$.wrapper.clientWidth - this.$.chips.clientWidth >= neededWidth) {\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (chips.length === 1) {\r\n            chips[0].style.maxWidth = `${Math.max(chipMinWidth, remainingWidth)}px`;\r\n          }\r\n        }\r\n\r\n        this._overflowItems = overflowItems;\r\n        return;\r\n      }\r\n\r\n      // Add chips until remaining width is exceeded\r\n      for (let i = items.length - 1, refNode = null; i >= 0; i--) {\r\n        const chip = this.__createChip(items[i]);\r\n        this.insertBefore(chip, refNode);\r\n\r\n        // When auto expanding vertically, no need to measure remaining width\r\n        if (!this.autoExpandVertically && this.$.chips.clientWidth > remainingWidth) {\r\n          // Always show at least last selected item as a chip\r\n          if (refNode === null) {\r\n            chip.style.maxWidth = `${Math.max(chipMinWidth, remainingWidth)}px`;\r\n          } else {\r\n            chip.remove();\r\n            break;\r\n          }\r\n        }\r\n\r\n        items.pop();\r\n        refNode = chip;\r\n      }\r\n\r\n      this._overflowItems = items;\r\n    }\r\n\r\n    /** @private */\r\n    __updateOverflowChip(overflow, items, disabled, readonly) {\r\n      if (overflow) {\r\n        const count = items.length;\r\n\r\n        overflow.label = `${count}`;\r\n        overflow.setAttribute('count', `${count}`);\r\n        overflow.setAttribute('title', this._mergeItemLabels(items));\r\n        overflow.toggleAttribute('hidden', count === 0);\r\n\r\n        overflow.disabled = disabled;\r\n        overflow.readonly = readonly;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onClearButtonTouchend(event) {\r\n      // Cancel the following click and focus events\r\n      event.preventDefault();\r\n      // Prevent default combo box behavior which can otherwise unnecessarily\r\n      // clear the input and filter\r\n      event.stopPropagation();\r\n\r\n      this.clear();\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputControlMixin` and clear items.\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onClearButtonClick(event) {\r\n      event.stopPropagation();\r\n\r\n      this.clear();\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `InputControlMixin` to\r\n     * stop the change event re-targeted from the input.\r\n     *\r\n     * @param {!Event} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onChange(event) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     * Do not call `super` in order to override clear\r\n     * button logic defined in `InputControlMixin`.\r\n     *\r\n     * @param {!KeyboardEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onEscape(event) {\r\n      if (this.clearButtonVisible && this.selectedItems && this.selectedItems.length) {\r\n        event.stopPropagation();\r\n        this.selectedItems = [];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override an event listener from `KeyboardMixin`.\r\n     * @param {KeyboardEvent} event\r\n     * @protected\r\n     * @override\r\n     */\r\n    _onKeyDown(event) {\r\n      super._onKeyDown(event);\r\n\r\n      const chips = this._chips;\r\n\r\n      if (!this.readonly && chips.length > 0) {\r\n        switch (event.key) {\r\n          case 'Backspace':\r\n            this._onBackSpace(chips);\r\n            break;\r\n          case 'ArrowLeft':\r\n            this._onArrowLeft(chips, event);\r\n            break;\r\n          case 'ArrowRight':\r\n            this._onArrowRight(chips, event);\r\n            break;\r\n          default:\r\n            this._focusedChipIndex = -1;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onArrowLeft(chips, event) {\r\n      if (this.inputElement.selectionStart !== 0) {\r\n        return;\r\n      }\r\n\r\n      const idx = this._focusedChipIndex;\r\n      if (idx !== -1) {\r\n        event.preventDefault();\r\n      }\r\n      let newIdx;\r\n\r\n      if (!this.__isRTL) {\r\n        if (idx === -1) {\r\n          // Focus last chip\r\n          newIdx = chips.length - 1;\r\n        } else if (idx > 0) {\r\n          // Focus prev chip\r\n          newIdx = idx - 1;\r\n        }\r\n      } else if (idx === chips.length - 1) {\r\n        // Blur last chip\r\n        newIdx = -1;\r\n      } else if (idx > -1) {\r\n        // Focus next chip\r\n        newIdx = idx + 1;\r\n      }\r\n\r\n      if (newIdx !== undefined) {\r\n        this._focusedChipIndex = newIdx;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onArrowRight(chips, event) {\r\n      if (this.inputElement.selectionStart !== 0) {\r\n        return;\r\n      }\r\n\r\n      const idx = this._focusedChipIndex;\r\n      if (idx !== -1) {\r\n        event.preventDefault();\r\n      }\r\n      let newIdx;\r\n\r\n      if (this.__isRTL) {\r\n        if (idx === -1) {\r\n          // Focus last chip\r\n          newIdx = chips.length - 1;\r\n        } else if (idx > 0) {\r\n          // Focus prev chip\r\n          newIdx = idx - 1;\r\n        }\r\n      } else if (idx === chips.length - 1) {\r\n        // Blur last chip\r\n        newIdx = -1;\r\n      } else if (idx > -1) {\r\n        // Focus next chip\r\n        newIdx = idx + 1;\r\n      }\r\n\r\n      if (newIdx !== undefined) {\r\n        this._focusedChipIndex = newIdx;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onBackSpace(chips) {\r\n      if (this.inputElement.selectionStart !== 0) {\r\n        return;\r\n      }\r\n\r\n      const idx = this._focusedChipIndex;\r\n      if (idx === -1) {\r\n        this._focusedChipIndex = chips.length - 1;\r\n      } else {\r\n        this.__removeItem(chips[idx].item);\r\n        this._focusedChipIndex = -1;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _focusedChipIndexChanged(focusedIndex, oldFocusedIndex) {\r\n      if (focusedIndex > -1 || oldFocusedIndex > -1) {\r\n        const chips = this._chips;\r\n        chips.forEach((chip, index) => {\r\n          chip.toggleAttribute('focused', index === focusedIndex);\r\n        });\r\n\r\n        // Announce focused chip\r\n        if (focusedIndex > -1) {\r\n          const item = chips[focusedIndex].item;\r\n          const itemLabel = this._getItemLabel(item);\r\n          announce(`${itemLabel} ${this.i18n.focused}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onComboBoxChange() {\r\n      const item = this.$.comboBox.selectedItem;\r\n      if (item) {\r\n        this.__selectItem(item);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onComboBoxItemSelected(event) {\r\n      this.__selectItem(event.detail.item);\r\n    }\r\n\r\n    /** @private */\r\n    _onCustomValueSet(event) {\r\n      // Do not set combo-box value\r\n      event.preventDefault();\r\n\r\n      // Stop the original event\r\n      event.stopPropagation();\r\n\r\n      this.__clearInternalValue(true);\r\n\r\n      this.dispatchEvent(\r\n        new CustomEvent('custom-value-set', {\r\n          detail: event.detail,\r\n          composed: true,\r\n          bubbles: true,\r\n        }),\r\n      );\r\n    }\r\n\r\n    /** @private */\r\n    _onItemRemoved(event) {\r\n      this.__removeItem(event.detail.item);\r\n    }\r\n\r\n    /** @private */\r\n    _preventBlur(event) {\r\n      // Prevent mousedown event to keep the input focused\r\n      // and keep the overlay opened when clicking a chip.\r\n      event.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Fired when the user sets a custom value.\r\n     * @event custom-value-set\r\n     * @param {string} detail the custom value\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-multi-select-combo-box-chip.js';\r\nimport './vaadin-multi-select-combo-box-container.js';\r\nimport './vaadin-multi-select-combo-box-internal.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { MultiSelectComboBoxMixin } from './vaadin-multi-select-combo-box-mixin.js';\r\nimport { multiSelectComboBox } from './vaadin-multi-select-combo-box-styles.js';\r\n\r\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\r\n  moduleId: 'vaadin-multi-select-combo-box-styles',\r\n});\r\n\r\n/**\r\n * `<vaadin-multi-select-combo-box>` is a web component that wraps `<vaadin-combo-box>` and extends\r\n * its functionality to allow selecting multiple items, in addition to basic features.\r\n *\r\n * ```html\r\n * <vaadin-multi-select-combo-box id=\"comboBox\"></vaadin-multi-select-combo-box>\r\n * ```\r\n *\r\n * ```js\r\n * const comboBox = document.querySelector('#comboBox');\r\n * comboBox.items = ['apple', 'banana', 'lemon', 'orange'];\r\n * comboBox.selectedItems = ['lemon', 'orange'];\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name              | Description\r\n * -----------------------|----------------\r\n * `chips`                | The element that wraps slotted chips for selected items\r\n * `label`                | The label element\r\n * `input-field`          | The element that wraps prefix, value and suffix\r\n * `clear-button`         | The clear button\r\n * `error-message`        | The error message element\r\n * `helper-text`          | The helper text element wrapper\r\n * `required-indicator`   | The `required` state indicator element\r\n * `toggle-button`        | The toggle button\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute              | Description\r\n * -----------------------|-----------------\r\n * `disabled`             | Set to a disabled element\r\n * `has-value`            | Set when the element has a value\r\n * `has-label`            | Set when the element has a label\r\n * `has-helper`           | Set when the element has helper text or slot\r\n * `has-error-message`    | Set when the element has an error message\r\n * `invalid`              | Set when the element is invalid\r\n * `focused`              | Set when the element is focused\r\n * `focus-ring`           | Set when the element is keyboard focused\r\n * `loading`              | Set when loading items from the data provider\r\n * `opened`               | Set when the dropdown is open\r\n * `readonly`             | Set to a readonly element\r\n *\r\n * The following custom CSS properties are available for styling:\r\n *\r\n * Custom property                                      | Description                | Default\r\n * -----------------------------------------------------|----------------------------|--------\r\n * `--vaadin-field-default-width`                       | Default width of the field | `12em`\r\n * `--vaadin-multi-select-combo-box-overlay-width`      | Width of the overlay       | `auto`\r\n * `--vaadin-multi-select-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\r\n * `--vaadin-multi-select-combo-box-chip-min-width`     | Min width of the chip      | `50px`\r\n * `--vaadin-multi-select-combo-box-input-min-width`    | Min width of the input     | `4em`\r\n *\r\n * ### Internal components\r\n *\r\n * In addition to `<vaadin-multi-select-combo-box>` itself, the following internal\r\n * components are themable:\r\n *\r\n * - `<vaadin-multi-select-combo-box-overlay>` - has the same API as `<vaadin-overlay>`.\r\n * - `<vaadin-multi-select-combo-box-item>` - has the same API as `<vaadin-item>`.\r\n * - `<vaadin-multi-select-combo-box-container>` - has the same API as `<vaadin-input-container>`.\r\n *\r\n * Note: the `theme` attribute value set on `<vaadin-multi-select-combo-box>` is\r\n * propagated to these components.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\r\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n * @mixes MultiSelectComboBoxMixin\r\n */\r\nclass MultiSelectComboBox extends MultiSelectComboBoxMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-multi-select-combo-box-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-multi-select-combo-box-internal\r\n          id=\"comboBox\"\r\n          items=\"[[items]]\"\r\n          item-id-path=\"[[itemIdPath]]\"\r\n          item-label-path=\"[[itemLabelPath]]\"\r\n          item-value-path=\"[[itemValuePath]]\"\r\n          disabled=\"[[disabled]]\"\r\n          readonly=\"[[readonly]]\"\r\n          auto-open-disabled=\"[[autoOpenDisabled]]\"\r\n          allow-custom-value=\"[[allowCustomValue]]\"\r\n          overlay-class=\"[[overlayClass]]\"\r\n          data-provider=\"[[dataProvider]]\"\r\n          filter=\"{{filter}}\"\r\n          last-filter=\"{{_lastFilter}}\"\r\n          loading=\"{{loading}}\"\r\n          size=\"{{size}}\"\r\n          filtered-items=\"[[filteredItems]]\"\r\n          selected-items=\"[[selectedItems]]\"\r\n          selected-items-on-top=\"[[selectedItemsOnTop]]\"\r\n          item-class-name-generator=\"[[itemClassNameGenerator]]\"\r\n          top-group=\"[[_topGroup]]\"\r\n          opened=\"{{opened}}\"\r\n          renderer=\"[[renderer]]\"\r\n          keep-filter=\"[[keepFilter]]\"\r\n          theme$=\"[[_theme]]\"\r\n          on-combo-box-item-selected=\"_onComboBoxItemSelected\"\r\n          on-change=\"_onComboBoxChange\"\r\n          on-custom-value-set=\"_onCustomValueSet\"\r\n          on-filtered-items-changed=\"_onFilteredItemsChanged\"\r\n        >\r\n          <vaadin-multi-select-combo-box-container\r\n            part=\"input-field\"\r\n            auto-expand-vertically=\"[[autoExpandVertically]]\"\r\n            readonly=\"[[readonly]]\"\r\n            disabled=\"[[disabled]]\"\r\n            invalid=\"[[invalid]]\"\r\n            theme$=\"[[_theme]]\"\r\n          >\r\n            <slot name=\"overflow\" slot=\"prefix\"></slot>\r\n            <div id=\"chips\" part=\"chips\" slot=\"prefix\">\r\n              <slot name=\"chip\"></slot>\r\n            </div>\r\n            <slot name=\"input\"></slot>\r\n            <div\r\n              id=\"clearButton\"\r\n              part=\"clear-button\"\r\n              slot=\"suffix\"\r\n              on-touchend=\"_onClearButtonTouchend\"\r\n              aria-hidden=\"true\"\r\n            ></div>\r\n            <div id=\"toggleButton\" class=\"toggle-button\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n          </vaadin-multi-select-combo-box-container>\r\n        </vaadin-multi-select-combo-box-internal>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(MultiSelectComboBox);\r\n\r\nexport { MultiSelectComboBox };\r\n"],
  "mappings": "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",
  "names": ["multiSelectComboBox", "item", "item", "chip", "item", "inputFieldShared", "multiSelectComboBox"]
}

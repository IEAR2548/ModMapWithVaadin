import {
  GridColumn
} from "./chunk-D6FJLU7Z.js";
import {
  Button
} from "./chunk-BGREQEM2.js";
import {
  registerStyles
} from "./chunk-KEWLZU7R.js";
import {
  defineCustomElement
} from "./chunk-AQ7DMXX6.js";
import {
  get,
  set
} from "./chunk-YBEXGSZO.js";
import {
  html
} from "./chunk-QO5P4LIH.js";
import {
  css
} from "./chunk-WFI4KZJ4.js";

// node_modules/@vaadin/crud/src/vaadin-crud-edit.js
registerStyles(
  "vaadin-crud-edit",
  css`
    :host {
      display: block;
    }
  `,
  { moduleId: "vaadin-crud-edit-styles" }
);
var CrudEdit = class extends Button {
  static get template() {
    return html`
      <div part="icon"></div>
      <slot name="tooltip"></slot>
    `;
  }
  static get is() {
    return "vaadin-crud-edit";
  }
  /** @protected */
  ready() {
    super.ready();
    this.addEventListener("click", this.__onClick);
    this.setAttribute("aria-label", "Edit");
  }
  /** @private */
  __onClick(e) {
    const tr = e.target.parentElement.assignedSlot.parentElement.parentElement;
    tr.dispatchEvent(
      new CustomEvent("edit", { detail: { item: tr._item, index: tr.index }, bubbles: true, composed: true })
    );
  }
  /**
   * Fired when user on the icon.
   *
   * @event edit
   * @param {Object} detail.item the item to edit
   * @param {Object} detail.index the index of the item in the data set
   */
};
defineCustomElement(CrudEdit);

// node_modules/@vaadin/crud/src/vaadin-crud-helpers.js
function capitalize(path) {
  return path.toLowerCase().replace(/([^\w]+)/gu, " ").trim().replace(/^./u, (c) => c.toUpperCase());
}
function getProperty(path, obj) {
  return get(obj, path);
}
function setProperty(path, value, obj) {
  if (obj && path) {
    path.split(".").slice(0, -1).reduce((o, p) => {
      if (!o[p]) {
        o[p] = {};
      }
      return o[p];
    }, obj);
    set(obj, path, value);
  }
}
function isValidEditorPosition(editorPosition) {
  return ["bottom", "aside"].includes(editorPosition);
}
function editColumnDefaultRenderer(root, column) {
  let edit = root.firstElementChild;
  if (!edit) {
    edit = document.createElement("vaadin-crud-edit");
    if (column.hasAttribute("theme")) {
      edit.setAttribute("theme", column.getAttribute("theme"));
    }
    root.appendChild(edit);
  }
  if (column.ariaLabel) {
    edit.setAttribute("aria-label", column.ariaLabel);
  } else {
    edit.removeAttribute("aria-label");
  }
}
function createField(crudForm, parent, path) {
  const field = document.createElement("vaadin-text-field");
  field.label = capitalize(path);
  field.path = path;
  field.required = true;
  parent.appendChild(field);
  crudForm._fields.push(field);
  return field;
}
function createFields(crudForm, parent, object, path) {
  Object.keys(object).forEach((prop) => {
    if (!crudForm.include && crudForm.exclude && crudForm.exclude.test(prop)) {
      return;
    }
    const newPath = (path ? `${path}.` : "") + prop;
    if (object[prop] && typeof object[prop] === "object") {
      createFields(crudForm, parent, object[prop], newPath);
    } else {
      createField(crudForm, parent, newPath);
    }
  });
  if (!crudForm._fields.length) {
    crudForm._fields = void 0;
  }
}

// node_modules/@vaadin/crud/src/vaadin-crud-edit-column.js
var CrudEditColumn = class extends GridColumn {
  static get is() {
    return "vaadin-crud-edit-column";
  }
  static get properties() {
    return {
      /**
       * Width of the cells for this column.
       * @private
       */
      width: {
        type: String,
        value: "4rem"
      },
      /**
       * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.
       * @private
       */
      flexGrow: {
        type: Number,
        value: 0
      },
      /** The arial-label for the edit button */
      ariaLabel: String
    };
  }
  static get observers() {
    return ["_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, _cells.*, path, ariaLabel)"];
  }
  /**
   * Renders the crud edit element to the body cell.
   *
   * @override
   */
  _defaultRenderer(root, column) {
    editColumnDefaultRenderer(root, column);
  }
};
defineCustomElement(CrudEditColumn);

export {
  capitalize,
  getProperty,
  setProperty,
  isValidEditorPosition,
  createField,
  createFields,
  CrudEditColumn
};
/*! Bundled license information:

@vaadin/crud/src/vaadin-crud-edit.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/crud/src/vaadin-crud-helpers.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)

@vaadin/crud/src/vaadin-crud-edit-column.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)
*/
//# sourceMappingURL=chunk-CCZCMQGR.js.map

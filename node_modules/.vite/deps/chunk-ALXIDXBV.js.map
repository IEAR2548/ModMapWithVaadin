{
  "version": 3,
  "sources": ["../../ol/src/size.js"],
  "sourcesContent": ["/**\r\n * @module ol/size\r\n */\r\n\r\n/**\r\n * An array of numbers representing a size: `[width, height]`.\r\n * @typedef {Array<number>} Size\r\n * @api\r\n */\r\n\r\n/**\r\n * Returns a buffered size.\r\n * @param {Size} size Size.\r\n * @param {number} num The amount by which to buffer.\r\n * @param {Size} [opt_size] Optional reusable size array.\r\n * @return {Size} The buffered size.\r\n */\r\nexport function buffer(size, num, opt_size) {\r\n  if (opt_size === undefined) {\r\n    opt_size = [0, 0];\r\n  }\r\n  opt_size[0] = size[0] + 2 * num;\r\n  opt_size[1] = size[1] + 2 * num;\r\n  return opt_size;\r\n}\r\n\r\n/**\r\n * Determines if a size has a positive area.\r\n * @param {Size} size The size to test.\r\n * @return {boolean} The size has a positive area.\r\n */\r\nexport function hasArea(size) {\r\n  return size[0] > 0 && size[1] > 0;\r\n}\r\n\r\n/**\r\n * Returns a size scaled by a ratio. The result will be an array of integers.\r\n * @param {Size} size Size.\r\n * @param {number} ratio Ratio.\r\n * @param {Size} [opt_size] Optional reusable size array.\r\n * @return {Size} The scaled size.\r\n */\r\nexport function scale(size, ratio, opt_size) {\r\n  if (opt_size === undefined) {\r\n    opt_size = [0, 0];\r\n  }\r\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\r\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\r\n  return opt_size;\r\n}\r\n\r\n/**\r\n * Returns an `Size` array for the passed in number (meaning: square) or\r\n * `Size` array.\r\n * (meaning: non-square),\r\n * @param {number|Size} size Width and height.\r\n * @param {Size} [opt_size] Optional reusable size array.\r\n * @return {Size} Size.\r\n * @api\r\n */\r\nexport function toSize(size, opt_size) {\r\n  if (Array.isArray(size)) {\r\n    return size;\r\n  } else {\r\n    if (opt_size === undefined) {\r\n      opt_size = [size, size];\r\n    } else {\r\n      opt_size[0] = size;\r\n      opt_size[1] = size;\r\n    }\r\n    return opt_size;\r\n  }\r\n}\r\n"],
  "mappings": ";AAiBM,SAAU,OAAO,MAAM,KAAK,UAAQ;AACxC,MAAI,aAAa,QAAW;AAC1B,eAAW,CAAC,GAAG,CAAC;;AAElB,WAAS,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI;AAC5B,WAAS,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI;AAC5B,SAAO;AACT;AAOM,SAAU,QAAQ,MAAI;AAC1B,SAAO,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;AAClC;AASM,SAAU,MAAM,MAAM,OAAO,UAAQ;AACzC,MAAI,aAAa,QAAW;AAC1B,eAAW,CAAC,GAAG,CAAC;;AAElB,WAAS,CAAC,IAAK,KAAK,CAAC,IAAI,QAAQ,MAAO;AACxC,WAAS,CAAC,IAAK,KAAK,CAAC,IAAI,QAAQ,MAAO;AACxC,SAAO;AACT;AAWM,SAAU,OAAO,MAAM,UAAQ;AACnC,MAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,WAAO;SACF;AACL,QAAI,aAAa,QAAW;AAC1B,iBAAW,CAAC,MAAM,IAAI;WACjB;AACL,eAAS,CAAC,IAAI;AACd,eAAS,CAAC,IAAI;;AAEhB,WAAO;;AAEX;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/details/theme/lumo/vaadin-details-styles.js", "../../@vaadin/details/theme/lumo/vaadin-details-summary-styles.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/dom-utils.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-observer.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/unique-id-utils.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-controller.js", "../../@vaadin/details/node_modules/@vaadin/component-base/src/slot-child-observe-controller.js", "../../@vaadin/details/src/content-controller.js", "../../@vaadin/details/src/collapsible-mixin.js", "../../@vaadin/details/src/summary-controller.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst details = css`\n  :host {\n    margin: var(--lumo-space-xs) 0;\n    outline: none;\n    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));\n    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);\n  }\n\n  :host([focus-ring]) ::slotted([slot='summary']) {\n    box-shadow: 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);\n  }\n\n  [part='content'] {\n    padding: var(--lumo-space-xs) 0 var(--lumo-space-s);\n    font-size: var(--lumo-font-size-m);\n    line-height: var(--lumo-line-height-m);\n  }\n\n  :host([theme~='filled']) {\n    background-color: var(--lumo-contrast-5pct);\n    border-radius: var(--lumo-border-radius-m);\n  }\n\n  :host([theme~='filled']) [part='content'] {\n    padding-left: var(--lumo-space-m);\n    padding-right: var(--lumo-space-m);\n  }\n\n  :host([theme~='small']) [part$='content'] {\n    font-size: var(--lumo-font-size-s);\n  }\n`;\n\nregisterStyles('vaadin-details', details, { moduleId: 'lumo-details' });\n\nexport { details };\n", "import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst detailsSummary = css`\n  :host {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    outline: none;\n    padding: var(--lumo-space-s) 0;\n    box-sizing: border-box;\n    font-family: var(--lumo-font-family);\n    font-size: var(--lumo-font-size-m);\n    font-weight: 500;\n    line-height: var(--lumo-line-height-xs);\n    color: var(--lumo-secondary-text-color);\n    background-color: inherit;\n    border-radius: var(--lumo-border-radius-m);\n    cursor: var(--lumo-clickable-cursor);\n    -webkit-tap-highlight-color: transparent;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  :host([disabled]),\n  :host([disabled]) [part='toggle'] {\n    color: var(--lumo-disabled-text-color);\n    cursor: default;\n  }\n\n  @media (hover: hover) {\n    :host(:hover:not([disabled])),\n    :host(:hover:not([disabled])) [part='toggle'] {\n      color: var(--lumo-contrast-80pct);\n    }\n  }\n\n  [part='toggle'] {\n    display: block;\n    width: 1em;\n    height: 1em;\n    margin-left: calc(var(--lumo-space-xs) * -1);\n    margin-right: var(--lumo-space-xs);\n    font-size: var(--lumo-icon-size-s);\n    line-height: 1;\n    color: var(--lumo-contrast-60pct);\n    font-family: 'lumo-icons';\n    cursor: var(--lumo-clickable-cursor);\n  }\n\n  [part='toggle']::before {\n    content: var(--lumo-icons-angle-right);\n  }\n\n  :host([opened]) [part='toggle'] {\n    transform: rotate(90deg);\n  }\n\n  [part='content'] {\n    flex-grow: 1;\n  }\n\n  /* RTL styles */\n  :host([dir='rtl']) [part='toggle'] {\n    margin-left: var(--lumo-space-xs);\n    margin-right: calc(var(--lumo-space-xs) * -1);\n  }\n\n  :host([dir='rtl']) [part='toggle']::before {\n    content: var(--lumo-icons-angle-left);\n  }\n\n  :host([opened][dir='rtl']) [part='toggle'] {\n    transform: rotate(-90deg);\n  }\n\n  /* Small */\n  :host([theme~='small']) {\n    padding-top: var(--lumo-space-xs);\n    padding-bottom: var(--lumo-space-xs);\n  }\n\n  :host([theme~='small']) [part='toggle'] {\n    margin-right: calc(var(--lumo-space-xs) / 2);\n  }\n\n  :host([theme~='small'][dir='rtl']) [part='toggle'] {\n    margin-left: calc(var(--lumo-space-xs) / 2);\n  }\n\n  /* Filled */\n  :host([theme~='filled']) {\n    padding: var(--lumo-space-s) calc(var(--lumo-space-s) + var(--lumo-space-xs) / 2);\n  }\n\n  /* Reverse */\n  :host([theme~='reverse']) {\n    justify-content: space-between;\n  }\n\n  :host([theme~='reverse']) [part='toggle'] {\n    order: 1;\n    margin-right: 0;\n  }\n\n  :host([theme~='reverse'][dir='rtl']) [part='toggle'] {\n    margin-left: 0;\n  }\n\n  /* Filled reverse */\n  :host([theme~='reverse'][theme~='filled']) {\n    padding-left: var(--lumo-space-m);\n  }\n\n  :host([theme~='reverse'][theme~='filled'][dir='rtl']) {\n    padding-right: var(--lumo-space-m);\n  }\n`;\n\nregisterStyles('vaadin-details-summary', detailsSummary, { moduleId: 'lumo-details-summary' });\n\nexport { detailsSummary };\n", "/**\n * @license\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * Returns an array of ancestor root nodes for the given node.\n *\n * A root node is either a document node or a document fragment node (Shadow Root).\n * The array is collected by a bottom-up DOM traversing that starts with the given node\n * and involves both the light DOM and ancestor shadow DOM trees.\n *\n * @param {Node} node\n * @return {Node[]}\n */\nexport function getAncestorRootNodes(node) {\n  const result = [];\n\n  while (node) {\n    if (node.nodeType === Node.DOCUMENT_NODE) {\n      result.push(node);\n      break;\n    }\n\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      result.push(node);\n      node = node.host;\n      continue;\n    }\n\n    if (node.assignedSlot) {\n      node = node.assignedSlot;\n      continue;\n    }\n\n    node = node.parentNode;\n  }\n\n  return result;\n}\n\n/**\n * Returns the list of flattened elements for the given `node`.\n * This list consists of a node's children and, for any children that are\n * `<slot>` elements, the expanded flattened list of `assignedElements`.\n *\n * @param {Node} node\n * @return {Element[]}\n */\nexport function getFlattenedElements(node) {\n  const result = [];\n  let elements;\n  if (node.localName === 'slot') {\n    elements = node.assignedElements();\n  } else {\n    result.push(node);\n    elements = [...node.children];\n  }\n  elements.forEach((elem) => result.push(...getFlattenedElements(elem)));\n  return result;\n}\n\n/**\n * Traverses the given node and its parents, including those that are across\n * the shadow root boundaries, until it finds a node that matches the selector.\n *\n * @param {string} selector The CSS selector to match against\n * @param {Node} node The starting node for the traversal\n * @return {Node | null} The closest matching element, or null if no match is found\n */\nexport function getClosestElement(selector, node) {\n  if (!node) {\n    return null;\n  }\n\n  return node.closest(selector) || getClosestElement(selector, node.getRootNode().host);\n}\n\n/**\n * Takes a string with values separated by space and returns a set the values\n *\n * @param {string} value\n * @return {Set<string>}\n */\nexport function deserializeAttributeValue(value) {\n  if (!value) {\n    return new Set();\n  }\n\n  return new Set(value.split(' '));\n}\n\n/**\n * Takes a set of string values and returns a string with values separated by space\n *\n * @param {Set<string>} values\n * @return {string}\n */\nexport function serializeAttributeValue(values) {\n  return values ? [...values].join(' ') : '';\n}\n\n/**\n * Adds a value to an attribute containing space-delimited values.\n *\n * @param {HTMLElement} element\n * @param {string} attr\n * @param {string} value\n */\nexport function addValueToAttribute(element, attr, value) {\n  const values = deserializeAttributeValue(element.getAttribute(attr));\n  values.add(value);\n  element.setAttribute(attr, serializeAttributeValue(values));\n}\n\n/**\n * Removes a value from an attribute containing space-delimited values.\n * If the value is the last one, the whole attribute is removed.\n *\n * @param {HTMLElement} element\n * @param {string} attr\n * @param {string} value\n */\nexport function removeValueFromAttribute(element, attr, value) {\n  const values = deserializeAttributeValue(element.getAttribute(attr));\n  values.delete(value);\n  if (values.size === 0) {\n    element.removeAttribute(attr);\n    return;\n  }\n  element.setAttribute(attr, serializeAttributeValue(values));\n}\n\n/**\n * Returns true if the given node is an empty text node, false otherwise.\n *\n * @param {Node} node\n * @return {boolean}\n */\nexport function isEmptyTextNode(node) {\n  return node.nodeType === Node.TEXT_NODE && node.textContent.trim() === '';\n}\n", "/**\n * @license\n * Copyright (c) 2023 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A helper for observing slot changes.\n */\nexport class SlotObserver {\n  constructor(slot, callback) {\n    /** @type HTMLSlotElement */\n    this.slot = slot;\n\n    /** @type Function */\n    this.callback = callback;\n\n    /** @type {Node[]} */\n    this._storedNodes = [];\n\n    this._connected = false;\n    this._scheduled = false;\n\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `SlotObserver` is created. It should only be called to  re-activate\n   * an observer that has been deactivated via the `disconnect` method.\n   */\n  connect() {\n    this.slot.addEventListener('slotchange', this._boundSchedule);\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the observer. After calling this method the observer callback\n   * will not be called when changes to slotted nodes occur. The `connect` method\n   * may be subsequently called to reactivate the observer.\n   */\n  disconnect() {\n    this.slot.removeEventListener('slotchange', this._boundSchedule);\n    this._connected = false;\n  }\n\n  /** @private */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n\n      queueMicrotask(() => {\n        this.flush();\n      });\n    }\n  }\n\n  /**\n   * Run the observer callback synchronously.\n   */\n  flush() {\n    if (!this._connected) {\n      return;\n    }\n\n    this._scheduled = false;\n\n    this._processNodes();\n  }\n\n  /** @private */\n  _processNodes() {\n    const currentNodes = this.slot.assignedNodes({ flatten: true });\n\n    let addedNodes = [];\n    const removedNodes = [];\n    const movedNodes = [];\n\n    if (currentNodes.length) {\n      addedNodes = currentNodes.filter((node) => !this._storedNodes.includes(node));\n    }\n\n    if (this._storedNodes.length) {\n      this._storedNodes.forEach((node, index) => {\n        const idx = currentNodes.indexOf(node);\n        if (idx === -1) {\n          removedNodes.push(node);\n        } else if (idx !== index) {\n          movedNodes.push(node);\n        }\n      });\n    }\n\n    if (addedNodes.length || removedNodes.length || movedNodes.length) {\n      this.callback({ addedNodes, currentNodes, movedNodes, removedNodes });\n    }\n\n    this._storedNodes = currentNodes;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nlet uniqueId = 0;\n\n/**\n * Resets the unique id counter.\n *\n * @return {void}\n */\nexport function resetUniqueId() {\n  uniqueId = 0;\n}\n\n/**\n * Returns a unique integer id.\n *\n * @return {number}\n */\nexport function generateUniqueId() {\n  // eslint-disable-next-line no-plusplus\n  return uniqueId++;\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isEmptyTextNode } from './dom-utils.js';\nimport { SlotObserver } from './slot-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {HTMLElement} host\n   * @param {string} slotName\n   * @return {string}\n   * @protected\n   */\n  static generateId(host, prefix = 'default') {\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n\n  constructor(host, slotName, tagName, config = {}) {\n    super();\n\n    const { initializer, multiple, observe, useUniqueId, uniqueIdPrefix } = config;\n\n    this.host = host;\n    this.slotName = slotName;\n    this.tagName = tagName;\n    this.observe = typeof observe === 'boolean' ? observe : true;\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\n    this.slotInitializer = initializer;\n\n    if (multiple) {\n      this.nodes = [];\n    }\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = this.constructor.generateId(host, uniqueIdPrefix || slotName);\n    }\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      if (this.multiple) {\n        this.initMultiple();\n      } else {\n        this.initSingle();\n      }\n\n      if (this.observe) {\n        this.observeSlot();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  /** @protected */\n  initSingle() {\n    let node = this.getSlotChild();\n\n    if (!node) {\n      node = this.attachDefaultNode();\n      this.initNode(node);\n    } else {\n      this.node = node;\n      this.initAddedNode(node);\n    }\n  }\n\n  /** @protected */\n  initMultiple() {\n    const children = this.getSlotChildren();\n\n    if (children.length === 0) {\n      const defaultNode = this.attachDefaultNode();\n      if (defaultNode) {\n        this.nodes = [defaultNode];\n        this.initNode(defaultNode);\n      }\n    } else {\n      this.nodes = children;\n      children.forEach((node) => {\n        this.initAddedNode(node);\n      });\n    }\n  }\n\n  /**\n   * Create and attach default node using the provided tag name, if any.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const { host, slotName, tagName } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Tag name is optional, sometimes we don't init default content.\n    if (!node && tagName) {\n      node = document.createElement(tagName);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.defaultNode = node;\n      }\n    }\n\n    if (node) {\n      this.node = node;\n      host.appendChild(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Return the list of nodes matching the slot managed by the controller.\n   * @return {Node}\n   */\n  getSlotChildren() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).filter((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    return this.getSlotChildren()[0];\n  }\n\n  /**\n   * Run `slotInitializer` for the node managed by the controller.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const { slotInitializer } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(node, this.host);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initAddedNode(node) {\n    if (node !== this.defaultNode) {\n      this.initCustomNode(node);\n      this.initNode(node);\n    }\n  }\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observeSlot() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\n      const current = this.multiple ? this.nodes : [this.node];\n\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\n      const newNodes = addedNodes.filter((node) => !isEmptyTextNode(node) && !current.includes(node));\n\n      if (removedNodes.length) {\n        this.nodes = current.filter((node) => !removedNodes.includes(node));\n\n        removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNodes && newNodes.length > 0) {\n        if (this.multiple) {\n          // Remove default node if exists\n          if (this.defaultNode) {\n            this.defaultNode.remove();\n          }\n          this.nodes = [...current, ...newNodes].filter((node) => node !== this.defaultNode);\n          newNodes.forEach((node) => {\n            this.initAddedNode(node);\n          });\n        } else {\n          // Remove previous node if exists\n          if (this.node) {\n            this.node.remove();\n          }\n          this.node = newNodes[0];\n          this.initAddedNode(this.node);\n        }\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from './slot-controller.js';\n\n/**\n * A controller that observes slotted element mutations, especially ID attribute\n * and the text content, and fires an event to notify host element about those.\n */\nexport class SlotChildObserveController extends SlotController {\n  constructor(host, slot, tagName, config = {}) {\n    super(host, slot, tagName, { ...config, useUniqueId: true });\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  initCustomNode(node) {\n    this.__updateNodeId(node);\n    this.__notifyChange(node);\n  }\n\n  /**\n   * Override to notify the controller host about removal of\n   * the custom node, and to apply the default one if needed.\n   *\n   * @param {Node} _node\n   * @protected\n   * @override\n   */\n  teardownNode(_node) {\n    const node = this.getSlotChild();\n\n    // Custom node is added to the slot\n    if (node && node !== this.defaultNode) {\n      this.__notifyChange(node);\n    } else {\n      this.restoreDefaultNode();\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotMixin`\n   * to set ID attribute on the default node.\n   *\n   * @return {Node}\n   * @protected\n   * @override\n   */\n  attachDefaultNode() {\n    const node = super.attachDefaultNode();\n\n    if (node) {\n      this.__updateNodeId(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Override to restore default node when a custom one is removed.\n   *\n   * @protected\n   */\n  restoreDefaultNode() {\n    // To be implemented\n  }\n\n  /**\n   * Override to update default node text on property change.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  updateDefaultNode(node) {\n    this.__notifyChange(node);\n  }\n\n  /**\n   * Setup the mutation observer on the node to update ID and notify host.\n   * Node doesn't get observed automatically until this method is called.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  observeNode(node) {\n    // Stop observing the previous node, if any.\n    if (this.__nodeObserver) {\n      this.__nodeObserver.disconnect();\n    }\n\n    this.__nodeObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n\n        // Ensure the mutation target is the currently connected node\n        // to ignore async mutations dispatched for removed element.\n        const isCurrentNodeMutation = target === this.node;\n\n        if (mutation.type === 'attributes') {\n          // We use attributeFilter to only observe ID mutation,\n          // no need to check for attribute name separately.\n          if (isCurrentNodeMutation) {\n            this.__updateNodeId(target);\n          }\n        } else if (isCurrentNodeMutation || target.parentElement === this.node) {\n          // Node text content has changed.\n          this.__notifyChange(this.node);\n        }\n      });\n    });\n\n    // Observe changes to node ID attribute, text content and children.\n    this.__nodeObserver.observe(node, {\n      attributes: true,\n      attributeFilter: ['id'],\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n  }\n\n  /**\n   * Returns true if a node is an HTML element with children,\n   * or is a defined custom element, or has non-empty text.\n   *\n   * @param {Node} node\n   * @return {boolean}\n   * @private\n   */\n  __hasContent(node) {\n    if (!node) {\n      return false;\n    }\n\n    return (\n      (node.nodeType === Node.ELEMENT_NODE && (customElements.get(node.localName) || node.children.length > 0)) ||\n      (node.textContent && node.textContent.trim() !== '')\n    );\n  }\n\n  /**\n   * Fire an event to notify the controller host about node changes.\n   *\n   * @param {Node} node\n   * @private\n   */\n  __notifyChange(node) {\n    this.dispatchEvent(\n      new CustomEvent('slot-content-changed', {\n        detail: { hasContent: this.__hasContent(node), node },\n      }),\n    );\n  }\n\n  /**\n   * Set default ID on the node in case it is an HTML element.\n   *\n   * @param {Node} node\n   * @private\n   */\n  __updateNodeId(node) {\n    // When in multiple mode, only set ID attribute on the element in default slot.\n    const isFirstNode = !this.nodes || node === this.nodes[0];\n    if (node.nodeType === Node.ELEMENT_NODE && (!this.multiple || isFirstNode) && !node.id) {\n      node.id = this.defaultId;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller to manage the default content slot.\n */\nexport class ContentController extends SlotChildObserveController {\n  /**\n   * Override method from `SlotController` to change\n   * the ID prefix for the default slot content.\n   *\n   * @param {HTMLElement} host\n   * @return {string}\n   * @protected\n   * @override\n   */\n  static generateId(host) {\n    return super.generateId(host, 'content');\n  }\n\n  constructor(host) {\n    super(host, '', null, { multiple: true });\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ContentController } from './content-controller.js';\n\n/**\n * A mixin providing common functionality for making content collapsible,\n * used by `<vaadin-details>` and `<vaadin-accordion-panel>` elements.\n *\n * @polymerMixin\n */\nexport const CollapsibleMixin = (superClass) =>\n  class CollapsibleMixinClass extends superClass {\n    static get properties() {\n      return {\n        /**\n         * If true, the collapsible content is visible.\n         * @type {boolean}\n         */\n        opened: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n          notify: true,\n        },\n\n        /**\n         * List of elements assigned to the default `<slot>`\n         * that represent the collapsible content.\n         *\n         * @protected\n         */\n        _contentElements: {\n          type: Array,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_openedOrContentChanged(opened, _contentElements)'];\n    }\n\n    constructor() {\n      super();\n\n      this._contentController = new ContentController(this);\n\n      this._contentController.addEventListener('slot-content-changed', (event) => {\n        const content = event.target.nodes || [];\n\n        // Exclude nodes that are no longer connected\n        this._contentElements = content.filter((node) => node.parentNode === this);\n      });\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addController(this._contentController);\n\n      // Only handle click and not keydown, because `vaadin-details-summary` uses `ButtonMixin`\n      // that already covers this logic, and `vaadin-accordion-heading` uses native `<button>`.\n      this.addEventListener('click', ({ target }) => {\n        if (this.disabled) {\n          return;\n        }\n\n        // Do not change opened on link click\n        if (target.localName === 'a') {\n          return;\n        }\n\n        const summary = this.focusElement;\n\n        if (summary && (target === summary || summary.contains(target))) {\n          this.opened = !this.opened;\n        }\n      });\n    }\n\n    /** @private */\n    _openedOrContentChanged(opened, elements) {\n      if (elements) {\n        elements.forEach((el) => {\n          el.setAttribute('aria-hidden', opened ? 'false' : 'true');\n        });\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller to manage the summary element.\n */\nexport class SummaryController extends SlotChildObserveController {\n  constructor(host, tagName) {\n    super(host, 'summary', tagName);\n  }\n\n  /**\n   * Set summary based on corresponding host property.\n   *\n   * @param {string} summary\n   */\n  setSummary(summary) {\n    this.summary = summary;\n\n    // Restore the default summary, if needed.\n    const summaryNode = this.getSlotChild();\n    if (!summaryNode) {\n      this.restoreDefaultNode();\n    }\n\n    // When default summary is used, update it.\n    if (this.node === this.defaultNode) {\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to restore and observe the default summary element.\n   *\n   * @protected\n   * @override\n   */\n  restoreDefaultNode() {\n    const { summary } = this;\n\n    // Restore the default summary.\n    if (summary && summary.trim() !== '') {\n      this.attachDefaultNode();\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to update the default summary element text content.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  updateDefaultNode(node) {\n    if (node) {\n      node.textContent = this.summary;\n    }\n\n    // Notify the host after update.\n    super.updateDefaultNode(node);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/crud/src/vaadin-crud-edit.js", "../../@vaadin/crud/src/vaadin-crud-helpers.js", "../../@vaadin/crud/src/vaadin-crud-edit-column.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2000 - 2025 Vaadin Ltd.\r\n *\r\n * This program is available under Vaadin Commercial License and Service Terms.\r\n *\r\n *\r\n * See https://vaadin.com/commercial-license-and-service-terms for the full\r\n * license.\r\n */\r\nimport { html } from '@polymer/polymer/polymer-element.js';\r\nimport { Button } from '@vaadin/button/src/vaadin-button.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * Use registerStyles instead of the `<style>` tag to make sure\r\n * that this CSS will override core styles of `vaadin-button`.\r\n */\r\nregisterStyles(\r\n  'vaadin-crud-edit',\r\n  css`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `,\r\n  { moduleId: 'vaadin-crud-edit-styles' },\r\n);\r\n\r\n/**\r\n * `<vaadin-crud-edit>` is a helper element for `<vaadin-grid-column>` that provides\r\n * an easily themable button that fires an `edit` event with the row item as detail\r\n * when clicked.\r\n *\r\n * Typical usage is in a `<vaadin-grid-column>` of a custom `<vaadin-grid>` inside\r\n * a `<vaadin-crud>` to enable editing.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ThemableMixin\r\n */\r\nclass CrudEdit extends Button {\r\n  static get template() {\r\n    return html`\r\n      <div part=\"icon\"></div>\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-crud-edit';\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n    this.addEventListener('click', this.__onClick);\r\n    this.setAttribute('aria-label', 'Edit');\r\n  }\r\n\r\n  /** @private */\r\n  __onClick(e) {\r\n    const tr = e.target.parentElement.assignedSlot.parentElement.parentElement;\r\n    tr.dispatchEvent(\r\n      new CustomEvent('edit', { detail: { item: tr._item, index: tr.index }, bubbles: true, composed: true }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fired when user on the icon.\r\n   *\r\n   * @event edit\r\n   * @param {Object} detail.item the item to edit\r\n   * @param {Object} detail.index the index of the item in the data set\r\n   */\r\n}\r\n\r\ndefineCustomElement(CrudEdit);\r\n\r\nexport { CrudEdit };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2000 - 2025 Vaadin Ltd.\r\n *\r\n * This program is available under Vaadin Commercial License and Service Terms.\r\n *\r\n *\r\n * See https://vaadin.com/commercial-license-and-service-terms for the full\r\n * license.\r\n */\r\nimport { get, set } from '@polymer/polymer/lib/utils/path.js';\r\n\r\n/**\r\n * Convenience utility for capitalizing a string, with\r\n * replacing non-alphanumeric characters with spaces.\r\n *\r\n * @param {string} path\r\n * @return {string}\r\n */\r\nexport function capitalize(path) {\r\n  return path\r\n    .toLowerCase()\r\n    .replace(/([^\\w]+)/gu, ' ')\r\n    .trim()\r\n    .replace(/^./u, (c) => c.toUpperCase());\r\n}\r\n\r\n/**\r\n * Convenience utility for reading a value from a path.\r\n *\r\n * @param {string} path\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nexport function getProperty(path, obj) {\r\n  return get(obj, path);\r\n}\r\n\r\n/**\r\n * Convenience utility for setting a value to a path.\r\n *\r\n * Note, if any part in the path is undefined, this\r\n * function initializes it with an empty object.\r\n *\r\n * @param {string} path\r\n * @param {*} value\r\n * @param {Object} obj\r\n */\r\nexport function setProperty(path, value, obj) {\r\n  if (obj && path) {\r\n    path\r\n      .split('.')\r\n      .slice(0, -1)\r\n      .reduce((o, p) => {\r\n        // Create an object\r\n        if (!o[p]) {\r\n          o[p] = {};\r\n        }\r\n        return o[p];\r\n      }, obj);\r\n\r\n    set(obj, path, value);\r\n  }\r\n}\r\n\r\nexport function isValidEditorPosition(editorPosition) {\r\n  return ['bottom', 'aside'].includes(editorPosition);\r\n}\r\n\r\nexport function editColumnDefaultRenderer(root, column) {\r\n  let edit = root.firstElementChild;\r\n  if (!edit) {\r\n    edit = document.createElement('vaadin-crud-edit');\r\n    if (column.hasAttribute('theme')) {\r\n      edit.setAttribute('theme', column.getAttribute('theme'));\r\n    }\r\n    root.appendChild(edit);\r\n  }\r\n\r\n  if (column.ariaLabel) {\r\n    edit.setAttribute('aria-label', column.ariaLabel);\r\n  } else {\r\n    edit.removeAttribute('aria-label');\r\n  }\r\n}\r\n\r\nexport function createField(crudForm, parent, path) {\r\n  const field = document.createElement('vaadin-text-field');\r\n  field.label = capitalize(path);\r\n  field.path = path;\r\n  field.required = true;\r\n  parent.appendChild(field);\r\n  crudForm._fields.push(field);\r\n  return field;\r\n}\r\n\r\nexport function createFields(crudForm, parent, object, path) {\r\n  Object.keys(object).forEach((prop) => {\r\n    if (!crudForm.include && crudForm.exclude && crudForm.exclude.test(prop)) {\r\n      return;\r\n    }\r\n    const newPath = (path ? `${path}.` : '') + prop;\r\n    if (object[prop] && typeof object[prop] === 'object') {\r\n      createFields(crudForm, parent, object[prop], newPath);\r\n    } else {\r\n      createField(crudForm, parent, newPath);\r\n    }\r\n  });\r\n  if (!crudForm._fields.length) {\r\n    crudForm._fields = undefined;\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2000 - 2025 Vaadin Ltd.\r\n *\r\n * This program is available under Vaadin Commercial License and Service Terms.\r\n *\r\n *\r\n * See https://vaadin.com/commercial-license-and-service-terms for the full\r\n * license.\r\n */\r\nimport './vaadin-crud-edit.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { GridColumn } from '@vaadin/grid/src/vaadin-grid-column.js';\r\nimport { editColumnDefaultRenderer } from './vaadin-crud-helpers.js';\r\n\r\n/**\r\n * `<vaadin-crud-edit-column>` is a helper element for the `<vaadin-grid>`\r\n * that provides a clickable and themable edit icon.\r\n *\r\n * Typical usage is in a custom `<vaadin-grid>` inside a `<vaadin-crud>`.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid items=\"[[items]]\">\r\n *  <vaadin-crud-edit-column></vaadin-crud-edit-column>\r\n *\r\n *  <vaadin-grid-column>\r\n *    ...\r\n * ```\r\n *\r\n * @customElement\r\n * @extends GridColumn\r\n */\r\nclass CrudEditColumn extends GridColumn {\r\n  static get is() {\r\n    return 'vaadin-crud-edit-column';\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /**\r\n       * Width of the cells for this column.\r\n       * @private\r\n       */\r\n      width: {\r\n        type: String,\r\n        value: '4rem',\r\n      },\r\n\r\n      /**\r\n       * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\r\n       * @private\r\n       */\r\n      flexGrow: {\r\n        type: Number,\r\n        value: 0,\r\n      },\r\n\r\n      /** The arial-label for the edit button */\r\n      ariaLabel: String,\r\n    };\r\n  }\r\n\r\n  static get observers() {\r\n    return ['_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, _cells.*, path, ariaLabel)'];\r\n  }\r\n\r\n  /**\r\n   * Renders the crud edit element to the body cell.\r\n   *\r\n   * @override\r\n   */\r\n  _defaultRenderer(root, column) {\r\n    editColumnDefaultRenderer(root, column);\r\n  }\r\n}\r\n\r\ndefineCustomElement(CrudEditColumn);\r\n\r\nexport { CrudEditColumn };\r\n"],
  "mappings": "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",
  "names": []
}

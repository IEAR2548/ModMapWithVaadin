{
  "version": 3,
  "sources": ["../../@vaadin/grid/theme/lumo/vaadin-grid-tree-toggle-styles.js", "../../@vaadin/grid/src/vaadin-grid-tree-toggle-mixin.js", "../../@vaadin/grid/src/vaadin-grid-tree-toggle.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-grid-tree-toggle',\r\n  css`\r\n    :host {\r\n      --vaadin-grid-tree-toggle-level-offset: 2em;\r\n      align-items: center;\r\n      vertical-align: middle;\r\n      transform: translateX(calc(var(--lumo-space-s) * -1));\r\n      -webkit-tap-highlight-color: transparent;\r\n    }\r\n\r\n    :host(:not([leaf])) {\r\n      cursor: default;\r\n    }\r\n\r\n    [part='toggle'] {\r\n      display: inline-block;\r\n      font-size: 1.5em;\r\n      line-height: 1;\r\n      width: 1em;\r\n      height: 1em;\r\n      text-align: center;\r\n      color: var(--lumo-contrast-50pct);\r\n      cursor: var(--lumo-clickable-cursor);\r\n      /* Increase touch target area */\r\n      padding: calc(1em / 3);\r\n      margin: calc(1em / -3);\r\n    }\r\n\r\n    :host(:not([dir='rtl'])) [part='toggle'] {\r\n      margin-right: 0;\r\n    }\r\n\r\n    @media (hover: hover) {\r\n      :host(:hover) [part='toggle'] {\r\n        color: var(--lumo-contrast-80pct);\r\n      }\r\n    }\r\n\r\n    [part='toggle']::before {\r\n      font-family: 'lumo-icons';\r\n      display: inline-block;\r\n      height: 100%;\r\n    }\r\n\r\n    :host(:not([expanded])) [part='toggle']::before {\r\n      content: var(--lumo-icons-angle-right);\r\n    }\r\n\r\n    :host([expanded]) [part='toggle']::before {\r\n      content: var(--lumo-icons-angle-right);\r\n      transform: rotate(90deg);\r\n    }\r\n\r\n    /* Experimental support for hierarchy connectors, using an unsupported selector */\r\n    :host([theme~='connectors']) #level-spacer {\r\n      position: relative;\r\n      z-index: -1;\r\n      font-size: 1em;\r\n      height: 1.5em;\r\n    }\r\n\r\n    :host([theme~='connectors']) #level-spacer::before {\r\n      display: block;\r\n      content: '';\r\n      margin-top: calc(var(--lumo-space-m) * -1);\r\n      height: calc(var(--lumo-space-m) + 3em);\r\n      background-image: linear-gradient(\r\n        to right,\r\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\r\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\r\n      );\r\n      background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\r\n      background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\r\n    }\r\n\r\n    /* RTL specific styles */\r\n\r\n    :host([dir='rtl']) {\r\n      margin-left: 0;\r\n      margin-right: calc(var(--lumo-space-s) * -1);\r\n    }\r\n\r\n    :host([dir='rtl']) [part='toggle'] {\r\n      margin-left: 0;\r\n    }\r\n\r\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\r\n      transform: rotate(-90deg);\r\n    }\r\n\r\n    :host([dir='rtl'][theme~='connectors']) #level-spacer::before {\r\n      background-image: linear-gradient(\r\n        to left,\r\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\r\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\r\n      );\r\n      background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\r\n    }\r\n\r\n    :host([dir='rtl']:not([expanded])) [part='toggle']::before,\r\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\r\n      content: var(--lumo-icons-angle-left);\r\n    }\r\n  `,\r\n  { moduleId: 'lumo-grid-tree-toggle' },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { isFocusable } from './vaadin-grid-active-item-mixin.js';\r\n\r\nconst template = document.createElement('template');\r\n\r\ntemplate.innerHTML = `\r\n  <style>\r\n    @font-face {\r\n      font-family: \"vaadin-grid-tree-icons\";\r\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\r\n      font-weight: normal;\r\n      font-style: normal;\r\n    }\r\n  </style>\r\n`;\r\n\r\ndocument.head.appendChild(template.content);\r\n\r\nregisterStyles(\r\n  'vaadin-grid-tree-toggle',\r\n  css`\r\n    :host {\r\n      display: inline-flex;\r\n      align-items: baseline;\r\n      max-width: 100%;\r\n\r\n      /* CSS API for :host */\r\n      --vaadin-grid-tree-toggle-level-offset: 1em;\r\n      --_collapsed-icon: '\\\\e7be\\\\00a0';\r\n    }\r\n\r\n    :host([dir='rtl']) {\r\n      --_collapsed-icon: '\\\\e7bd\\\\00a0';\r\n    }\r\n\r\n    :host([hidden]) {\r\n      display: none !important;\r\n    }\r\n\r\n    :host(:not([leaf])) {\r\n      cursor: pointer;\r\n    }\r\n\r\n    #level-spacer,\r\n    [part='toggle'] {\r\n      flex: none;\r\n    }\r\n\r\n    #level-spacer {\r\n      display: inline-block;\r\n      width: calc(var(--_level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\r\n    }\r\n\r\n    [part='toggle']::before {\r\n      font-family: 'vaadin-grid-tree-icons';\r\n      line-height: 1em; /* make icon font metrics not affect baseline */\r\n    }\r\n\r\n    :host(:not([expanded])) [part='toggle']::before {\r\n      content: var(--_collapsed-icon);\r\n    }\r\n\r\n    :host([expanded]) [part='toggle']::before {\r\n      content: '\\\\e7bc\\\\00a0'; /* icon glyph + single non-breaking space */\r\n    }\r\n\r\n    :host([leaf]) [part='toggle'] {\r\n      visibility: hidden;\r\n    }\r\n\r\n    slot {\r\n      display: block;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  `,\r\n  { moduleId: 'vaadin-grid-tree-toggle-styles' },\r\n);\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const GridTreeToggleMixin = (superClass) =>\r\n  class extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Current level of the tree represented with a horizontal offset\r\n         * of the toggle button.\r\n         * @type {number}\r\n         */\r\n        level: {\r\n          type: Number,\r\n          value: 0,\r\n          observer: '_levelChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Hides the toggle icon and disables toggling a tree sublevel.\r\n         * @type {boolean}\r\n         */\r\n        leaf: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * Sublevel toggle state.\r\n         * @type {boolean}\r\n         */\r\n        expanded: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.addEventListener('click', (e) => this._onClick(e));\r\n    }\r\n\r\n    /** @private */\r\n    _onClick(e) {\r\n      if (this.leaf) {\r\n        return;\r\n      }\r\n      if (isFocusable(e.target) || e.target instanceof HTMLLabelElement) {\r\n        return;\r\n      }\r\n\r\n      e.preventDefault();\r\n      this.expanded = !this.expanded;\r\n    }\r\n\r\n    /** @private */\r\n    _levelChanged(level) {\r\n      const value = Number(level).toString();\r\n      this.style.setProperty('--_level', value);\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin';\r\nimport { GridTreeToggleMixin } from './vaadin-grid-tree-toggle-mixin.js';\r\n\r\n/**\r\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\r\n * that provides toggle and level display functionality for the item tree.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid-column id=\"column\"></vaadin-grid-column>\r\n * ```\r\n * ```js\r\n * const column = document.querySelector('#column');\r\n * column.renderer = (root, column, model) => {\r\n *   let treeToggle = root.firstElementChild;\r\n *   if (!treeToggle) {\r\n *     treeToggle = document.createElement('vaadin-grid-tree-toggle');\r\n *     treeToggle.addEventListener('expanded-changed', () => { ... });\r\n *     root.appendChild(treeToggle);\r\n *   }\r\n *   treeToggle.leaf = !model.item.hasChildren;\r\n *   treeToggle.level = level;\r\n *   treeToggle.expanded = expanded;\r\n *   treeToggle.textContent = model.item.name;\r\n * };\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name | Description\r\n * ---|---\r\n * `toggle` | The tree toggle icon\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute    | Description | Part name\r\n * ---|---|---\r\n * `expanded` | When present, the toggle is expanded | :host\r\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\r\n *\r\n * The following custom CSS properties are available on\r\n * the `<vaadin-grid-tree-toggle>` element:\r\n *\r\n * Custom CSS property | Description | Default\r\n * ---|---|---\r\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\r\n *\r\n * @fires {CustomEvent} expanded-changed - Fired when the `expanded` property changes.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ThemableMixin\r\n * @mixes DirMixin\r\n * @mixes GridTreeToggleMixin\r\n */\r\nclass GridTreeToggle extends GridTreeToggleMixin(ThemableMixin(DirMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-grid-tree-toggle';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <span id=\"level-spacer\"></span>\r\n      <span part=\"toggle\"></span>\r\n      <slot></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(GridTreeToggle);\r\n\r\nexport { GridTreeToggle };\r\n"],
  "mappings": "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",
  "names": []
}

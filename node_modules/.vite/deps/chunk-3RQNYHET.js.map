{
  "version": 3,
  "sources": ["../../atmosphere.js/lib/atmosphere.js", "../../atmosphere.js/lib/browser.js", "../../js-cookie/dist/js.cookie.mjs", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/CookieManager.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/CsrfUtils.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/Authentication.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/EndpointErrors.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/FluxConnection.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/FluxMessages.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/Connect.ts", "file:///opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/index.ts"],
  "sourcesContent": ["/*\r\n * Copyright 2011-2021 Async-IO.org\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Atmosphere.js\r\n * https://github.com/Atmosphere/atmosphere-javascript\r\n *\r\n * API reference\r\n * https://github.com/Atmosphere/atmosphere/wiki/jQuery.atmosphere.js-API\r\n *\r\n * Highly inspired by\r\n * - Portal by Donghwan Kim http://flowersinthesand.github.io/portal/\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        // AMD\r\n        define(factory);\r\n    } else if (typeof exports !== 'undefined') {\r\n        // CommonJS\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals, Window\r\n        root.atmosphere = factory();\r\n    }\r\n}(this, function () {\r\n\r\n    \"use strict\";\r\n\r\n    var atmosphere = {},\r\n        guid,\r\n        offline = false,\r\n        requests = [],\r\n        callbacks = [],\r\n        uuid = 0,\r\n        hasOwn = Object.prototype.hasOwnProperty;\r\n\r\n    atmosphere = {\r\n        version: \"3.1.3-javascript\",\r\n        onError: function (response) {\r\n        },\r\n        onClose: function (response) {\r\n        },\r\n        onOpen: function (response) {\r\n        },\r\n        onReopen: function (response) {\r\n        },\r\n        onMessage: function (response) {\r\n        },\r\n        onReconnect: function (request, response) {\r\n        },\r\n        onMessagePublished: function (response) {\r\n        },\r\n        onTransportFailure: function (errorMessage, _request) {\r\n        },\r\n        onLocalMessage: function (response) {\r\n        },\r\n        onFailureToReconnect: function (request, response) {\r\n        },\r\n        onClientTimeout: function (request) {\r\n        },\r\n        onOpenAfterResume: function (request) {\r\n        },\r\n\r\n        /**\r\n         * Creates an object based on an atmosphere subscription that exposes functions defined by the Websocket interface.\r\n         *\r\n         * @class WebsocketApiAdapter\r\n         * @param {Object} request the request object to build the underlying subscription\r\n         * @constructor\r\n         */\r\n        WebsocketApiAdapter: function (request) {\r\n            var _socket, _adapter;\r\n\r\n            /**\r\n             * Overrides the onMessage callback in given request.\r\n             *\r\n             * @method onMessage\r\n             * @param {Object} e the event object\r\n             */\r\n            request.onMessage = function (e) {\r\n                _adapter.onmessage({data: e.responseBody});\r\n            };\r\n\r\n            /**\r\n             * Overrides the onMessagePublished callback in given request.\r\n             *\r\n             * @method onMessagePublished\r\n             * @param {Object} e the event object\r\n             */\r\n            request.onMessagePublished = function (e) {\r\n                _adapter.onmessage({data: e.responseBody});\r\n            };\r\n\r\n            /**\r\n             * Overrides the onOpen callback in given request to proxy the event to the adapter.\r\n             *\r\n             * @method onOpen\r\n             * @param {Object} e the event object\r\n             */\r\n            request.onOpen = function (e) {\r\n                _adapter.onopen(e);\r\n            };\r\n\r\n            _adapter = {\r\n                close: function () {\r\n                    _socket.close();\r\n                },\r\n\r\n                send: function (data) {\r\n                    _socket.push(data);\r\n                },\r\n\r\n                onmessage: function (e) {\r\n                },\r\n\r\n                onopen: function (e) {\r\n                },\r\n\r\n                onclose: function (e) {\r\n                },\r\n\r\n                onerror: function (e) {\r\n\r\n                }\r\n            };\r\n            _socket = new atmosphere.subscribe(request);\r\n\r\n            return _adapter;\r\n        },\r\n\r\n        AtmosphereRequest: function (options) {\r\n\r\n            /**\r\n             * {Object} Request parameters.\r\n             *\r\n             * @private\r\n             */\r\n            var _request = {\r\n                timeout: 300000,\r\n                method: 'GET',\r\n                headers: {},\r\n                contentType: '',\r\n                callback: null,\r\n                url: '',\r\n                data: '',\r\n                suspend: true,\r\n                maxRequest: -1,\r\n                reconnect: true,\r\n                maxStreamingLength: 10000000,\r\n                lastIndex: 0,\r\n                logLevel: 'info',\r\n                requestCount: 0,\r\n                fallbackMethod: 'GET',\r\n                fallbackTransport: 'streaming',\r\n                transport: 'long-polling',\r\n                webSocketImpl: null,\r\n                webSocketBinaryType: null,\r\n                dispatchUrl: null,\r\n                webSocketPathDelimiter: \"@@\",\r\n                enableXDR: false,\r\n                rewriteURL: false,\r\n                attachHeadersAsQueryString: true,\r\n                executeCallbackBeforeReconnect: false,\r\n                readyState: 0,\r\n                withCredentials: false,\r\n                trackMessageLength: false,\r\n                messageDelimiter: '|',\r\n                connectTimeout: -1,\r\n                reconnectInterval: 0,\r\n                dropHeaders: true,\r\n                uuid: 0,\r\n                shared: false,\r\n                readResponsesHeaders: false,\r\n                maxReconnectOnClose: 5,\r\n                enableProtocol: true,\r\n                disableDisconnect: false,\r\n                pollingInterval: 0,\r\n                heartbeat: {\r\n                    client: null,\r\n                    server: null\r\n                },\r\n                ackInterval: 0,\r\n                reconnectOnServerError: true,\r\n                handleOnlineOffline: true,\r\n                maxWebsocketErrorRetries: 1,\r\n                curWebsocketErrorRetries: 0,\r\n                unloadBackwardCompat: !navigator.sendBeacon,\r\n                onError: function (response) {\r\n                },\r\n                onClose: function (response) {\r\n                },\r\n                onOpen: function (response) {\r\n                },\r\n                onMessage: function (response) {\r\n                },\r\n                onReopen: function (request, response) {\r\n                },\r\n                onReconnect: function (request, response) {\r\n                },\r\n                onMessagePublished: function (response) {\r\n                },\r\n                onTransportFailure: function (reason, request) {\r\n                },\r\n                onLocalMessage: function (request) {\r\n                },\r\n                onFailureToReconnect: function (request, response) {\r\n                },\r\n                onClientTimeout: function (request) {\r\n                },\r\n                onOpenAfterResume: function (request) {\r\n                }\r\n            };\r\n\r\n            /**\r\n             * {Object} Request's last response.\r\n             *\r\n             * @private\r\n             */\r\n            var _response = {\r\n                status: 200,\r\n                reasonPhrase: \"OK\",\r\n                responseBody: '',\r\n                messages: [],\r\n                headers: [],\r\n                state: \"messageReceived\",\r\n                transport: \"polling\",\r\n                error: null,\r\n                request: null,\r\n                partialMessage: \"\",\r\n                errorHandled: false,\r\n                closedByClientTimeout: false,\r\n                ffTryingReconnect: false\r\n            };\r\n\r\n            /**\r\n             * {websocket} Opened web socket.\r\n             *\r\n             * @private\r\n             */\r\n            var _websocket = null;\r\n\r\n            /**\r\n             * {SSE} Opened SSE.\r\n             *\r\n             * @private\r\n             */\r\n            var _sse = null;\r\n\r\n            /**\r\n             * {XMLHttpRequest, ActiveXObject} Opened ajax request (in case of http-streaming or long-polling)\r\n             *\r\n             * @private\r\n             */\r\n            var _activeRequest = null;\r\n\r\n            /**\r\n             * {Object} Object use for streaming with IE.\r\n             *\r\n             * @private\r\n             */\r\n            var _ieStream = null;\r\n\r\n            /**\r\n             * {Object} Object use for jsonp transport.\r\n             *\r\n             * @private\r\n             */\r\n            var _jqxhr = null;\r\n\r\n            /**\r\n             * {boolean} If request has been subscribed or not.\r\n             *\r\n             * @private\r\n             */\r\n            var _subscribed = true;\r\n\r\n            /**\r\n             * {number} Number of test reconnection.\r\n             *\r\n             * @private\r\n             */\r\n            var _requestCount = 0;\r\n\r\n            /**\r\n             * The Heartbeat interval send by the server.\r\n             * @type {int}\r\n             * @private\r\n             */\r\n            var _heartbeatInterval = 0;\r\n\r\n            /**\r\n             * The Heartbeat bytes send by the server.\r\n             * @type {string}\r\n             * @private\r\n             */\r\n            var _heartbeatPadding = 'X';\r\n\r\n            /**\r\n             * {boolean} If request is currently aborted.\r\n             *\r\n             * @private\r\n             */\r\n            var _abortingConnection = false;\r\n\r\n            /**\r\n             * A local \"channel' of communication.\r\n             *\r\n             * @private\r\n             */\r\n            var _localSocketF = null;\r\n\r\n            /**\r\n             * The storage used.\r\n             *\r\n             * @private\r\n             */\r\n            var _storageService;\r\n\r\n            /**\r\n             * Local communication\r\n             *\r\n             * @private\r\n             */\r\n            var _localStorageService = null;\r\n\r\n            /**\r\n             * A Unique ID\r\n             *\r\n             * @private\r\n             */\r\n            var guid = atmosphere.util.now();\r\n\r\n            /** Trace time */\r\n            var _traceTimer;\r\n\r\n            /** Key for connection sharing */\r\n            var _sharingKey;\r\n\r\n            /**\r\n             * {boolean} If window beforeUnload event has been called.\r\n             * Flag will be reset after 5000 ms\r\n             *\r\n             * @private\r\n             */\r\n            var _beforeUnloadState = false;\r\n\r\n            // Automatic call to subscribe\r\n            _subscribe(options);\r\n\r\n            /**\r\n             * Initialize atmosphere request object.\r\n             *\r\n             * @private\r\n             */\r\n            function _init() {\r\n                _subscribed = true;\r\n                _abortingConnection = false;\r\n                _requestCount = 0;\r\n\r\n                _websocket = null;\r\n                _sse = null;\r\n                _activeRequest = null;\r\n                _ieStream = null;\r\n            }\r\n\r\n            /**\r\n             * Re-initialize atmosphere object.\r\n             *\r\n             * @private\r\n             */\r\n            function _reinit() {\r\n                _clearState();\r\n                _init();\r\n            }\r\n\r\n            /**\r\n             * Returns true if the given level is equal or above the configured log level.\r\n             *\r\n             * @private\r\n             */\r\n            function _canLog(level) {\r\n                if (level == 'debug') {\r\n                    return _request.logLevel === 'debug';\r\n                } else if (level == 'info') {\r\n                    return _request.logLevel === 'info' || _request.logLevel === 'debug';\r\n                } else if (level == 'warn') {\r\n                    return _request.logLevel === 'warn' || _request.logLevel === 'info' || _request.logLevel === 'debug';\r\n                } else if (level == 'error') {\r\n                    return _request.logLevel === 'error' || _request.logLevel === 'warn' || _request.logLevel === 'info' || _request.logLevel === 'debug';\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            function _debug(msg) {\r\n                if (_canLog('debug')) {\r\n                    atmosphere.util.debug(new Date() + \" Atmosphere: \" + msg);\r\n                }\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @private\r\n             */\r\n            function _verifyStreamingLength(ajaxRequest, rq) {\r\n                // Wait to be sure we have the full message before closing.\r\n                if (_response.partialMessage === \"\" && (rq.transport === 'streaming') && (ajaxRequest.responseText.length > rq.maxStreamingLength)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * Disconnect\r\n             *\r\n             * @private\r\n             */\r\n            function _disconnect() {\r\n                if (_request.enableProtocol && !_request.disableDisconnect && !_request.firstMessage) {\r\n                    var query = \"X-Atmosphere-Transport=close&X-Atmosphere-tracking-id=\" + _request.uuid;\r\n\r\n                    atmosphere.util.each(_request.headers, function (name, value) {\r\n                        var h = atmosphere.util.isFunction(value) ? value.call(this, _request, _request, _response) : value;\r\n                        if (h != null) {\r\n                            query += \"&\" + encodeURIComponent(name) + \"=\" + encodeURIComponent(h);\r\n                        }\r\n                    });\r\n\r\n                    var url = _request.url.replace(/([?&])_=[^&]*/, query);\r\n                    url = url + (url === _request.url ? (/\\?/.test(_request.url) ? \"&\" : \"?\") + query : \"\");\r\n\r\n                    var rq = {\r\n                        connected: false\r\n                    };\r\n                    var closeR = new atmosphere.AtmosphereRequest(rq);\r\n                    closeR.connectTimeout = _request.connectTimeout;\r\n                    closeR.attachHeadersAsQueryString = false;\r\n                    closeR.dropHeaders = true;\r\n                    closeR.url = url;\r\n                    closeR.contentType = \"text/plain\";\r\n                    closeR.transport = 'polling';\r\n                    closeR.method = 'GET';\r\n                    closeR.data = '';\r\n                    closeR.heartbeat = null;\r\n                    if (_request.enableXDR) {\r\n                        closeR.enableXDR = _request.enableXDR\r\n                    }\r\n                    _pushOnClose(\"\", closeR);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Close request.\r\n             *\r\n             * @private\r\n             */\r\n            function _close() {\r\n                _debug(\"Closing (AtmosphereRequest._close() called)\");\r\n\r\n                _abortingConnection = true;\r\n                if (_request.reconnectId) {\r\n                    clearTimeout(_request.reconnectId);\r\n                    delete _request.reconnectId;\r\n                }\r\n\r\n                if (_request.heartbeatTimer) {\r\n                    clearTimeout(_request.heartbeatTimer);\r\n                }\r\n\r\n                _request.reconnect = false;\r\n                _response.request = _request;\r\n                _response.state = 'unsubscribe';\r\n                _response.responseBody = \"\";\r\n                _response.status = 408;\r\n                _response.partialMessage = \"\";\r\n                _request.curWebsocketErrorRetries = 0;\r\n                _invokeCallback();\r\n                _disconnect();\r\n                _clearState();\r\n            }\r\n\r\n            function _clearState() {\r\n                _response.partialMessage = \"\";\r\n                if (_request.id) {\r\n                    clearTimeout(_request.id);\r\n                }\r\n\r\n                if (_request.heartbeatTimer) {\r\n                    clearTimeout(_request.heartbeatTimer);\r\n                }\r\n\r\n                // https://github.com/Atmosphere/atmosphere/issues/1860#issuecomment-74707226\r\n                if (_request.reconnectId) {\r\n                    clearTimeout(_request.reconnectId);\r\n                    delete _request.reconnectId;\r\n                }\r\n\r\n                if (_ieStream != null) {\r\n                    _ieStream.close();\r\n                    _ieStream = null;\r\n                }\r\n                if (_jqxhr != null) {\r\n                    _jqxhr.abort();\r\n                    _jqxhr = null;\r\n                }\r\n                if (_activeRequest != null) {\r\n                    _activeRequest.abort();\r\n                    _activeRequest = null;\r\n                }\r\n                if (_websocket != null) {\r\n                    if (_websocket.canSendMessage) {\r\n                        _debug(\"invoking .close() on WebSocket object\");\r\n                        _websocket.close();\r\n                    }\r\n                    _websocket = null;\r\n                }\r\n                if (_sse != null) {\r\n                    _sse.close();\r\n                    _sse = null;\r\n                }\r\n                _clearStorage();\r\n            }\r\n\r\n            function _clearStorage() {\r\n                // Stop sharing a connection\r\n                if (_storageService != null) {\r\n                    // Clears trace timer\r\n                    clearInterval(_traceTimer);\r\n                    // Removes the trace\r\n                    document.cookie = _sharingKey + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\r\n                    // The heir is the parent unless unloading\r\n                    _storageService.signal(\"close\", {\r\n                        reason: \"\",\r\n                        heir: !_abortingConnection ? guid : (_storageService.get(\"children\") || [])[0]\r\n                    });\r\n                    _storageService.close();\r\n                }\r\n                if (_localStorageService != null) {\r\n                    _localStorageService.close();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Subscribe request using request transport. <br>\r\n             * If request is currently opened, this one will be closed.\r\n             *\r\n             * @param {Object} Request parameters.\r\n             * @private\r\n             */\r\n            function _subscribe(options) {\r\n                _reinit();\r\n\r\n                _request = atmosphere.util.extend(_request, options);\r\n                // Allow at least 1 request\r\n                _request.mrequest = _request.reconnect;\r\n                if (!_request.reconnect) {\r\n                    _request.reconnect = true;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Check if web socket is supported (check for custom implementation provided by request object or browser implementation).\r\n             *\r\n             * @returns {boolean} True if web socket is supported, false otherwise.\r\n             * @private\r\n             */\r\n            function _supportWebsocket() {\r\n                return _request.webSocketImpl != null || window.WebSocket || window.MozWebSocket;\r\n            }\r\n\r\n            /**\r\n             * Check if server side events (SSE) is supported (check for custom implementation provided by request object or browser implementation).\r\n             *\r\n             * @returns {boolean} True if web socket is supported, false otherwise.\r\n             * @private\r\n             */\r\n            function _supportSSE() {\r\n                // Origin parts\r\n                var url = atmosphere.util.getAbsoluteURL(_request.url.toLowerCase());\r\n                var parts = /^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+))?)?/.exec(url);\r\n                var crossOrigin = !!(parts && (\r\n                    // protocol\r\n                    parts[1] != window.location.protocol ||\r\n                    // hostname\r\n                    parts[2] != window.location.hostname ||\r\n                    // port\r\n                    (parts[3] || (parts[1] === \"http:\" ? 80 : 443)) != (window.location.port || (window.location.protocol === \"http:\" ? 80 : 443))\r\n                ));\r\n                return window.EventSource && (!crossOrigin || !atmosphere.util.browser.safari || atmosphere.util.browser.vmajor >= 7);\r\n            }\r\n\r\n            /**\r\n             * Open request using request transport. <br>\r\n             * If request transport is 'websocket' but websocket can't be opened, request will automatically reconnect using fallback transport.\r\n             *\r\n             * @private\r\n             */\r\n            function _execute() {\r\n                // Shared across multiple tabs/windows.\r\n                if (_request.shared) {\r\n                    _localStorageService = _local(_request);\r\n                    if (_localStorageService != null) {\r\n                        if (_canLog('debug')) {\r\n                            atmosphere.util.debug(\"Storage service available. All communication will be local\");\r\n                        }\r\n\r\n                        if (_localStorageService.open(_request)) {\r\n                            // Local connection.\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (_canLog('debug')) {\r\n                        atmosphere.util.debug(\"No Storage service available.\");\r\n                    }\r\n                    // Wasn't local or an error occurred\r\n                    _localStorageService = null;\r\n                }\r\n\r\n                // Protocol\r\n                _request.firstMessage = uuid == 0 ? true : false;\r\n                _request.isOpen = false;\r\n                _request.ctime = atmosphere.util.now();\r\n\r\n                // We carry any UUID set by the user or from a previous connection.\r\n                if (_request.uuid === 0) {\r\n                    _request.uuid = uuid;\r\n                }\r\n                _response.closedByClientTimeout = false;\r\n\r\n                if (_request.transport !== 'websocket' && _request.transport !== 'sse') {\r\n                    _executeRequest(_request);\r\n\r\n                } else if (_request.transport === 'websocket') {\r\n                    if (!_supportWebsocket()) {\r\n                        _reconnectWithFallbackTransport(\"Websocket is not supported, using request.fallbackTransport (\" + _request.fallbackTransport\r\n                            + \")\");\r\n                    } else {\r\n                        _executeWebSocket(false);\r\n                    }\r\n                } else if (_request.transport === 'sse') {\r\n                    if (!_supportSSE()) {\r\n                        _reconnectWithFallbackTransport(\"Server Side Events(SSE) is not supported, using request.fallbackTransport (\"\r\n                            + _request.fallbackTransport + \")\");\r\n                    } else {\r\n                        _executeSSE(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _local(request) {\r\n                var trace, connector, orphan, name = \"atmosphere-\" + request.url, connectors = {\r\n                    storage: function () {\r\n                        function onstorage(event) {\r\n                            if (event.key === name && event.newValue) {\r\n                                listener(event.newValue);\r\n                            }\r\n                        }\r\n\r\n                        if (!atmosphere.util.storage) {\r\n                            return;\r\n                        }\r\n\r\n                        var storage = window.localStorage,\r\n                            get = function (key) {\r\n                                var item = storage.getItem(name + \"-\" + key);\r\n                                return item === null ? [] : JSON.parse(item);\r\n                            },\r\n                            set = function (key, value) {\r\n                                storage.setItem(name + \"-\" + key, JSON.stringify(value));\r\n                            };\r\n\r\n                        return {\r\n                            init: function () {\r\n                                set(\"children\", get(\"children\").concat([guid]));\r\n                                atmosphere.util.on(window, \"storage\", onstorage);\r\n                                return get(\"opened\");\r\n                            },\r\n                            signal: function (type, data) {\r\n                                storage.setItem(name, JSON.stringify({\r\n                                    target: \"p\",\r\n                                    type: type,\r\n                                    data: data\r\n                                }));\r\n                            },\r\n                            close: function () {\r\n                                var children = get(\"children\");\r\n\r\n                                atmosphere.util.off(window, \"storage\", onstorage);\r\n                                if (children) {\r\n                                    if (removeFromArray(children, request.id)) {\r\n                                        set(\"children\", children);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    },\r\n                    windowref: function () {\r\n                        var win = window.open(\"\", name.replace(/\\W/g, \"\"));\r\n\r\n                        if (!win || win.closed || !win.callbacks) {\r\n                            return;\r\n                        }\r\n\r\n                        return {\r\n                            init: function () {\r\n                                win.callbacks.push(listener);\r\n                                win.children.push(guid);\r\n                                return win.opened;\r\n                            },\r\n                            signal: function (type, data) {\r\n                                if (!win.closed && win.fire) {\r\n                                    win.fire(JSON.stringify({\r\n                                        target: \"p\",\r\n                                        type: type,\r\n                                        data: data\r\n                                    }));\r\n                                }\r\n                            },\r\n                            close: function () {\r\n                                // Removes traces only if the parent is alive\r\n                                if (!orphan) {\r\n                                    removeFromArray(win.callbacks, listener);\r\n                                    removeFromArray(win.children, guid);\r\n                                }\r\n                            }\r\n\r\n                        };\r\n                    }\r\n                };\r\n\r\n                function removeFromArray(array, val) {\r\n                    var i, length = array.length;\r\n\r\n                    for (i = 0; i < length; i++) {\r\n                        if (array[i] === val) {\r\n                            array.splice(i, 1);\r\n                        }\r\n                    }\r\n\r\n                    return length !== array.length;\r\n                }\r\n\r\n                // Receives open, close and message command from the parent\r\n                function listener(string) {\r\n                    var command = JSON.parse(string), data = command.data;\r\n\r\n                    if (command.target === \"c\") {\r\n                        switch (command.type) {\r\n                            case \"open\":\r\n                                _open(\"opening\", 'local', _request);\r\n                                break;\r\n                            case \"close\":\r\n                                if (!orphan) {\r\n                                    orphan = true;\r\n                                    if (data.reason === \"aborted\") {\r\n                                        _close();\r\n                                    } else {\r\n                                        // Gives the heir some time to reconnect\r\n                                        if (data.heir === guid) {\r\n                                            _execute();\r\n                                        } else {\r\n                                            setTimeout(function () {\r\n                                                _execute();\r\n                                            }, 100);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"message\":\r\n                                _prepareCallback(data, \"messageReceived\", 200, request.transport);\r\n                                break;\r\n                            case \"localMessage\":\r\n                                _localMessage(data);\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function findTrace() {\r\n                    var matcher = new RegExp(\"(?:^|; )(\" + encodeURIComponent(name) + \")=([^;]*)\").exec(document.cookie);\r\n                    if (matcher) {\r\n                        return JSON.parse(decodeURIComponent(matcher[2]));\r\n                    }\r\n                }\r\n\r\n                // Finds and validates the parent socket's trace from the cookie\r\n                trace = findTrace();\r\n                if (!trace || atmosphere.util.now() - trace.ts > 1000) {\r\n                    return;\r\n                }\r\n\r\n                // Chooses a connector\r\n                connector = connectors.storage() || connectors.windowref();\r\n                if (!connector) {\r\n                    return;\r\n                }\r\n\r\n                return {\r\n                    open: function () {\r\n                        var parentOpened;\r\n\r\n                        // Checks the shared one is alive\r\n                        _traceTimer = setInterval(function () {\r\n                            var oldTrace = trace;\r\n                            trace = findTrace();\r\n                            if (!trace || oldTrace.ts === trace.ts) {\r\n                                // Simulates a close signal\r\n                                listener(JSON.stringify({\r\n                                    target: \"c\",\r\n                                    type: \"close\",\r\n                                    data: {\r\n                                        reason: \"error\",\r\n                                        heir: oldTrace.heir\r\n                                    }\r\n                                }));\r\n                            }\r\n                        }, 1000);\r\n\r\n                        parentOpened = connector.init();\r\n                        if (parentOpened) {\r\n                            // Firing the open event without delay robs the user of the opportunity to bind connecting event handlers\r\n                            setTimeout(function () {\r\n                                _open(\"opening\", 'local', request);\r\n                            }, 50);\r\n                        }\r\n                        return parentOpened;\r\n                    },\r\n                    send: function (event) {\r\n                        connector.signal(\"send\", event);\r\n                    },\r\n                    localSend: function (event) {\r\n                        connector.signal(\"localSend\", JSON.stringify({\r\n                            id: guid,\r\n                            event: event\r\n                        }));\r\n                    },\r\n                    close: function () {\r\n                        // Do not signal the parent if this method is executed by the unload event handler\r\n                        if (!_abortingConnection) {\r\n                            clearInterval(_traceTimer);\r\n                            connector.signal(\"close\");\r\n                            connector.close();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            function share() {\r\n                var storageService, name = \"atmosphere-\" + _request.url, servers = {\r\n                    // Powered by the storage event and the localStorage\r\n                    // http://www.w3.org/TR/webstorage/#event-storage\r\n                    storage: function () {\r\n                        function onstorage(event) {\r\n                            // When a deletion, newValue initialized to null\r\n                            if (event.key === name && event.newValue) {\r\n                                listener(event.newValue);\r\n                            }\r\n                        }\r\n\r\n                        if (!atmosphere.util.storage) {\r\n                            return;\r\n                        }\r\n\r\n                        var storage = window.localStorage;\r\n\r\n                        return {\r\n                            init: function () {\r\n                                // Handles the storage event\r\n                                atmosphere.util.on(window, \"storage\", onstorage);\r\n                            },\r\n                            signal: function (type, data) {\r\n                                storage.setItem(name, JSON.stringify({\r\n                                    target: \"c\",\r\n                                    type: type,\r\n                                    data: data\r\n                                }));\r\n                            },\r\n                            get: function (key) {\r\n                                return JSON.parse(storage.getItem(name + \"-\" + key));\r\n                            },\r\n                            set: function (key, value) {\r\n                                storage.setItem(name + \"-\" + key, JSON.stringify(value));\r\n                            },\r\n                            close: function () {\r\n                                atmosphere.util.off(window, \"storage\", onstorage);\r\n                                storage.removeItem(name);\r\n                                storage.removeItem(name + \"-opened\");\r\n                                storage.removeItem(name + \"-children\");\r\n                            }\r\n\r\n                        };\r\n                    },\r\n                    // Powered by the window.open method\r\n                    // https://developer.mozilla.org/en/DOM/window.open\r\n                    windowref: function () {\r\n                        // Internet Explorer raises an invalid argument error\r\n                        // when calling the window.open method with the name containing non-word characters\r\n                        var neim = name.replace(/\\W/g, \"\"), container = document.getElementById(neim), win;\r\n\r\n                        if (!container) {\r\n                            container = document.createElement(\"div\");\r\n                            container.id = neim;\r\n                            container.style.display = \"none\";\r\n                            container.innerHTML = '<iframe name=\"' + neim + '\"></iframe>';\r\n                            document.body.appendChild(container);\r\n                        }\r\n\r\n                        win = container.firstChild.contentWindow;\r\n\r\n                        return {\r\n                            init: function () {\r\n                                // Callbacks from different windows\r\n                                win.callbacks = [listener];\r\n                                // In IE 8 and less, only string argument can be safely passed to the function in other window\r\n                                win.fire = function (string) {\r\n                                    var i;\r\n\r\n                                    for (i = 0; i < win.callbacks.length; i++) {\r\n                                        win.callbacks[i](string);\r\n                                    }\r\n                                };\r\n                            },\r\n                            signal: function (type, data) {\r\n                                if (!win.closed && win.fire) {\r\n                                    win.fire(JSON.stringify({\r\n                                        target: \"c\",\r\n                                        type: type,\r\n                                        data: data\r\n                                    }));\r\n                                }\r\n                            },\r\n                            get: function (key) {\r\n                                return !win.closed ? win[key] : null;\r\n                            },\r\n                            set: function (key, value) {\r\n                                if (!win.closed) {\r\n                                    win[key] = value;\r\n                                }\r\n                            },\r\n                            close: function () {\r\n                            }\r\n                        };\r\n                    }\r\n                };\r\n\r\n                // Receives send and close command from the children\r\n                function listener(string) {\r\n                    var command = JSON.parse(string), data = command.data;\r\n\r\n                    if (command.target === \"p\") {\r\n                        switch (command.type) {\r\n                            case \"send\":\r\n                                _push(data);\r\n                                break;\r\n                            case \"localSend\":\r\n                                _localMessage(data);\r\n                                break;\r\n                            case \"close\":\r\n                                _close();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                _localSocketF = function propagateMessageEvent(context) {\r\n                    storageService.signal(\"message\", context);\r\n                };\r\n\r\n                function leaveTrace() {\r\n                    document.cookie = _sharingKey + \"=\" +\r\n                        // Opera's JSON implementation ignores a number whose a last digit of 0 strangely\r\n                        // but has no problem with a number whose a last digit of 9 + 1\r\n                        encodeURIComponent(JSON.stringify({\r\n                            ts: atmosphere.util.now() + 1,\r\n                            heir: (storageService.get(\"children\") || [])[0]\r\n                        })) + \"; path=/\";\r\n                }\r\n\r\n                // Chooses a storageService\r\n                storageService = servers.storage() || servers.windowref();\r\n                storageService.init();\r\n\r\n                if (_canLog('debug')) {\r\n                    atmosphere.util.debug(\"Installed StorageService \" + storageService);\r\n                }\r\n\r\n                // List of children sockets\r\n                storageService.set(\"children\", []);\r\n\r\n                if (storageService.get(\"opened\") != null && !storageService.get(\"opened\")) {\r\n                    // Flag indicating the parent socket is opened\r\n                    storageService.set(\"opened\", false);\r\n                }\r\n                // Leaves traces\r\n                _sharingKey = encodeURIComponent(name);\r\n                leaveTrace();\r\n                _traceTimer = setInterval(leaveTrace, 1000);\r\n\r\n                _storageService = storageService;\r\n            }\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            function _open(state, transport, request) {\r\n                if (_request.shared && transport !== 'local') {\r\n                    share();\r\n                }\r\n\r\n                if (_storageService != null) {\r\n                    _storageService.set(\"opened\", true);\r\n                }\r\n\r\n                request.close = function () {\r\n                    _close();\r\n                };\r\n\r\n                if (_requestCount > 0 && state === 're-connecting') {\r\n                    request.isReopen = true;\r\n                    _tryingToReconnect(_response);\r\n                } else if (!_response.error) {\r\n                    _response.request = request;\r\n                    var prevState = _response.state;\r\n                    _response.state = state;\r\n                    var prevTransport = _response.transport;\r\n                    _response.transport = transport;\r\n\r\n                    var _body = _response.responseBody;\r\n                    _invokeCallback();\r\n                    _response.responseBody = _body;\r\n\r\n                    _response.state = prevState;\r\n                    _response.transport = prevTransport;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Execute request using jsonp transport.\r\n             *\r\n             * @param request {Object} request Request parameters, if undefined _request object will be used.\r\n             * @private\r\n             */\r\n            function _jsonp(request) {\r\n                // When CORS is enabled, make sure we force the proper transport.\r\n                request.transport = \"jsonp\";\r\n\r\n                var rq = _request, script;\r\n                if ((request != null) && (typeof (request) !== 'undefined')) {\r\n                    rq = request;\r\n                }\r\n\r\n                _jqxhr = {\r\n                    open: function () {\r\n                        var callback = \"atmosphere\" + (++guid);\r\n\r\n                        function _reconnectOnFailure() {\r\n                            rq.lastIndex = 0;\r\n\r\n                            if (rq.openId) {\r\n                                clearTimeout(rq.openId);\r\n                            }\r\n\r\n                            if (rq.heartbeatTimer) {\r\n                                clearTimeout(rq.heartbeatTimer);\r\n                            }\r\n\r\n                            if (rq.reconnect && _requestCount++ < rq.maxReconnectOnClose) {\r\n                                _open('re-connecting', rq.transport, rq);\r\n                                _reconnect(_jqxhr, rq, request.reconnectInterval);\r\n                                rq.openId = setTimeout(function () {\r\n                                    _triggerOpen(rq);\r\n                                }, rq.reconnectInterval + 1000);\r\n                            } else {\r\n                                _onError(0, \"maxReconnectOnClose reached\");\r\n                            }\r\n                        }\r\n\r\n                        function poll() {\r\n                            var url = rq.url;\r\n                            if (rq.dispatchUrl != null) {\r\n                                url += rq.dispatchUrl;\r\n                            }\r\n\r\n                            var data = rq.data;\r\n                            if (rq.attachHeadersAsQueryString) {\r\n                                url = _attachHeaders(rq);\r\n                                if (data !== '') {\r\n                                    url += \"&X-Atmosphere-Post-Body=\" + encodeURIComponent(data);\r\n                                }\r\n                                data = '';\r\n                            }\r\n\r\n                            var head = document.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\r\n\r\n                            script = document.createElement(\"script\");\r\n                            script.src = url + \"&jsonpTransport=\" + callback;\r\n                            script.clean = function () {\r\n                                script.clean = script.onerror = script.onload = script.onreadystatechange = null;\r\n                                if (script.parentNode) {\r\n                                    script.parentNode.removeChild(script);\r\n                                }\r\n\r\n                                if (++request.scriptCount === 2) {\r\n                                    request.scriptCount = 1;\r\n                                    _reconnectOnFailure();\r\n                                }\r\n\r\n                            };\r\n                            script.onload = script.onreadystatechange = function () {\r\n                                _debug(\"jsonp.onload\");\r\n                                if (!script.readyState || /loaded|complete/.test(script.readyState)) {\r\n                                    script.clean();\r\n                                }\r\n                            };\r\n\r\n                            script.onerror = function () {\r\n                                _debug(\"jsonp.onerror\");\r\n                                request.scriptCount = 1;\r\n                                script.clean();\r\n                            };\r\n\r\n                            head.insertBefore(script, head.firstChild);\r\n                        }\r\n\r\n                        // Attaches callback\r\n                        window[callback] = function (msg) {\r\n                            _debug(\"jsonp.window\");\r\n                            request.scriptCount = 0;\r\n                            if (rq.reconnect && rq.maxRequest === -1 || rq.requestCount++ < rq.maxRequest) {\r\n\r\n                                // _readHeaders(_jqxhr, rq);\r\n                                if (!rq.executeCallbackBeforeReconnect) {\r\n                                    _reconnect(_jqxhr, rq, rq.pollingInterval);\r\n                                }\r\n\r\n                                if (msg != null && typeof msg !== 'string') {\r\n                                    try {\r\n                                        msg = msg.message;\r\n                                    } catch (err) {\r\n                                        // The message was partial\r\n                                    }\r\n                                }\r\n                                var skipCallbackInvocation = _trackMessageSize(msg, rq, _response);\r\n                                if (!skipCallbackInvocation) {\r\n                                    _prepareCallback(_response.responseBody, \"messageReceived\", 200, rq.transport);\r\n                                }\r\n\r\n                                if (rq.executeCallbackBeforeReconnect) {\r\n                                    _reconnect(_jqxhr, rq, rq.pollingInterval);\r\n                                }\r\n                                _timeout(rq);\r\n                            } else {\r\n                                atmosphere.util.log(_request.logLevel, [\"JSONP reconnect maximum try reached \" + _request.requestCount]);\r\n                                _onError(0, \"maxRequest reached\");\r\n                            }\r\n                        };\r\n                        setTimeout(function () {\r\n                            poll();\r\n                        }, 50);\r\n                    },\r\n                    abort: function () {\r\n                        if (script && script.clean) {\r\n                            script.clean();\r\n                        }\r\n                    }\r\n                };\r\n                _jqxhr.open();\r\n            }\r\n\r\n            /**\r\n             * Build websocket object.\r\n             *\r\n             * @param location {string} Web socket url.\r\n             * @returns {websocket} Web socket object.\r\n             * @private\r\n             */\r\n            function _getWebSocket(location) {\r\n                if (_request.webSocketImpl != null) {\r\n                    return _request.webSocketImpl;\r\n                } else {\r\n                    if (window.WebSocket) {\r\n                        return new WebSocket(location);\r\n                    } else {\r\n                        return new MozWebSocket(location);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Build web socket url from request url.\r\n             *\r\n             * @return {string} Web socket url (start with \"ws\" or \"wss\" for secure web socket).\r\n             * @private\r\n             */\r\n            function _buildWebSocketUrl() {\r\n                return _attachHeaders(_request, atmosphere.util.getAbsoluteURL(_request.webSocketUrl || _request.url)).replace(/^http/, \"ws\");\r\n            }\r\n\r\n            /**\r\n             * Build SSE url from request url.\r\n             *\r\n             * @return a url with Atmosphere's headers\r\n             * @private\r\n             */\r\n            function _buildSSEUrl() {\r\n                var url = _attachHeaders(_request);\r\n                return url;\r\n            }\r\n\r\n            /**\r\n             * Open SSE. <br>\r\n             * Automatically use fallback transport if SSE can't be opened.\r\n             *\r\n             * @private\r\n             */\r\n            function _executeSSE(sseOpened) {\r\n\r\n                _response.transport = \"sse\";\r\n\r\n                var location = _buildSSEUrl();\r\n\r\n                if (_canLog('debug')) {\r\n                    atmosphere.util.debug(\"Invoking executeSSE\");\r\n                    atmosphere.util.debug(\"Using URL: \" + location);\r\n                }\r\n\r\n                if (sseOpened && !_request.reconnect) {\r\n                    if (_sse != null) {\r\n                        _clearState();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    _sse = new EventSource(location, {\r\n                        withCredentials: _request.withCredentials\r\n                    });\r\n                } catch (e) {\r\n                    _onError(0, e);\r\n                    _reconnectWithFallbackTransport(\"SSE failed. Downgrading to fallback transport and resending\");\r\n                    return;\r\n                }\r\n\r\n                if (_request.connectTimeout > 0) {\r\n                    _request.id = setTimeout(function () {\r\n                        if (!sseOpened) {\r\n                            _clearState();\r\n                        }\r\n                    }, _request.connectTimeout);\r\n                }\r\n\r\n                _sse.onopen = function () {\r\n                    _debug(\"sse.onopen\");\r\n                    _timeout(_request);\r\n                    if (_canLog('debug')) {\r\n                        atmosphere.util.debug(\"SSE successfully opened\");\r\n                    }\r\n\r\n                    if (!_request.enableProtocol) {\r\n                        if (!sseOpened) {\r\n                            _open('opening', \"sse\", _request);\r\n                        } else {\r\n                            _open('re-opening', \"sse\", _request);\r\n                        }\r\n                    } else if (_request.isReopen) {\r\n                        _request.isReopen = false;\r\n                        _open('re-opening', _request.transport, _request);\r\n                    }\r\n\r\n                    sseOpened = true;\r\n\r\n                    if (_request.method === 'POST') {\r\n                        _response.state = \"messageReceived\";\r\n                        _push(_request.data);\r\n                    }\r\n                };\r\n\r\n                _sse.onmessage = function (message) {\r\n                    _debug(\"sse.onmessage\");\r\n                    _timeout(_request);\r\n\r\n                    if (!_request.enableXDR && window.location.host && message.origin && message.origin !== window.location.protocol + \"//\" + window.location.host) {\r\n                        atmosphere.util.log(_request.logLevel, [\"Origin was not \" + window.location.protocol + \"//\" + window.location.host]);\r\n                        return;\r\n                    }\r\n\r\n                    _response.state = 'messageReceived';\r\n                    _response.status = 200;\r\n\r\n                    message = message.data;\r\n                    var skipCallbackInvocation = _trackMessageSize(message, _request, _response);\r\n\r\n                    // https://github.com/remy/polyfills/blob/master/EventSource.js\r\n                    // Since we polling.\r\n                    /* if (_sse.URL) {\r\n                     _sse.interval = 100;\r\n                     _sse.URL = _buildSSEUrl();\r\n                     } */\r\n\r\n                    if (!skipCallbackInvocation) {\r\n                        _invokeCallback();\r\n                        _response.responseBody = '';\r\n                        _response.messages = [];\r\n                    }\r\n                };\r\n\r\n                _sse.onerror = function () {\r\n                    _debug(\"sse.onerror\");\r\n                    clearTimeout(_request.id);\r\n\r\n                    if (_request.heartbeatTimer) {\r\n                        clearTimeout(_request.heartbeatTimer);\r\n                    }\r\n\r\n                    if (_response.closedByClientTimeout) {\r\n                        return;\r\n                    }\r\n\r\n                    _invokeClose(sseOpened);\r\n                    _clearState();\r\n\r\n                    if (_abortingConnection) {\r\n                        atmosphere.util.log(_request.logLevel, [\"SSE closed normally\"]);\r\n                    } else if (!sseOpened) {\r\n                        _reconnectWithFallbackTransport(\"SSE failed. Downgrading to fallback transport and resending\");\r\n                    } else if (_request.reconnect && (_response.transport === 'sse')) {\r\n                        if (_requestCount++ < _request.maxReconnectOnClose) {\r\n                            _open('re-connecting', _request.transport, _request);\r\n                            if (_request.reconnectInterval > 0) {\r\n                                // Prevent the online event to open a second connection while waiting for reconnect\r\n                                var handleOnlineOffline = _request.handleOnlineOffline;\r\n                                _request.handleOnlineOffline = false;\r\n                                _request.reconnectId = setTimeout(function () {\r\n                                    _request.handleOnlineOffline = handleOnlineOffline;\r\n                                    _executeSSE(true);\r\n                                }, _request.reconnectInterval);\r\n                            } else {\r\n                                _executeSSE(true);\r\n                            }\r\n                            _response.responseBody = \"\";\r\n                            _response.messages = [];\r\n                        } else {\r\n                            atmosphere.util.log(_request.logLevel, [\"SSE reconnect maximum try reached \" + _requestCount]);\r\n                            _onError(0, \"maxReconnectOnClose reached\");\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            /**\r\n             * Open web socket. <br>\r\n             * Automatically use fallback transport if web socket can't be opened.\r\n             *\r\n             * @private\r\n             */\r\n            function _executeWebSocket(webSocketOpened) {\r\n\r\n                _response.transport = \"websocket\";\r\n\r\n                var location = _buildWebSocketUrl(_request.url);\r\n                if (_canLog('debug')) {\r\n                    atmosphere.util.debug(\"Invoking executeWebSocket, using URL: \" + location);\r\n                }\r\n\r\n                if (webSocketOpened && !_request.reconnect) {\r\n                    if (_websocket != null) {\r\n                        _clearState();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                _websocket = _getWebSocket(location);\r\n                if (_request.webSocketBinaryType != null) {\r\n                    _websocket.binaryType = _request.webSocketBinaryType;\r\n                }\r\n\r\n                if (_request.connectTimeout > 0) {\r\n                    _request.id = setTimeout(function () {\r\n                        if (!webSocketOpened) {\r\n                            var _message = {\r\n                                code: 1002,\r\n                                reason: \"Connection timeout after \" + _request.connectTimeout + \"ms.\",\r\n                                wasClean: false\r\n                            };\r\n                            var socket = _websocket;\r\n                            // Close it anyway\r\n                            try {\r\n                                _clearState();\r\n                            } catch (e) {\r\n                            }\r\n                            socket.onclose(_message);\r\n                        }\r\n\r\n                    }, _request.connectTimeout);\r\n                }\r\n\r\n                _websocket.onopen = function () {\r\n                    if (_websocket == null) {\r\n                        this.close();\r\n                        if (_request.transport == \"websocket\")\r\n                            _close();\r\n                        return;\r\n                    }\r\n\r\n                    _debug(\"websocket.onopen\");\r\n                    if (!_request.enableProtocol || _request.connectTimeout <= 0)\r\n                        _timeout(_request);\r\n                    offline = false;\r\n\r\n                    if (_canLog('debug')) {\r\n                        atmosphere.util.debug(\"Websocket successfully opened\");\r\n                    }\r\n\r\n                    var reopening = webSocketOpened;\r\n\r\n                    _websocket.canSendMessage = true;\r\n\r\n                    if (!_request.enableProtocol) {\r\n                        webSocketOpened = true;\r\n                        if (reopening) {\r\n                            _open('re-opening', \"websocket\", _request);\r\n                        } else {\r\n                            _open('opening', \"websocket\", _request);\r\n                        }\r\n                    }\r\n\r\n                    if (_request.method === 'POST') {\r\n                        _response.state = \"messageReceived\";\r\n                        _websocket.send(_request.data);\r\n                    }\r\n                };\r\n\r\n                _websocket.onmessage = function (message) {\r\n                    if (_websocket == null) {\r\n                        this.close();\r\n                        if (_request.transport == \"websocket\")\r\n                            _close();\r\n                        return;\r\n                    }\r\n\r\n                    _debug(\"websocket.onmessage\");\r\n                    _timeout(_request);\r\n\r\n                    // We only consider it opened if we get the handshake data\r\n                    // https://github.com/Atmosphere/atmosphere-javascript/issues/74\r\n                    if (_request.enableProtocol) {\r\n                        webSocketOpened = true;\r\n                    }\r\n\r\n                    _response.state = 'messageReceived';\r\n                    _response.status = 200;\r\n\r\n                    message = message.data;\r\n                    var isString = typeof (message) === 'string';\r\n                    if (isString) {\r\n                        var skipCallbackInvocation = _trackMessageSize(message, _request, _response);\r\n                        if (!skipCallbackInvocation) {\r\n                            _invokeCallback();\r\n                            _response.responseBody = '';\r\n                            _response.messages = [];\r\n                        }\r\n                    } else {\r\n                        message = _handleProtocol(_request, message);\r\n                        if (message === \"\")\r\n                            return;\r\n\r\n                        _response.responseBody = message;\r\n                        _invokeCallback();\r\n                        _response.responseBody = null;\r\n                    }\r\n                };\r\n\r\n                _websocket.onerror = function () {\r\n                    _debug(\"websocket.onerror\");\r\n                    clearTimeout(_request.id);\r\n\r\n                    if (_request.heartbeatTimer) {\r\n                        clearTimeout(_request.heartbeatTimer);\r\n                    }\r\n\r\n                    _response.error = true;\r\n                };\r\n\r\n                _websocket.onclose = function (message) {\r\n                    _debug(\"websocket.onclose\");\r\n                    if (_response.transport !== 'websocket')\r\n                        return;\r\n                    clearTimeout(_request.id);\r\n                    if (_response.state === 'closed')\r\n                        return;\r\n\r\n                    var reason = message.reason;\r\n                    if (reason === \"\") {\r\n                        switch (message.code) {\r\n                            case 1000:\r\n                                reason = \"Normal closure; the connection successfully completed whatever purpose for which it was created.\";\r\n                                break;\r\n                            case 1001:\r\n                                reason = \"The endpoint is going away, either because of a server failure or because the \"\r\n                                    + \"browser is navigating away from the page that opened the connection.\";\r\n                                break;\r\n                            case 1002:\r\n                                reason = \"The endpoint is terminating the connection due to a protocol error.\";\r\n                                break;\r\n                            case 1003:\r\n                                reason = \"The connection is being terminated because the endpoint received data of a type it \"\r\n                                    + \"cannot accept (for example, a text-only endpoint received binary data).\";\r\n                                break;\r\n                            case 1004:\r\n                                reason = \"The endpoint is terminating the connection because a data frame was received that is too large.\";\r\n                                break;\r\n                            case 1005:\r\n                                reason = \"Unknown: no status code was provided even though one was expected.\";\r\n                                break;\r\n                            case 1006:\r\n                                reason = \"Connection was closed abnormally (that is, with no close frame being sent).\";\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    if (_canLog('warn')) {\r\n                        atmosphere.util.warn(\"Websocket closed, reason: \" + reason + ' - wasClean: ' + message.wasClean);\r\n                    }\r\n\r\n                    if (_response.closedByClientTimeout || (_request.handleOnlineOffline && offline)) {\r\n                        // IFF online/offline events are handled and we happen to be offline, we stop all reconnect attempts and\r\n                        // resume them in the \"online\" event (if we get here in that case, something else went wrong as the\r\n                        // offline handler should stop any reconnect attempt).\r\n                        //\r\n                        // On the other hand, if we DO NOT handle online/offline events, we continue as before with reconnecting\r\n                        // even if we are offline. Failing to do so would stop all reconnect attemps forever.\r\n                        if (_request.reconnectId) {\r\n                            clearTimeout(_request.reconnectId);\r\n                            delete _request.reconnectId;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    _invokeClose(webSocketOpened);\r\n\r\n                    _response.state = 'closed';\r\n\r\n                    if (_abortingConnection) {\r\n                        atmosphere.util.log(_request.logLevel, [\"Websocket closed normally\"]);\r\n                    } else if (_response.error && _request.curWebsocketErrorRetries < _request.maxWebsocketErrorRetries && _requestCount + 1 < _request.maxReconnectOnClose) {\r\n                        _response.error = false;\r\n                        _request.curWebsocketErrorRetries++;\r\n                        _reconnectWebSocket();\r\n                    } else if ((_response.error || !webSocketOpened || _request.maxWebsocketErrorRetries === 0) && _request.fallbackTransport !== 'websocket') {\r\n                        _response.error = false;\r\n                        _reconnectWithFallbackTransport(\"Websocket failed on first connection attempt. Downgrading to \" + _request.fallbackTransport + \" and resending\");\r\n                    } else if (_request.reconnect) {\r\n                        _reconnectWebSocket();\r\n                    }\r\n                };\r\n\r\n                var ua = navigator.userAgent.toLowerCase();\r\n                var isAndroid = ua.indexOf(\"android\") > -1;\r\n                if (isAndroid && _websocket.url === undefined) {\r\n                    // Android 4.1 does not really support websockets and fails silently\r\n                    _websocket.onclose({\r\n                        reason: \"Android 4.1 does not support websockets.\",\r\n                        wasClean: false\r\n                    });\r\n                }\r\n            }\r\n\r\n            function _handleProtocol(request, message) {\r\n\r\n                var nMessage = message;\r\n                if (request.transport === 'polling') return nMessage;\r\n\r\n                if (request.enableProtocol && request.firstMessage && atmosphere.util.trim(message).length !== 0) {\r\n                    var pos = request.trackMessageLength ? 1 : 0;\r\n                    var messages = message.split(request.messageDelimiter);\r\n\r\n                    if (messages.length <= pos + 1) {\r\n                        // Something went wrong, normally with IE or when a message is written before the\r\n                        // handshake has been received.\r\n                        return nMessage;\r\n                    }\r\n\r\n                    request.firstMessage = false;\r\n                    request.uuid = atmosphere.util.trim(messages[pos]);\r\n\r\n                    if (messages.length <= pos + 2) {\r\n                        atmosphere.util.log('error', [\"Protocol data not sent by the server. \" +\r\n                        \"If you enable protocol on client side, be sure to install JavascriptProtocol interceptor on server side.\" +\r\n                        \"Also note that atmosphere-runtime 2.2+ should be used.\"]);\r\n                    }\r\n\r\n                    _heartbeatInterval = parseInt(atmosphere.util.trim(messages[pos + 1]), 10);\r\n                    _heartbeatPadding = messages[pos + 2];\r\n\r\n                    if (request.transport !== 'long-polling') {\r\n                        _triggerOpen(request);\r\n                    }\r\n                    uuid = request.uuid;\r\n                    nMessage = \"\";\r\n\r\n                    // We have trailing messages\r\n                    pos = request.trackMessageLength ? 4 : 3;\r\n                    if (messages.length > pos + 1) {\r\n                        for (var i = pos; i < messages.length; i++) {\r\n                            nMessage += messages[i];\r\n                            if (i + 1 !== messages.length) {\r\n                                nMessage += request.messageDelimiter;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (request.ackInterval !== 0) {\r\n                        setTimeout(function () {\r\n                            _push(\"...ACK...\");\r\n                        }, request.ackInterval);\r\n                    }\r\n                } else if (request.enableProtocol && request.firstMessage && atmosphere.util.browser.msie && +atmosphere.util.browser.version.split(\".\")[0] < 10) {\r\n                    // In case we are getting some junk from IE\r\n                    atmosphere.util.log(_request.logLevel, [\"Receiving unexpected data from IE\"]);\r\n                } else {\r\n                    _triggerOpen(request);\r\n                }\r\n                return nMessage;\r\n            }\r\n\r\n            function _timeout(_request) {\r\n                clearTimeout(_request.id);\r\n                if (_request.timeout > 0 && _request.transport !== 'polling') {\r\n                    _request.id = setTimeout(function () {\r\n                        _onClientTimeout(_request);\r\n                        _disconnect();\r\n                        _clearState();\r\n                    }, _request.timeout);\r\n                }\r\n            }\r\n\r\n            function _onClientTimeout(_request) {\r\n                _response.closedByClientTimeout = true;\r\n                _response.state = 'closedByClient';\r\n                _response.responseBody = \"\";\r\n                _response.status = 408;\r\n                _response.messages = [];\r\n                _invokeCallback();\r\n            }\r\n\r\n            function _onError(code, reason) {\r\n                _clearState();\r\n                clearTimeout(_request.id);\r\n                _response.state = 'error';\r\n                _response.reasonPhrase = reason;\r\n                _response.responseBody = \"\";\r\n                _response.status = code;\r\n                _response.messages = [];\r\n                _invokeCallback();\r\n            }\r\n\r\n            /**\r\n             * Track received message and make sure callbacks/functions are only invoked when the complete message has been received.\r\n             *\r\n             * @param message\r\n             * @param request\r\n             * @param response\r\n             */\r\n            function _trackMessageSize(message, request, response) {\r\n                message = _handleProtocol(request, message);\r\n                if (message.length === 0)\r\n                    return true;\r\n\r\n                response.responseBody = message;\r\n\r\n                if (request.trackMessageLength) {\r\n                    // prepend partialMessage if any\r\n                    message = response.partialMessage + message;\r\n\r\n                    var messages = [];\r\n                    var messageStart = message.indexOf(request.messageDelimiter);\r\n                    if (messageStart != -1) {\r\n                        while (messageStart !== -1) {\r\n                            var str = message.substring(0, messageStart);\r\n                            var messageLength = +str;\r\n                            if (isNaN(messageLength)) {\r\n                                // Discard partial message, otherwise it would never recover from this condition\r\n                                response.partialMessage = '';\r\n                                throw new Error('message length \"' + str + '\" is not a number');\r\n                            }\r\n                            messageStart += request.messageDelimiter.length;\r\n                            if (messageStart + messageLength > message.length) {\r\n                                // message not complete, so there is no trailing messageDelimiter\r\n                                messageStart = -1;\r\n                            } else {\r\n                                // message complete, so add it\r\n                                messages.push(message.substring(messageStart, messageStart + messageLength));\r\n                                // remove consumed characters\r\n                                message = message.substring(messageStart + messageLength, message.length);\r\n                                messageStart = message.indexOf(request.messageDelimiter);\r\n                            }\r\n                        }\r\n\r\n                        /* keep any remaining data */\r\n                        response.partialMessage = message;\r\n\r\n                        if (messages.length !== 0) {\r\n                            response.responseBody = messages.join(request.messageDelimiter);\r\n                            response.messages = messages;\r\n                            return false;\r\n                        } else {\r\n                            response.responseBody = \"\";\r\n                            response.messages = [];\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                response.responseBody = message;\r\n                response.messages = [message];\r\n                return false;\r\n            }\r\n\r\n            function _reconnectWebSocket() {\r\n                _clearState();\r\n                if (_requestCount++ < _request.maxReconnectOnClose) {\r\n                    _open('re-connecting', _request.transport, _request);\r\n                    if (_request.reconnectInterval > 0) {\r\n                        // Prevent the online event to open a second connection while waiting for reconnect\r\n                        var handleOnlineOffline = _request.handleOnlineOffline;\r\n                        _request.handleOnlineOffline = false;\r\n                        _request.reconnectId = setTimeout(function () {\r\n                            _request.handleOnlineOffline = handleOnlineOffline;\r\n                            _response.responseBody = \"\";\r\n                            _response.messages = [];\r\n                            _executeWebSocket(true);\r\n                        }, _request.reconnectInterval);\r\n                    } else {\r\n                        _response.responseBody = \"\";\r\n                        _response.messages = [];\r\n                        _executeWebSocket(true);\r\n                    }\r\n                } else {\r\n                    atmosphere.util.log(_request.logLevel, [\"Websocket reconnect maximum try reached \" + _requestCount]);\r\n                    _onError(0, \"maxReconnectOnClose reached\");\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Reconnect request with fallback transport. <br>\r\n             * Used in case websocket can't be opened.\r\n             *\r\n             * @private\r\n             */\r\n            function _reconnectWithFallbackTransport(errorMessage) {\r\n                atmosphere.util.log(_request.logLevel, [errorMessage]);\r\n\r\n                _clearState();\r\n\r\n                if (typeof (_request.onTransportFailure) !== 'undefined') {\r\n                    _request.onTransportFailure(errorMessage, _request);\r\n                } else if (typeof (atmosphere.util.onTransportFailure) !== 'undefined') {\r\n                    atmosphere.util.onTransportFailure(errorMessage, _request);\r\n                }\r\n\r\n                if (_request.reconnect && _request.transport !== 'none' || _request.transport == null) {\r\n                    _request.transport = _request.fallbackTransport;\r\n                    _request.method = _request.fallbackMethod;\r\n                    _response.transport = _request.fallbackTransport;\r\n                    _response.state = '';\r\n                    _request.fallbackTransport = 'none';\r\n                    if (_request.reconnectInterval > 0) {\r\n                        // Prevent the online event to open a second connection while waiting for reconnect\r\n                        var handleOnlineOffline = _request.handleOnlineOffline;\r\n                        _request.handleOnlineOffline = false;\r\n                        _request.reconnectId = setTimeout(function () {\r\n                            _request.handleOnlineOffline = handleOnlineOffline;\r\n                            _execute();\r\n                        }, _request.reconnectInterval);\r\n                    } else {\r\n                        _execute();\r\n                    }\r\n                } else {\r\n                    _onError(500, \"Unable to reconnect with fallback transport\");\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Get url from request and attach headers to it.\r\n             *\r\n             * @param request {Object} request Request parameters, if undefined _request object will be used.\r\n             *\r\n             * @returns {Object} Request object, if undefined, _request object will be used.\r\n             * @private\r\n             */\r\n            function _attachHeaders(request, url) {\r\n                var rq = _request;\r\n                if ((request != null) && (typeof (request) !== 'undefined')) {\r\n                    rq = request;\r\n                }\r\n\r\n                if (url == null) {\r\n                    url = rq.url;\r\n                }\r\n\r\n                // If not enabled\r\n                if (!rq.attachHeadersAsQueryString)\r\n                    return url;\r\n\r\n                // If already added\r\n                if (url.indexOf(\"X-Atmosphere-Framework\") !== -1) {\r\n                    return url;\r\n                }\r\n\r\n                url += (url.indexOf('?') !== -1) ? '&' : '?';\r\n                url += \"X-Atmosphere-tracking-id=\" + rq.uuid;\r\n                url += \"&X-Atmosphere-Framework=\" + atmosphere.version;\r\n                url += \"&X-Atmosphere-Transport=\" + rq.transport;\r\n\r\n                if (rq.trackMessageLength) {\r\n                    url += \"&X-Atmosphere-TrackMessageSize=\" + \"true\";\r\n                }\r\n\r\n                if (rq.heartbeat !== null && rq.heartbeat.server !== null) {\r\n                    url += \"&X-Heartbeat-Server=\" + rq.heartbeat.server;\r\n                }\r\n\r\n                if (rq.contentType !== '') {\r\n                    //Eurk!\r\n                    url += \"&Content-Type=\" + (rq.transport === 'websocket' ? rq.contentType : encodeURIComponent(rq.contentType));\r\n                }\r\n\r\n                if (rq.enableProtocol) {\r\n                    url += \"&X-atmo-protocol=true\";\r\n                }\r\n\r\n                atmosphere.util.each(rq.headers, function (name, value) {\r\n                    var h = atmosphere.util.isFunction(value) ? value.call(this, rq, request, _response) : value;\r\n                    if (h != null) {\r\n                        url += \"&\" + encodeURIComponent(name) + \"=\" + encodeURIComponent(h);\r\n                    }\r\n                });\r\n\r\n                return url;\r\n            }\r\n\r\n            function _triggerOpen(rq) {\r\n                if (!rq.isOpen) {\r\n                    rq.isOpen = true;\r\n                    _open('opening', rq.transport, rq);\r\n                } else if (rq.isReopen) {\r\n                    rq.isReopen = false;\r\n                    _open('re-opening', rq.transport, rq);\r\n                } else if (_response.state === 'messageReceived' && (rq.transport === 'jsonp' || rq.transport === 'long-polling')) {\r\n                    _openAfterResume(_response);\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                _startHeartbeat(rq);\r\n            }\r\n\r\n            function _startHeartbeat(rq) {\r\n                if (rq.heartbeatTimer != null) {\r\n                    clearTimeout(rq.heartbeatTimer);\r\n                }\r\n\r\n                if (!isNaN(_heartbeatInterval) && _heartbeatInterval > 0) {\r\n                    var _pushHeartbeat = function () {\r\n                        if (_canLog('debug')) {\r\n                            atmosphere.util.debug(\"Sending heartbeat\");\r\n                        }\r\n                        _push(_heartbeatPadding);\r\n                        rq.heartbeatTimer = setTimeout(_pushHeartbeat, _heartbeatInterval);\r\n                    };\r\n                    rq.heartbeatTimer = setTimeout(_pushHeartbeat, _heartbeatInterval);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Execute ajax request. <br>\r\n             *\r\n             * @param request {Object} request Request parameters, if undefined _request object will be used.\r\n             * @private\r\n             */\r\n            function _executeRequest(request) {\r\n                var rq = _request;\r\n                if ((request != null) || (typeof (request) !== 'undefined')) {\r\n                    rq = request;\r\n                }\r\n\r\n                rq.lastIndex = 0;\r\n                rq.readyState = 0;\r\n\r\n                // CORS fake using JSONP\r\n                if ((rq.transport === 'jsonp') || ((rq.enableXDR) && (atmosphere.util.checkCORSSupport()))) {\r\n                    _jsonp(rq);\r\n                    return;\r\n                }\r\n\r\n                if (atmosphere.util.browser.msie && +atmosphere.util.browser.version.split(\".\")[0] < 10) {\r\n                    if ((rq.transport === 'streaming')) {\r\n                        if (rq.enableXDR && window.XDomainRequest) {\r\n                            _ieXDR(rq);\r\n                        } else {\r\n                            _ieStreaming(rq);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if ((rq.enableXDR) && (window.XDomainRequest)) {\r\n                        _ieXDR(rq);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                var reconnectFExec = function (force) {\r\n                    rq.lastIndex = 0;\r\n                    _requestCount++; // Increase also when forcing reconnect as _open checks _requestCount\r\n                    if (force || (rq.reconnect && _requestCount <= rq.maxReconnectOnClose)) {\r\n                        var delay = force ? 0 : request.reconnectInterval; // Reconnect immediately if the server resumed the connection (timeout)\r\n                        _response.ffTryingReconnect = true;\r\n                        _open('re-connecting', request.transport, request);\r\n                        _reconnect(ajaxRequest, rq, delay);\r\n                    } else {\r\n                        _onError(0, \"maxReconnectOnClose reached\");\r\n                    }\r\n                };\r\n\r\n                var reconnectF = function (force) {\r\n                    if (atmosphere._beforeUnloadState) {\r\n                        // ATMOSPHERE-JAVASCRIPT-143: Delay reconnect to avoid reconnect attempts before an actual unload (we don't know if an unload will happen, yet)\r\n                        atmosphere.util.debug(new Date() + \" Atmosphere: reconnectF: execution delayed due to _beforeUnloadState flag\");\r\n                        setTimeout(function () {\r\n                            reconnectFExec(force);\r\n                        }, 5000);\r\n                    } else {\r\n                        reconnectFExec(force);\r\n                    }\r\n                };\r\n\r\n                var disconnected = function () {\r\n                    // Prevent onerror callback to be called\r\n                    _response.errorHandled = true;\r\n                    _clearState();\r\n                    reconnectF(false);\r\n                };\r\n\r\n                if (rq.force || (rq.reconnect && (rq.maxRequest === -1 || rq.requestCount++ < rq.maxRequest))) {\r\n                    rq.force = false;\r\n\r\n                    var ajaxRequest = atmosphere.util.xhr();\r\n                    ajaxRequest.hasData = false;\r\n\r\n                    _doRequest(ajaxRequest, rq, true);\r\n\r\n                    if (rq.suspend) {\r\n                        _activeRequest = ajaxRequest;\r\n                    }\r\n\r\n                    if (rq.transport !== 'polling') {\r\n                        _response.transport = rq.transport;\r\n\r\n                        ajaxRequest.onabort = function () {\r\n                            _debug(\"ajaxrequest.onabort\")\r\n                            _invokeClose(true);\r\n                        };\r\n\r\n                        ajaxRequest.onerror = function () {\r\n                            _debug(\"ajaxrequest.onerror\")\r\n                            _response.error = true;\r\n                            _response.ffTryingReconnect = true;\r\n                            try {\r\n                                _response.status = XMLHttpRequest.status;\r\n                            } catch (e) {\r\n                                _response.status = 500;\r\n                            }\r\n\r\n                            if (!_response.status) {\r\n                                _response.status = 500;\r\n                            }\r\n                            if (!_response.errorHandled) {\r\n                                _clearState();\r\n                                reconnectF(false);\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    ajaxRequest.onreadystatechange = function () {\r\n                        _debug(\"ajaxRequest.onreadystatechange, new state: \" + ajaxRequest.readyState);\r\n                        if (_abortingConnection) {\r\n                            _debug(\"onreadystatechange has been ignored due to _abortingConnection flag\");\r\n                            return;\r\n                        }\r\n\r\n                        _response.error = false;\r\n                        var skipCallbackInvocation = false;\r\n                        var update = false;\r\n\r\n                        if (rq.transport === 'streaming' && rq.readyState > 2 && ajaxRequest.readyState === 4) {\r\n                            _clearState();\r\n                            reconnectF(false);\r\n                            return;\r\n                        }\r\n\r\n                        rq.readyState = ajaxRequest.readyState;\r\n\r\n                        if (rq.transport === 'streaming' && ajaxRequest.readyState >= 3) {\r\n                            update = true;\r\n                        } else if (rq.transport === 'long-polling' && ajaxRequest.readyState === 4) {\r\n                            update = true;\r\n                        }\r\n                        _timeout(_request);\r\n\r\n                        if (rq.transport !== 'polling') {\r\n                            // MSIE 9 and lower status can be higher than 1000, Chrome can be 0\r\n                            var status = 200;\r\n                            if (ajaxRequest.readyState === 4) {\r\n                                status = ajaxRequest.status > 1000 ? 0 : ajaxRequest.status;\r\n                            }\r\n\r\n                            if (!rq.reconnectOnServerError && (status >= 300 && status < 600)) {\r\n                                _onError(status, ajaxRequest.statusText);\r\n                                return;\r\n                            }\r\n\r\n                            if (status >= 300 || status === 0) {\r\n                                if (!rq.isOpen && _canLog('warn')) {\r\n                                   atmosphere.util.warn(rq.transport + \" connection failed with status: \" + status + \" \" + (ajaxRequest.statusText || \"Unable to connect\"));\r\n                                }\r\n                                disconnected();\r\n                                return;\r\n                            }\r\n\r\n                            // Firefox incorrectly send statechange 0->2 when a reconnect attempt fails. The above checks ensure that onopen is not called for these\r\n                            if ((!rq.enableProtocol || !request.firstMessage) && (ajaxRequest.readyState === 2 || ajaxRequest.readyState > 2 && !rq.isOpen)) {\r\n                                // Firefox incorrectly send statechange 0->2 when a reconnect attempt fails. The above checks ensure that onopen is not called for these\r\n                                // In that case, ajaxRequest.onerror will be called just after onreadystatechange is called, so we delay the trigger until we are\r\n                                // guarantee the connection is well established.\r\n                                if (atmosphere.util.browser.mozilla && _response.ffTryingReconnect) {\r\n                                    _response.ffTryingReconnect = false;\r\n                                    setTimeout(function () {\r\n                                        if (!_response.ffTryingReconnect) {\r\n                                            _triggerOpen(rq);\r\n                                        }\r\n                                    }, 500);\r\n                                } else {\r\n                                    _triggerOpen(rq);\r\n                                }\r\n                            }\r\n\r\n                        } else if (ajaxRequest.readyState === 4) {\r\n                            update = true;\r\n                        }\r\n\r\n                        if (update) {\r\n                            var responseText = ajaxRequest.responseText;\r\n                            _response.errorHandled = false;\r\n\r\n                            // IE behave the same way when resuming long-polling or when the server goes down.\r\n                            if (rq.transport === 'long-polling' && atmosphere.util.trim(responseText).length === 0) {\r\n                                // For browser that aren't support onabort\r\n                                if (!ajaxRequest.hasData) {\r\n                                    reconnectF(true);\r\n                                } else {\r\n                                    ajaxRequest.hasData = false;\r\n                                }\r\n                                return;\r\n                            }\r\n                            ajaxRequest.hasData = true;\r\n\r\n                            _readHeaders(ajaxRequest, _request);\r\n\r\n                            if (rq.transport === 'streaming') {\r\n                                if (!atmosphere.util.browser.opera) {\r\n                                    var message = responseText.substring(rq.lastIndex, responseText.length);\r\n                                    skipCallbackInvocation = _trackMessageSize(message, rq, _response);\r\n\r\n                                    rq.lastIndex = responseText.length;\r\n                                    if (skipCallbackInvocation) {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    atmosphere.util.iterate(function () {\r\n                                        if (_response.status !== 500 && ajaxRequest.responseText.length > rq.lastIndex) {\r\n                                            try {\r\n                                                _response.status = ajaxRequest.status;\r\n                                                _response.headers = atmosphere.util.parseHeaders(ajaxRequest.getAllResponseHeaders());\r\n\r\n                                                _readHeaders(ajaxRequest, _request);\r\n\r\n                                            } catch (e) {\r\n                                                _response.status = 404;\r\n                                            }\r\n                                            _timeout(_request);\r\n\r\n                                            _response.state = \"messageReceived\";\r\n                                            var message = ajaxRequest.responseText.substring(rq.lastIndex);\r\n                                            rq.lastIndex = ajaxRequest.responseText.length;\r\n\r\n                                            skipCallbackInvocation = _trackMessageSize(message, rq, _response);\r\n                                            if (!skipCallbackInvocation) {\r\n                                                _invokeCallback();\r\n                                            }\r\n\r\n                                            if (_verifyStreamingLength(ajaxRequest, rq)) {\r\n                                                _reconnectOnMaxStreamingLength(ajaxRequest, rq);\r\n                                                return;\r\n                                            }\r\n                                        } else if (_response.status > 400) {\r\n                                            // Prevent replaying the last message.\r\n                                            rq.lastIndex = ajaxRequest.responseText.length;\r\n                                            return false;\r\n                                        }\r\n                                    }, 0);\r\n                                }\r\n                            } else {\r\n                                skipCallbackInvocation = _trackMessageSize(responseText, rq, _response);\r\n                            }\r\n                            var closeStream = _verifyStreamingLength(ajaxRequest, rq);\r\n\r\n                            try {\r\n                                _response.status = ajaxRequest.status;\r\n                                _response.headers = atmosphere.util.parseHeaders(ajaxRequest.getAllResponseHeaders());\r\n\r\n                                _readHeaders(ajaxRequest, rq);\r\n                            } catch (e) {\r\n                                _response.status = 404;\r\n                            }\r\n\r\n                            if (rq.suspend) {\r\n                                _response.state = _response.status === 0 ? \"closed\" : \"messageReceived\";\r\n                            } else {\r\n                                _response.state = \"messagePublished\";\r\n                            }\r\n\r\n                            var isAllowedToReconnect = !closeStream && request.transport !== 'streaming' && request.transport !== 'polling';\r\n                            if (isAllowedToReconnect && !rq.executeCallbackBeforeReconnect) {\r\n                                _reconnect(ajaxRequest, rq, rq.pollingInterval);\r\n                            }\r\n\r\n                            if (_response.responseBody.length !== 0 && !skipCallbackInvocation)\r\n                                _invokeCallback();\r\n\r\n                            if (isAllowedToReconnect && rq.executeCallbackBeforeReconnect) {\r\n                                _reconnect(ajaxRequest, rq, rq.pollingInterval);\r\n                            }\r\n\r\n                            if (closeStream) {\r\n                                _reconnectOnMaxStreamingLength(ajaxRequest, rq);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    try {\r\n                        ajaxRequest.send(rq.data);\r\n                        _subscribed = true;\r\n                    } catch (e) {\r\n                        atmosphere.util.log(rq.logLevel, [\"Unable to connect to \" + rq.url]);\r\n                        _onError(0, e);\r\n                    }\r\n\r\n                } else {\r\n                    if (rq.logLevel === 'debug') {\r\n                        atmosphere.util.log(rq.logLevel, [\"Max re-connection reached.\"]);\r\n                    }\r\n                    _onError(0, \"maxRequest reached\");\r\n                }\r\n            }\r\n\r\n            function _reconnectOnMaxStreamingLength(ajaxRequest, rq) {\r\n                _response.messages = [];\r\n                rq.isReopen = true;\r\n                _close();\r\n                _abortingConnection = false;\r\n                _reconnect(ajaxRequest, rq, 500);\r\n            }\r\n\r\n            /**\r\n             * Do ajax request.\r\n             *\r\n             * @param ajaxRequest Ajax request.\r\n             * @param request Request parameters.\r\n             * @param create If ajax request has to be open.\r\n             */\r\n            function _doRequest(ajaxRequest, request, create) {\r\n                // Prevent Android to cache request\r\n                var url = request.url;\r\n                if (request.dispatchUrl != null && request.method === 'POST') {\r\n                    url += request.dispatchUrl;\r\n                }\r\n                url = _attachHeaders(request, url);\r\n                url = atmosphere.util.prepareURL(url);\r\n\r\n                if (create) {\r\n                    ajaxRequest.open(request.method, url, true);\r\n                    if (request.connectTimeout > 0) {\r\n                        request.id = setTimeout(function () {\r\n                            if (request.requestCount === 0) {\r\n                                _clearState();\r\n                                _prepareCallback(\"Connect timeout\", \"closed\", 200, request.transport);\r\n                            }\r\n                        }, request.connectTimeout);\r\n                    }\r\n                }\r\n\r\n                if (_request.withCredentials && _request.transport !== 'websocket') {\r\n                    if (\"withCredentials\" in ajaxRequest) {\r\n                        ajaxRequest.withCredentials = true;\r\n                    }\r\n                }\r\n\r\n                if (!_request.dropHeaders) {\r\n                    ajaxRequest.setRequestHeader(\"X-Atmosphere-Framework\", atmosphere.version);\r\n                    ajaxRequest.setRequestHeader(\"X-Atmosphere-Transport\", request.transport);\r\n\r\n                    if (request.heartbeat !== null && request.heartbeat.server !== null) {\r\n                        ajaxRequest.setRequestHeader(\"X-Heartbeat-Server\", ajaxRequest.heartbeat.server);\r\n                    }\r\n\r\n                    if (request.trackMessageLength) {\r\n                        ajaxRequest.setRequestHeader(\"X-Atmosphere-TrackMessageSize\", \"true\");\r\n                    }\r\n                    ajaxRequest.setRequestHeader(\"X-Atmosphere-tracking-id\", request.uuid);\r\n\r\n                    atmosphere.util.each(request.headers, function (name, value) {\r\n                        var h = atmosphere.util.isFunction(value) ? value.call(this, ajaxRequest, request, create, _response) : value;\r\n                        if (h != null) {\r\n                            ajaxRequest.setRequestHeader(name, h);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (request.contentType !== '') {\r\n                    ajaxRequest.setRequestHeader(\"Content-Type\", request.contentType);\r\n                }\r\n            }\r\n\r\n            function _reconnect(ajaxRequest, request, delay) {\r\n\r\n                if (_response.closedByClientTimeout) {\r\n                    return;\r\n                }\r\n\r\n                if (request.reconnect || (request.suspend && _subscribed)) {\r\n                    var status = 0;\r\n                    if (ajaxRequest && ajaxRequest.readyState > 1) {\r\n                        status = ajaxRequest.status > 1000 ? 0 : ajaxRequest.status;\r\n                    }\r\n                    _response.status = status === 0 ? 204 : status;\r\n                    _response.reason = status === 0 ? \"Server resumed the connection or down.\" : \"OK\";\r\n\r\n                    clearTimeout(request.id);\r\n                    if (request.reconnectId) {\r\n                        clearTimeout(request.reconnectId);\r\n                        delete request.reconnectId;\r\n                    }\r\n\r\n                    if (delay > 0) {\r\n                        // For whatever reason, never cancel a reconnect timeout as it is mandatory to reconnect.\r\n                        // Prevent the online event to open a second connection while waiting for reconnect\r\n                        var handleOnlineOffline = _request.handleOnlineOffline;\r\n                        _request.handleOnlineOffline = false;\r\n                        _request.reconnectId = setTimeout(function () {\r\n                            _request.handleOnlineOffline = handleOnlineOffline;\r\n                            _executeRequest(request);\r\n                        }, delay);\r\n                    } else {\r\n                        _executeRequest(request);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _tryingToReconnect(response) {\r\n                response.state = 're-connecting';\r\n                _invokeFunction(response);\r\n            }\r\n\r\n            function _openAfterResume(response) {\r\n                response.state = 'openAfterResume';\r\n                _invokeFunction(response);\r\n                response.state = 'messageReceived';\r\n            }\r\n\r\n            function _ieXDR(request) {\r\n                if (request.transport !== \"polling\") {\r\n                    _ieStream = _configureXDR(request);\r\n                    _ieStream.open();\r\n                } else {\r\n                    _configureXDR(request).open();\r\n                }\r\n            }\r\n\r\n            function _configureXDR(request) {\r\n                var rq = _request;\r\n                if ((request != null) && (typeof (request) !== 'undefined')) {\r\n                    rq = request;\r\n                }\r\n\r\n                var transport = rq.transport;\r\n                var lastIndex = 0;\r\n                var xdr = new window.XDomainRequest();\r\n                var reconnect = function () {\r\n                    if (rq.transport === \"long-polling\" && (rq.reconnect && (rq.maxRequest === -1 || rq.requestCount++ < rq.maxRequest))) {\r\n                        xdr.status = 200;\r\n                        _ieXDR(rq);\r\n                    }\r\n                };\r\n\r\n                var rewriteURL = rq.rewriteURL || function (url) {\r\n                    // Maintaining session by rewriting URL\r\n                    // http://stackoverflow.com/questions/6453779/maintaining-session-by-rewriting-url\r\n                    var match = /(?:^|;\\s*)(JSESSIONID|PHPSESSID)=([^;]*)/.exec(document.cookie);\r\n\r\n                    switch (match && match[1]) {\r\n                        case \"JSESSIONID\":\r\n                            return url.replace(/;jsessionid=[^\\?]*|(\\?)|$/, \";jsessionid=\" + match[2] + \"$1\");\r\n                        case \"PHPSESSID\":\r\n                            return url.replace(/\\?PHPSESSID=[^&]*&?|\\?|$/, \"?PHPSESSID=\" + match[2] + \"&\").replace(/&$/, \"\");\r\n                    }\r\n                    return url;\r\n                };\r\n\r\n                // Handles open and message event\r\n                xdr.onprogress = function () {\r\n                    handle(xdr);\r\n                };\r\n                // Handles error event\r\n                xdr.onerror = function () {\r\n                    // If the server doesn't send anything back to XDR will fail with polling\r\n                    if (rq.transport !== 'polling') {\r\n                        _clearState();\r\n                        if (_requestCount++ < rq.maxReconnectOnClose) {\r\n                            if (rq.reconnectInterval > 0) {\r\n                                rq.reconnectId = setTimeout(function () {\r\n                                    _open('re-connecting', request.transport, request);\r\n                                    _ieXDR(rq);\r\n                                }, rq.reconnectInterval);\r\n                            } else {\r\n                                _open('re-connecting', request.transport, request);\r\n                                _ieXDR(rq);\r\n                            }\r\n                        } else {\r\n                            _onError(0, \"maxReconnectOnClose reached\");\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // Handles close event\r\n                xdr.onload = function () {\r\n                };\r\n\r\n                var handle = function (xdr) {\r\n                    clearTimeout(rq.id);\r\n                    var message = xdr.responseText;\r\n\r\n                    message = message.substring(lastIndex);\r\n                    lastIndex += message.length;\r\n\r\n                    if (transport !== 'polling') {\r\n                        _timeout(rq);\r\n\r\n                        var skipCallbackInvocation = _trackMessageSize(message, rq, _response);\r\n\r\n                        if (transport === 'long-polling' && atmosphere.util.trim(message).length === 0)\r\n                            return;\r\n\r\n                        if (rq.executeCallbackBeforeReconnect) {\r\n                            reconnect();\r\n                        }\r\n\r\n                        if (!skipCallbackInvocation) {\r\n                            _prepareCallback(_response.responseBody, \"messageReceived\", 200, transport);\r\n                        }\r\n\r\n                        if (!rq.executeCallbackBeforeReconnect) {\r\n                            reconnect();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return {\r\n                    open: function () {\r\n                        var url = rq.url;\r\n                        if (rq.dispatchUrl != null) {\r\n                            url += rq.dispatchUrl;\r\n                        }\r\n                        url = _attachHeaders(rq, url);\r\n                        xdr.open(rq.method, rewriteURL(url));\r\n                        if (rq.method === 'GET') {\r\n                            xdr.send();\r\n                        } else {\r\n                            xdr.send(rq.data);\r\n                        }\r\n\r\n                        if (rq.connectTimeout > 0) {\r\n                            rq.id = setTimeout(function () {\r\n                                if (rq.requestCount === 0) {\r\n                                    _clearState();\r\n                                    _prepareCallback(\"Connect timeout\", \"closed\", 200, rq.transport);\r\n                                }\r\n                            }, rq.connectTimeout);\r\n                        }\r\n                    },\r\n                    close: function () {\r\n                        xdr.abort();\r\n                    }\r\n                };\r\n            }\r\n\r\n            function _ieStreaming(request) {\r\n                _ieStream = _configureIE(request);\r\n                _ieStream.open();\r\n            }\r\n\r\n            function _configureIE(request) {\r\n                var rq = _request;\r\n                if ((request != null) && (typeof (request) !== 'undefined')) {\r\n                    rq = request;\r\n                }\r\n\r\n                var stop;\r\n                var doc = new window.ActiveXObject(\"htmlfile\");\r\n\r\n                doc.open();\r\n                doc.close();\r\n\r\n                var url = rq.url;\r\n                if (rq.dispatchUrl != null) {\r\n                    url += rq.dispatchUrl;\r\n                }\r\n\r\n                if (rq.transport !== 'polling') {\r\n                    _response.transport = rq.transport;\r\n                }\r\n\r\n                return {\r\n                    open: function () {\r\n                        var iframe = doc.createElement(\"iframe\");\r\n\r\n                        url = _attachHeaders(rq);\r\n                        if (rq.data !== '') {\r\n                            url += \"&X-Atmosphere-Post-Body=\" + encodeURIComponent(rq.data);\r\n                        }\r\n\r\n                        // Finally attach a timestamp to prevent Android and IE caching.\r\n                        url = atmosphere.util.prepareURL(url);\r\n\r\n                        iframe.src = url;\r\n                        doc.body.appendChild(iframe);\r\n\r\n                        // For the server to respond in a consistent format regardless of user agent, we polls response text\r\n                        var cdoc = iframe.contentDocument || iframe.contentWindow.document;\r\n\r\n                        stop = atmosphere.util.iterate(function () {\r\n                            try {\r\n                                if (!cdoc.firstChild) {\r\n                                    return;\r\n                                }\r\n\r\n                                var res = cdoc.body ? cdoc.body.lastChild : cdoc;\r\n                                if (res.omgThisIsBroken) {\r\n                                    // Cause an exception when res is null, to trigger a reconnect...\r\n                                }\r\n                                var readResponse = function () {\r\n                                    // Clones the element not to disturb the original one\r\n                                    var clone = res.cloneNode(true);\r\n\r\n                                    // If the last character is a carriage return or a line feed, IE ignores it in the innerText property\r\n                                    // therefore, we add another non-newline character to preserve it\r\n                                    clone.appendChild(cdoc.createTextNode(\".\"));\r\n\r\n                                    var text = clone.innerText;\r\n\r\n                                    text = text.substring(0, text.length - 1);\r\n                                    return text;\r\n\r\n                                };\r\n\r\n                                // To support text/html content type\r\n                                if (!cdoc.body || !cdoc.body.firstChild || cdoc.body.firstChild.nodeName.toLowerCase() !== \"pre\") {\r\n                                    // Injects a plaintext element which renders text without interpreting the HTML and cannot be stopped\r\n                                    // it is deprecated in HTML5, but still works\r\n                                    var head = cdoc.head || cdoc.getElementsByTagName(\"head\")[0] || cdoc.documentElement || cdoc;\r\n                                    var script = cdoc.createElement(\"script\");\r\n\r\n                                    script.text = \"document.write('<plaintext>')\";\r\n\r\n                                    head.insertBefore(script, head.firstChild);\r\n                                    head.removeChild(script);\r\n\r\n                                    // The plaintext element will be the response container\r\n                                    res = cdoc.body.lastChild;\r\n                                }\r\n\r\n                                if (rq.closed) {\r\n                                    rq.isReopen = true;\r\n                                }\r\n\r\n                                // Handles message and close event\r\n                                stop = atmosphere.util.iterate(function () {\r\n                                    var text = readResponse();\r\n                                    if (text.length > rq.lastIndex) {\r\n                                        _timeout(_request);\r\n\r\n                                        _response.status = 200;\r\n                                        _response.error = false;\r\n\r\n                                        // Empties response every time that it is handled\r\n                                        res.innerText = \"\";\r\n                                        var skipCallbackInvocation = _trackMessageSize(text, rq, _response);\r\n                                        if (skipCallbackInvocation) {\r\n                                            return \"\";\r\n                                        }\r\n\r\n                                        _prepareCallback(_response.responseBody, \"messageReceived\", 200, rq.transport);\r\n                                    }\r\n\r\n                                    rq.lastIndex = 0;\r\n\r\n                                    if (cdoc.readyState === \"complete\") {\r\n                                        _invokeClose(true);\r\n                                        _open('re-connecting', rq.transport, rq);\r\n                                        if (rq.reconnectInterval > 0) {\r\n                                            rq.reconnectId = setTimeout(function () {\r\n                                                _ieStreaming(rq);\r\n                                            }, rq.reconnectInterval);\r\n                                        } else {\r\n                                            _ieStreaming(rq);\r\n                                        }\r\n                                        return false;\r\n                                    }\r\n                                }, null);\r\n\r\n                                return false;\r\n                            } catch (err) {\r\n                                _response.error = true;\r\n                                _open('re-connecting', rq.transport, rq);\r\n                                if (_requestCount++ < rq.maxReconnectOnClose) {\r\n                                    if (rq.reconnectInterval > 0) {\r\n                                        rq.reconnectId = setTimeout(function () {\r\n                                            _ieStreaming(rq);\r\n                                        }, rq.reconnectInterval);\r\n                                    } else {\r\n                                        _ieStreaming(rq);\r\n                                    }\r\n                                } else {\r\n                                    _onError(0, \"maxReconnectOnClose reached\");\r\n                                }\r\n                                doc.execCommand(\"Stop\");\r\n                                doc.close();\r\n                                return false;\r\n                            }\r\n                        });\r\n                    },\r\n\r\n                    close: function () {\r\n                        if (stop) {\r\n                            stop();\r\n                        }\r\n\r\n                        doc.execCommand(\"Stop\");\r\n                        _invokeClose(true);\r\n                    }\r\n                };\r\n            }\r\n\r\n            /**\r\n             * Send message. <br>\r\n             * Will be automatically dispatch to other connected.\r\n             *\r\n             * @param {Object, string} Message to send.\r\n             * @private\r\n             */\r\n            function _push(message) {\r\n\r\n                if (_localStorageService != null) {\r\n                    _pushLocal(message);\r\n                } else if (_activeRequest != null || _sse != null) {\r\n                    _pushAjaxMessage(message);\r\n                } else if (_ieStream != null) {\r\n                    _pushIE(message);\r\n                } else if (_jqxhr != null) {\r\n                    _pushJsonp(message);\r\n                } else if (_websocket != null) {\r\n                    _pushWebSocket(message);\r\n                } else {\r\n                    _onError(0, \"No suspended connection available\");\r\n                    atmosphere.util.error(\"No suspended connection available. Make sure atmosphere.subscribe has been called and request.onOpen invoked before trying to push data\");\r\n                }\r\n            }\r\n\r\n            function _pushOnClose(message, rq) {\r\n                if (!rq) {\r\n                    rq = _getPushRequest(message);\r\n                }\r\n                rq.transport = \"polling\";\r\n                rq.method = \"GET\";\r\n                rq.withCredentials = false;\r\n                rq.reconnect = false;\r\n                rq.force = true;\r\n                rq.suspend = false;\r\n                rq.timeout = 1000;\r\n                if (_request.unloadBackwardCompat) {\r\n                    _executeRequest(rq);\r\n                } else {\r\n                    navigator.sendBeacon(rq.url, rq.data);\r\n                }\r\n            }\r\n\r\n            function _pushLocal(message) {\r\n                _localStorageService.send(message);\r\n            }\r\n\r\n            function _intraPush(message) {\r\n                // IE 9 will crash if not.\r\n                if (message.length === 0)\r\n                    return;\r\n\r\n                try {\r\n                    if (_localStorageService) {\r\n                        _localStorageService.localSend(message);\r\n                    } else if (_storageService) {\r\n                        _storageService.signal(\"localMessage\", JSON.stringify({\r\n                            id: guid,\r\n                            event: message\r\n                        }));\r\n                    }\r\n                } catch (err) {\r\n                    atmosphere.util.error(err);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Send a message using currently opened ajax request (using http-streaming or long-polling). <br>\r\n             *\r\n             * @param {string, Object} Message to send. This is an object, string message is saved in data member.\r\n             * @private\r\n             */\r\n            function _pushAjaxMessage(message) {\r\n                var rq = _getPushRequest(message);\r\n                _executeRequest(rq);\r\n            }\r\n\r\n            /**\r\n             * Send a message using currently opened ie streaming (using http-streaming or long-polling). <br>\r\n             *\r\n             * @param {string, Object} Message to send. This is an object, string message is saved in data member.\r\n             * @private\r\n             */\r\n            function _pushIE(message) {\r\n                if (_request.enableXDR && atmosphere.util.checkCORSSupport()) {\r\n                    var rq = _getPushRequest(message);\r\n                    // Do not reconnect since we are pushing.\r\n                    rq.reconnect = false;\r\n                    _jsonp(rq);\r\n                } else {\r\n                    _pushAjaxMessage(message);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Send a message using jsonp transport. <br>\r\n             *\r\n             * @param {string, Object} Message to send. This is an object, string message is saved in data member.\r\n             * @private\r\n             */\r\n            function _pushJsonp(message) {\r\n                _pushAjaxMessage(message);\r\n            }\r\n\r\n            function _getStringMessage(message) {\r\n                var msg = message;\r\n                if (typeof (msg) === 'object') {\r\n                    msg = message.data;\r\n                }\r\n                return msg;\r\n            }\r\n\r\n            /**\r\n             * Build request use to push message using method 'POST' <br>. Transport is defined as 'polling' and 'suspend' is set to false.\r\n             *\r\n             * @return {Object} Request object use to push message.\r\n             * @private\r\n             */\r\n            function _getPushRequest(message) {\r\n                var msg = _getStringMessage(message);\r\n\r\n                var rq = {\r\n                    connected: false,\r\n                    timeout: 60000,\r\n                    method: 'POST',\r\n                    url: _request.url,\r\n                    contentType: _request.contentType,\r\n                    headers: _request.headers,\r\n                    reconnect: true,\r\n                    callback: null,\r\n                    data: msg,\r\n                    suspend: false,\r\n                    maxRequest: -1,\r\n                    logLevel: 'info',\r\n                    requestCount: 0,\r\n                    withCredentials: _request.withCredentials,\r\n                    transport: 'polling',\r\n                    isOpen: true,\r\n                    attachHeadersAsQueryString: true,\r\n                    enableXDR: _request.enableXDR,\r\n                    uuid: _request.uuid,\r\n                    dispatchUrl: _request.dispatchUrl,\r\n                    enableProtocol: false,\r\n                    messageDelimiter: '|',\r\n                    trackMessageLength: _request.trackMessageLength,\r\n                    maxReconnectOnClose: _request.maxReconnectOnClose,\r\n                    heartbeatTimer: _request.heartbeatTimer,\r\n                    heartbeat: _request.heartbeat\r\n                };\r\n\r\n                if (typeof (message) === 'object') {\r\n                    rq = atmosphere.util.extend(rq, message);\r\n                }\r\n\r\n                return rq;\r\n            }\r\n\r\n            /**\r\n             * Send a message using currently opened websocket. <br>\r\n             *\r\n             */\r\n            function _pushWebSocket(message) {\r\n                var msg = atmosphere.util.isBinary(message) ? message : _getStringMessage(message);\r\n                var data;\r\n                try {\r\n                    if (_request.dispatchUrl != null) {\r\n                        data = _request.webSocketPathDelimiter + _request.dispatchUrl + _request.webSocketPathDelimiter + msg;\r\n                    } else {\r\n                        data = msg;\r\n                    }\r\n\r\n                    if (!_websocket.canSendMessage) {\r\n                        atmosphere.util.error(\"WebSocket not connected.\");\r\n                        return;\r\n                    }\r\n\r\n                    _websocket.send(data);\r\n\r\n                } catch (e) {\r\n                    _websocket.onclose = function () {\r\n                    };\r\n                    _clearState();\r\n\r\n                    _reconnectWithFallbackTransport(\"Websocket failed. Downgrading to \" + _request.fallbackTransport + \" and resending \" + message);\r\n                    _pushAjaxMessage(message);\r\n                }\r\n            }\r\n\r\n            function _localMessage(message) {\r\n                var m = JSON.parse(message);\r\n                if (m.id !== guid) {\r\n                    if (typeof (_request.onLocalMessage) !== 'undefined') {\r\n                        _request.onLocalMessage(m.event);\r\n                    } else if (typeof (atmosphere.util.onLocalMessage) !== 'undefined') {\r\n                        atmosphere.util.onLocalMessage(m.event);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _prepareCallback(messageBody, state, errorCode, transport) {\r\n\r\n                _response.responseBody = messageBody;\r\n                _response.transport = transport;\r\n                _response.status = errorCode;\r\n                _response.state = state;\r\n\r\n                _invokeCallback();\r\n            }\r\n\r\n            function _readHeaders(xdr, request) {\r\n                if (!request.readResponsesHeaders) {\r\n                    if (!request.enableProtocol) {\r\n                        request.uuid = guid;\r\n                    }\r\n                } else {\r\n                    try {\r\n\r\n                        var tempUUID = xdr.getResponseHeader('X-Atmosphere-tracking-id');\r\n                        if (tempUUID && tempUUID != null) {\r\n                            request.uuid = tempUUID.split(\" \").pop();\r\n                        }\r\n                    } catch (e) {\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _invokeFunction(response) {\r\n                _f(response, _request);\r\n                // Global\r\n                _f(response, atmosphere.util);\r\n            }\r\n\r\n            function _f(response, f) {\r\n                switch (response.state) {\r\n                    case \"messageReceived\":\r\n                        _debug(\"Firing onMessage\");\r\n                        _requestCount = 0;\r\n                        if (typeof (f.onMessage) !== 'undefined')\r\n                            f.onMessage(response);\r\n\r\n                        if (typeof (f.onmessage) !== 'undefined')\r\n                            f.onmessage(response);\r\n                        break;\r\n                    case \"error\":\r\n                        var dbgReasonPhrase = (typeof (response.reasonPhrase) != 'undefined') ? response.reasonPhrase : 'n/a';\r\n                        _debug(\"Firing onError, reasonPhrase: \" + dbgReasonPhrase);\r\n                        if (typeof (f.onError) !== 'undefined')\r\n                            f.onError(response);\r\n\r\n                        if (typeof (f.onerror) !== 'undefined')\r\n                            f.onerror(response);\r\n                        break;\r\n                    case \"opening\":\r\n                        delete _request.closed;\r\n                        _debug(\"Firing onOpen\");\r\n                        if (typeof (f.onOpen) !== 'undefined')\r\n                            f.onOpen(response);\r\n\r\n                        if (typeof (f.onopen) !== 'undefined')\r\n                            f.onopen(response);\r\n                        break;\r\n                    case \"messagePublished\":\r\n                        _debug(\"Firing messagePublished\");\r\n                        if (typeof (f.onMessagePublished) !== 'undefined')\r\n                            f.onMessagePublished(response);\r\n                        break;\r\n                    case \"re-connecting\":\r\n                        _debug(\"Firing onReconnect\");\r\n                        if (typeof (f.onReconnect) !== 'undefined')\r\n                            f.onReconnect(_request, response);\r\n                        break;\r\n                    case \"closedByClient\":\r\n                        _debug(\"Firing closedByClient\");\r\n                        if (typeof (f.onClientTimeout) !== 'undefined')\r\n                            f.onClientTimeout(_request);\r\n                        break;\r\n                    case \"re-opening\":\r\n                        delete _request.closed;\r\n                        _debug(\"Firing onReopen\");\r\n                        if (typeof (f.onReopen) !== 'undefined')\r\n                            f.onReopen(_request, response);\r\n                        break;\r\n                    case \"fail-to-reconnect\":\r\n                        _debug(\"Firing onFailureToReconnect\");\r\n                        if (typeof (f.onFailureToReconnect) !== 'undefined')\r\n                            f.onFailureToReconnect(_request, response);\r\n                        break;\r\n                    case \"unsubscribe\":\r\n                    case \"closed\":\r\n                        var closed = typeof (_request.closed) !== 'undefined' ? _request.closed : false;\r\n\r\n                        if (!closed) {\r\n                            _debug(\"Firing onClose (\" + response.state + \" case)\");\r\n                            if (typeof (f.onClose) !== 'undefined') {\r\n                                f.onClose(response);\r\n                            }\r\n\r\n                            if (typeof (f.onclose) !== 'undefined') {\r\n                                f.onclose(response);\r\n                            }\r\n                        } else {\r\n                            _debug(\"Request already closed, not firing onClose (\" + response.state + \" case)\");\r\n                        }\r\n                        _request.closed = true;\r\n                        break;\r\n                    case \"openAfterResume\":\r\n                        if (typeof (f.onOpenAfterResume) !== 'undefined')\r\n                            f.onOpenAfterResume(_request);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function _invokeClose(wasOpen) {\r\n                if (_response.state !== 'closed') {\r\n                    _response.state = 'closed';\r\n                    _response.responseBody = \"\";\r\n                    _response.messages = [];\r\n                    _response.status = !wasOpen ? 501 : 200;\r\n                    _invokeCallback();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Invoke request callbacks.\r\n             *\r\n             * @private\r\n             */\r\n            function _invokeCallback() {\r\n                var call = function (index, func) {\r\n                    func(_response);\r\n                };\r\n\r\n                if (_localStorageService == null && _localSocketF != null) {\r\n                    _localSocketF(_response.responseBody);\r\n                }\r\n\r\n                _request.reconnect = _request.mrequest;\r\n\r\n                var isString = typeof (_response.responseBody) === 'string';\r\n                var messages = (isString && _request.trackMessageLength) ? (_response.messages.length > 0 ? _response.messages : ['']) : new Array(\r\n                    _response.responseBody);\r\n                for (var i = 0; i < messages.length; i++) {\r\n\r\n                    if (messages.length > 1 && messages[i].length === 0) {\r\n                        continue;\r\n                    }\r\n                    _response.responseBody = (isString) ? atmosphere.util.trim(messages[i]) : messages[i];\r\n\r\n                    if (_localStorageService == null && _localSocketF != null) {\r\n                        _localSocketF(_response.responseBody);\r\n                    }\r\n\r\n                    if (_response.state === \"messageReceived\") {\r\n                        if (_response.responseBody.length === 0) {\r\n                            continue;\r\n                        } else if (isString && _heartbeatPadding === _response.responseBody) {\r\n                            // reset the internal reconnect counter, when we received also heartbeat message from server\r\n                            _requestCount = 0;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    _invokeFunction(_response);\r\n\r\n                    // Invoke global callbacks\r\n                    if (callbacks.length > 0) {\r\n                        if (_canLog('debug')) {\r\n                            atmosphere.util.debug(\"Invoking \" + callbacks.length + \" global callbacks: \" + _response.state);\r\n                        }\r\n                        try {\r\n                            atmosphere.util.each(callbacks, call);\r\n                        } catch (e) {\r\n                            atmosphere.util.log(_request.logLevel, [\"Callback exception\" + e]);\r\n                        }\r\n                    }\r\n\r\n                    // Invoke request callback\r\n                    if (typeof (_request.callback) === 'function') {\r\n                        if (_canLog('debug')) {\r\n                            atmosphere.util.debug(\"Invoking request callbacks\");\r\n                        }\r\n                        try {\r\n                            _request.callback(_response);\r\n                        } catch (e) {\r\n                            atmosphere.util.log(_request.logLevel, [\"Callback exception\" + e]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.subscribe = function (options) {\r\n                _subscribe(options);\r\n                _execute();\r\n            };\r\n\r\n            this.execute = function () {\r\n                _execute();\r\n            };\r\n\r\n            this.close = function () {\r\n                _close();\r\n            };\r\n\r\n            this.disconnect = function () {\r\n                _disconnect();\r\n            };\r\n\r\n            this.getUrl = function () {\r\n                return _request.url;\r\n            };\r\n\r\n            this.push = function (message, dispatchUrl) {\r\n                if (dispatchUrl != null) {\r\n                    var originalDispatchUrl = _request.dispatchUrl;\r\n                    _request.dispatchUrl = dispatchUrl;\r\n                    _push(message);\r\n                    _request.dispatchUrl = originalDispatchUrl;\r\n                } else {\r\n                    _push(message);\r\n                }\r\n            };\r\n\r\n            this.getUUID = function () {\r\n                return _request.uuid;\r\n            };\r\n\r\n            this.pushLocal = function (message) {\r\n                _intraPush(message);\r\n            };\r\n\r\n            this.enableProtocol = function () {\r\n                return _request.enableProtocol;\r\n            };\r\n\r\n            this.init = function () {\r\n                _init();\r\n            };\r\n\r\n            this.request = _request;\r\n            this.response = _response;\r\n        }\r\n    };\r\n\r\n    atmosphere.subscribe = function (url, callback, request) {\r\n        if (typeof (callback) === 'function') {\r\n            atmosphere.addCallback(callback);\r\n        }\r\n\r\n        if (typeof (url) !== \"string\") {\r\n            request = url;\r\n        } else {\r\n            request.url = url;\r\n        }\r\n\r\n        // https://github.com/Atmosphere/atmosphere-javascript/issues/58\r\n        uuid = ((typeof (request) !== 'undefined') && typeof (request.uuid) !== 'undefined') ? request.uuid : 0;\r\n\r\n        var rq = new atmosphere.AtmosphereRequest(request);\r\n        rq.execute();\r\n\r\n        requests[requests.length] = rq;\r\n        return rq;\r\n    };\r\n\r\n    atmosphere.unsubscribe = function () {\r\n        if (requests.length > 0) {\r\n            var requestsClone = [].concat(requests);\r\n            for (var i = 0; i < requestsClone.length; i++) {\r\n                var rq = requestsClone[i];\r\n                rq.close();\r\n                clearTimeout(rq.response.request.id);\r\n\r\n                if (rq.heartbeatTimer) {\r\n                    clearTimeout(rq.heartbeatTimer);\r\n                }\r\n            }\r\n        }\r\n        requests = [];\r\n        callbacks = [];\r\n    };\r\n\r\n    atmosphere.unsubscribeUrl = function (url) {\r\n        var idx = -1;\r\n        if (requests.length > 0) {\r\n            for (var i = 0; i < requests.length; i++) {\r\n                var rq = requests[i];\r\n\r\n                // Suppose you can subscribe once to an url\r\n                if (rq.getUrl() === url) {\r\n                    rq.close();\r\n                    clearTimeout(rq.response.request.id);\r\n\r\n                    if (rq.heartbeatTimer) {\r\n                        clearTimeout(rq.heartbeatTimer);\r\n                    }\r\n\r\n                    idx = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (idx >= 0) {\r\n            requests.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    atmosphere.addCallback = function (func) {\r\n        if (atmosphere.util.inArray(func, callbacks) === -1) {\r\n            callbacks.push(func);\r\n        }\r\n    };\r\n\r\n    atmosphere.removeCallback = function (func) {\r\n        var index = atmosphere.util.inArray(func, callbacks);\r\n        if (index !== -1) {\r\n            callbacks.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    atmosphere.util = {\r\n        browser: {},\r\n\r\n        parseHeaders: function (headerString) {\r\n            var match, rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, headers = {};\r\n            while (match = rheaders.exec(headerString)) {\r\n                headers[match[1]] = match[2];\r\n            }\r\n            return headers;\r\n        },\r\n\r\n        now: function () {\r\n            return new Date().getTime();\r\n        },\r\n\r\n        isArray: function (array) {\r\n            return Object.prototype.toString.call(array) === \"[object Array]\";\r\n        },\r\n\r\n        inArray: function (elem, array) {\r\n            if (!Array.prototype.indexOf) {\r\n                var len = array.length;\r\n                for (var i = 0; i < len; ++i) {\r\n                    if (array[i] === elem) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n            return array.indexOf(elem);\r\n        },\r\n\r\n        isBinary: function (data) {\r\n            // True if data is an instance of Blob, ArrayBuffer or ArrayBufferView\r\n            return /^\\[object\\s(?:Blob|ArrayBuffer|.+Array)\\]$/.test(Object.prototype.toString.call(data));\r\n        },\r\n\r\n        isFunction: function (fn) {\r\n            return Object.prototype.toString.call(fn) === \"[object Function]\";\r\n        },\r\n\r\n        getAbsoluteURL: function (url) {\r\n            if (typeof (document.createElement) === 'undefined') {\r\n                // assuming the url to be already absolute when DOM is not supported\r\n                return url;\r\n            }\r\n            var div = document.createElement(\"div\");\r\n\r\n            // Uses an innerHTML property to obtain an absolute URL\r\n            div.innerHTML = '<a href=\"' + url + '\"></a>';\r\n\r\n            // encodeURI and decodeURI are needed to normalize URL between IE and non-IE,\r\n            // since IE doesn't encode the href property value and return it - http://jsfiddle.net/Yq9M8/1/\r\n\r\n            var ua = window.navigator.userAgent;\r\n            if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0) {\r\n                return atmosphere.util.fixedEncodeURI(decodeURI(div.firstChild.href));\r\n            }\r\n            return div.firstChild.href;\r\n        },\r\n\r\n        fixedEncodeURI: function (str) {\r\n            return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']');\r\n        },\r\n\r\n        prepareURL: function (url) {\r\n            // Attaches a time stamp to prevent caching\r\n            var ts = atmosphere.util.now();\r\n            var ret = url.replace(/([?&])_=[^&]*/, \"$1_=\" + ts);\r\n\r\n            return ret + (ret === url ? (/\\?/.test(url) ? \"&\" : \"?\") + \"_=\" + ts : \"\");\r\n        },\r\n\r\n        trim: function (str) {\r\n            if (!String.prototype.trim) {\r\n                return str.toString().replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g, \"\").replace(/\\s+/g, \" \");\r\n            } else {\r\n                return str.toString().trim();\r\n            }\r\n        },\r\n\r\n        param: function (params) {\r\n            var prefix, s = [];\r\n\r\n            function add(key, value) {\r\n                value = atmosphere.util.isFunction(value) ? value() : (value == null ? \"\" : value);\r\n                s.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value));\r\n            }\r\n\r\n            function buildParams(prefix, obj) {\r\n                var name;\r\n\r\n                if (atmosphere.util.isArray(obj)) {\r\n                    atmosphere.util.each(obj, function (i, v) {\r\n                        if (/\\[\\]$/.test(prefix)) {\r\n                            add(prefix, v);\r\n                        } else {\r\n                            buildParams(prefix + \"[\" + (typeof v === \"object\" ? i : \"\") + \"]\", v);\r\n                        }\r\n                    });\r\n                } else if (Object.prototype.toString.call(obj) === \"[object Object]\") {\r\n                    for (name in obj) {\r\n                        buildParams(prefix + \"[\" + name + \"]\", obj[name]);\r\n                    }\r\n                } else {\r\n                    add(prefix, obj);\r\n                }\r\n            }\r\n\r\n            for (prefix in params) {\r\n                buildParams(prefix, params[prefix]);\r\n            }\r\n\r\n            return s.join(\"&\").replace(/%20/g, \"+\");\r\n        },\r\n\r\n        storage: function () {\r\n            try {\r\n                return !!(window.localStorage && window.StorageEvent);\r\n            } catch (e) {\r\n                //Firefox throws an exception here, see\r\n                //https://bugzilla.mozilla.org/show_bug.cgi?id=748620\r\n                return false;\r\n            }\r\n        },\r\n\r\n        iterate: function (fn, interval) {\r\n            var timeoutId;\r\n\r\n            // Though the interval is 0 for real-time application, there is a delay between setTimeout calls\r\n            // For detail, see https://developer.mozilla.org/en/window.setTimeout#Minimum_delay_and_timeout_nesting\r\n            interval = interval || 0;\r\n\r\n            (function loop() {\r\n                timeoutId = setTimeout(function () {\r\n                    if (fn() === false) {\r\n                        return;\r\n                    }\r\n\r\n                    loop();\r\n                }, interval);\r\n            })();\r\n\r\n            return function () {\r\n                clearTimeout(timeoutId);\r\n            };\r\n        },\r\n\r\n        each: function (obj, callback, args) {\r\n            if (!obj) return;\r\n            var value, i = 0, length = obj.length, isArray = atmosphere.util.isArray(obj);\r\n\r\n            if (args) {\r\n                if (isArray) {\r\n                    for (; i < length; i++) {\r\n                        value = callback.apply(obj[i], args);\r\n\r\n                        if (value === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i in obj) {\r\n                        value = callback.apply(obj[i], args);\r\n\r\n                        if (value === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // A special, fast, case for the most common use of each\r\n            } else {\r\n                if (isArray) {\r\n                    for (; i < length; i++) {\r\n                        value = callback.call(obj[i], i, obj[i]);\r\n\r\n                        if (value === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i in obj) {\r\n                        value = callback.call(obj[i], i, obj[i]);\r\n\r\n                        if (value === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return obj;\r\n        },\r\n\r\n        extend: function (target) {\r\n            var i, options, name;\r\n\r\n            for (i = 1; i < arguments.length; i++) {\r\n                if ((options = arguments[i]) != null) {\r\n                    for (name in options) {\r\n                        target[name] = options[name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return target;\r\n        },\r\n        on: function (elem, type, fn) {\r\n            if (elem.addEventListener) {\r\n                elem.addEventListener(type, fn, false);\r\n            } else if (elem.attachEvent) {\r\n                elem.attachEvent(\"on\" + type, fn);\r\n            }\r\n        },\r\n        off: function (elem, type, fn) {\r\n            if (elem.removeEventListener) {\r\n                elem.removeEventListener(type, fn, false);\r\n            } else if (elem.detachEvent) {\r\n                elem.detachEvent(\"on\" + type, fn);\r\n            }\r\n        },\r\n\r\n        log: function (level, args) {\r\n            if (window.console) {\r\n                var logger = window.console[level];\r\n                if (typeof logger === 'function') {\r\n                    logger.apply(window.console, args);\r\n                }\r\n            }\r\n        },\r\n\r\n        warn: function () {\r\n            atmosphere.util.log('warn', arguments);\r\n        },\r\n\r\n        info: function () {\r\n            atmosphere.util.log('info', arguments);\r\n        },\r\n\r\n        debug: function () {\r\n            atmosphere.util.log('debug', arguments);\r\n        },\r\n\r\n        error: function () {\r\n            atmosphere.util.log('error', arguments);\r\n        },\r\n\r\n        xhr: function () {\r\n            try {\r\n                return new window.XMLHttpRequest();\r\n            } catch (e1) {\r\n                try {\r\n                    return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\r\n                } catch (e2) {\r\n                }\r\n            }\r\n        },\r\n\r\n        checkCORSSupport: function () {\r\n            if (atmosphere.util.browser.msie && !window.XDomainRequest && +atmosphere.util.browser.version.split(\".\")[0] < 11) {\r\n                return true;\r\n            } else if (atmosphere.util.browser.opera && +atmosphere.util.browser.version.split(\".\") < 12.0) {\r\n                return true;\r\n            }\r\n\r\n            // KreaTV 4.1 -> 4.4\r\n            else if (atmosphere.util.trim(navigator.userAgent).slice(0, 16) === \"KreaTVWebKit/531\") {\r\n                return true;\r\n            }\r\n            // KreaTV 3.8\r\n            else if (atmosphere.util.trim(navigator.userAgent).slice(-7).toLowerCase() === \"kreatel\") {\r\n                return true;\r\n            }\r\n\r\n            // Force older Android versions to use CORS as some version like 2.2.3 fail otherwise\r\n            var ua = navigator.userAgent.toLowerCase();\r\n            var androidVersionMatches = ua.match(/.+android ([0-9]{1,2})/i),\r\n                majorVersion = parseInt((androidVersionMatches && androidVersionMatches[0]) || -1, 10);\r\n            if (!isNaN(majorVersion) && majorVersion > -1 && majorVersion < 3) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n\r\n    guid = atmosphere.util.now();\r\n\r\n    // Browser sniffing\r\n    (function () {\r\n        var ua = navigator.userAgent.toLowerCase(),\r\n            match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\r\n                /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\r\n                /(msie) ([\\w.]+)/.exec(ua) ||\r\n                /(trident)(?:.*? rv:([\\w.]+)|)/.exec(ua) ||\r\n                ua.indexOf(\"android\") < 0 && /version\\/(.+) (safari)/.exec(ua) ||\r\n                ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) ||\r\n                [];\r\n\r\n        // Swaps variables\r\n        if (match[2] === \"safari\") {\r\n            match[2] = match[1];\r\n            match[1] = \"safari\";\r\n        }\r\n        atmosphere.util.browser[match[1] || \"\"] = true;\r\n        atmosphere.util.browser.version = match[2] || \"0\";\r\n        atmosphere.util.browser.vmajor = atmosphere.util.browser.version.split(\".\")[0];\r\n\r\n        // Trident is the layout engine of the Internet Explorer\r\n        // IE 11 has no \"MSIE: 11.0\" token\r\n        if (atmosphere.util.browser.trident) {\r\n            atmosphere.util.browser.msie = true;\r\n        }\r\n\r\n        // The storage event of Internet Explorer and Firefox 3 works strangely\r\n        if (atmosphere.util.browser.msie || (atmosphere.util.browser.mozilla && +atmosphere.util.browser.version.split(\".\")[0] === 1)) {\r\n            atmosphere.util.storage = false;\r\n        }\r\n    })();\r\n\r\n    atmosphere.callbacks = {\r\n        unload: function () {\r\n            atmosphere.util.debug(new Date() + \" Atmosphere: \" + \"unload event\");\r\n            atmosphere.unsubscribe();\r\n        },\r\n        beforeUnload: function () {\r\n            atmosphere.util.debug(new Date() + \" Atmosphere: \" + \"beforeunload event\");\r\n\r\n            // ATMOSPHERE-JAVASCRIPT-143: Delay reconnect to avoid reconnect attempts before an actual unload (we don't know if an unload will happen, yet)\r\n            atmosphere._beforeUnloadState = true;\r\n            setTimeout(function () {\r\n                atmosphere.util.debug(new Date() + \" Atmosphere: \" + \"beforeunload event timeout reached. Reset _beforeUnloadState flag\");\r\n                atmosphere._beforeUnloadState = false;\r\n            }, 5000);\r\n        },\r\n        offline: function () {\r\n            atmosphere.util.debug(new Date() + \" Atmosphere: offline event\");\r\n            offline = true;\r\n            if (requests.length > 0) {\r\n                var requestsClone = [].concat(requests);\r\n                for (var i = 0; i < requestsClone.length; i++) {\r\n                    var rq = requestsClone[i];\r\n                    if (rq.request.handleOnlineOffline) {\r\n                        rq.close();\r\n                        clearTimeout(rq.response.request.id);\r\n\r\n                        if (rq.heartbeatTimer) {\r\n                            clearTimeout(rq.heartbeatTimer);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        online: function () {\r\n            atmosphere.util.debug(new Date() + \" Atmosphere: online event\");\r\n            if (requests.length > 0) {\r\n                for (var i = 0; i < requests.length; i++) {\r\n                    if (requests[i].request.handleOnlineOffline) {\r\n                        requests[i].init();\r\n                        requests[i].execute();\r\n                    }\r\n                }\r\n            }\r\n            offline = false;\r\n        }\r\n    };\r\n\r\n    atmosphere.bindEvents = function () {\r\n        atmosphere.util.on(window, \"unload\", atmosphere.callbacks.unload);\r\n        atmosphere.util.on(window, \"beforeunload\", atmosphere.callbacks.beforeUnload);\r\n        atmosphere.util.on(window, \"offline\", atmosphere.callbacks.offline);\r\n        atmosphere.util.on(window, \"online\", atmosphere.callbacks.online);\r\n    };\r\n\r\n    atmosphere.unbindEvents = function () {\r\n        atmosphere.util.off(window, \"unload\", atmosphere.callbacks.unload);\r\n        atmosphere.util.off(window, \"beforeunload\", atmosphere.callbacks.beforeUnload);\r\n        atmosphere.util.off(window, \"offline\", atmosphere.callbacks.offline);\r\n        atmosphere.util.off(window, \"online\", atmosphere.callbacks.online);\r\n    };\r\n\r\n    atmosphere.bindEvents();\r\n\r\n    return atmosphere;\r\n}));\r\n/* jshint eqnull:true, noarg:true, noempty:true, eqeqeq:true, evil:true, laxbreak:true, undef:true, browser:true, indent:false, maxerr:50 */\r\n", "module.exports = require('./atmosphere');\r\n", "/*! js-cookie v3.0.5 | MIT */\r\n/* eslint-disable no-var */\r\nfunction assign (target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i];\r\n    for (var key in source) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n  return target\r\n}\r\n/* eslint-enable no-var */\r\n\r\n/* eslint-disable no-var */\r\nvar defaultConverter = {\r\n  read: function (value) {\r\n    if (value[0] === '\"') {\r\n      value = value.slice(1, -1);\r\n    }\r\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\r\n  },\r\n  write: function (value) {\r\n    return encodeURIComponent(value).replace(\r\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\r\n      decodeURIComponent\r\n    )\r\n  }\r\n};\r\n/* eslint-enable no-var */\r\n\r\n/* eslint-disable no-var */\r\n\r\nfunction init (converter, defaultAttributes) {\r\n  function set (name, value, attributes) {\r\n    if (typeof document === 'undefined') {\r\n      return\r\n    }\r\n\r\n    attributes = assign({}, defaultAttributes, attributes);\r\n\r\n    if (typeof attributes.expires === 'number') {\r\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\r\n    }\r\n    if (attributes.expires) {\r\n      attributes.expires = attributes.expires.toUTCString();\r\n    }\r\n\r\n    name = encodeURIComponent(name)\r\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\r\n      .replace(/[()]/g, escape);\r\n\r\n    var stringifiedAttributes = '';\r\n    for (var attributeName in attributes) {\r\n      if (!attributes[attributeName]) {\r\n        continue\r\n      }\r\n\r\n      stringifiedAttributes += '; ' + attributeName;\r\n\r\n      if (attributes[attributeName] === true) {\r\n        continue\r\n      }\r\n\r\n      // Considers RFC 6265 section 5.2:\r\n      // ...\r\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\r\n      //     character:\r\n      // Consume the characters of the unparsed-attributes up to,\r\n      // not including, the first %x3B (\";\") character.\r\n      // ...\r\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\r\n    }\r\n\r\n    return (document.cookie =\r\n      name + '=' + converter.write(value, name) + stringifiedAttributes)\r\n  }\r\n\r\n  function get (name) {\r\n    if (typeof document === 'undefined' || (arguments.length && !name)) {\r\n      return\r\n    }\r\n\r\n    // To prevent the for loop in the first place assign an empty array\r\n    // in case there are no cookies at all.\r\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\r\n    var jar = {};\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var parts = cookies[i].split('=');\r\n      var value = parts.slice(1).join('=');\r\n\r\n      try {\r\n        var found = decodeURIComponent(parts[0]);\r\n        jar[found] = converter.read(value, found);\r\n\r\n        if (name === found) {\r\n          break\r\n        }\r\n      } catch (e) {}\r\n    }\r\n\r\n    return name ? jar[name] : jar\r\n  }\r\n\r\n  return Object.create(\r\n    {\r\n      set,\r\n      get,\r\n      remove: function (name, attributes) {\r\n        set(\r\n          name,\r\n          '',\r\n          assign({}, attributes, {\r\n            expires: -1\r\n          })\r\n        );\r\n      },\r\n      withAttributes: function (attributes) {\r\n        return init(this.converter, assign({}, this.attributes, attributes))\r\n      },\r\n      withConverter: function (converter) {\r\n        return init(assign({}, this.converter, converter), this.attributes)\r\n      }\r\n    },\r\n    {\r\n      attributes: { value: Object.freeze(defaultAttributes) },\r\n      converter: { value: Object.freeze(converter) }\r\n    }\r\n  )\r\n}\r\n\r\nvar api = init(defaultConverter, { path: '/' });\r\n/* eslint-enable no-var */\r\n\r\nexport { api as default };\r\n", "import Cookies from 'js-cookie';\n\nexport function calculatePath({ pathname }: URL): string {\n  return pathname.length > 1 && pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;\n}\n\nconst CookieManager: typeof Cookies = Cookies.withAttributes({\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  path: calculatePath(new URL(globalThis.document?.baseURI ?? '/')),\n});\n\nexport default CookieManager;\n", "import CookieManager from './CookieManager.js';\n\n/** @internal */\nexport const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\n/** @internal */\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\n/** @internal */\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction extractContentFromMetaTag(element: HTMLMetaElement | null): string | undefined {\n  if (element) {\n    const value = element.content;\n    if (value && value.toLowerCase() !== 'undefined') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string | undefined {\n  const csrfHeader = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf_header\"]');\n  return extractContentFromMetaTag(csrfHeader);\n}\n\n/** @internal */\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string | undefined {\n  const csrfToken = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf\"]');\n  return extractContentFromMetaTag(csrfToken);\n}\n\n/** @internal */\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = CookieManager.get(SPRING_CSRF_COOKIE_NAME);\n  if (!csrf || csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf && csrfHeader) {\n    headers._csrf = csrf;\n    // eslint-disable-next-line camelcase\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = CookieManager.get(VAADIN_CSRF_COOKIE_NAME) ?? '';\n  }\n\n  return headers;\n}\n", "import type { MiddlewareClass, MiddlewareContext, MiddlewareNext } from './Connect.js';\nimport CookieManager from './CookieManager.js';\nimport { getSpringCsrfInfo, getSpringCsrfTokenHeadersForAuthRequest, VAADIN_CSRF_HEADER } from './CsrfUtils.js';\n\nconst JWT_COOKIE_NAME = 'jwt.headerAndPayload';\n\nfunction getSpringCsrfTokenFromResponseBody(body: string): Record<string, string> {\n  const doc = new DOMParser().parseFromString(body, 'text/html');\n  return getSpringCsrfInfo(doc);\n}\n\nfunction clearSpringCsrfMetaTags() {\n  Array.from(document.head.querySelectorAll('meta[name=\"_csrf\"], meta[name=\"_csrf_header\"]')).forEach((el) =>\n    el.remove(),\n  );\n}\n\nfunction updateSpringCsrfMetaTags(springCsrfInfo: Record<string, string>) {\n  clearSpringCsrfMetaTags();\n  const headerNameMeta: HTMLMetaElement = document.createElement('meta');\n  headerNameMeta.name = '_csrf_header';\n  headerNameMeta.content = springCsrfInfo._csrf_header;\n  document.head.appendChild(headerNameMeta);\n  const tokenMeta: HTMLMetaElement = document.createElement('meta');\n  tokenMeta.name = '_csrf';\n  tokenMeta.content = springCsrfInfo._csrf;\n  document.head.appendChild(tokenMeta);\n}\n\nconst getVaadinCsrfTokenFromResponseBody = (body: string): string | undefined => {\n  const match = /window\\.Vaadin = \\{TypeScript: \\{\"csrfToken\":\"([0-9a-zA-Z\\\\-]{36})\"\\}\\};/iu.exec(body);\n  return match ? match[1] : undefined;\n};\n\nasync function updateCsrfTokensBasedOnResponse(response: Response): Promise<string | undefined> {\n  const responseText = await response.text();\n  const token = getVaadinCsrfTokenFromResponseBody(responseText);\n  const springCsrfTokenInfo = getSpringCsrfTokenFromResponseBody(responseText);\n  updateSpringCsrfMetaTags(springCsrfTokenInfo);\n\n  return token;\n}\n\nasync function doLogout(logoutUrl: URL | string, headers: Record<string, string>) {\n  const response = await fetch(logoutUrl, { headers, method: 'POST' });\n  if (!response.ok) {\n    throw new Error(`failed to logout with response ${response.status}`);\n  }\n\n  await updateCsrfTokensBasedOnResponse(response);\n\n  return response;\n}\n\nexport interface LoginResult {\n  error: boolean;\n  token?: string;\n  errorTitle?: string;\n  errorMessage?: string;\n  redirectUrl?: string;\n  defaultUrl?: string;\n}\n\nexport type SuccessCallback = () => Promise<void> | void;\n\nexport type NavigateFunction = (path: string) => void;\n\nexport interface LoginOptions {\n  /**\n   * The URL for login request, defaults to `/login`.\n   */\n  loginProcessingUrl?: URL | string;\n\n  /**\n   * The success callback.\n   */\n  onSuccess?: SuccessCallback;\n\n  /**\n   * The navigation callback, called after successful login. The default\n   * reloads the page.\n   */\n  navigate?: NavigateFunction;\n}\n\nexport interface LogoutOptions {\n  /**\n   * The URL for logout request, defaults to `/logout`.\n   */\n  logoutUrl?: URL | string;\n\n  /**\n   * The success callback.\n   */\n  onSuccess?: SuccessCallback;\n\n  /**\n   * The navigation callback, called after successful logout. The default\n   * reloads the page.\n   */\n  navigate?: NavigateFunction;\n}\n\nfunction normalizePath(url: string): string {\n  // URL with context path\n  const effectiveBaseURL = new URL('.', document.baseURI);\n  const effectiveBaseURI = effectiveBaseURL.toString();\n\n  let normalized = url;\n\n  // Strip context path prefix\n  if (normalized.startsWith(effectiveBaseURL.pathname)) {\n    return `/${normalized.slice(effectiveBaseURL.pathname.length)}`;\n  }\n\n  // Strip base URI\n  normalized = normalized.startsWith(effectiveBaseURI) ? `/${normalized.slice(effectiveBaseURI.length)}` : normalized;\n\n  return normalized;\n}\n\n/**\n * Navigates to the provided path using page reload.\n *\n * @param to - navigation target path\n */\nfunction navigateWithPageReload(to: string) {\n  // Consider absolute path to be within application context\n  const url = to.startsWith('/') ? new URL(`.${to}`, document.baseURI) : to;\n  window.location.replace(url);\n}\n\n/**\n * A helper method for Spring Security based form login.\n * @param username - username\n * @param password - password\n * @param options - defines additional options, e.g, the loginProcessingUrl etc.\n */\nexport async function login(username: string, password: string, options?: LoginOptions): Promise<LoginResult> {\n  try {\n    const data = new FormData();\n    data.append('username', username);\n    data.append('password', password);\n\n    const loginProcessingUrl = options?.loginProcessingUrl ?? 'login';\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    headers.source = 'typescript';\n    const response = await fetch(loginProcessingUrl, {\n      body: data,\n      headers,\n      method: 'POST',\n    });\n\n    // This code assumes that a VaadinSavedRequestAwareAuthenticationSuccessHandler is used on the server side,\n    // setting these header values based on the \"source=typescript\" header set above\n\n    const result = response.headers.get('Result');\n    const savedUrl = response.headers.get('Saved-url') ?? undefined;\n    const defaultUrl = response.headers.get('Default-url') ?? undefined;\n    const loginSuccessful = response.ok && result === 'success';\n\n    if (loginSuccessful) {\n      const vaadinCsrfToken = response.headers.get('Vaadin-CSRF') ?? undefined;\n\n      const springCsrfHeader = response.headers.get('Spring-CSRF-header') ?? undefined;\n      const springCsrfToken = response.headers.get('Spring-CSRF-token') ?? undefined;\n      if (springCsrfHeader && springCsrfToken) {\n        const springCsrfTokenInfo: Record<string, string> = {};\n        springCsrfTokenInfo._csrf = springCsrfToken;\n        // eslint-disable-next-line camelcase\n        springCsrfTokenInfo._csrf_header = springCsrfHeader;\n        updateSpringCsrfMetaTags(springCsrfTokenInfo);\n      }\n\n      if (options?.onSuccess) {\n        await options.onSuccess();\n      }\n\n      const url = savedUrl ?? defaultUrl ?? document.baseURI;\n      const toPath = normalizePath(url);\n      const navigate = options?.navigate ?? navigateWithPageReload;\n      navigate(toPath);\n\n      return {\n        defaultUrl,\n        error: false,\n        redirectUrl: savedUrl,\n        token: vaadinCsrfToken,\n      };\n    }\n    return {\n      error: true,\n      errorMessage: 'Check that you have entered the correct username and password and try again.',\n      errorTitle: 'Incorrect username or password.',\n    };\n  } catch (e: unknown) {\n    if (e instanceof Error) {\n      return {\n        error: true,\n        errorMessage: e.message,\n        errorTitle: e.name,\n      };\n    }\n\n    throw e;\n  }\n}\n\n/**\n * A helper method for Spring Security based form logout\n * @param options - defines additional options, e.g, the logoutUrl.\n */\nexport async function logout(options?: LogoutOptions): Promise<void> {\n  // this assumes the default Spring Security logout configuration (handler URL)\n  const logoutUrl = options?.logoutUrl ?? 'logout';\n  let response: Response | undefined;\n  try {\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    response = await doLogout(logoutUrl, headers);\n  } catch {\n    try {\n      const noCacheResponse = await fetch('?nocache');\n      const responseText = await noCacheResponse.text();\n      const doc = new DOMParser().parseFromString(responseText, 'text/html');\n      const headers = getSpringCsrfTokenHeadersForAuthRequest(doc);\n      response = await doLogout(logoutUrl, headers);\n    } catch (error) {\n      // clear the token if the call fails\n      clearSpringCsrfMetaTags();\n      throw error;\n    }\n  } finally {\n    CookieManager.remove(JWT_COOKIE_NAME);\n    if (response && response.ok && response.redirected) {\n      if (options?.onSuccess) {\n        await options.onSuccess();\n      }\n      const toPath = normalizePath(response.url);\n      const navigate = options?.navigate ?? navigateWithPageReload;\n      navigate(toPath);\n    }\n  }\n}\n\n/**\n * It defines what to do when it detects a session is invalid. E.g.,\n * show a login view.\n * It takes an <code>EndpointCallContinue</code> parameter, which can be\n * used to continue the endpoint call.\n */\nexport type OnInvalidSessionCallback = () => Promise<LoginResult>;\n\n/**\n * A helper class for handling invalid sessions during an endpoint call.\n * E.g., you can use this to show user a login page when the session has\n * expired.\n */\nexport class InvalidSessionMiddleware implements MiddlewareClass {\n  private readonly onInvalidSessionCallback: OnInvalidSessionCallback;\n\n  constructor(onInvalidSessionCallback: OnInvalidSessionCallback) {\n    this.onInvalidSessionCallback = onInvalidSessionCallback;\n  }\n\n  async invoke(context: MiddlewareContext, next: MiddlewareNext): Promise<Response> {\n    const clonedContext = { ...context };\n    clonedContext.request = context.request.clone();\n    const response = await next(context);\n    if (response.status === 401) {\n      const loginResult = await this.onInvalidSessionCallback();\n      if (loginResult.token) {\n        clonedContext.request.headers.set(VAADIN_CSRF_HEADER, loginResult.token);\n        return next(clonedContext) as Promise<Response>;\n      }\n    }\n    return response;\n  }\n}\n", "/**\n * An exception that gets thrown when the Vaadin backend responds\n * with not ok status.\n */\nexport class EndpointError extends Error {\n  /**\n   * The optional detail object, containing additional information sent\n   * from the backend\n   */\n  detail?: unknown;\n  /**\n   * The optional name of the exception that was thrown on a backend\n   */\n  type?: string;\n\n  /**\n   * @param message - the `message` property value\n   * @param type - the `type` property value\n   * @param detail - the `detail` property value\n   */\n  constructor(message: string, type?: string, detail?: unknown) {\n    super(message);\n    this.type = type;\n    this.detail = detail;\n  }\n}\n\n/**\n * An exception that gets thrown if Vaadin endpoint responds\n * with non-ok status and provides additional info\n * on the validation errors occurred.\n */\nexport class EndpointValidationError extends EndpointError {\n  /**\n   * An array of the validation errors.\n   */\n  validationErrorData: ValidationErrorData[];\n  /**\n   * An original validation error message.\n   */\n  validationErrorMessage: string;\n\n  /**\n   * @param message - the `message` property value\n   * @param validationErrorData - the `validationErrorData` property value\n   * @param type - the `type` property value\n   */\n  constructor(message: string, validationErrorData: ValidationErrorData[], type?: string) {\n    super(message, type, validationErrorData);\n    this.validationErrorMessage = message;\n    this.detail = null;\n    this.validationErrorData = validationErrorData;\n  }\n}\n\n/**\n * An exception that gets thrown for unexpected HTTP response.\n */\nexport class EndpointResponseError extends EndpointError {\n  /**\n   * The optional response object, containing the HTTP response error\n   */\n  response: Response;\n\n  /**\n   * @param message - the `message` property value\n   * @param response - the `response` property value\n   */\n  constructor(message: string, response: Response) {\n    super(message, 'EndpointResponseError', response);\n    this.response = response;\n  }\n\n  /**\n   * Convenience property to get the HTTP code status directly\n   */\n  get status(): number {\n    return this.response.status;\n  }\n}\n\nexport class UnauthorizedResponseError extends EndpointResponseError {\n  constructor(message: string, response: Response) {\n    super(message, response);\n    this.type = 'UnauthorizedResponseError';\n  }\n}\n\nexport class ForbiddenResponseError extends EndpointResponseError {\n  constructor(message: string, response: Response) {\n    super(message, response);\n    this.type = 'ForbiddenResponseError';\n  }\n}\n\n/**\n * An object, containing all data for the particular validation error.\n */\nexport class ValidationErrorData {\n  /**\n   * The validation error message.\n   */\n  message: string;\n\n  /**\n   * The parameter name that caused the validation error.\n   */\n  parameterName?: string;\n\n  /**\n   * Validator original message\n   */\n  validatorMessage?: string;\n\n  /**\n   * @param message - The `message` property value\n   * @param parameterName - The `parameterName` property value\n   * @param validatorMessage - The `validatorMessage` property value\n   */\n  constructor(message: string, parameterName?: string, validatorMessage?: string) {\n    this.message = message;\n    this.parameterName = parameterName;\n    this.validatorMessage = validatorMessage;\n  }\n}\n", "import type { ReactiveControllerHost } from '@lit/reactive-element';\nimport atmosphere from 'atmosphere.js';\nimport type { Subscription } from './Connect.js';\nimport { getCsrfTokenHeadersForEndpointRequest } from './CsrfUtils.js';\nimport {\n  isClientMessage,\n  type ServerCloseMessage,\n  type ServerConnectMessage,\n  type ServerMessage,\n} from './FluxMessages.js';\n\nexport enum State {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  RECONNECTING = 'reconnecting',\n}\n\ntype ActiveEvent = CustomEvent<{ active: boolean }>;\ninterface EventMap {\n  'state-changed': ActiveEvent;\n}\n\ntype ListenerType<T extends keyof EventMap> =\n  | ((this: FluxConnection, ev: EventMap[T]) => any)\n  | {\n      handleEvent(ev: EventMap[T]): void;\n    }\n  | null;\n\n/**\n * Possible options for dealing with lost subscriptions after a websocket is reopened.\n */\nexport enum ActionOnLostSubscription {\n  /**\n   * The subscription should be resubscribed using the same server method and parameters.\n   */\n  RESUBSCRIBE = 'resubscribe',\n  /**\n   * The subscription should be removed.\n   */\n  REMOVE = 'remove',\n}\n\n/**\n * Possible states of a flux subscription.\n */\nexport enum FluxSubscriptionState {\n  /**\n   * The subscription is not connected and is trying to connect.\n   */\n  CONNECTING = 'connecting',\n  /**\n   * The subscription is connected and receiving updates.\n   */\n  CONNECTED = 'connected',\n  /**\n   * The subscription is closed and is not trying to reconnect.\n   */\n  CLOSED = 'closed',\n}\n\n/**\n * Event wrapper for flux subscription connection state change callback\n */\nexport type FluxSubscriptionStateChangeEvent = CustomEvent<{ state: FluxSubscriptionState }>;\n\ntype EndpointInfo = {\n  endpointName: string;\n  methodName: string;\n  params: unknown[] | undefined;\n  reconnect?(): ActionOnLostSubscription | void;\n};\n\n/**\n * A representation of the underlying persistent network connection used for subscribing to Flux type endpoint methods.\n */\nexport class FluxConnection extends EventTarget {\n  state: State = State.INACTIVE;\n  wasClosed = false;\n  readonly #endpointInfos = new Map<string, EndpointInfo>();\n  #nextId = 0;\n  readonly #onCompleteCallbacks = new Map<string, () => void>();\n  readonly #onErrorCallbacks = new Map<string, (message: string) => void>();\n  readonly #onNextCallbacks = new Map<string, (value: any) => void>();\n  readonly #onStateChangeCallbacks = new Map<string, (event: FluxSubscriptionStateChangeEvent) => void>();\n  readonly #statusOfSubscriptions = new Map<string, FluxSubscriptionState>();\n  #pendingMessages: ServerMessage[] = [];\n  #socket?: Atmosphere.Request;\n\n  constructor(connectPrefix: string, atmosphereOptions?: Partial<Atmosphere.Request>) {\n    super();\n    this.#connectWebsocket(connectPrefix.replace(/connect$/u, ''), atmosphereOptions ?? {});\n  }\n\n  #resubscribeIfWasClosed() {\n    if (this.wasClosed) {\n      this.wasClosed = false;\n      const toBeRemoved: string[] = [];\n      this.#endpointInfos.forEach((endpointInfo, id) => {\n        if (endpointInfo.reconnect?.() === ActionOnLostSubscription.RESUBSCRIBE) {\n          this.#setSubscriptionConnState(id, FluxSubscriptionState.CONNECTING);\n          this.#send({\n            '@type': 'subscribe',\n            endpointName: endpointInfo.endpointName,\n            id,\n            methodName: endpointInfo.methodName,\n            params: endpointInfo.params,\n          });\n        } else {\n          toBeRemoved.push(id);\n        }\n      });\n      toBeRemoved.forEach((id) => this.#removeSubscription(id));\n    }\n  }\n\n  /**\n   * Subscribes to the flux returned by the given endpoint name + method name using the given parameters.\n   *\n   * @param endpointName - the endpoint to connect to\n   * @param methodName - the method in the endpoint to connect to\n   * @param parameters - the parameters to use\n   * @returns a subscription\n   */\n  subscribe(endpointName: string, methodName: string, parameters?: unknown[]): Subscription<any> {\n    const id: string = this.#nextId.toString();\n    this.#nextId += 1;\n    const params = parameters ?? [];\n\n    const msg: ServerConnectMessage = { '@type': 'subscribe', endpointName, id, methodName, params };\n    this.#send(msg);\n    this.#endpointInfos.set(id, { endpointName, methodName, params });\n    this.#setSubscriptionConnState(id, FluxSubscriptionState.CONNECTING);\n    const hillaSubscription: Subscription<any> = {\n      cancel: () => {\n        if (!this.#endpointInfos.has(id)) {\n          // Subscription already closed or canceled\n          return;\n        }\n\n        const closeMessage: ServerCloseMessage = { '@type': 'unsubscribe', id };\n        this.#send(closeMessage);\n        this.#removeSubscription(id);\n      },\n      context(context: ReactiveControllerHost): Subscription<any> {\n        context.addController({\n          hostDisconnected() {\n            hillaSubscription.cancel();\n          },\n        });\n        return hillaSubscription;\n      },\n      onComplete: (callback: () => void): Subscription<any> => {\n        this.#onCompleteCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onError: (callback: (message: string) => void): Subscription<any> => {\n        this.#onErrorCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onNext: (callback: (value: any) => void): Subscription<any> => {\n        this.#onNextCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onSubscriptionLost: (callback: () => ActionOnLostSubscription | void): Subscription<any> => {\n        if (this.#endpointInfos.has(id)) {\n          this.#endpointInfos.get(id)!.reconnect = callback;\n        } else {\n          console.warn(`\"onReconnect\" value not set for subscription \"${id}\" because it was already canceled`);\n        }\n        return hillaSubscription;\n      },\n      onConnectionStateChange: (callback: (event: FluxSubscriptionStateChangeEvent) => void): Subscription<any> => {\n        this.#onStateChangeCallbacks.set(id, callback);\n        callback(\n          new CustomEvent('subscription-state-change', { detail: { state: this.#statusOfSubscriptions.get(id)! } }),\n        );\n        return hillaSubscription;\n      },\n    };\n    return hillaSubscription;\n  }\n\n  #connectWebsocket(prefix: string, atmosphereOptions: Partial<Atmosphere.Request>) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const extraHeaders = globalThis.document ? getCsrfTokenHeadersForEndpointRequest(globalThis.document) : {};\n    const pushUrl = 'HILLA/push';\n    const url = prefix.length === 0 ? pushUrl : (prefix.endsWith('/') ? prefix : `${prefix}/`) + pushUrl;\n    this.#socket = atmosphere.subscribe?.({\n      contentType: 'application/json; charset=UTF-8',\n      enableProtocol: true,\n      transport: 'websocket',\n      fallbackTransport: 'websocket',\n      headers: extraHeaders,\n      maxReconnectOnClose: 10000000,\n      reconnectInterval: 5000,\n      timeout: -1,\n      trackMessageLength: true,\n      url,\n      onClose: () => {\n        this.wasClosed = true;\n        if (this.state !== State.INACTIVE) {\n          this.state = State.INACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: false } }));\n        }\n      },\n      onError: (response) => {\n        // eslint-disable-next-line no-console\n        console.error('error in push communication', response);\n      },\n      onMessage: (response) => {\n        if (response.responseBody) {\n          this.#handleMessage(JSON.parse(response.responseBody));\n        }\n      },\n      onMessagePublished: (response) => {\n        if (response?.responseBody) {\n          this.#handleMessage(JSON.parse(response.responseBody));\n        }\n      },\n      onOpen: () => {\n        if (this.state !== State.ACTIVE) {\n          this.#resubscribeIfWasClosed();\n          this.state = State.ACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: true } }));\n          this.#sendPendingMessages();\n        }\n      },\n      onReopen: () => {\n        if (this.state !== State.ACTIVE) {\n          this.#resubscribeIfWasClosed();\n          this.state = State.ACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: true } }));\n          this.#sendPendingMessages();\n        }\n      },\n      onReconnect: () => {\n        if (this.state !== State.RECONNECTING) {\n          this.state = State.RECONNECTING;\n          this.#endpointInfos.forEach((_, id) => {\n            this.#setSubscriptionConnState(id, FluxSubscriptionState.CONNECTING);\n          });\n        }\n      },\n      onFailureToReconnect: () => {\n        if (this.state !== State.INACTIVE) {\n          this.state = State.INACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: false } }));\n          this.#endpointInfos.forEach((_, id) => this.#setSubscriptionConnState(id, FluxSubscriptionState.CLOSED));\n        }\n      },\n      ...atmosphereOptions,\n    } satisfies Atmosphere.Request);\n  }\n\n  #setSubscriptionConnState(id: string, state: FluxSubscriptionState) {\n    const currentState = this.#statusOfSubscriptions.get(id);\n    if (!currentState) {\n      this.#statusOfSubscriptions.set(id, state);\n      this.#onStateChangeCallbacks.get(id)?.(\n        new CustomEvent('subscription-state-change', { detail: { state: this.#statusOfSubscriptions.get(id)! } }),\n      );\n    } else if (currentState !== state) {\n      this.#statusOfSubscriptions.set(id, state);\n      this.#onStateChangeCallbacks.get(id)?.(\n        new CustomEvent('subscription-state-change', { detail: { state: this.#statusOfSubscriptions.get(id)! } }),\n      );\n    }\n  }\n\n  #handleMessage(message: unknown) {\n    if (isClientMessage(message)) {\n      const { id } = message;\n      const endpointInfo = this.#endpointInfos.get(id);\n\n      if (message['@type'] === 'update') {\n        const callback = this.#onNextCallbacks.get(id);\n        if (callback) {\n          callback(message.item);\n        }\n        this.#setSubscriptionConnState(id, FluxSubscriptionState.CONNECTED);\n      } else if (message['@type'] === 'complete') {\n        this.#onCompleteCallbacks.get(id)?.();\n        this.#removeSubscription(id);\n      } else {\n        const callback = this.#onErrorCallbacks.get(id);\n        if (callback) {\n          callback(message.message);\n        }\n        this.#removeSubscription(id);\n        if (!callback) {\n          throw new Error(\n            endpointInfo\n              ? `Error in ${endpointInfo.endpointName}.${endpointInfo.methodName}(${JSON.stringify(endpointInfo.params)}): ${message.message}`\n              : `Error in unknown subscription: ${message.message}`,\n          );\n        }\n      }\n    } else {\n      throw new Error(`Unknown message from server: ${String(message)}`);\n    }\n  }\n\n  #removeSubscription(id: string) {\n    this.#setSubscriptionConnState(id, FluxSubscriptionState.CLOSED);\n    this.#statusOfSubscriptions.delete(id);\n    this.#onStateChangeCallbacks.delete(id);\n    this.#onNextCallbacks.delete(id);\n    this.#onCompleteCallbacks.delete(id);\n    this.#onErrorCallbacks.delete(id);\n    this.#endpointInfos.delete(id);\n  }\n\n  #send(message: ServerMessage) {\n    if (this.state === State.INACTIVE) {\n      this.#pendingMessages.push(message);\n    } else {\n      this.#socket?.push?.(JSON.stringify(message));\n    }\n  }\n\n  #sendPendingMessages() {\n    this.#pendingMessages.forEach((msg) => this.#send(msg));\n    this.#pendingMessages = [];\n  }\n}\n\nexport interface FluxConnection {\n  addEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n  removeEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n}\n", "export interface AbstractMessage {\n  '@type': string;\n  id: string;\n}\n\nexport interface ClientErrorMessage extends AbstractMessage {\n  '@type': 'error';\n  message: string;\n}\nexport interface ClientCompleteMessage extends AbstractMessage {\n  '@type': 'complete';\n}\nexport interface ClientUpdateMessage extends AbstractMessage {\n  '@type': 'update';\n  item: any;\n}\n\nexport type ClientMessage = ClientCompleteMessage | ClientErrorMessage | ClientUpdateMessage;\n\nexport function isClientMessage(value: unknown): value is ClientMessage {\n  return value != null && typeof value === 'object' && '@type' in value;\n}\n\nexport interface ServerConnectMessage extends AbstractMessage {\n  id: string;\n  '@type': 'subscribe';\n  endpointName: string;\n  methodName: string;\n  params?: any;\n}\nexport interface ServerCloseMessage extends AbstractMessage {\n  id: string;\n  '@type': 'unsubscribe';\n}\n\nexport type ServerMessage = ServerCloseMessage | ServerConnectMessage;\n", "import type { ReactiveControllerHost } from '@lit/reactive-element';\nimport { ConnectionIndicator, ConnectionState } from '@vaadin/common-frontend';\nimport { getCsrfTokenHeadersForEndpointRequest } from './CsrfUtils.js';\nimport {\n  EndpointError,\n  EndpointResponseError,\n  EndpointValidationError,\n  ForbiddenResponseError,\n  UnauthorizedResponseError,\n  type ValidationErrorData,\n} from './EndpointErrors.js';\nimport {\n  type ActionOnLostSubscription,\n  FluxConnection,\n  type FluxSubscriptionStateChangeEvent,\n} from './FluxConnection.js';\nimport type { VaadinGlobal } from './types.js';\n\nconst $wnd = globalThis as VaadinGlobal;\n\n$wnd.Vaadin ??= {};\n$wnd.Vaadin.registrations ??= [];\n$wnd.Vaadin.registrations.push({\n  is: 'endpoint',\n});\n\nexport const BODY_PART_NAME = 'hilla_body_part';\n\nexport type MaybePromise<T> = Promise<T> | T;\n\n/**\n * Represents the connection to and endpoint returning a subscription rather than a value.\n */\nexport interface Subscription<T> {\n  /** Cancels the subscription.  No values are made available after calling this. */\n  cancel(): void;\n\n  /*\n   * Binds to the given context (element) so that when the context is deactivated (element detached), the subscription is closed.\n   */\n  context(context: ReactiveControllerHost): Subscription<T>;\n\n  /** Called when the subscription has completed. No values are made available after calling this. */\n  onComplete(callback: () => void): Subscription<T>;\n\n  /** Called when an exception occured in the subscription. */\n  onError(callback: (message: string) => void): Subscription<T>;\n\n  /** Called when a new value is available. */\n  onNext(callback: (value: T) => void): Subscription<T>;\n\n  /** Called when the subscription state changes. */\n  onConnectionStateChange(callback: (event: FluxSubscriptionStateChangeEvent) => void): Subscription<T>;\n\n  /**\n   * Called when the connection is restored, but there's no longer a valid subscription. If the callback returns\n   * `ActionOnLostSubscription.RESUBSCRIBE`, the subscription will be re-established by connecting to the same\n   * server method again. If the callback returns `ActionOnLostSubscription.REMOVE`, the subscription will be\n   * forgotten. This is also the default behavior if the callback is not set or if it returns `undefined`.\n   */\n  onSubscriptionLost(callback: () => ActionOnLostSubscription | void): Subscription<T>;\n}\n\ninterface ConnectExceptionData {\n  detail?: any;\n  message: string;\n  type: string;\n  validationErrorData?: ValidationErrorData[];\n}\n\n/**\n * Throws a TypeError if the response is not 200 OK.\n * @param response - The response to assert.\n */\nconst assertResponseIsOk = async (response: Response): Promise<void> => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorJson: ConnectExceptionData | null;\n    try {\n      errorJson = JSON.parse(errorText);\n    } catch {\n      // not a json\n      errorJson = null;\n    }\n\n    const message =\n      errorJson?.message ??\n      (errorText.length > 0\n        ? errorText\n        : `expected \"200 OK\" response, but got ${response.status} ${response.statusText}`);\n    const type = errorJson?.type;\n\n    if (errorJson?.validationErrorData) {\n      throw new EndpointValidationError(message, errorJson.validationErrorData, type);\n    }\n\n    if (type) {\n      throw new EndpointError(message, type, errorJson?.detail);\n    }\n\n    switch (response.status) {\n      case 401:\n        throw new UnauthorizedResponseError(message, response);\n      case 403:\n        throw new ForbiddenResponseError(message, response);\n      default:\n        throw new EndpointResponseError(message, response);\n    }\n  }\n};\n\n/**\n * The `ConnectClient` constructor options.\n */\nexport interface ConnectClientOptions {\n  /**\n   * The `middlewares` property value.\n   */\n  middlewares?: Middleware[];\n  /**\n   * The `prefix` property value.\n   */\n  prefix?: string;\n  /**\n   * The Atmosphere options for the FluxConnection.\n   */\n  atmosphereOptions?: Partial<Atmosphere.Request>;\n}\n\nexport interface EndpointCallMetaInfo {\n  /**\n   * The endpoint name.\n   */\n  endpoint: string;\n\n  /**\n   * The method name to call on in the endpoint class.\n   */\n  method: string;\n\n  /**\n   * Optional object with method call arguments.\n   */\n  params?: Record<string, unknown>;\n}\n\n/**\n * An object with the call arguments and the related Request instance.\n * See also {@link ConnectClient.call | the call() method in ConnectClient}.\n */\nexport interface MiddlewareContext extends EndpointCallMetaInfo {\n  /**\n   * The Fetch API Request object reflecting the other properties.\n   */\n  request: Request;\n}\n\n/**\n * An async middleware callback that invokes the next middleware in the chain\n * or makes the actual request.\n * @param context - The information about the call and request\n */\nexport type MiddlewareNext = (context: MiddlewareContext) => MaybePromise<Response>;\n\n/**\n * An interface that allows defining a middleware as a class.\n */\nexport interface MiddlewareClass {\n  /**\n   * @param context - The information about the call and request\n   * @param next - Invokes the next in the call chain\n   */\n  invoke(context: MiddlewareContext, next: MiddlewareNext): MaybePromise<Response>;\n}\n\n/**\n * An async callback function that can intercept the request and response\n * of a call.\n */\nexport type MiddlewareFunction = (context: MiddlewareContext, next: MiddlewareNext) => MaybePromise<Response>;\n\n/**\n * An async callback that can intercept the request and response\n * of a call, could be either a function or a class.\n */\nexport type Middleware = MiddlewareClass | MiddlewareFunction;\n\nfunction isFlowLoaded(): boolean {\n  return $wnd.Vaadin?.Flow?.clients?.TypeScript !== undefined;\n}\n\n/**\n * Extracts file objects from the object that is used to build the request body.\n *\n * @param obj - The object to extract files from.\n * @returns A tuple with the object without files and a map of files.\n */\nfunction extractFiles(obj: Record<string, unknown>): [Record<string, unknown>, Map<string, File>] {\n  const fileMap = new Map<string, File>();\n\n  function recursiveExtract(prop: unknown, path: string): unknown {\n    if (prop !== null && typeof prop === 'object') {\n      if (prop instanceof File) {\n        fileMap.set(path, prop);\n        return null;\n      }\n      if (Array.isArray(prop)) {\n        return prop.map((item, index) => recursiveExtract(item, `${path}/${index}`));\n      }\n      return Object.entries(prop).reduce<Record<string, unknown>>((acc, [key, value]) => {\n        const newPath = `${path}/${key}`;\n        if (value instanceof File) {\n          fileMap.set(newPath, value);\n        } else {\n          acc[key] = recursiveExtract(value, newPath);\n        }\n        return acc;\n      }, {});\n    }\n    return prop;\n  }\n\n  return [recursiveExtract(obj, '') as Record<string, unknown>, fileMap];\n}\n\n/**\n * A list of parameters supported by {@link ConnectClient.call | the call() method in ConnectClient}.\n */\nexport interface EndpointRequestInit {\n  /**\n   * An AbortSignal to set request's signal.\n   */\n  signal?: AbortSignal | null;\n  /**\n   * If set to true, the connection state will not be updated during the request.\n   */\n  mute?: boolean;\n}\n\n/**\n * A low-level network calling utility. It stores\n * a prefix and facilitates remote calls to endpoint class methods\n * on the Hilla backend.\n *\n * Example usage:\n *\n * ```js\n * const client = new ConnectClient();\n * const responseData = await client.call('MyEndpoint', 'myMethod');\n * ```\n *\n * ### Prefix\n *\n * The client supports an `prefix` constructor option:\n * ```js\n * const client = new ConnectClient({prefix: '/my-connect-prefix'});\n * ```\n *\n * The default prefix is '/connect'.\n *\n */\nexport class ConnectClient {\n  /**\n   * The array of middlewares that are invoked during a call.\n   */\n  middlewares: Middleware[] = [];\n  /**\n   * The Hilla endpoint prefix\n   */\n  prefix = '/connect';\n  /**\n   * The Atmosphere options for the FluxConnection.\n   */\n  atmosphereOptions: Partial<Atmosphere.Request> = {};\n\n  #fluxConnection?: FluxConnection;\n\n  /**\n   * @param options - Constructor options.\n   */\n  constructor(options: ConnectClientOptions = {}) {\n    if (options.prefix) {\n      this.prefix = options.prefix;\n    }\n\n    if (options.middlewares) {\n      this.middlewares = options.middlewares;\n    }\n\n    if (options.atmosphereOptions) {\n      this.atmosphereOptions = options.atmosphereOptions;\n    }\n\n    // add connection indicator to DOM\n    ConnectionIndicator.create();\n\n    // Listen to browser online/offline events and update the loading indicator accordingly.\n    // Note: if Flow.ts is loaded, it instead handles the state transitions.\n    addEventListener('online', () => {\n      if (!isFlowLoaded() && $wnd.Vaadin?.connectionState) {\n        $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTED;\n      }\n    });\n    addEventListener('offline', () => {\n      if (!isFlowLoaded() && $wnd.Vaadin?.connectionState) {\n        $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n      }\n    });\n  }\n\n  /**\n   * Gets a representation of the underlying persistent network connection used for subscribing to Flux type endpoint\n   * methods.\n   */\n  get fluxConnection(): FluxConnection {\n    if (!this.#fluxConnection) {\n      this.#fluxConnection = new FluxConnection(this.prefix, this.atmosphereOptions);\n    }\n    return this.#fluxConnection;\n  }\n\n  /**\n   * Calls the given endpoint method defined using the endpoint and method\n   * parameters with the parameters given as params.\n   * Asynchronously returns the parsed JSON response data.\n   *\n   * @param endpoint - Endpoint name.\n   * @param method - Method name to call in the endpoint class.\n   * @param params - Optional parameters to pass to the method.\n   * @param init - Optional parameters for the request\n   * @returns Decoded JSON response data.\n   */\n  async call(\n    endpoint: string,\n    method: string,\n    params?: Record<string, unknown>,\n    init?: EndpointRequestInit,\n  ): Promise<any> {\n    if (arguments.length < 2) {\n      throw new TypeError(`2 arguments required, but got only ${arguments.length}`);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const csrfHeaders = globalThis.document ? getCsrfTokenHeadersForEndpointRequest(globalThis.document) : {};\n    const headers: Record<string, string> = {\n      Accept: 'application/json',\n      ...csrfHeaders,\n    };\n\n    const [paramsWithoutFiles, files] = extractFiles(params ?? {});\n    let body;\n\n    if (files.size > 0) {\n      // in this case params is not undefined, otherwise there would be no files\n      body = new FormData();\n      body.append(\n        BODY_PART_NAME,\n        JSON.stringify(paramsWithoutFiles, (_, value) => (value === undefined ? null : value)),\n      );\n\n      for (const [path, file] of files) {\n        body.append(path, file);\n      }\n    } else {\n      headers['Content-Type'] = 'application/json';\n      if (params) {\n        body = JSON.stringify(params, (_, value) => (value === undefined ? null : value));\n      }\n    }\n\n    const request = new Request(`${this.prefix}/${endpoint}/${method}`, {\n      body, // automatically sets Content-Type header\n      headers,\n      method: 'POST',\n    });\n\n    // The middleware `context`, includes the call arguments and the request\n    // constructed from them\n    const initialContext: MiddlewareContext = {\n      endpoint,\n      method,\n      params,\n      request,\n    };\n\n    // The internal middleware to assert and parse the response. The internal\n    // response handling should come last after the other middlewares are done\n    // with processing the response. That is why this middleware is first\n    // in the final middlewares array.\n    async function responseHandlerMiddleware(context: MiddlewareContext, next: MiddlewareNext): Promise<Response> {\n      const response = await next(context);\n      await assertResponseIsOk(response);\n      const text = await response.text();\n      return JSON.parse(text, (_, value: any) => (value === null ? undefined : value));\n    }\n\n    // The actual fetch call itself is expressed as a middleware\n    // chain item for our convenience. Always having an ending of the chain\n    // this way makes the folding down below more concise.\n    async function fetchNext(context: MiddlewareContext) {\n      // if the request is not \"muted\", notify the connection state about changes\n      const connectionState = init?.mute ? undefined : $wnd.Vaadin?.connectionState;\n      connectionState?.loadingStarted();\n      try {\n        const response = await fetch(context.request, { signal: init?.signal });\n        connectionState?.loadingFinished();\n        return response;\n      } catch (error: unknown) {\n        // don't bother about connections aborted by purpose\n        if (error instanceof Error && error.name === 'AbortError') {\n          connectionState?.loadingFinished();\n        } else {\n          connectionState?.loadingFailed();\n        }\n        throw error;\n      }\n    }\n\n    // Assemble the final middlewares array from internal\n    // and external middlewares\n    const middlewares = [responseHandlerMiddleware as Middleware, ...this.middlewares];\n\n    // Fold the final middlewares array into a single function\n    const chain = middlewares.reduceRight(\n      (next: MiddlewareNext, middleware) =>\n        // Compose and return the new chain step, that takes the context and\n        // invokes the current middleware with the context and the further chain\n        // as the next argument\n        async (context) => {\n          if (typeof middleware === 'function') {\n            return middleware(context, next);\n          }\n          return middleware.invoke(context, next);\n        },\n      // Initialize reduceRight the accumulator with `fetchNext`\n      fetchNext,\n    );\n\n    // Invoke all the folded async middlewares and return\n    return chain(initialContext);\n  }\n\n  /**\n   * Subscribes to the given method defined using the endpoint and method\n   * parameters with the parameters given as params. The method must return a\n   * compatible type such as a Flux.\n   * Returns a subscription that is used to fetch values as they become available.\n   *\n   * @param endpoint - Endpoint name.\n   * @param method - Method name to call in the endpoint class.\n   * @param params - Optional parameters to pass to the method.\n   * @returns A subscription used to handles values as they become available.\n   */\n  subscribe(endpoint: string, method: string, params?: any): Subscription<any> {\n    return this.fluxConnection.subscribe(endpoint, method, params ? Object.values(params) : []);\n  }\n}\n", "export * from './Authentication.js';\nexport * from './Connect.js';\nexport * from './EndpointErrors.js';\nexport { ActionOnLostSubscription, FluxConnection, State } from './FluxConnection.js';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n((feature, vaadinObj = (window.Vaadin ??= {})) => {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `@vaadin/hilla-frontend/${feature}` : '@vaadin/hilla-frontend',\n    version: '24.7.2',\n  });\n})();\n"],
  "mappings": "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",
  "names": ["atmosphere", "_socket", "guid", "options", "_request", "message", "xdr", "prefix", "converter", "CookieManager: typeof Cookies", "element: HTMLMetaElement | null", "doc: Document", "headers: Record<string, string>", "body: string", "springCsrfInfo: Record<string, string>", "headerNameMeta: HTMLMetaElement", "tokenMeta: HTMLMetaElement", "response: Response", "logoutUrl: URL | string", "headers: Record<string, string>", "url: string", "to: string", "username: string", "password: string", "options?: LoginOptions", "springCsrfTokenInfo: Record<string, string>", "e: unknown", "options?: LogoutOptions", "response: Response | undefined", "onInvalidSessionCallback: OnInvalidSessionCallback", "context: MiddlewareContext", "next: MiddlewareNext", "message: string", "type?: string", "detail?: unknown", "validationErrorData: ValidationErrorData[]", "response: Response", "parameterName?: string", "validatorMessage?: string", "value: unknown", "State", "ActionOnLostSubscription", "FluxSubscriptionState", "connectPrefix: string", "atmosphereOptions?: Partial<Atmosphere.Request>", "#endpointInfos", "#onCompleteCallbacks", "#onErrorCallbacks", "#onNextCallbacks", "#onStateChangeCallbacks", "#statusOfSubscriptions", "#connectWebsocket", "endpointName: string", "methodName: string", "parameters?: unknown[]", "id: string", "#nextId", "msg: ServerConnectMessage", "#send", "#setSubscriptionConnState", "hillaSubscription: Subscription<any>", "closeMessage: ServerCloseMessage", "#removeSubscription", "context: ReactiveControllerHost", "callback: () => void", "callback: (message: string) => void", "callback: (value: any) => void", "callback: () => ActionOnLostSubscription | void", "callback: (event: FluxSubscriptionStateChangeEvent) => void", "toBeRemoved: string[]", "_a", "prefix: string", "atmosphereOptions: Partial<Atmosphere.Request>", "#socket", "atmosphere", "#handleMessage", "#resubscribeIfWasClosed", "#sendPendingMessages", "state: FluxSubscriptionState", "message: unknown", "message: ServerMessage", "#pendingMessages", "_a", "response: Response", "errorJson: ConnectExceptionData | null", "obj: Record<string, unknown>", "prop: unknown", "path: string", "options: ConnectClientOptions", "#fluxConnection", "endpoint: string", "method: string", "params?: Record<string, unknown>", "init?: EndpointRequestInit", "headers: Record<string, string>", "initialContext: MiddlewareContext", "context: MiddlewareContext", "next: MiddlewareNext", "value: any", "init", "error: unknown", "params?: any"]
}

{
  "version": 3,
  "sources": ["../../ol/src/style/Image.js", "../../ol/src/colorlike.js", "../../ol/src/render/canvas.js", "../../ol/src/style/RegularShape.js", "../../ol/src/style/Circle.js", "../../ol/src/style/Style.js"],
  "sourcesContent": ["/**\r\n * @module ol/style/Image\r\n */\r\nimport {abstract} from '../util.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} opacity Opacity.\r\n * @property {boolean} rotateWithView If the image should get rotated with the view.\r\n * @property {number} rotation Rotation.\r\n * @property {number|import(\"../size.js\").Size} scale Scale.\r\n * @property {Array<number>} displacement Displacement.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A base class used for creating subclasses and not instantiated in\r\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\r\n * {@link module:ol/style/RegularShape~RegularShape}.\r\n * @abstract\r\n * @api\r\n */\r\nclass ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = options.opacity;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.displacement_ = options.displacement;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {ImageStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new ImageStyle({\r\n      opacity: this.getOpacity(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer opacity.\r\n   * @return {number} Opacity.\r\n   * @api\r\n   */\r\n  getOpacity() {\r\n    return this.opacity_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the symbolizer rotates with the map.\r\n   * @return {boolean} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the symoblizer rotation.\r\n   * @return {number} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale.\r\n   * @return {number|import(\"../size.js\").Size} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the displacement of the shape\r\n   * @return {Array<number>} Shape's center displacement\r\n   * @api\r\n   */\r\n  getDisplacement() {\r\n    return this.displacement_;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Anchor.\r\n   */\r\n  getAnchor() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image element for the symbolizer.\r\n   * @abstract\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\r\n   */\r\n  getImage(pixelRatio) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Origin.\r\n   */\r\n  getOrigin() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Set the displacement.\r\n   *\r\n   * @param {Array<number>} displacement Displacement.\r\n   * @api\r\n   */\r\n  setDisplacement(displacement) {\r\n    this.displacement_ = displacement;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity.\r\n   *\r\n   * @param {number} opacity Opacity.\r\n   * @api\r\n   */\r\n  setOpacity(opacity) {\r\n    this.opacity_ = opacity;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the style with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    abstract();\r\n  }\r\n}\r\n\r\nexport default ImageStyle;\r\n", "/**\r\n * @module ol/colorlike\r\n */\r\nimport {toString} from './color.js';\r\n\r\n/**\r\n * A type accepted by CanvasRenderingContext2D.fillStyle\r\n * or CanvasRenderingContext2D.strokeStyle.\r\n * Represents a color, pattern, or gradient. The origin for patterns and\r\n * gradients as fill style is an increment of 512 css pixels from map coordinate\r\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\r\n * must be a factor of two (2, 4, 8, ..., 512).\r\n *\r\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\r\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\r\n * @api\r\n */\r\nexport function asColorLike(color) {\r\n  if (Array.isArray(color)) {\r\n    return toString(color);\r\n  } else {\r\n    return color;\r\n  }\r\n}\r\n", "/**\r\n * @module ol/render/canvas\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport EventTarget from '../events/Target.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\r\nimport {clear} from '../obj.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getFontParameters} from '../css.js';\r\n\r\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\r\n\r\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {string} [textAlign] TextAlign.\r\n * @property {string} textBaseline TextBaseline.\r\n * @property {string} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\r\n\r\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFont = '10px sans-serif';\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultFillStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\r\nexport const defaultLineCap = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultLineDash = [];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineDashOffset = 0;\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\r\nexport const defaultLineJoin = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultMiterLimit = 10;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultStrokeStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultTextAlign = 'center';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultTextBaseline = 'middle';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultPadding = [0, 0, 0, 0];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineWidth = 1;\r\n\r\n/**\r\n * @type {BaseObject}\r\n */\r\nexport const checkedFonts = new BaseObject();\r\n\r\n/**\r\n * The label cache for text rendering. To change the default cache size of 2048\r\n * entries, use {@link module:ol/structs/LRUCache~LRUCache#setSize cache.setSize()}.\r\n * Deprecated - there is no label cache any more.\r\n * @type {?}\r\n * @api\r\n * @deprecated\r\n */\r\nexport const labelCache = new EventTarget();\r\nlabelCache.setSize = function () {\r\n  console.warn('labelCache is deprecated.'); //eslint-disable-line\r\n};\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet measureContext = null;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet measureFont;\r\n\r\n/**\r\n * @type {!Object<string, number>}\r\n */\r\nexport const textHeights = {};\r\n\r\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\r\nexport const registerFont = (function () {\r\n  const retries = 100;\r\n  const size = '32px ';\r\n  const referenceFonts = ['monospace', 'serif'];\r\n  const len = referenceFonts.length;\r\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\r\n  let interval, referenceWidth;\r\n\r\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\r\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\r\n    let available = true;\r\n    for (let i = 0; i < len; ++i) {\r\n      const referenceFont = referenceFonts[i];\r\n      referenceWidth = measureTextWidth(\r\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\r\n        text\r\n      );\r\n      if (fontFamily != referenceFont) {\r\n        const width = measureTextWidth(\r\n          fontStyle +\r\n            ' ' +\r\n            fontWeight +\r\n            ' ' +\r\n            size +\r\n            fontFamily +\r\n            ',' +\r\n            referenceFont,\r\n          text\r\n        );\r\n        // If width and referenceWidth are the same, then the fallback was used\r\n        // instead of the font we wanted, so the font is not available.\r\n        available = available && width != referenceWidth;\r\n      }\r\n    }\r\n    if (available) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function check() {\r\n    let done = true;\r\n    const fonts = checkedFonts.getKeys();\r\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\r\n      const font = fonts[i];\r\n      if (checkedFonts.get(font) < retries) {\r\n        if (isAvailable.apply(this, font.split('\\n'))) {\r\n          clear(textHeights);\r\n          // Make sure that loaded fonts are picked up by Safari\r\n          measureContext = null;\r\n          measureFont = undefined;\r\n          checkedFonts.set(font, retries);\r\n        } else {\r\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\r\n          done = false;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      clearInterval(interval);\r\n      interval = undefined;\r\n    }\r\n  }\r\n\r\n  return function (fontSpec) {\r\n    const font = getFontParameters(fontSpec);\r\n    if (!font) {\r\n      return;\r\n    }\r\n    const families = font.families;\r\n    for (let i = 0, ii = families.length; i < ii; ++i) {\r\n      const family = families[i];\r\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\r\n      if (checkedFonts.get(key) === undefined) {\r\n        checkedFonts.set(key, retries, true);\r\n        if (!isAvailable(font.style, font.weight, family)) {\r\n          checkedFonts.set(key, 0, true);\r\n          if (interval === undefined) {\r\n            interval = setInterval(check, 32);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\r\nexport const measureTextHeight = (function () {\r\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\r\n  let measureElement;\r\n  return function (fontSpec) {\r\n    let height = textHeights[fontSpec];\r\n    if (height == undefined) {\r\n      if (WORKER_OFFSCREEN_CANVAS) {\r\n        const font = getFontParameters(fontSpec);\r\n        const metrics = measureText(fontSpec, 'Žg');\r\n        const lineHeight = isNaN(Number(font.lineHeight))\r\n          ? 1.2\r\n          : Number(font.lineHeight);\r\n        height =\r\n          lineHeight *\r\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\r\n      } else {\r\n        if (!measureElement) {\r\n          measureElement = document.createElement('div');\r\n          measureElement.innerHTML = 'M';\r\n          measureElement.style.minHeight = '0';\r\n          measureElement.style.maxHeight = 'none';\r\n          measureElement.style.height = 'auto';\r\n          measureElement.style.padding = '0';\r\n          measureElement.style.border = 'none';\r\n          measureElement.style.position = 'absolute';\r\n          measureElement.style.display = 'block';\r\n          measureElement.style.left = '-99999px';\r\n        }\r\n        measureElement.style.font = fontSpec;\r\n        document.body.appendChild(measureElement);\r\n        height = measureElement.offsetHeight;\r\n        document.body.removeChild(measureElement);\r\n      }\r\n      textHeights[fontSpec] = height;\r\n    }\r\n    return height;\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\r\nfunction measureText(font, text) {\r\n  if (!measureContext) {\r\n    measureContext = createCanvasContext2D(1, 1);\r\n  }\r\n  if (font != measureFont) {\r\n    measureContext.font = font;\r\n    measureFont = measureContext.font;\r\n  }\r\n  return measureContext.measureText(text);\r\n}\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\r\nexport function measureTextWidth(font, text) {\r\n  return measureText(font, text).width;\r\n}\r\n\r\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\r\nexport function measureAndCacheTextWidth(font, text, cache) {\r\n  if (text in cache) {\r\n    return cache[text];\r\n  }\r\n  const width = measureTextWidth(font, text);\r\n  cache[text] = width;\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\r\nexport function getTextDimensions(baseStyle, chunks) {\r\n  const widths = [];\r\n  const heights = [];\r\n  const lineWidths = [];\r\n  let width = 0;\r\n  let lineWidth = 0;\r\n  let height = 0;\r\n  let lineHeight = 0;\r\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\r\n    const text = chunks[i];\r\n    if (text === '\\n' || i === ii) {\r\n      width = Math.max(width, lineWidth);\r\n      lineWidths.push(lineWidth);\r\n      lineWidth = 0;\r\n      height += lineHeight;\r\n      continue;\r\n    }\r\n    const font = chunks[i + 1] || baseStyle.font;\r\n    const currentWidth = measureTextWidth(font, text);\r\n    widths.push(currentWidth);\r\n    lineWidth += currentWidth;\r\n    const currentHeight = measureTextHeight(font);\r\n    heights.push(currentHeight);\r\n    lineHeight = Math.max(lineHeight, currentHeight);\r\n  }\r\n  return {width, height, widths, heights, lineWidths};\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\r\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\r\n  if (rotation !== 0) {\r\n    context.translate(offsetX, offsetY);\r\n    context.rotate(rotation);\r\n    context.translate(-offsetX, -offsetY);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\r\nexport function drawImageOrLabel(\r\n  context,\r\n  transform,\r\n  opacity,\r\n  labelOrImage,\r\n  originX,\r\n  originY,\r\n  w,\r\n  h,\r\n  x,\r\n  y,\r\n  scale\r\n) {\r\n  context.save();\r\n\r\n  if (opacity !== 1) {\r\n    context.globalAlpha *= opacity;\r\n  }\r\n  if (transform) {\r\n    context.setTransform.apply(context, transform);\r\n  }\r\n\r\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\r\n    // label\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\r\n  } else if (scale[0] < 0 || scale[1] < 0) {\r\n    // flipped image\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      0,\r\n      0,\r\n      w,\r\n      h\r\n    );\r\n  } else {\r\n    // if image not flipped translate and scale can be avoided\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      x,\r\n      y,\r\n      w * scale[0],\r\n      h * scale[1]\r\n    );\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nfunction executeLabelInstructions(label, context) {\r\n  const contextInstructions = label.contextInstructions;\r\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\r\n    if (Array.isArray(contextInstructions[i + 1])) {\r\n      context[contextInstructions[i]].apply(\r\n        context,\r\n        contextInstructions[i + 1]\r\n      );\r\n    } else {\r\n      context[contextInstructions[i]] = contextInstructions[i + 1];\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @module ol/style/RegularShape\r\n */\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {asColorLike} from '../colorlike.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../render/canvas.js';\r\n\r\n/**\r\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {number} [radius] Radius of a regular polygon.\r\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\r\n * @property {number} [radius2] Second radius of a star.\r\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\r\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderOptions\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {number} strokeWidth StrokeWidth.\r\n * @property {number} size Size.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} miterLimit MiterLimit.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set regular shape style for vector features. The resulting shape will be\r\n * a regular polygon when `radius` is provided, or a star when `radius1` and\r\n * `radius2` are provided.\r\n * @api\r\n */\r\nclass RegularShape extends ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: 1,\r\n      rotateWithView: rotateWithView,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvas_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.hitDetectionCanvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.points_ = options.points;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.radius_ =\r\n      options.radius !== undefined ? options.radius : options.radius1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.radius2_ = options.radius2;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderOptions}\r\n     */\r\n    this.renderOptions_ = null;\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {RegularShape} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new RegularShape({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      points: this.getPoints(),\r\n      radius: this.getRadius(),\r\n      radius2: this.getRadius2(),\r\n      angle: this.getAngle(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      displacement: this.getDisplacement().slice(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   */\r\n  getAnchor() {\r\n    const size = this.size_;\r\n    if (!size) {\r\n      return null;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\r\n  }\r\n\r\n  /**\r\n   * Get the angle used in generating the shape.\r\n   * @return {number} Shape's rotation in radians.\r\n   * @api\r\n   */\r\n  getAngle() {\r\n    return this.angle_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the shape.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.createHitDetectionCanvas_(this.renderOptions_);\r\n    }\r\n    return this.hitDetectionCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   */\r\n  getImage(pixelRatio) {\r\n    let image = this.canvas_[pixelRatio];\r\n    if (!image) {\r\n      const renderOptions = this.renderOptions_;\r\n      const context = createCanvasContext2D(\r\n        renderOptions.size * pixelRatio,\r\n        renderOptions.size * pixelRatio\r\n      );\r\n      this.draw_(renderOptions, context, pixelRatio);\r\n\r\n      image = context.canvas;\r\n      this.canvas_[pixelRatio] = image;\r\n    }\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return ImageState.LOADED;\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   */\r\n  getOrigin() {\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the number of points for generating the shape.\r\n   * @return {number} Number of points for stars and regular polygons.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    return this.points_;\r\n  }\r\n\r\n  /**\r\n   * Get the (primary) radius for the shape.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */\r\n  getRadius() {\r\n    return this.radius_;\r\n  }\r\n\r\n  /**\r\n   * Get the secondary radius for the shape.\r\n   * @return {number|undefined} Radius2.\r\n   * @api\r\n   */\r\n  getRadius2() {\r\n    return this.radius2_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the shape.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {}\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {}\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {}\r\n\r\n  /**\r\n   * Calculate additional canvas size needed for the miter.\r\n   * @param {string} lineJoin Line join\r\n   * @param {number} strokeWidth Stroke width\r\n   * @param {number} miterLimit Miter limit\r\n   * @return {number} Additional canvas size needed\r\n   * @private\r\n   */\r\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\r\n    if (\r\n      strokeWidth === 0 ||\r\n      this.points_ === Infinity ||\r\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\r\n    ) {\r\n      return strokeWidth;\r\n    }\r\n    // m  | ^\r\n    // i  | |\\                  .\r\n    // t >|  #\\\r\n    // e  | |\\ \\              .\r\n    // r      \\s\\\r\n    //      |  \\t\\          .                 .\r\n    //          \\r\\                      .   .\r\n    //      |    \\o\\      .          .  . . .\r\n    //          e \\k\\            .  .    . .\r\n    //      |      \\e\\  .    .  .       . .\r\n    //       d      \\ \\  .  .          . .\r\n    //      | _ _a_ _\\#  .            . .\r\n    //   r1          / `             . .\r\n    //      |                       . .\r\n    //       b     /               . .\r\n    //      |                     . .\r\n    //           / r2            . .\r\n    //      |                        .   .\r\n    //         /                           .   .\r\n    //      |α                                   .   .\r\n    //       /                                         .   .\r\n    //      ° center\r\n    let r1 = this.radius_;\r\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\r\n    if (r1 < r2) {\r\n      const tmp = r1;\r\n      r1 = r2;\r\n      r2 = tmp;\r\n    }\r\n    const points =\r\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\r\n    const alpha = (2 * Math.PI) / points;\r\n    const a = r2 * Math.sin(alpha);\r\n    const b = Math.sqrt(r2 * r2 - a * a);\r\n    const d = r1 - b;\r\n    const e = Math.sqrt(a * a + d * d);\r\n    const miterRatio = e / a;\r\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\r\n      return miterRatio * strokeWidth;\r\n    }\r\n    // Calculate the distnce from center to the stroke corner where\r\n    // it was cut short because of the miter limit.\r\n    //              l\r\n    //        ----+---- <= distance from center to here is maxr\r\n    //       /####|k ##\\\r\n    //      /#####^#####\\\r\n    //     /#### /+\\# s #\\\r\n    //    /### h/+++\\# t #\\\r\n    //   /### t/+++++\\# r #\\\r\n    //  /### a/+++++++\\# o #\\\r\n    // /### p/++ fill +\\# k #\\\r\n    ///#### /+++++^+++++\\# e #\\\r\n    //#####/+++++/+\\+++++\\#####\\\r\n    const k = strokeWidth / 2 / miterRatio;\r\n    const l = (strokeWidth / 2) * (d / e);\r\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\r\n    const bevelAdd = maxr - r1;\r\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\r\n      return bevelAdd * 2;\r\n    }\r\n    // If outer miter is over the miter limit the inner miter may reach through the\r\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\r\n    const aa = r1 * Math.sin(alpha);\r\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\r\n    const dd = r2 - bb;\r\n    const ee = Math.sqrt(aa * aa + dd * dd);\r\n    const innerMiterRatio = ee / aa;\r\n    if (innerMiterRatio <= miterLimit) {\r\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\r\n      return 2 * Math.max(bevelAdd, innerLength);\r\n    }\r\n    return bevelAdd * 2;\r\n  }\r\n\r\n  /**\r\n   * @return {RenderOptions}  The render options\r\n   * @protected\r\n   */\r\n  createRenderOptions() {\r\n    let lineJoin = defaultLineJoin;\r\n    let miterLimit = 0;\r\n    let lineDash = null;\r\n    let lineDashOffset = 0;\r\n    let strokeStyle;\r\n    let strokeWidth = 0;\r\n\r\n    if (this.stroke_) {\r\n      strokeStyle = this.stroke_.getColor();\r\n      if (strokeStyle === null) {\r\n        strokeStyle = defaultStrokeStyle;\r\n      }\r\n      strokeStyle = asColorLike(strokeStyle);\r\n      strokeWidth = this.stroke_.getWidth();\r\n      if (strokeWidth === undefined) {\r\n        strokeWidth = defaultLineWidth;\r\n      }\r\n      lineDash = this.stroke_.getLineDash();\r\n      lineDashOffset = this.stroke_.getLineDashOffset();\r\n      lineJoin = this.stroke_.getLineJoin();\r\n      if (lineJoin === undefined) {\r\n        lineJoin = defaultLineJoin;\r\n      }\r\n      miterLimit = this.stroke_.getMiterLimit();\r\n      if (miterLimit === undefined) {\r\n        miterLimit = defaultMiterLimit;\r\n      }\r\n    }\r\n\r\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\r\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\r\n    const size = Math.ceil(2 * maxRadius + add);\r\n\r\n    return {\r\n      strokeStyle: strokeStyle,\r\n      strokeWidth: strokeWidth,\r\n      size: size,\r\n      lineDash: lineDash,\r\n      lineDashOffset: lineDashOffset,\r\n      lineJoin: lineJoin,\r\n      miterLimit: miterLimit,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  render() {\r\n    this.renderOptions_ = this.createRenderOptions();\r\n    const size = this.renderOptions_.size;\r\n    this.canvas_ = {};\r\n    this.size_ = [size, size];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The rendering context.\r\n   * @param {number} pixelRatio The pixel ratio.\r\n   */\r\n  draw_(renderOptions, context, pixelRatio) {\r\n    context.scale(pixelRatio, pixelRatio);\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n      if (color === null) {\r\n        color = defaultFillStyle;\r\n      }\r\n      context.fillStyle = asColorLike(color);\r\n      context.fill();\r\n    }\r\n    if (this.stroke_) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (context.setLineDash && renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   */\r\n  createHitDetectionCanvas_(renderOptions) {\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n\r\n      // determine if fill is transparent (or pattern or gradient)\r\n      let opacity = 0;\r\n      if (typeof color === 'string') {\r\n        color = asArray(color);\r\n      }\r\n      if (color === null) {\r\n        opacity = 1;\r\n      } else if (Array.isArray(color)) {\r\n        opacity = color.length === 4 ? color[3] : 1;\r\n      }\r\n      if (opacity === 0) {\r\n        // if a transparent fill style is set, create an extra hit-detection image\r\n        // with a default fill style\r\n        const context = createCanvasContext2D(\r\n          renderOptions.size,\r\n          renderOptions.size\r\n        );\r\n        this.hitDetectionCanvas_ = context.canvas;\r\n\r\n        this.drawHitDetectionCanvas_(renderOptions, context);\r\n      }\r\n    }\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.hitDetectionCanvas_ = this.getImage(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context The context to draw in.\r\n   */\r\n  createPath_(context) {\r\n    let points = this.points_;\r\n    const radius = this.radius_;\r\n    if (points === Infinity) {\r\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\r\n    } else {\r\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\r\n      if (this.radius2_ !== undefined) {\r\n        points *= 2;\r\n      }\r\n      const startAngle = this.angle_ - Math.PI / 2;\r\n      const step = (2 * Math.PI) / points;\r\n      for (let i = 0; i < points; i++) {\r\n        const angle0 = startAngle + i * step;\r\n        const radiusC = i % 2 === 0 ? radius : radius2;\r\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\r\n      }\r\n      context.closePath();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The context.\r\n   */\r\n  drawHitDetectionCanvas_(renderOptions, context) {\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    context.fillStyle = defaultFillStyle;\r\n    context.fill();\r\n    if (this.stroke_) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nexport default RegularShape;\r\n", "/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from './RegularShape.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {Options} [opt_options] Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      stroke: options.stroke,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.radius_ = radius;\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default CircleStyle;\r\n", "/**\r\n * @module ol/style/Style\r\n */\r\n\r\nimport CircleStyle from './Circle.js';\r\nimport Fill from './Fill.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport Stroke from './Stroke.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\r\n\r\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\r\n\r\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\r\n * RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import GeometryType from 'ol/geom/GeometryType';\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles[GeometryType.POLYGON] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\r\n *\r\n *  styles[GeometryType.LINE_STRING] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\r\n *\r\n *  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\r\n *    styles[GeometryType.LINE_STRING]\r\n *  );\r\n *\r\n *  styles[GeometryType.POINT] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\r\n *\r\n *  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\r\n *    GeometryType.POLYGON\r\n *  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Style {\r\n  /**\r\n   * @param {Options} [opt_options] Style options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\r\n    this.geometryFunction_ = defaultGeometryFunction;\r\n\r\n    if (options.geometry !== undefined) {\r\n      this.setGeometry(options.geometry);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default}\r\n     */\r\n    this.image_ = options.image !== undefined ? options.image : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.hitDetectionRenderer_ =\r\n      options.hitDetectionRenderer !== undefined\r\n        ? options.hitDetectionRenderer\r\n        : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default}\r\n     */\r\n    this.text_ = options.text !== undefined ? options.text : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zIndex_ = options.zIndex;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let geometry = this.getGeometry();\r\n    if (geometry && typeof geometry === 'object') {\r\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        geometry\r\n      ).clone();\r\n    }\r\n    return new Style({\r\n      geometry: geometry,\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      image: this.getImage() ? this.getImage().clone() : undefined,\r\n      renderer: this.getRenderer(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      text: this.getText() ? this.getText().clone() : undefined,\r\n      zIndex: this.getZIndex(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setRenderer(renderer) {\r\n    this.renderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setHitDetectionRenderer(renderer) {\r\n    this.hitDetectionRenderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getHitDetectionRenderer() {\r\n    return this.hitDetectionRenderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n\r\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\r\n  getGeometryFunction() {\r\n    return this.geometryFunction_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default} Image style.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default} Text style.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return this.zIndex_;\r\n  }\r\n\r\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\r\n  setGeometry(geometry) {\r\n    if (typeof geometry === 'function') {\r\n      this.geometryFunction_ = geometry;\r\n    } else if (typeof geometry === 'string') {\r\n      this.geometryFunction_ = function (feature) {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n          feature.get(geometry)\r\n        );\r\n      };\r\n    } else if (!geometry) {\r\n      this.geometryFunction_ = defaultGeometryFunction;\r\n    } else if (geometry !== undefined) {\r\n      this.geometryFunction_ = function () {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\r\n      };\r\n    }\r\n    this.geometry_ = geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\r\n  setZIndex(zIndex) {\r\n    this.zIndex_ = zIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\r\nexport function toFunction(obj) {\r\n  let styleFunction;\r\n\r\n  if (typeof obj === 'function') {\r\n    styleFunction = obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\r\n      const style = /** @type {Style} */ (obj);\r\n      styles = [style];\r\n    }\r\n    styleFunction = function () {\r\n      return styles;\r\n    };\r\n  }\r\n  return styleFunction;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet defaultStyles = null;\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\r\nexport function createDefaultStyle(feature, resolution) {\r\n  // We don't use an immediately-invoked function\r\n  // and a closure so we don't get an error at script evaluation time in\r\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\r\n  // canvas.getContext('2d') at construction time, which will cause an.error\r\n  // in such browsers.)\r\n  if (!defaultStyles) {\r\n    const fill = new Fill({\r\n      color: 'rgba(255,255,255,0.4)',\r\n    });\r\n    const stroke = new Stroke({\r\n      color: '#3399CC',\r\n      width: 1.25,\r\n    });\r\n    defaultStyles = [\r\n      new Style({\r\n        image: new CircleStyle({\r\n          fill: fill,\r\n          stroke: stroke,\r\n          radius: 5,\r\n        }),\r\n        fill: fill,\r\n        stroke: stroke,\r\n      }),\r\n    ];\r\n  }\r\n  return defaultStyles;\r\n}\r\n\r\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\r\n */\r\nexport function createEditingStyle() {\r\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\r\n  const styles = {};\r\n  const white = [255, 255, 255, 1];\r\n  const blue = [0, 153, 255, 1];\r\n  const width = 3;\r\n  styles[GeometryType.POLYGON] = [\r\n    new Style({\r\n      fill: new Fill({\r\n        color: [255, 255, 255, 0.5],\r\n      }),\r\n    }),\r\n  ];\r\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\r\n\r\n  styles[GeometryType.LINE_STRING] = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: white,\r\n        width: width + 2,\r\n      }),\r\n    }),\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: blue,\r\n        width: width,\r\n      }),\r\n    }),\r\n  ];\r\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\r\n\r\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\r\n    styles[GeometryType.LINE_STRING]\r\n  );\r\n\r\n  styles[GeometryType.POINT] = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: width * 2,\r\n        fill: new Fill({\r\n          color: blue,\r\n        }),\r\n        stroke: new Stroke({\r\n          color: white,\r\n          width: width / 2,\r\n        }),\r\n      }),\r\n      zIndex: Infinity,\r\n    }),\r\n  ];\r\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\r\n\r\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\r\n    GeometryType.POLYGON\r\n  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\r\nfunction defaultGeometryFunction(feature) {\r\n  return feature.getGeometry();\r\n}\r\n\r\nexport default Style;\r\n"],
  "mappings": "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",
  "names": ["ImageStyle", "RegularShape", "__extends", "CircleStyle", "Style"]
}

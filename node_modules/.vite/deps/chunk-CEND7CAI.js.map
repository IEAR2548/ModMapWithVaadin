{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-tree-column-mixin.js", "../../@vaadin/grid/src/vaadin-grid-tree-column.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { get } from '@vaadin/component-base/src/path-utils.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const GridTreeColumnMixin = (superClass) =>\r\n  class extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * JS Path of the property in the item used as text content for the tree toggle.\r\n         */\r\n        path: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, _cells.*, path)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.__boundOnExpandedChanged = this.__onExpandedChanged.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the grid tree toggle to the body cell\r\n     *\r\n     * @private\r\n     */\r\n    __defaultRenderer(root, _column, { item, expanded, level }) {\r\n      let toggle = root.firstElementChild;\r\n      if (!toggle) {\r\n        toggle = document.createElement('vaadin-grid-tree-toggle');\r\n        toggle.addEventListener('expanded-changed', this.__boundOnExpandedChanged);\r\n        root.appendChild(toggle);\r\n      }\r\n\r\n      toggle.__item = item;\r\n      toggle.__rendererExpanded = expanded;\r\n      toggle.expanded = expanded;\r\n      toggle.leaf = this.__isLeafItem(item, this._grid.itemHasChildrenPath);\r\n      toggle.textContent = this.__getToggleContent(this.path, item);\r\n      toggle.level = level;\r\n    }\r\n\r\n    /**\r\n     * The tree column doesn't allow to use a custom renderer\r\n     * to override the content of body cells.\r\n     * It always renders the grid tree toggle to body cells.\r\n     *\r\n     * @override\r\n     */\r\n    _computeRenderer() {\r\n      return this.__defaultRenderer;\r\n    }\r\n\r\n    /**\r\n     * Expands or collapses the row once the tree toggle is switched.\r\n     * The listener handles only user-fired events.\r\n     *\r\n     * @private\r\n     */\r\n    __onExpandedChanged(e) {\r\n      // Skip if the state is changed by the renderer.\r\n      if (e.detail.value === e.target.__rendererExpanded) {\r\n        return;\r\n      }\r\n\r\n      if (e.detail.value) {\r\n        this._grid.expandItem(e.target.__item);\r\n      } else {\r\n        this._grid.collapseItem(e.target.__item);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __isLeafItem(item, itemHasChildrenPath) {\r\n      return !item || !item[itemHasChildrenPath];\r\n    }\r\n\r\n    /** @private */\r\n    __getToggleContent(path, item) {\r\n      return path && get(path, item);\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-grid-tree-toggle.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { GridColumn } from './vaadin-grid-column.js';\r\nimport { GridTreeColumnMixin } from './vaadin-grid-tree-column-mixin.js';\r\n\r\n/**\r\n * `<vaadin-grid-tree-column>` is a helper element for the `<vaadin-grid>`\r\n * that provides default renderer and functionality for toggling tree/hierarchical items.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <vaadin-grid items=\"[[items]]\">\r\n *  <vaadin-grid-tree-column path=\"name.first\"></vaadin-grid-tree-column>\r\n *\r\n *  <vaadin-grid-column>\r\n *    ...\r\n * ```\r\n * @customElement\r\n * @extends GridColumn\r\n * @mixes GridTreeColumnMixin\r\n */\r\nclass GridTreeColumn extends GridTreeColumnMixin(GridColumn) {\r\n  static get is() {\r\n    return 'vaadin-grid-tree-column';\r\n  }\r\n}\r\n\r\ndefineCustomElement(GridTreeColumn);\r\n\r\nexport { GridTreeColumn };\r\n"],
  "mappings": ";;;;;;;;;;;AAUO,IAAM,sBAAsB,CAAC,eAClC,cAAc,WAAW;AAAA,EACvB,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO,CAAC,oFAAoF;AAAA,EAC9F;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,2BAA2B,KAAK,oBAAoB,KAAK,IAAI;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,MAAM,SAAS,EAAE,MAAM,UAAU,MAAM,GAAG;AAC1D,QAAI,SAAS,KAAK;AAClB,QAAI,CAAC,QAAQ;AACX,eAAS,SAAS,cAAc,yBAAyB;AACzD,aAAO,iBAAiB,oBAAoB,KAAK,wBAAwB;AACzE,WAAK,YAAY,MAAM;AAAA,IACzB;AAEA,WAAO,SAAS;AAChB,WAAO,qBAAqB;AAC5B,WAAO,WAAW;AAClB,WAAO,OAAO,KAAK,aAAa,MAAM,KAAK,MAAM,mBAAmB;AACpE,WAAO,cAAc,KAAK,mBAAmB,KAAK,MAAM,IAAI;AAC5D,WAAO,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB;AACjB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoB,GAAG;AAErB,QAAI,EAAE,OAAO,UAAU,EAAE,OAAO,oBAAoB;AAClD;AAAA,IACF;AAEA,QAAI,EAAE,OAAO,OAAO;AAClB,WAAK,MAAM,WAAW,EAAE,OAAO,MAAM;AAAA,IACvC,OAAO;AACL,WAAK,MAAM,aAAa,EAAE,OAAO,MAAM;AAAA,IACzC;AAAA,EACF;AAAA;AAAA,EAGA,aAAa,MAAM,qBAAqB;AACtC,WAAO,CAAC,QAAQ,CAAC,KAAK,mBAAmB;AAAA,EAC3C;AAAA;AAAA,EAGA,mBAAmB,MAAM,MAAM;AAC7B,WAAO,QAAQ,IAAI,MAAM,IAAI;AAAA,EAC/B;AACF;;;ACpEF,IAAM,iBAAN,cAA6B,oBAAoB,UAAU,EAAE;AAAA,EAC3D,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AACF;AAEA,oBAAoB,cAAc;",
  "names": []
}

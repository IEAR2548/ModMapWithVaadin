import {
  DashboardItemMixin,
  SYNCHRONIZED_ATTRIBUTES,
  WRAPPER_LOCAL_NAME,
  getDefaultI18n
} from "./chunk-WPHCJXZC.js";
import {
  PolylitMixin
} from "./chunk-2XOX65VI.js";
import "./chunk-U4OQEY5H.js";
import "./chunk-D4YSSUXC.js";
import "./chunk-UVDGD6M6.js";
import "./chunk-W2UZPIBV.js";
import "./chunk-6UYCWOWN.js";
import "./chunk-IMJTZNS3.js";
import "./chunk-TNTYFQYJ.js";
import "./chunk-KMJME6UN.js";
import "./chunk-2OEODMLR.js";
import "./chunk-JN3IROFX.js";
import "./chunk-FIRGGFKS.js";
import "./chunk-4SWSK3CD.js";
import "./chunk-HXO5X6HG.js";
import "./chunk-MY27H5BQ.js";
import {
  ElementMixin
} from "./chunk-QN4QZSZG.js";
import "./chunk-RQAC3AN6.js";
import "./chunk-HTUMVTZR.js";
import "./chunk-CU6AK3MF.js";
import "./chunk-7TDF2HKG.js";
import "./chunk-CCS6CDM7.js";
import "./chunk-XINNUJWD.js";
import "./chunk-WOH7SGKZ.js";
import "./chunk-E33ETZLW.js";
import "./chunk-CXDC5LNX.js";
import "./chunk-ARCEVOS6.js";
import "./chunk-JOZKWWH6.js";
import "./chunk-BJXKYFZQ.js";
import "./chunk-JJ5PH6RA.js";
import "./chunk-3DUAHG2W.js";
import {
  ThemableMixin
} from "./chunk-KEWLZU7R.js";
import "./chunk-QBLL3FQM.js";
import {
  defineCustomElement
} from "./chunk-AQ7DMXX6.js";
import "./chunk-MTSXO4VS.js";
import "./chunk-KYHIEJIL.js";
import "./chunk-NZOAG24Y.js";
import "./chunk-3URU5I64.js";
import {
  LitElement
} from "./chunk-2VJ6XAW7.js";
import {
  css
} from "./chunk-WFI4KZJ4.js";
import {
  html
} from "./chunk-4QYCOPDF.js";
import "./chunk-DWA4UIM3.js";

// node_modules/@vaadin/dashboard/src/vaadin-dashboard-widget.js
var DashboardWidget = class extends DashboardItemMixin(ElementMixin(ThemableMixin(PolylitMixin(LitElement)))) {
  static get is() {
    return "vaadin-dashboard-widget";
  }
  static get experimental() {
    return "dashboardComponent";
  }
  static get styles() {
    return [
      css`
        :host {
          display: flex;
          flex-direction: column;
          grid-column: var(--_vaadin-dashboard-item-column);
          grid-row: var(--_vaadin-dashboard-item-row);
          position: relative;
        }

        :host([hidden]) {
          display: none !important;
        }

        :host(:not([editable])) [part~='resize-button'] {
          display: none;
        }

        [part~='content'] {
          flex: 1;
          overflow: hidden;
        }

        [part~='resize-button'] {
          position: absolute;
          bottom: 0;
          inset-inline-end: 0;
          z-index: 1;
          overflow: hidden;
        }

        :host([resizing])::after {
          content: '';
          z-index: 2;
          position: absolute;
          top: -1px;
          width: var(--_vaadin-dashboard-widget-resizer-width, 0);
          height: var(--_vaadin-dashboard-widget-resizer-height, 0);
          background: rgba(0, 0, 0, 0.1);
          border-radius: inherit;
        }
      `,
      super.styles
    ];
  }
  static get properties() {
    return {
      /**
       * The object used to localize this component.
       *
       * To change the default localization, replace the entire
       * `i18n` object with a custom one.
       *
       * The object has the following structure and default values:
       * ```
       * {
       *   selectWidget: 'Select widget for editing',
       *   remove: 'Remove',
       *   resize: 'Resize',
       *   resizeApply: 'Apply',
       *   resizeShrinkWidth: 'Shrink width',
       *   resizeGrowWidth: 'Grow width',
       *   resizeShrinkHeight: 'Shrink height',
       *   resizeGrowHeight: 'Grow height',
       *   move: 'Move',
       *   moveApply: 'Apply',
       *   moveForward: 'Move Forward',
       *   moveBackward: 'Move Backward',
       * }
       * ```
       * @private
       */
      __i18n: {
        type: Object,
        value: () => {
          return getDefaultI18n();
        }
      },
      /**
       * The title of the widget.
       *
       * @attr {string} widget-title
       * @type {string | null | undefined}
       */
      widgetTitle: {
        type: String,
        value: "",
        observer: "__onWidgetTitleChanged"
      },
      /* @private */
      __nestedHeadingLevel: {
        type: Boolean,
        value: false
      }
    };
  }
  /** @protected */
  render() {
    return html`
      ${this.__renderMoveControls()} ${this.__renderResizeControls()}

      <div id="focustrap">
        ${this.__renderFocusButton("selectWidget")}

        <header part="header">
          ${this.__renderDragHandle()}
          ${this.__nestedHeadingLevel ? html`<h3 id="title" part="title" .hidden=${!this.widgetTitle}>${this.widgetTitle}</h3>` : html`<h2 id="title" part="title" .hidden=${!this.widgetTitle}>${this.widgetTitle}</h2>`}
          <slot name="header-content"></slot>
          ${this.__renderRemoveButton()}
        </header>

        ${this.__renderResizeHandle()}
      </div>

      <div id="content" part="content">
        <slot></slot>
      </div>
    `;
  }
  /** @protected */
  connectedCallback() {
    super.connectedCallback();
    const wrapper = this.closest(WRAPPER_LOCAL_NAME);
    if (wrapper) {
      SYNCHRONIZED_ATTRIBUTES.forEach((attr) => {
        this.toggleAttribute(attr, !!wrapper[attr]);
      });
      this.__i18n = wrapper.i18n;
    }
    const undefinedAncestor = this.closest("*:not(:defined)");
    if (undefinedAncestor) {
      customElements.whenDefined(undefinedAncestor.localName).then(() => queueMicrotask(() => this.__updateTitle()));
    } else {
      this.__updateTitle();
    }
  }
  /** @protected */
  ready() {
    super.ready();
    if (!this.hasAttribute("role")) {
      this.setAttribute("role", "article");
    }
  }
  /** @private */
  __onWidgetTitleChanged() {
    this.__updateTitle();
  }
  /** @private */
  __updateTitle() {
    const titleLevel = getComputedStyle(this).getPropertyValue("--_vaadin-dashboard-title-level");
    this.__nestedHeadingLevel = titleLevel === "3";
  }
};
defineCustomElement(DashboardWidget);
/*! Bundled license information:

@vaadin/dashboard/src/vaadin-dashboard-widget.js:
  (**
   * @license
   * Copyright (c) 2000 - 2025 Vaadin Ltd.
   *
   * This program is available under Vaadin Commercial License and Service Terms.
   *
   *
   * See https://vaadin.com/commercial-license-and-service-terms for the full
   * license.
   *)
*/
//# sourceMappingURL=@vaadin_dashboard_theme_lumo_vaadin-dashboard-widget__js.js.map

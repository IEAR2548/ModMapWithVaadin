{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/validate-mixin.js", "../../@vaadin/field-base/src/error-controller.js", "../../@vaadin/field-base/src/helper-controller.js", "../../@vaadin/field-base/src/field-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\n\r\n/**\r\n * A mixin to provide required state and validation logic.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const ValidateMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class ValidateMixinClass extends superclass {\r\n      static get properties() {\r\n        return {\r\n          /**\r\n           * Set to true when the field is invalid.\r\n           */\r\n          invalid: {\r\n            type: Boolean,\r\n            reflectToAttribute: true,\r\n            notify: true,\r\n            value: false,\r\n            sync: true,\r\n          },\r\n\r\n          /**\r\n           * Set to true to enable manual validation mode. This mode disables automatic\r\n           * constraint validation, allowing you to control the validation process yourself.\r\n           * You can still trigger constraint validation manually with the `validate()` method\r\n           * or use `checkValidity()` to assess the component's validity without affecting\r\n           * the invalid state. In manual validation mode, you can also manipulate\r\n           * the `invalid` property directly through your application logic without conflicts\r\n           * with the component's internal validation.\r\n           *\r\n           * @attr {boolean} manual-validation\r\n           */\r\n          manualValidation: {\r\n            type: Boolean,\r\n            value: false,\r\n          },\r\n\r\n          /**\r\n           * Specifies that the user must fill in a value.\r\n           */\r\n          required: {\r\n            type: Boolean,\r\n            reflectToAttribute: true,\r\n            sync: true,\r\n          },\r\n        };\r\n      }\r\n\r\n      /**\r\n       * Validates the field and sets the `invalid` property based on the result.\r\n       *\r\n       * The method fires a `validated` event with the result of the validation.\r\n       *\r\n       * @return {boolean} True if the value is valid.\r\n       */\r\n      validate() {\r\n        const isValid = this.checkValidity();\r\n        this._setInvalid(!isValid);\r\n        this.dispatchEvent(new CustomEvent('validated', { detail: { valid: isValid } }));\r\n        return isValid;\r\n      }\r\n\r\n      /**\r\n       * Returns true if the field value satisfies all constraints (if any).\r\n       *\r\n       * @return {boolean}\r\n       */\r\n      checkValidity() {\r\n        return !this.required || !!this.value;\r\n      }\r\n\r\n      /**\r\n       * @param {boolean} invalid\r\n       * @protected\r\n       */\r\n      _setInvalid(invalid) {\r\n        if (this._shouldSetInvalid(invalid)) {\r\n          this.invalid = invalid;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Override this method to define whether the given `invalid` state should be set.\r\n       *\r\n       * @param {boolean} _invalid\r\n       * @return {boolean}\r\n       * @protected\r\n       */\r\n      _shouldSetInvalid(_invalid) {\r\n        return true;\r\n      }\r\n\r\n      /** @protected */\r\n      _requestValidation() {\r\n        if (!this.manualValidation) {\r\n          // eslint-disable-next-line no-restricted-syntax\r\n          this.validate();\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Fired whenever the field is validated.\r\n       *\r\n       * @event validated\r\n       * @param {Object} detail\r\n       * @param {boolean} detail.valid the result of the validation.\r\n       */\r\n    },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { announce } from '@vaadin/a11y-base/src/announce.js';\r\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\r\n\r\n/**\r\n * A controller that manages the error message node content.\r\n */\r\nexport class ErrorController extends SlotChildObserveController {\r\n  constructor(host) {\r\n    super(host, 'error-message', 'div');\r\n  }\r\n\r\n  /**\r\n   * Set the error message element text content.\r\n   *\r\n   * @param {string} errorMessage\r\n   */\r\n  setErrorMessage(errorMessage) {\r\n    this.errorMessage = errorMessage;\r\n\r\n    this.updateDefaultNode(this.node);\r\n  }\r\n\r\n  /**\r\n   * Set invalid state for detecting whether to show error message.\r\n   *\r\n   * @param {boolean} invalid\r\n   */\r\n  setInvalid(invalid) {\r\n    this.invalid = invalid;\r\n\r\n    this.updateDefaultNode(this.node);\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotController` to not run\r\n   * initializer on the custom slotted node unnecessarily.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  initAddedNode(node) {\r\n    if (node !== this.defaultNode) {\r\n      // There is no need to run `initNode`.\r\n      this.initCustomNode(node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added default error message.\r\n   *\r\n   * @param {Node} errorNode\r\n   * @protected\r\n   * @override\r\n   */\r\n  initNode(errorNode) {\r\n    this.updateDefaultNode(errorNode);\r\n  }\r\n\r\n  /**\r\n   * Override to initialize the newly added custom error message.\r\n   *\r\n   * @param {Node} errorNode\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(errorNode) {\r\n    // Save the custom error message content on the host.\r\n    if (errorNode.textContent && !this.errorMessage) {\r\n      this.errorMessage = errorNode.textContent.trim();\r\n    }\r\n\r\n    // Notify the host about custom node.\r\n    super.initCustomNode(errorNode);\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to restore the default error message element.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  restoreDefaultNode() {\r\n    this.attachDefaultNode();\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to update the error message text and hidden state.\r\n   *\r\n   * Note: unlike with other controllers, this method is\r\n   * called for both default and custom error message.\r\n   *\r\n   * @param {Node | undefined} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  updateDefaultNode(errorNode) {\r\n    const { errorMessage, invalid } = this;\r\n    const hasError = Boolean(invalid && errorMessage && errorMessage.trim() !== '');\r\n\r\n    if (errorNode) {\r\n      errorNode.textContent = hasError ? errorMessage : '';\r\n      errorNode.hidden = !hasError;\r\n\r\n      if (hasError) {\r\n        // Assertive mode ensures VoiceOver reads\r\n        // the error message on commit with Enter.\r\n        announce(errorMessage, { mode: 'assertive' });\r\n      }\r\n    }\r\n\r\n    // Notify the host after update.\r\n    super.updateDefaultNode(errorNode);\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\r\n\r\n/**\r\n * A controller that manages the helper node content.\r\n */\r\nexport class HelperController extends SlotChildObserveController {\r\n  constructor(host) {\r\n    // Do not provide tag name, as we create helper lazily.\r\n    super(host, 'helper', null);\r\n  }\r\n\r\n  /**\r\n   * Set helper text based on corresponding host property.\r\n   *\r\n   * @param {string} helperText\r\n   */\r\n  setHelperText(helperText) {\r\n    this.helperText = helperText;\r\n\r\n    // Restore the default helper, if needed.\r\n    const helperNode = this.getSlotChild();\r\n    if (!helperNode) {\r\n      this.restoreDefaultNode();\r\n    }\r\n\r\n    // When default helper is used, update it.\r\n    if (this.node === this.defaultNode) {\r\n      this.updateDefaultNode(this.node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to create the default helper element lazily as needed.\r\n   *\r\n   * @param {Node | undefined} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  restoreDefaultNode() {\r\n    const { helperText } = this;\r\n\r\n    // No helper yet, create one.\r\n    if (helperText && helperText.trim() !== '') {\r\n      this.tagName = 'div';\r\n\r\n      const helperNode = this.attachDefaultNode();\r\n\r\n      // Observe the default node.\r\n      this.observeNode(helperNode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `SlotChildObserveController`\r\n   * to update the default helper element text content.\r\n   *\r\n   * @param {Node | undefined} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  updateDefaultNode(node) {\r\n    if (node) {\r\n      node.textContent = this.helperText;\r\n    }\r\n\r\n    // Notify the host after update.\r\n    super.updateDefaultNode(node);\r\n  }\r\n\r\n  /**\r\n   * Override to observe the newly added custom node.\r\n   *\r\n   * @param {Node} node\r\n   * @protected\r\n   * @override\r\n   */\r\n  initCustomNode(node) {\r\n    // Notify the host about a custom slotted helper.\r\n    super.initCustomNode(node);\r\n\r\n    this.observeNode(node);\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { FieldAriaController } from '@vaadin/a11y-base/src/field-aria-controller.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { ErrorController } from './error-controller.js';\r\nimport { HelperController } from './helper-controller.js';\r\nimport { LabelMixin } from './label-mixin.js';\r\nimport { ValidateMixin } from './validate-mixin.js';\r\n\r\n/**\r\n * A mixin to provide common field logic: label, error message and helper text.\r\n *\r\n * @polymerMixin\r\n * @mixes ControllerMixin\r\n * @mixes LabelMixin\r\n * @mixes ValidateMixin\r\n */\r\nexport const FieldMixin = (superclass) =>\r\n  class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * A target element to which ARIA attributes are set.\r\n         * @protected\r\n         */\r\n        ariaTarget: {\r\n          type: Object,\r\n          observer: '_ariaTargetChanged',\r\n        },\r\n\r\n        /**\r\n         * Error to show when the field is invalid.\r\n         *\r\n         * @attr {string} error-message\r\n         */\r\n        errorMessage: {\r\n          type: String,\r\n          observer: '_errorMessageChanged',\r\n        },\r\n\r\n        /**\r\n         * String used for the helper text.\r\n         * @attr {string} helper-text\r\n         */\r\n        helperText: {\r\n          type: String,\r\n          observer: '_helperTextChanged',\r\n        },\r\n\r\n        /**\r\n         * String used to label the component to screen reader users.\r\n         * @attr {string} accessible-name\r\n         */\r\n        accessibleName: {\r\n          type: String,\r\n          observer: '_accessibleNameChanged',\r\n        },\r\n\r\n        /**\r\n         * Id of the element used as label of the component to screen reader users.\r\n         * @attr {string} accessible-name-ref\r\n         */\r\n        accessibleNameRef: {\r\n          type: String,\r\n          observer: '_accessibleNameRefChanged',\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['_invalidChanged(invalid)', '_requiredChanged(required)'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this._fieldAriaController = new FieldAriaController(this);\r\n      this._helperController = new HelperController(this);\r\n      this._errorController = new ErrorController(this);\r\n\r\n      this._errorController.addEventListener('slot-content-changed', (event) => {\r\n        this.toggleAttribute('has-error-message', event.detail.hasContent);\r\n      });\r\n\r\n      this._labelController.addEventListener('slot-content-changed', (event) => {\r\n        const { hasContent, node } = event.detail;\r\n        this.__labelChanged(hasContent, node);\r\n      });\r\n\r\n      this._helperController.addEventListener('slot-content-changed', (event) => {\r\n        const { hasContent, node } = event.detail;\r\n        this.toggleAttribute('has-helper', hasContent);\r\n        this.__helperChanged(hasContent, node);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @return {HTMLElement}\r\n     */\r\n    get _errorNode() {\r\n      return this._errorController.node;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @return {HTMLElement}\r\n     */\r\n    get _helperNode() {\r\n      return this._helperController.node;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(this._fieldAriaController);\r\n      this.addController(this._helperController);\r\n      this.addController(this._errorController);\r\n    }\r\n\r\n    /** @private */\r\n    __helperChanged(hasHelper, helperNode) {\r\n      if (hasHelper) {\r\n        this._fieldAriaController.setHelperId(helperNode.id);\r\n      } else {\r\n        this._fieldAriaController.setHelperId(null);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    _accessibleNameChanged(accessibleName) {\r\n      this._fieldAriaController.setAriaLabel(accessibleName);\r\n    }\r\n\r\n    /** @protected */\r\n    _accessibleNameRefChanged(accessibleNameRef) {\r\n      this._fieldAriaController.setLabelId(accessibleNameRef, true);\r\n    }\r\n\r\n    /** @private */\r\n    __labelChanged(hasLabel, labelNode) {\r\n      // Label ID should be only added when the label content is present.\r\n      // Otherwise, it may conflict with an `aria-label` attribute possibly added by the user.\r\n      if (hasLabel) {\r\n        this._fieldAriaController.setLabelId(labelNode.id);\r\n      } else {\r\n        this._fieldAriaController.setLabelId(null);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string | null | undefined} errorMessage\r\n     * @protected\r\n     */\r\n    _errorMessageChanged(errorMessage) {\r\n      this._errorController.setErrorMessage(errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @param {string} helperText\r\n     * @protected\r\n     */\r\n    _helperTextChanged(helperText) {\r\n      this._helperController.setHelperText(helperText);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement | null | undefined} target\r\n     * @protected\r\n     */\r\n    _ariaTargetChanged(target) {\r\n      if (target) {\r\n        this._fieldAriaController.setTarget(target);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} required\r\n     * @protected\r\n     */\r\n    _requiredChanged(required) {\r\n      this._fieldAriaController.setRequired(required);\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} invalid\r\n     * @protected\r\n     */\r\n    _invalidChanged(invalid) {\r\n      this._errorController.setInvalid(invalid);\r\n\r\n      // This timeout is needed to prevent NVDA from announcing the error message twice:\r\n      // 1. Once adding the `[role=alert]` attribute when updating `has-error-message` (OK).\r\n      // 2. Once linking the error ID with the ARIA target here (unwanted).\r\n      // Related issue: https://github.com/vaadin/web-components/issues/3061.\r\n      setTimeout(() => {\r\n        // Error message ID needs to be dynamically added / removed based on the validity\r\n        // Otherwise assistive technologies would announce the error, even if we hide it.\r\n        if (invalid) {\r\n          const node = this._errorNode;\r\n          this._fieldAriaController.setErrorId(node && node.id);\r\n        } else {\r\n          this._fieldAriaController.setErrorId(null);\r\n        }\r\n      });\r\n    }\r\n  };\r\n"],
  "mappings": "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",
  "names": []
}

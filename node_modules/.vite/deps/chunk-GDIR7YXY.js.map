{
  "version": 3,
  "sources": ["../../@vaadin/context-menu/src/vaadin-contextmenu-event.js", "../../@vaadin/context-menu/src/vaadin-context-menu-item.js", "../../@vaadin/context-menu/src/vaadin-context-menu-list-box.js", "../../@vaadin/context-menu/src/vaadin-context-menu-overlay.js", "../../@vaadin/context-menu/src/vaadin-context-menu.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isKeyboardActive } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { isFirefox, isIOS } from '@vaadin/component-base/src/browser-utils.js';\r\nimport { prevent, register } from '@vaadin/component-base/src/gestures.js';\r\n\r\nregister({\r\n  name: 'vaadin-contextmenu',\r\n  deps: ['touchstart', 'touchmove', 'touchend', 'contextmenu'],\r\n  flow: {\r\n    start: ['touchstart', 'contextmenu'],\r\n    end: ['contextmenu'],\r\n  },\r\n\r\n  emits: ['vaadin-contextmenu'],\r\n\r\n  info: {\r\n    sourceEvent: null,\r\n  },\r\n\r\n  reset() {\r\n    this.info.sourceEvent = null;\r\n    this._cancelTimer();\r\n    this.info.touchJob = null;\r\n    this.info.touchStartCoords = null;\r\n  },\r\n\r\n  _cancelTimer() {\r\n    if (this._timerId) {\r\n      clearTimeout(this._timerId);\r\n      delete this._fired;\r\n    }\r\n  },\r\n\r\n  _setSourceEvent(e) {\r\n    this.info.sourceEvent = e;\r\n\r\n    const path = e.composedPath();\r\n\r\n    // Calling `sourceEvent.composedPath()` after a timeout would return an empty array.\r\n    // This is especially problematic on iOS where we configure the timer on touchstart.\r\n    // Store the composed path to be used by `grid.getEventContext(event)` so it works.\r\n    this.info.sourceEvent.__composedPath = path;\r\n  },\r\n\r\n  touchstart(e) {\r\n    this._setSourceEvent(e);\r\n\r\n    this.info.touchStartCoords = {\r\n      x: e.changedTouches[0].clientX,\r\n      y: e.changedTouches[0].clientY,\r\n    };\r\n\r\n    // After timeout event is already retargeted to the parent element in case there is one.\r\n    // So we are assigning the target synchronously on event dispatched.\r\n    const t = e.composedPath()[0] || e.target;\r\n\r\n    this._timerId = setTimeout(() => {\r\n      const ct = e.changedTouches[0];\r\n      if (!e.shiftKey) {\r\n        if (isIOS) {\r\n          this._fired = true;\r\n          this.fire(t, ct.clientX, ct.clientY);\r\n        }\r\n\r\n        // Needed to prevent any 'tap' gesture events from firing\r\n        // which could potentially cancel/close the overlay.\r\n        prevent('tap');\r\n      }\r\n    }, 500); // Default setting for Android and iOS.\r\n  },\r\n\r\n  touchmove(e) {\r\n    const moveThreshold = 15;\r\n    const touchStartCoords = this.info.touchStartCoords;\r\n    if (\r\n      Math.abs(touchStartCoords.x - e.changedTouches[0].clientX) > moveThreshold ||\r\n      Math.abs(touchStartCoords.y - e.changedTouches[0].clientY) > moveThreshold\r\n    ) {\r\n      this._cancelTimer();\r\n    }\r\n  },\r\n\r\n  touchend(e) {\r\n    if (this._fired) {\r\n      e.preventDefault();\r\n    }\r\n    this._cancelTimer();\r\n  },\r\n\r\n  contextmenu(e) {\r\n    if (!e.shiftKey) {\r\n      this._setSourceEvent(e);\r\n      if (isFirefox && isKeyboardActive()) {\r\n        // When using the context menu key on the keyboard in Windows, Firefox\r\n        // does not always return the correct coordinates for the focused\r\n        // element. Instead, calculate the coordinates manually based on the\r\n        // context menu target. Need to use composed path here as the target for\r\n        // synthetic contextmenu events seems to be the host element.\r\n        // See https://github.com/vaadin/flow-components/issues/7153\r\n        const keyboardTarget = e.composedPath()[0];\r\n        const targetRect = keyboardTarget.getBoundingClientRect();\r\n        this.fire(keyboardTarget, targetRect.left, targetRect.bottom);\r\n      } else {\r\n        // Otherwise use mouse coordinates reported in pointer event\r\n        this.fire(e.target, e.clientX, e.clientY);\r\n      }\r\n      prevent('tap');\r\n    }\r\n  },\r\n\r\n  fire(target, x, y) {\r\n    // NOTE(web-padawan): the code below is copied from `Polymer.Gestures._fire`,\r\n    // which is not exported from `gestures.js` module for Polymer 3.\r\n    const sourceEvent = this.info.sourceEvent;\r\n    const ev = new Event('vaadin-contextmenu', { bubbles: true, cancelable: true, composed: true });\r\n    ev.detail = { x, y, sourceEvent };\r\n    target.dispatchEvent(ev);\r\n    // Forward `preventDefault` in a clean way\r\n    if (ev.defaultPrevented && sourceEvent && sourceEvent.preventDefault) {\r\n      sourceEvent.preventDefault();\r\n    }\r\n  },\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { ItemMixin } from '@vaadin/item/src/vaadin-item-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-context-menu>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes DirMixin\r\n * @mixes ItemMixin\r\n * @mixes ThemableMixin\r\n * @protected\r\n */\r\nclass ContextMenuItem extends ItemMixin(ThemableMixin(DirMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-context-menu-item';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: inline-block;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n      <span part=\"checkmark\" aria-hidden=\"true\"></span>\r\n      <div part=\"content\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.setAttribute('role', 'menuitem');\r\n  }\r\n}\r\n\r\ndefineCustomElement(ContextMenuItem);\r\n\r\nexport { ContextMenuItem };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ListMixin } from '@vaadin/a11y-base/src/list-mixin.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-context-menu>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ControllerMixin\r\n * @mixes DirMixin\r\n * @mixes ListMixin\r\n * @mixes ThemableMixin\r\n * @protected\r\n */\r\nclass ContextMenuListBox extends ListMixin(ThemableMixin(DirMixin(ControllerMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-context-menu-list-box';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: flex;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n\r\n        [part='items'] {\r\n          height: 100%;\r\n          width: 100%;\r\n          overflow-y: auto;\r\n          -webkit-overflow-scrolling: touch;\r\n        }\r\n      </style>\r\n      <div part=\"items\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      // We don't need to define this property since super default is vertical,\r\n      // but we don't want it to be modified, or be shown in the API docs.\r\n      /** @private */\r\n      orientation: {\r\n        readOnly: true,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @return {!HTMLElement}\r\n   * @protected\r\n   * @override\r\n   */\r\n  get _scrollerElement() {\r\n    return this.shadowRoot.querySelector('[part=\"items\"]');\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.setAttribute('role', 'menu');\r\n  }\r\n}\r\n\r\ndefineCustomElement(ContextMenuListBox);\r\n\r\nexport { ContextMenuListBox };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { OverlayMixin } from '@vaadin/overlay/src/vaadin-overlay-mixin.js';\r\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { MenuOverlayMixin } from './vaadin-menu-overlay-mixin.js';\r\nimport { styles } from './vaadin-menu-overlay-styles.js';\r\n\r\nregisterStyles('vaadin-context-menu-overlay', [overlayStyles, styles], {\r\n  moduleId: 'vaadin-context-menu-overlay-styles',\r\n});\r\n\r\n/**\r\n * An element used internally by `<vaadin-context-menu>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes DirMixin\r\n * @mixes MenuOverlayMixin\r\n * @mixes OverlayMixin\r\n * @mixes ThemableMixin\r\n * @protected\r\n */\r\nexport class ContextMenuOverlay extends MenuOverlayMixin(OverlayMixin(DirMixin(ThemableMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-context-menu-overlay';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div id=\"backdrop\" part=\"backdrop\" hidden$=\"[[!withBackdrop]]\"></div>\r\n      <div part=\"overlay\" id=\"overlay\" tabindex=\"0\">\r\n        <div part=\"content\" id=\"content\">\r\n          <slot></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(ContextMenuOverlay);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-contextmenu-event.js';\r\nimport './vaadin-context-menu-item.js';\r\nimport './vaadin-context-menu-list-box.js';\r\nimport './vaadin-context-menu-overlay.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\r\nimport { ContextMenuMixin } from './vaadin-context-menu-mixin.js';\r\n\r\n/**\r\n * `<vaadin-context-menu>` is a Web Component for creating context menus.\r\n *\r\n * ### Items\r\n *\r\n * Items is a higher level convenience API for defining a (hierarchical) menu structure for the component.\r\n * If a menu item has a non-empty `children` set, a sub-menu with the child items is opened\r\n * next to the parent menu on mouseover, tap or a right arrow keypress.\r\n *\r\n * When an item is selected, `<vaadin-context-menu>` dispatches an \"item-selected\" event\r\n * with the selected item as `event.detail.value` property.\r\n * If item does not have `keepOpen` property the menu will be closed.\r\n *\r\n * ```javascript\r\n * contextMenu.items = [\r\n *   { text: 'Menu Item 1', theme: 'primary', className: 'first', children:\r\n *     [\r\n *       { text: 'Menu Item 1-1', checked: true, keepOpen: true },\r\n *       { text: 'Menu Item 1-2' }\r\n *     ]\r\n *   },\r\n *   { component: 'hr' },\r\n *   { text: 'Menu Item 2', children:\r\n *     [\r\n *       { text: 'Menu Item 2-1' },\r\n *       { text: 'Menu Item 2-2', disabled: true }\r\n *     ]\r\n *   },\r\n *   { text: 'Menu Item 3', disabled: true, className: 'last' }\r\n * ];\r\n *\r\n * contextMenu.addEventListener('item-selected', e => {\r\n *   const item = e.detail.value;\r\n *   console.log(`${item.text} selected`);\r\n * });\r\n * ```\r\n *\r\n * **NOTE:** when the `items` array is defined, the renderer cannot be used.\r\n *\r\n * ### Rendering\r\n *\r\n * The content of the menu can be populated by using the renderer callback function.\r\n *\r\n * The renderer function provides `root`, `contextMenu`, `model` arguments when applicable.\r\n * Generate DOM content by using `model` object properties if needed, append it to the `root`\r\n * element and control the state of the host element by accessing `contextMenu`. Before generating\r\n * new content, the renderer function should check if there is already content in `root` for reusing it.\r\n *\r\n * ```html\r\n * <vaadin-context-menu id=\"contextMenu\">\r\n *  <p>This paragraph has a context menu.</p>\r\n * </vaadin-context-menu>\r\n * ```\r\n * ```js\r\n * const contextMenu = document.querySelector('#contextMenu');\r\n * contextMenu.renderer = (root, contextMenu, context) => {\r\n *   let listBox = root.firstElementChild;\r\n *   if (!listBox) {\r\n *     listBox = document.createElement('vaadin-list-box');\r\n *     root.appendChild(listBox);\r\n *   }\r\n *\r\n *   let item = listBox.querySelector('vaadin-item');\r\n *   if (!item) {\r\n *     item = document.createElement('vaadin-item');\r\n *     listBox.appendChild(item);\r\n *   }\r\n *   item.textContent = 'Content of the selector: ' + context.target.textContent;\r\n * };\r\n * ```\r\n *\r\n * You can access the menu context inside the renderer using\r\n * `context.target` and `context.detail`.\r\n *\r\n * Renderer is called on the opening of the context-menu and each time the related context is updated.\r\n * DOM generated during the renderer call can be reused\r\n * in the next renderer call and will be provided with the `root` argument.\r\n * On first call it will be empty.\r\n *\r\n * ### `vaadin-contextmenu` Gesture Event\r\n *\r\n * `vaadin-contextmenu` is a gesture event (a custom event),\r\n * which is dispatched after either `contextmenu` or long touch events.\r\n * This enables support for both mouse and touch environments in a uniform way.\r\n *\r\n * `<vaadin-context-menu>` opens the menu overlay on the `vaadin-contextmenu`\r\n * event by default.\r\n *\r\n * ### Menu Listener\r\n *\r\n * By default, the `<vaadin-context-menu>` element listens for the menu opening\r\n * event on itself. In case if you do not want to wrap the target, you can listen for\r\n * events on an element outside the `<vaadin-context-menu>` by setting the\r\n * `listenOn` property:\r\n *\r\n * ```html\r\n * <vaadin-context-menu id=\"contextMenu\"></vaadin-context-menu>\r\n *\r\n * <div id=\"menuListener\">The element that listens for the contextmenu event.</div>\r\n * ```\r\n * ```javascript\r\n * const contextMenu = document.querySelector('#contextMenu');\r\n * contextMenu.listenOn = document.querySelector('#menuListener');\r\n * ```\r\n *\r\n * ### Filtering Menu Targets\r\n *\r\n * By default, the listener element and all its descendants open the context\r\n * menu. You can filter the menu targets to a smaller set of elements inside\r\n * the listener element by setting the `selector` property.\r\n *\r\n * In the following example, only the elements matching `.has-menu` will open the context menu:\r\n *\r\n * ```html\r\n * <vaadin-context-menu selector=\".has-menu\">\r\n *   <p class=\"has-menu\">This paragraph opens the context menu</p>\r\n *   <p>This paragraph does not open the context menu</p>\r\n * </vaadin-context-menu>\r\n * ```\r\n *\r\n * ### Menu Context\r\n *\r\n * The following properties are available in the `context` argument:\r\n *\r\n * - `target` is the menu opening event target, which is the element that\r\n * the user has called the context menu for\r\n * - `detail` is the menu opening event detail\r\n *\r\n * In the following example, the menu item text is composed with the contents\r\n * of the element that opened the menu:\r\n *\r\n * ```html\r\n * <vaadin-context-menu selector=\"li\" id=\"contextMenu\">\r\n *   <ul>\r\n *     <li>Foo</li>\r\n *     <li>Bar</li>\r\n *     <li>Baz</li>\r\n *   </ul>\r\n * </vaadin-context-menu>\r\n * ```\r\n * ```js\r\n * const contextMenu = document.querySelector('#contextMenu');\r\n * contextMenu.renderer = (root, contextMenu, context) => {\r\n *   let listBox = root.firstElementChild;\r\n *   if (!listBox) {\r\n *     listBox = document.createElement('vaadin-list-box');\r\n *     root.appendChild(listBox);\r\n *   }\r\n *\r\n *   let item = listBox.querySelector('vaadin-item');\r\n *   if (!item) {\r\n *     item = document.createElement('vaadin-item');\r\n *     listBox.appendChild(item);\r\n *   }\r\n *   item.textContent = 'The menu target: ' + context.target.textContent;\r\n * };\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * `<vaadin-context-menu>` uses `<vaadin-context-menu-overlay>` internal\r\n * themable component as the actual visible context menu overlay.\r\n *\r\n * See [`<vaadin-overlay>`](#/elements/vaadin-overlay)\r\n * documentation for `<vaadin-context-menu-overlay>` stylable parts.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * ### Internal components\r\n *\r\n * When using `items` API, in addition `<vaadin-context-menu-overlay>`, the following\r\n * internal components are themable:\r\n *\r\n * - `<vaadin-context-menu-item>` - has the same API as [`<vaadin-item>`](#/elements/vaadin-item).\r\n * - `<vaadin-context-menu-list-box>` - has the same API as [`<vaadin-list-box>`](#/elements/vaadin-list-box).\r\n *\r\n * The `<vaadin-context-menu-item>` sub-menu elements have the following additional state attributes\r\n * on top of the built-in `<vaadin-item>` state attributes:\r\n *\r\n * Attribute  | Description\r\n * ---------- |-------------\r\n * `expanded` | Expanded parent item.\r\n *\r\n * Note: the `theme` attribute value set on `<vaadin-context-menu>` is\r\n * propagated to the internal components listed above.\r\n *\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n * @fires {CustomEvent} item-selected - Fired when an item is selected when the context menu is populated using the `items` API.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes ContextMenuMixin\r\n * @mixes ControllerMixin\r\n * @mixes OverlayClassMixin\r\n * @mixes ThemePropertyMixin\r\n */\r\nclass ContextMenu extends ContextMenuMixin(\r\n  OverlayClassMixin(ControllerMixin(ElementMixin(ThemePropertyMixin(PolymerElement)))),\r\n) {\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        :host([hidden]) {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n\r\n      <slot id=\"slot\"></slot>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-context-menu';\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    processTemplates(this);\r\n  }\r\n\r\n  /**\r\n   * @param {DocumentFragment} dom\r\n   * @return {null}\r\n   * @protected\r\n   * @override\r\n   */\r\n  _attachDom(dom) {\r\n    const root = this.attachShadow({ mode: 'open' });\r\n    root.appendChild(dom);\r\n    root.appendChild(this._overlayElement);\r\n    return root;\r\n  }\r\n\r\n  /**\r\n   * Fired when an item is selected when the context menu is populated using the `items` API.\r\n   *\r\n   * @event item-selected\r\n   * @param {Object} detail\r\n   * @param {Object} detail.value the selected menu item\r\n   */\r\n}\r\n\r\ndefineCustomElement(ContextMenu);\r\nexport { ContextMenu };\r\n"],
  "mappings": "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",
  "names": []
}

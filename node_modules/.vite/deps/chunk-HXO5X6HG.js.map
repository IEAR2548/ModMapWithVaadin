{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/slot-observer.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2023 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * A helper for observing slot changes.\r\n */\r\nexport class SlotObserver {\r\n  constructor(slot, callback) {\r\n    /** @type HTMLSlotElement */\r\n    this.slot = slot;\r\n\r\n    /** @type Function */\r\n    this.callback = callback;\r\n\r\n    /** @type {Node[]} */\r\n    this._storedNodes = [];\r\n\r\n    this._connected = false;\r\n    this._scheduled = false;\r\n\r\n    this._boundSchedule = () => {\r\n      this._schedule();\r\n    };\r\n\r\n    this.connect();\r\n    this._schedule();\r\n  }\r\n\r\n  /**\r\n   * Activates an observer. This method is automatically called when\r\n   * a `SlotObserver` is created. It should only be called to  re-activate\r\n   * an observer that has been deactivated via the `disconnect` method.\r\n   */\r\n  connect() {\r\n    this.slot.addEventListener('slotchange', this._boundSchedule);\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Deactivates the observer. After calling this method the observer callback\r\n   * will not be called when changes to slotted nodes occur. The `connect` method\r\n   * may be subsequently called to reactivate the observer.\r\n   */\r\n  disconnect() {\r\n    this.slot.removeEventListener('slotchange', this._boundSchedule);\r\n    this._connected = false;\r\n  }\r\n\r\n  /** @private */\r\n  _schedule() {\r\n    if (!this._scheduled) {\r\n      this._scheduled = true;\r\n\r\n      queueMicrotask(() => {\r\n        this.flush();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run the observer callback synchronously.\r\n   */\r\n  flush() {\r\n    if (!this._connected) {\r\n      return;\r\n    }\r\n\r\n    this._scheduled = false;\r\n\r\n    this._processNodes();\r\n  }\r\n\r\n  /** @private */\r\n  _processNodes() {\r\n    const currentNodes = this.slot.assignedNodes({ flatten: true });\r\n\r\n    let addedNodes = [];\r\n    const removedNodes = [];\r\n    const movedNodes = [];\r\n\r\n    if (currentNodes.length) {\r\n      addedNodes = currentNodes.filter((node) => !this._storedNodes.includes(node));\r\n    }\r\n\r\n    if (this._storedNodes.length) {\r\n      this._storedNodes.forEach((node, index) => {\r\n        const idx = currentNodes.indexOf(node);\r\n        if (idx === -1) {\r\n          removedNodes.push(node);\r\n        } else if (idx !== index) {\r\n          movedNodes.push(node);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (addedNodes.length || removedNodes.length || movedNodes.length) {\r\n      this.callback({ addedNodes, currentNodes, movedNodes, removedNodes });\r\n    }\r\n\r\n    this._storedNodes = currentNodes;\r\n  }\r\n}\r\n"],
  "mappings": ";AASO,IAAM,eAAN,MAAmB;AAAA,EACxB,YAAY,MAAM,UAAU;AAE1B,SAAK,OAAO;AAGZ,SAAK,WAAW;AAGhB,SAAK,eAAe,CAAC;AAErB,SAAK,aAAa;AAClB,SAAK,aAAa;AAElB,SAAK,iBAAiB,MAAM;AAC1B,WAAK,UAAU;AAAA,IACjB;AAEA,SAAK,QAAQ;AACb,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AACR,SAAK,KAAK,iBAAiB,cAAc,KAAK,cAAc;AAC5D,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa;AACX,SAAK,KAAK,oBAAoB,cAAc,KAAK,cAAc;AAC/D,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA,EAGA,YAAY;AACV,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa;AAElB,qBAAe,MAAM;AACnB,aAAK,MAAM;AAAA,MACb,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AAEA,SAAK,aAAa;AAElB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA,EAGA,gBAAgB;AACd,UAAM,eAAe,KAAK,KAAK,cAAc,EAAE,SAAS,KAAK,CAAC;AAE9D,QAAI,aAAa,CAAC;AAClB,UAAM,eAAe,CAAC;AACtB,UAAM,aAAa,CAAC;AAEpB,QAAI,aAAa,QAAQ;AACvB,mBAAa,aAAa,OAAO,CAAC,SAAS,CAAC,KAAK,aAAa,SAAS,IAAI,CAAC;AAAA,IAC9E;AAEA,QAAI,KAAK,aAAa,QAAQ;AAC5B,WAAK,aAAa,QAAQ,CAAC,MAAM,UAAU;AACzC,cAAM,MAAM,aAAa,QAAQ,IAAI;AACrC,YAAI,QAAQ,IAAI;AACd,uBAAa,KAAK,IAAI;AAAA,QACxB,WAAW,QAAQ,OAAO;AACxB,qBAAW,KAAK,IAAI;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,WAAW,UAAU,aAAa,UAAU,WAAW,QAAQ;AACjE,WAAK,SAAS,EAAE,YAAY,cAAc,YAAY,aAAa,CAAC;AAAA,IACtE;AAEA,SAAK,eAAe;AAAA,EACtB;AACF;",
  "names": []
}

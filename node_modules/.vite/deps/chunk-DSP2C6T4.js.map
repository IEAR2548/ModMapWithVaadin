{
  "version": 3,
  "sources": ["../../@vaadin/confirm-dialog/theme/lumo/vaadin-confirm-dialog-styles.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-base-mixin.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay-styles.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-mixin.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport { dialogOverlay } from '@vaadin/dialog/theme/lumo/vaadin-dialog-styles.js';\r\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-confirm-dialog-overlay',\r\n  [\r\n    overlay,\r\n    dialogOverlay,\r\n    css`\r\n      [part='header'] ::slotted(h3) {\r\n        margin-top: 0 !important;\r\n        margin-bottom: 0 !important;\r\n        margin-inline-start: calc(var(--lumo-space-l) - var(--lumo-space-m));\r\n      }\r\n\r\n      [part='message'] {\r\n        width: 25em;\r\n        min-width: 100%;\r\n        max-width: 100%;\r\n      }\r\n\r\n      ::slotted([slot$='button'][theme~='tertiary']) {\r\n        padding-left: var(--lumo-space-s);\r\n        padding-right: var(--lumo-space-s);\r\n      }\r\n\r\n      [part='cancel-button'] {\r\n        flex-grow: 1;\r\n      }\r\n\r\n      @media (max-width: 360px) {\r\n        [part='footer'] {\r\n          flex-direction: column-reverse;\r\n          align-items: stretch;\r\n          padding: var(--lumo-space-s) var(--lumo-space-l);\r\n          gap: var(--lumo-space-s);\r\n        }\r\n\r\n        ::slotted([slot$='button']) {\r\n          width: 100%;\r\n          margin: 0;\r\n        }\r\n      }\r\n    `,\r\n  ],\r\n  { moduleId: 'lumo-confirm-dialog-overlay' },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ConfirmDialogBaseMixin = (superClass) =>\r\n  class ConfirmDialogBaseMixinClass extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Set the `aria-label` attribute for assistive technologies like\r\n         * screen readers. An empty string value for this property (the\r\n         * default) means that the `aria-label` attribute is not present.\r\n         */\r\n        ariaLabel: {\r\n          type: String,\r\n          value: '',\r\n        },\r\n\r\n        /**\r\n         * Height to be set on the overlay content.\r\n         */\r\n        contentHeight: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * Width to be set on the overlay content.\r\n         */\r\n        contentWidth: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__updateContentHeight(contentHeight, _overlayElement)',\r\n        '__updateContentWidth(contentWidth, _overlayElement)',\r\n      ];\r\n    }\r\n\r\n    /** @private */\r\n    __updateDimension(overlay, dimension, value) {\r\n      const prop = `--_vaadin-confirm-dialog-content-${dimension}`;\r\n\r\n      if (value) {\r\n        overlay.style.setProperty(prop, value);\r\n      } else {\r\n        overlay.style.removeProperty(prop);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateContentHeight(height, overlay) {\r\n      if (overlay) {\r\n        this.__updateDimension(overlay, 'height', height);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateContentWidth(width, overlay) {\r\n      if (overlay) {\r\n        this.__updateDimension(overlay, 'width', width);\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const confirmDialogOverlay = css`\r\n  :host {\r\n    --_vaadin-confirm-dialog-content-width: auto;\r\n    --_vaadin-confirm-dialog-content-height: auto;\r\n  }\r\n\r\n  [part='overlay'] {\r\n    width: var(--_vaadin-confirm-dialog-content-width);\r\n    height: var(--_vaadin-confirm-dialog-content-height);\r\n  }\r\n\r\n  #resizerContainer {\r\n    height: 100%;\r\n  }\r\n\r\n  ::slotted([slot='header']) {\r\n    pointer-events: auto;\r\n  }\r\n\r\n  /* Make buttons clickable */\r\n  [part='footer'] > * {\r\n    pointer-events: all;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\r\nimport { DialogBaseMixin } from '@vaadin/dialog/src/vaadin-dialog-base-mixin.js';\r\nimport { dialogOverlay } from '@vaadin/dialog/src/vaadin-dialog-styles.js';\r\nimport { OverlayMixin } from '@vaadin/overlay/src/vaadin-overlay-mixin.js';\r\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\r\nimport { ConfirmDialogBaseMixin } from './vaadin-confirm-dialog-base-mixin.js';\r\nimport { confirmDialogOverlay } from './vaadin-confirm-dialog-overlay-styles.js';\r\n\r\nregisterStyles('vaadin-confirm-dialog-overlay', [overlayStyles, dialogOverlay, confirmDialogOverlay], {\r\n  moduleId: 'vaadin-confirm-dialog-overlay-styles',\r\n});\r\n\r\n/**\r\n * An element used internally by `<vaadin-confirm-dialog>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes DirMixin\r\n * @mixes OverlayMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nclass ConfirmDialogOverlay extends OverlayMixin(DirMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-confirm-dialog-overlay';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div part=\"backdrop\" id=\"backdrop\" hidden$=\"[[!withBackdrop]]\"></div>\r\n      <div part=\"overlay\" id=\"overlay\" tabindex=\"0\">\r\n        <section id=\"resizerContainer\" class=\"resizer-container\">\r\n          <header part=\"header\"><slot name=\"header\"></slot></header>\r\n          <div part=\"content\" id=\"content\">\r\n            <div part=\"message\"><slot></slot></div>\r\n          </div>\r\n          <footer part=\"footer\" role=\"toolbar\">\r\n            <div part=\"cancel-button\">\r\n              <slot name=\"cancel-button\"></slot>\r\n            </div>\r\n            <div part=\"reject-button\">\r\n              <slot name=\"reject-button\"></slot>\r\n            </div>\r\n            <div part=\"confirm-button\">\r\n              <slot name=\"confirm-button\"></slot>\r\n            </div>\r\n          </footer>\r\n        </section>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @override\r\n   */\r\n  ready() {\r\n    super.ready();\r\n\r\n    // ConfirmDialog has header and footer but does not use renderers\r\n    this.setAttribute('has-header', '');\r\n    this.setAttribute('has-footer', '');\r\n  }\r\n}\r\n\r\ndefineCustomElement(ConfirmDialogOverlay);\r\n\r\n/**\r\n * An element used internally by `<vaadin-confirm-dialog>`. Not intended to be used separately.\r\n * @private\r\n */\r\nclass ConfirmDialogDialog extends ConfirmDialogBaseMixin(\r\n  DialogBaseMixin(OverlayClassMixin(ThemePropertyMixin(PolymerElement))),\r\n) {\r\n  static get is() {\r\n    return 'vaadin-confirm-dialog-dialog';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: none;\r\n        }\r\n      </style>\r\n\r\n      <vaadin-confirm-dialog-overlay\r\n        id=\"overlay\"\r\n        opened=\"[[opened]]\"\r\n        on-opened-changed=\"_onOverlayOpened\"\r\n        on-mousedown=\"_bringOverlayToFront\"\r\n        on-touchstart=\"_bringOverlayToFront\"\r\n        theme$=\"[[_theme]]\"\r\n        modeless=\"[[modeless]]\"\r\n        with-backdrop=\"[[!modeless]]\"\r\n        resizable$=\"[[resizable]]\"\r\n        aria-label$=\"[[ariaLabel]]\"\r\n        restore-focus-on-close\r\n        focus-trap\r\n      ></vaadin-confirm-dialog-overlay>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(ConfirmDialogDialog);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { setAriaIDReference } from '@vaadin/a11y-base/src/aria-id-reference.js';\r\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\r\nimport { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';\r\n\r\n/**\r\n * @polymerMixin\r\n */\r\nexport const ConfirmDialogMixin = (superClass) =>\r\n  class ConfirmDialogMixinClass extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Sets the `aria-describedby` attribute of the overlay element.\r\n         *\r\n         * By default, all elements inside the message area are linked\r\n         * through the `aria-describedby` attribute. However, there are\r\n         * cases where this can confuse screen reader users (e.g. the dialog\r\n         * may present a password confirmation form). For these cases,\r\n         * it's better to associate only the elements that will help describe\r\n         * the confirmation dialog through this API.\r\n         */\r\n        accessibleDescriptionRef: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * True if the overlay is currently displayed.\r\n         * @type {boolean}\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          value: false,\r\n          notify: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Set the confirmation dialog title.\r\n         * @type {string}\r\n         */\r\n        header: {\r\n          type: String,\r\n          value: '',\r\n        },\r\n\r\n        /**\r\n         * Set the message or confirmation question.\r\n         */\r\n        message: {\r\n          type: String,\r\n          value: '',\r\n        },\r\n\r\n        /**\r\n         * Text displayed on confirm-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} confirm-text\r\n         * @type {string}\r\n         */\r\n        confirmText: {\r\n          type: String,\r\n          value: 'Confirm',\r\n        },\r\n\r\n        /**\r\n         * Theme for a confirm-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} confirm-theme\r\n         * @type {string}\r\n         */\r\n        confirmTheme: {\r\n          type: String,\r\n          value: 'primary',\r\n        },\r\n\r\n        /**\r\n         * Set to true to disable closing dialog on Escape press\r\n         * @attr {boolean} no-close-on-esc\r\n         * @type {boolean}\r\n         */\r\n        noCloseOnEsc: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * Whether to show reject button or not.\r\n         * @attr {boolean} reject-button-visible\r\n         * @type {boolean}\r\n         */\r\n        rejectButtonVisible: {\r\n          type: Boolean,\r\n          reflectToAttribute: true,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * Text displayed on reject-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} reject-text\r\n         * @type {string}\r\n         */\r\n        rejectText: {\r\n          type: String,\r\n          value: 'Reject',\r\n        },\r\n\r\n        /**\r\n         * Theme for a reject-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} reject-theme\r\n         * @type {string}\r\n         */\r\n        rejectTheme: {\r\n          type: String,\r\n          value: 'error tertiary',\r\n        },\r\n\r\n        /**\r\n         * Whether to show cancel button or not.\r\n         * @attr {boolean} cancel-button-visible\r\n         * @type {boolean}\r\n         */\r\n        cancelButtonVisible: {\r\n          type: Boolean,\r\n          reflectToAttribute: true,\r\n          value: false,\r\n        },\r\n\r\n        /**\r\n         * Text displayed on cancel-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} cancel-text\r\n         * @type {string}\r\n         */\r\n        cancelText: {\r\n          type: String,\r\n          value: 'Cancel',\r\n        },\r\n\r\n        /**\r\n         * Theme for a cancel-button.\r\n         * This only affects the default button, custom slotted buttons will not be altered.\r\n         * @attr {string} cancel-theme\r\n         * @type {string}\r\n         */\r\n        cancelTheme: {\r\n          type: String,\r\n          value: 'tertiary',\r\n        },\r\n\r\n        /**\r\n         * A space-delimited list of CSS class names\r\n         * to set on the underlying overlay element.\r\n         *\r\n         * @attr {string} overlay-class\r\n         */\r\n        overlayClass: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * A reference to the \"Cancel\" button which will be teleported to the overlay.\r\n         * @private\r\n         */\r\n        _cancelButton: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * A reference to the \"Confirm\" button which will be teleported to the overlay.\r\n         * @private\r\n         */\r\n        _confirmButton: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * A reference to the \"header\" node which will be teleported to the overlay.\r\n         * @private\r\n         */\r\n        _headerNode: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * A list of message nodes which will be placed in the overlay default slot.\r\n         * @private\r\n         */\r\n        _messageNodes: {\r\n          type: Array,\r\n          value: () => [],\r\n        },\r\n\r\n        /**\r\n         * A reference to the overlay element.\r\n         * @private\r\n         */\r\n        _overlayElement: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A reference to the \"Reject\" button which will be teleported to the overlay.\r\n         * @private\r\n         */\r\n        _rejectButton: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * Height to be set on the overlay content.\r\n         * @protected\r\n         */\r\n        _contentHeight: {\r\n          type: String,\r\n        },\r\n\r\n        /**\r\n         * Width to be set on the overlay content.\r\n         * @protected\r\n         */\r\n        _contentWidth: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__updateConfirmButton(_confirmButton, confirmText, confirmTheme)',\r\n        '__updateCancelButton(_cancelButton, cancelText, cancelTheme, cancelButtonVisible)',\r\n        '__updateHeaderNode(_headerNode, header)',\r\n        '__updateMessageNodes(_messageNodes, message)',\r\n        '__updateRejectButton(_rejectButton, rejectText, rejectTheme, rejectButtonVisible)',\r\n        '__accessibleDescriptionRefChanged(_overlayElement, _messageNodes, accessibleDescriptionRef)',\r\n      ];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.__cancel = this.__cancel.bind(this);\r\n      this.__confirm = this.__confirm.bind(this);\r\n      this.__reject = this.__reject.bind(this);\r\n    }\r\n\r\n    get __slottedNodes() {\r\n      return [this._headerNode, ...this._messageNodes, this._cancelButton, this._confirmButton, this._rejectButton];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this._headerController = new SlotController(this, 'header', 'h3', {\r\n        initializer: (node) => {\r\n          this._headerNode = node;\r\n        },\r\n      });\r\n      this.addController(this._headerController);\r\n\r\n      this._messageController = new SlotController(this, '', 'div', {\r\n        // Allow providing multiple custom nodes in the default slot\r\n        multiple: true,\r\n        observe: false,\r\n        initializer: (node) => {\r\n          const wrapper = document.createElement('div');\r\n          wrapper.style.display = 'contents';\r\n          const wrapperId = `confirm-dialog-message-${generateUniqueId()}`;\r\n          wrapper.id = wrapperId;\r\n          this.appendChild(wrapper);\r\n          wrapper.appendChild(node);\r\n          this._messageNodes = [...this._messageNodes, wrapper];\r\n        },\r\n      });\r\n      this.addController(this._messageController);\r\n\r\n      // NOTE: order in which buttons are added should match the order of slots in template\r\n      this._cancelController = new SlotController(this, 'cancel-button', 'vaadin-button', {\r\n        initializer: (button) => {\r\n          this.__setupSlottedButton('cancel', button);\r\n        },\r\n      });\r\n      this.addController(this._cancelController);\r\n\r\n      this._rejectController = new SlotController(this, 'reject-button', 'vaadin-button', {\r\n        initializer: (button) => {\r\n          this.__setupSlottedButton('reject', button);\r\n        },\r\n      });\r\n      this.addController(this._rejectController);\r\n\r\n      this._confirmController = new SlotController(this, 'confirm-button', 'vaadin-button', {\r\n        initializer: (button) => {\r\n          this.__setupSlottedButton('confirm', button);\r\n        },\r\n      });\r\n      this.addController(this._confirmController);\r\n\r\n      this._overlayElement = this.$.dialog.$.overlay;\r\n\r\n      this._initOverlay(this._overlayElement);\r\n    }\r\n\r\n    /** @protected */\r\n    _initOverlay(overlay) {\r\n      overlay.addEventListener('vaadin-overlay-escape-press', this._escPressed.bind(this));\r\n      overlay.addEventListener('vaadin-overlay-open', () => this.__onDialogOpened());\r\n      overlay.addEventListener('vaadin-overlay-closed', () => this.__onDialogClosed());\r\n      overlay.setAttribute('role', 'alertdialog');\r\n    }\r\n\r\n    /** @private */\r\n    __onDialogOpened() {\r\n      const overlay = this._overlayElement;\r\n\r\n      // Teleport slotted nodes to the overlay element.\r\n      this.__slottedNodes.forEach((node) => {\r\n        overlay.appendChild(node);\r\n      });\r\n\r\n      const confirmButton = overlay.querySelector('[slot=\"confirm-button\"]');\r\n      if (confirmButton) {\r\n        confirmButton.focus();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onDialogClosed() {\r\n      // Move nodes from the overlay back to the host.\r\n      this.__slottedNodes.forEach((node) => {\r\n        this.appendChild(node);\r\n      });\r\n      this.dispatchEvent(new CustomEvent('closed'));\r\n    }\r\n\r\n    /** @private */\r\n    __accessibleDescriptionRefChanged(overlay, messageNodes, accessibleDescriptionRef) {\r\n      if (!overlay || !messageNodes) {\r\n        return;\r\n      }\r\n\r\n      if (accessibleDescriptionRef !== undefined) {\r\n        setAriaIDReference(overlay, 'aria-describedby', {\r\n          newId: accessibleDescriptionRef,\r\n          oldId: this.__oldAccessibleDescriptionRef,\r\n          fromUser: true,\r\n        });\r\n      } else {\r\n        messageNodes.forEach((node) => {\r\n          setAriaIDReference(overlay, 'aria-describedby', { newId: node.id });\r\n        });\r\n      }\r\n\r\n      this.__oldAccessibleDescriptionRef = accessibleDescriptionRef;\r\n    }\r\n\r\n    /** @private */\r\n    __setupSlottedButton(type, button) {\r\n      const property = `_${type}Button`;\r\n      const listener = `__${type}`;\r\n\r\n      if (this[property] && this[property] !== button) {\r\n        this[property].remove();\r\n      }\r\n\r\n      button.addEventListener('click', this[listener]);\r\n      this[property] = button;\r\n    }\r\n\r\n    /** @private */\r\n    __updateCancelButton(button, cancelText, cancelTheme, showCancel) {\r\n      if (button) {\r\n        if (button === this._cancelController.defaultNode) {\r\n          button.textContent = cancelText;\r\n          button.setAttribute('theme', cancelTheme);\r\n        }\r\n        button.toggleAttribute('hidden', !showCancel);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateConfirmButton(button, confirmText, confirmTheme) {\r\n      if (button && button === this._confirmController.defaultNode) {\r\n        button.textContent = confirmText;\r\n        button.setAttribute('theme', confirmTheme);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateHeaderNode(headerNode, header) {\r\n      // Only update text content for the default header node.\r\n      if (headerNode && headerNode === this._headerController.defaultNode) {\r\n        headerNode.textContent = header;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateMessageNodes(nodes, message) {\r\n      if (nodes && nodes.length > 0) {\r\n        const defaultWrapperNode = nodes.find(\r\n          (node) => this._messageController.defaultNode && node === this._messageController.defaultNode.parentElement,\r\n        );\r\n        if (defaultWrapperNode) {\r\n          defaultWrapperNode.firstChild.textContent = message;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateRejectButton(button, rejectText, rejectTheme, showReject) {\r\n      if (button) {\r\n        if (button === this._rejectController.defaultNode) {\r\n          button.textContent = rejectText;\r\n          button.setAttribute('theme', rejectTheme);\r\n        }\r\n        button.toggleAttribute('hidden', !showReject);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _escPressed(event) {\r\n      if (!event.defaultPrevented) {\r\n        this.__cancel();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __confirm() {\r\n      this.dispatchEvent(new CustomEvent('confirm'));\r\n      this.opened = false;\r\n    }\r\n\r\n    /** @private */\r\n    __cancel() {\r\n      this.dispatchEvent(new CustomEvent('cancel'));\r\n      this.opened = false;\r\n    }\r\n\r\n    /** @private */\r\n    __reject() {\r\n      this.dispatchEvent(new CustomEvent('reject'));\r\n      this.opened = false;\r\n    }\r\n\r\n    /** @private */\r\n    _getAriaLabel(header) {\r\n      return header || 'confirmation';\r\n    }\r\n\r\n    /**\r\n     * Fired when the confirm dialog is closed.\r\n     *\r\n     * @event closed\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/button/src/vaadin-button.js';\r\nimport './vaadin-confirm-dialog-overlay.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\r\nimport { ConfirmDialogMixin } from './vaadin-confirm-dialog-mixin.js';\r\n\r\n/**\r\n * `<vaadin-confirm-dialog>` is a Web Component for showing alerts and asking for user confirmation.\r\n *\r\n * ```\r\n * <vaadin-confirm-dialog cancel-button-visible>\r\n *   There are unsaved changes. Do you really want to leave?\r\n * </vaadin-confirm-dialog>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The `<vaadin-confirm-dialog>` is not themable. Apply styles to `<vaadin-confirm-dialog-overlay>`\r\n * component and use its shadow parts for styling.\r\n * See [`<vaadin-overlay>`](#/elements/vaadin-overlay) for the overlay styling documentation.\r\n *\r\n * In addition to `<vaadin-overlay>` parts, the following parts are available for theming:\r\n *\r\n * Part name        | Description\r\n * -----------------|-------------------------------------------\r\n * `header`         | The header element wrapper\r\n * `message`        | The message element wrapper\r\n * `footer`         | The footer element that wraps the buttons\r\n * `cancel-button`  | The \"Cancel\" button wrapper\r\n * `confirm-button` | The \"Confirm\" button wrapper\r\n * `reject-button`  | The \"Reject\" button wrapper\r\n *\r\n * Use `confirmTheme`, `cancelTheme` and `rejectTheme` properties to customize buttons theme.\r\n * Also, the `theme` attribute value set on `<vaadin-confirm-dialog>` is propagated to the\r\n * `<vaadin-confirm-dialog-overlay>` component.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * ### Custom content\r\n *\r\n * The following slots are available for providing custom content:\r\n *\r\n * Slot name         | Description\r\n * ------------------|---------------------------\r\n * `header`          | Slot for header element\r\n * `cancel-button`   | Slot for \"Cancel\" button\r\n * `confirm-button`  | Slot for \"Confirm\" button\r\n * `reject-button`   | Slot for \"Reject\" button\r\n *\r\n * @fires {Event} confirm - Fired when Confirm button was pressed.\r\n * @fires {Event} cancel - Fired when Cancel button or Escape key was pressed.\r\n * @fires {Event} reject - Fired when Reject button was pressed.\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n * @fires {CustomEvent} closed - Fired when the confirm dialog is closed.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ConfirmDialogMixin\r\n * @mixes ControllerMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemePropertyMixin\r\n */\r\nclass ConfirmDialog extends ConfirmDialogMixin(ElementMixin(ThemePropertyMixin(ControllerMixin(PolymerElement)))) {\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host,\r\n        [hidden] {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n\r\n      <vaadin-confirm-dialog-dialog\r\n        id=\"dialog\"\r\n        opened=\"{{opened}}\"\r\n        overlay-class=\"[[overlayClass]]\"\r\n        aria-label=\"[[_getAriaLabel(header)]]\"\r\n        theme$=\"[[_theme]]\"\r\n        no-close-on-outside-click\r\n        no-close-on-esc=\"[[noCloseOnEsc]]\"\r\n        content-height=\"[[_contentHeight]]\"\r\n        content-width=\"[[_contentWidth]]\"\r\n      ></vaadin-confirm-dialog-dialog>\r\n\r\n      <div hidden>\r\n        <slot name=\"header\"></slot>\r\n        <slot></slot>\r\n        <slot name=\"cancel-button\"></slot>\r\n        <slot name=\"reject-button\"></slot>\r\n        <slot name=\"confirm-button\"></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-confirm-dialog';\r\n  }\r\n\r\n  /**\r\n   * @event confirm\r\n   * fired when Confirm button was pressed.\r\n   */\r\n\r\n  /**\r\n   * @event cancel\r\n   * fired when Cancel button or Escape key was pressed.\r\n   */\r\n\r\n  /**\r\n   * @event reject\r\n   * fired when Reject button was pressed.\r\n   */\r\n}\r\n\r\ndefineCustomElement(ConfirmDialog);\r\n\r\nexport { ConfirmDialog };\r\n"],
  "mappings": "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",
  "names": ["overlay", "dialogOverlay", "overlay"]
}

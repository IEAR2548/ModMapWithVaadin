{
  "version": 3,
  "sources": ["../../is-regexp/index.js", "../../strip-css-comments/index.js"],
  "sourcesContent": ["const {toString} = Object.prototype;\r\n\r\nexport default function isRegexp(value) {\r\n\treturn toString.call(value) === '[object RegExp]';\r\n}\r\n", "import isRegExp from 'is-regexp';\r\n\r\nexport default function stripCssComments(cssString, {preserve = true, whitespace = true, all} = {}) {\r\n\tif (all) {\r\n\t\tthrow new Error('The `all` option is no longer supported. Use the `preserve` option instead.');\r\n\t}\r\n\r\n\tlet preserveImportant = preserve;\r\n\tlet preserveFilter;\r\n\tif (typeof preserve === 'function') {\r\n\t\tpreserveImportant = false;\r\n\t\tpreserveFilter = preserve;\r\n\t} else if (isRegExp(preserve)) {\r\n\t\tpreserveImportant = false;\r\n\t\tpreserveFilter = comment => preserve.test(comment);\r\n\t}\r\n\r\n\tlet isInsideString = false;\r\n\tlet currentCharacter = '';\r\n\tlet comment = '';\r\n\tlet returnValue = '';\r\n\r\n\tfor (let index = 0; index < cssString.length; index++) {\r\n\t\tcurrentCharacter = cssString[index];\r\n\r\n\t\tif (cssString[index - 1] !== '\\\\' && (currentCharacter === '\"' || currentCharacter === '\\'')) {\r\n\t\t\tif (isInsideString === currentCharacter) {\r\n\t\t\t\tisInsideString = false;\r\n\t\t\t} else if (!isInsideString) {\r\n\t\t\t\tisInsideString = currentCharacter;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Find beginning of `/*` type comment\r\n\t\tif (!isInsideString && currentCharacter === '/' && cssString[index + 1] === '*') {\r\n\t\t\t// Ignore important comment when configured to preserve comments using important syntax: /*!\r\n\t\t\tconst isImportantComment = cssString[index + 2] === '!';\r\n\t\t\tlet index2 = index + 2;\r\n\r\n\t\t\t// Iterate over comment\r\n\t\t\tfor (; index2 < cssString.length; index2++) {\r\n\t\t\t\t// Find end of comment\r\n\t\t\t\tif (cssString[index2] === '*' && cssString[index2 + 1] === '/') {\r\n\t\t\t\t\tif ((preserveImportant && isImportantComment) || (preserveFilter && preserveFilter(comment))) {\r\n\t\t\t\t\t\treturnValue += `/*${comment}*/`;\r\n\t\t\t\t\t} else if (!whitespace) {\r\n\t\t\t\t\t\tif (cssString[index2 + 2] === '\\n') {\r\n\t\t\t\t\t\t\tindex2++;\r\n\t\t\t\t\t\t} else if (cssString[index2 + 2] + cssString[index2 + 3] === '\\r\\n') {\r\n\t\t\t\t\t\t\tindex2 += 2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcomment = '';\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Store comment text\r\n\t\t\t\tcomment += cssString[index2];\r\n\t\t\t}\r\n\r\n\t\t\t// Resume iteration over CSS string from the end of the comment\r\n\t\t\tindex = index2 + 1;\r\n\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\treturnValue += currentCharacter;\r\n\t}\r\n\r\n\treturn returnValue;\r\n}\r\n"],
  "mappings": ";;;AAAA,IAAM,EAAC,SAAQ,IAAI,OAAO;AAEX,SAAR,SAA0B,OAAO;AACvC,SAAO,SAAS,KAAK,KAAK,MAAM;AACjC;;;ACFe,SAAR,iBAAkC,WAAW,EAAC,WAAW,MAAM,aAAa,MAAM,IAAG,IAAI,CAAC,GAAG;AACnG,MAAI,KAAK;AACR,UAAM,IAAI,MAAM,6EAA6E;AAAA,EAC9F;AAEA,MAAI,oBAAoB;AACxB,MAAI;AACJ,MAAI,OAAO,aAAa,YAAY;AACnC,wBAAoB;AACpB,qBAAiB;AAAA,EAClB,WAAW,SAAS,QAAQ,GAAG;AAC9B,wBAAoB;AACpB,qBAAiB,CAAAA,aAAW,SAAS,KAAKA,QAAO;AAAA,EAClD;AAEA,MAAI,iBAAiB;AACrB,MAAI,mBAAmB;AACvB,MAAI,UAAU;AACd,MAAI,cAAc;AAElB,WAAS,QAAQ,GAAG,QAAQ,UAAU,QAAQ,SAAS;AACtD,uBAAmB,UAAU,KAAK;AAElC,QAAI,UAAU,QAAQ,CAAC,MAAM,SAAS,qBAAqB,OAAO,qBAAqB,MAAO;AAC7F,UAAI,mBAAmB,kBAAkB;AACxC,yBAAiB;AAAA,MAClB,WAAW,CAAC,gBAAgB;AAC3B,yBAAiB;AAAA,MAClB;AAAA,IACD;AAGA,QAAI,CAAC,kBAAkB,qBAAqB,OAAO,UAAU,QAAQ,CAAC,MAAM,KAAK;AAEhF,YAAM,qBAAqB,UAAU,QAAQ,CAAC,MAAM;AACpD,UAAI,SAAS,QAAQ;AAGrB,aAAO,SAAS,UAAU,QAAQ,UAAU;AAE3C,YAAI,UAAU,MAAM,MAAM,OAAO,UAAU,SAAS,CAAC,MAAM,KAAK;AAC/D,cAAK,qBAAqB,sBAAwB,kBAAkB,eAAe,OAAO,GAAI;AAC7F,2BAAe,KAAK,OAAO;AAAA,UAC5B,WAAW,CAAC,YAAY;AACvB,gBAAI,UAAU,SAAS,CAAC,MAAM,MAAM;AACnC;AAAA,YACD,WAAW,UAAU,SAAS,CAAC,IAAI,UAAU,SAAS,CAAC,MAAM,QAAQ;AACpE,wBAAU;AAAA,YACX;AAAA,UACD;AAEA,oBAAU;AAEV;AAAA,QACD;AAGA,mBAAW,UAAU,MAAM;AAAA,MAC5B;AAGA,cAAQ,SAAS;AAEjB;AAAA,IACD;AAEA,mBAAe;AAAA,EAChB;AAEA,SAAO;AACR;",
  "names": ["comment"]
}

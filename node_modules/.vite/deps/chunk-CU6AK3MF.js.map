{
  "version": 3,
  "sources": ["../../@vaadin/a11y-base/src/keyboard-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\n\r\n/**\r\n * A mixin that manages keyboard handling.\r\n * The mixin subscribes to the keyboard events while an actual implementation\r\n * for the event handlers is left to the client (a component or another mixin).\r\n *\r\n * @polymerMixin\r\n */\r\nexport const KeyboardMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class KeyboardMixinClass extends superclass {\r\n      /** @protected */\r\n      ready() {\r\n        super.ready();\r\n\r\n        this.addEventListener('keydown', (event) => {\r\n          this._onKeyDown(event);\r\n        });\r\n\r\n        this.addEventListener('keyup', (event) => {\r\n          this._onKeyUp(event);\r\n        });\r\n      }\r\n\r\n      /**\r\n       * A handler for the `keydown` event. By default, it calls\r\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\r\n       * Override the method to implement your own behavior.\r\n       *\r\n       * @param {KeyboardEvent} event\r\n       * @protected\r\n       */\r\n      _onKeyDown(event) {\r\n        switch (event.key) {\r\n          case 'Enter':\r\n            this._onEnter(event);\r\n            break;\r\n          case 'Escape':\r\n            this._onEscape(event);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * A handler for the `keyup` event. By default, it does nothing.\r\n       * Override the method to implement your own behavior.\r\n       *\r\n       * @param {KeyboardEvent} _event\r\n       * @protected\r\n       */\r\n      _onKeyUp(_event) {\r\n        // To be implemented.\r\n      }\r\n\r\n      /**\r\n       * A handler for the \"Enter\" key. By default, it does nothing.\r\n       * Override the method to implement your own behavior.\r\n       *\r\n       * @param {KeyboardEvent} _event\r\n       * @protected\r\n       */\r\n      _onEnter(_event) {\r\n        // To be implemented.\r\n      }\r\n\r\n      /**\r\n       * A handler for the \"Escape\" key. By default, it does nothing.\r\n       * Override the method to implement your own behavior.\r\n       *\r\n       * @param {KeyboardEvent} _event\r\n       * @protected\r\n       */\r\n      _onEscape(_event) {\r\n        // To be implemented.\r\n      }\r\n    },\r\n);\r\n"],
  "mappings": ";;;;;AAcO,IAAM,gBAAgB;AAAA,EAC3B,CAAC,eACC,MAAM,2BAA2B,WAAW;AAAA;AAAA,IAE1C,QAAQ;AACN,YAAM,MAAM;AAEZ,WAAK,iBAAiB,WAAW,CAAC,UAAU;AAC1C,aAAK,WAAW,KAAK;AAAA,MACvB,CAAC;AAED,WAAK,iBAAiB,SAAS,CAAC,UAAU;AACxC,aAAK,SAAS,KAAK;AAAA,MACrB,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,WAAW,OAAO;AAChB,cAAQ,MAAM,KAAK;AAAA,QACjB,KAAK;AACH,eAAK,SAAS,KAAK;AACnB;AAAA,QACF,KAAK;AACH,eAAK,UAAU,KAAK;AACpB;AAAA,QACF;AACE;AAAA,MACJ;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,SAAS,QAAQ;AAAA,IAEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,SAAS,QAAQ;AAAA,IAEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,UAAU,QAAQ;AAAA,IAElB;AAAA,EACF;AACJ;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/icon/theme/lumo/vaadin-icon-styles.js", "../../@vaadin/icon/src/vaadin-icon-helpers.js", "../../@vaadin/icon/src/vaadin-icon-font-size-mixin.js", "../../@vaadin/icon/src/vaadin-icon-mixin.js", "../../@vaadin/icon/src/vaadin-icon-styles.js", "../../@vaadin/icon/src/vaadin-icon.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-icon',\r\n  css`\r\n    :host {\r\n      width: var(--lumo-icon-size-m);\r\n      height: var(--lumo-icon-size-m);\r\n    }\r\n  `,\r\n  { moduleId: 'lumo-icon' },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2016 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\nimport { isSafari } from '@vaadin/component-base/src/browser-utils.js';\r\n\r\n/**\r\n * Checks if the current browser supports CSS Container Query units for pseudo elements.\r\n * i.e. if the fix for https://bugs.webkit.org/show_bug.cgi?id=253939 is available.\r\n */\r\nexport function supportsCQUnitsForPseudoElements() {\r\n  const testStyle = document.createElement('style');\r\n  testStyle.textContent = `\r\n    .vaadin-icon-test-element {\r\n      container-type: size;\r\n      height: 2px;\r\n      visibility: hidden;\r\n      position: fixed;\r\n    }\r\n\r\n    .vaadin-icon-test-element::before {\r\n      content: '';\r\n      display: block;\r\n      height: 100cqh;\r\n    `;\r\n  const testElement = document.createElement('div');\r\n  testElement.classList.add('vaadin-icon-test-element');\r\n\r\n  document.body.append(testStyle, testElement);\r\n  const { height } = getComputedStyle(testElement, '::before');\r\n  testStyle.remove();\r\n  testElement.remove();\r\n  return height === '2px';\r\n}\r\n\r\n/**\r\n * Checks if the current browser needs a fallback for sizing font icons instead of relying on CSS Container Queries.\r\n */\r\nexport function needsFontIconSizingFallback() {\r\n  if (!CSS.supports('container-type: inline-size')) {\r\n    // The browser does not support CSS Container Queries at all.\r\n    return true;\r\n  }\r\n  if (!isSafari) {\r\n    // Browsers other than Safari support CSS Container Queries as expected.\r\n    return false;\r\n  }\r\n  // Check if the browser does not support CSS Container Query units for pseudo elements.\r\n  return !supportsCQUnitsForPseudoElements();\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { needsFontIconSizingFallback } from './vaadin-icon-helpers.js';\r\n\r\nconst usesFontIconSizingFallback = needsFontIconSizingFallback();\r\n\r\nif (usesFontIconSizingFallback) {\r\n  registerStyles(\r\n    'vaadin-icon',\r\n    css`\r\n      :host::after,\r\n      :host::before {\r\n        font-size: var(--_vaadin-font-icon-size);\r\n      }\r\n    `,\r\n    'vaadin-icon-font-size-mixin-styles',\r\n  );\r\n}\r\n\r\n/**\r\n * Mixin which enables the font icon sizing fallback for browsers that do not support CSS Container Queries.\r\n * The mixin does nothing if the browser supports CSS Container Query units for pseudo elements.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const IconFontSizeMixin = dedupingMixin((superclass) =>\r\n  !usesFontIconSizingFallback\r\n    ? superclass\r\n    : class extends ResizeMixin(superclass) {\r\n        static get observers() {\r\n          return ['__iconFontSizeMixinfontChanged(iconClass, char, ligature)'];\r\n        }\r\n\r\n        /** @protected */\r\n        ready() {\r\n          super.ready();\r\n\r\n          // Update once initially to avoid a fouc\r\n          this.__updateFontIconSize();\r\n        }\r\n\r\n        /** @private */\r\n        __iconFontSizeMixinfontChanged(_iconClass, _char, _ligature) {\r\n          // Update when iconClass, char or ligature changes\r\n          this.__updateFontIconSize();\r\n        }\r\n\r\n        /**\r\n         * @protected\r\n         * @override\r\n         */\r\n        _onResize() {\r\n          // Update when the element is resized\r\n          this.__updateFontIconSize();\r\n        }\r\n\r\n        /**\r\n         * Updates the --_vaadin-font-icon-size CSS variable value if font icons are used.\r\n         *\r\n         * @private\r\n         */\r\n        __updateFontIconSize() {\r\n          if (this.char || this.iconClass || this.ligature) {\r\n            const { paddingTop, paddingBottom, height } = getComputedStyle(this);\r\n            const fontIconSize = parseFloat(height) - parseFloat(paddingTop) - parseFloat(paddingBottom);\r\n            this.style.setProperty('--_vaadin-font-icon-size', `${fontIconSize}px`);\r\n          }\r\n        }\r\n      },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { IconFontSizeMixin } from './vaadin-icon-font-size-mixin.js';\r\nimport { ensureSvgLiteral, renderSvg, unsafeSvgLiteral } from './vaadin-icon-svg.js';\r\n\r\nconst srcCache = new Map();\r\n\r\nconst Iconset = customElements.get('vaadin-iconset');\r\n\r\n/**\r\n * @polymerMixin\r\n * @mixes SlotStylesMixin\r\n * @mixes IconFontSizeMixin\r\n */\r\nexport const IconMixin = (superClass) =>\r\n  class extends IconFontSizeMixin(SlotStylesMixin(superClass)) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * The name of the icon to use. The name should be of the form:\r\n         * `iconset_name:icon_name`. When using `vaadin-icons` it is possible\r\n         * to omit the first part and only use `icon_name` as a value.\r\n         *\r\n         * Setting the `icon` property updates the `svg` and `size` based on the\r\n         * values provided by the corresponding `vaadin-iconset` element.\r\n         *\r\n         * See also [`name`](#/elements/vaadin-iconset#property-name) property of `vaadin-iconset`.\r\n         *\r\n         * @attr {string} icon\r\n         * @type {string}\r\n         */\r\n        icon: {\r\n          type: String,\r\n          reflectToAttribute: true,\r\n          observer: '__iconChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The SVG icon wrapped in a Lit template literal.\r\n         */\r\n        svg: {\r\n          type: Object,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The SVG source to be loaded as the icon. It can be:\r\n         * - an URL to a file containing the icon\r\n         * - an URL in the format \"/path/to/file.svg#objectID\", where the \"objectID\" refers to an ID attribute contained\r\n         *   inside the SVG referenced by the path. Note that the file needs to follow the same-origin policy.\r\n         * - a string in the format \"data:image/svg+xml,<svg>...</svg>\". You may need to use the \"encodeURIComponent\"\r\n         *   function for the SVG content passed\r\n         *\r\n         * @type {string}\r\n         */\r\n        src: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The symbol identifier that references an ID of an element contained in the SVG element assigned to the\r\n         * `src` property\r\n         *\r\n         * @type {string}\r\n         */\r\n        symbol: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Class names defining an icon font and/or a specific glyph inside an icon font.\r\n         *\r\n         * Example: \"fa-solid fa-user\"\r\n         *\r\n         * @attr {string} icon-class\r\n         * @type {string}\r\n         */\r\n        iconClass: {\r\n          type: String,\r\n          reflectToAttribute: true,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A hexadecimal code point that specifies a glyph from an icon font.\r\n         *\r\n         * Example: \"e001\"\r\n         *\r\n         * @type {string}\r\n         */\r\n        char: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * A ligature name that specifies an icon from an icon font with support for ligatures.\r\n         *\r\n         * Example: \"home\".\r\n         *\r\n         * @type {string}\r\n         */\r\n        ligature: {\r\n          type: String,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The font family to use for the font icon.\r\n         *\r\n         * @attr {string} font-family\r\n         * @type {string}\r\n         */\r\n        fontFamily: {\r\n          type: String,\r\n          observer: '__fontFamilyChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * The size of an icon, used to set the `viewBox` attribute.\r\n         */\r\n        size: {\r\n          type: Number,\r\n          value: 24,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        __defaultPAR: {\r\n          type: String,\r\n          value: 'xMidYMid meet',\r\n        },\r\n\r\n        /** @private */\r\n        __preserveAspectRatio: String,\r\n\r\n        /** @private */\r\n        __useRef: Object,\r\n\r\n        /** @private */\r\n        __svgElement: String,\r\n\r\n        /** @private */\r\n        __viewBox: String,\r\n\r\n        /** @private */\r\n        __fill: String,\r\n\r\n        /** @private */\r\n        __stroke: String,\r\n\r\n        /** @private */\r\n        __strokeWidth: String,\r\n\r\n        /** @private */\r\n        __strokeLinecap: String,\r\n\r\n        /** @private */\r\n        __strokeLinejoin: String,\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__svgChanged(svg, __svgElement)',\r\n        '__fontChanged(iconClass, char, ligature)',\r\n        '__srcChanged(src, symbol)',\r\n      ];\r\n    }\r\n\r\n    static get observedAttributes() {\r\n      return [...super.observedAttributes, 'class'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.__fetch = fetch.bind(window);\r\n    }\r\n\r\n    /** @protected */\r\n    get slotStyles() {\r\n      const tag = this.localName;\r\n      return [\r\n        `\r\n        ${tag}[icon-class] {\r\n          display: inline-flex;\r\n          vertical-align: middle;\r\n          font-size: inherit;\r\n        }\r\n      `,\r\n      ];\r\n    }\r\n\r\n    /** @private */\r\n    get __iconClasses() {\r\n      return this.iconClass ? this.iconClass.split(' ') : [];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n      this.__svgElement = this.shadowRoot.querySelector('#svg-group');\r\n      this._tooltipController = new TooltipController(this);\r\n      this.addController(this._tooltipController);\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      Iconset.attachedIcons.add(this);\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      Iconset.attachedIcons.delete(this);\r\n    }\r\n\r\n    /** @protected */\r\n    _applyIcon() {\r\n      const { preserveAspectRatio, svg, size, viewBox } = Iconset.getIconSvg(this.icon);\r\n      if (viewBox) {\r\n        this.__viewBox = viewBox;\r\n      }\r\n      if (preserveAspectRatio) {\r\n        this.__preserveAspectRatio = preserveAspectRatio;\r\n      }\r\n      if (size && size !== this.size) {\r\n        this.size = size;\r\n      }\r\n      this.svg = svg;\r\n    }\r\n\r\n    /** @private */\r\n    __iconChanged(icon) {\r\n      if (icon) {\r\n        this._applyIcon();\r\n      } else {\r\n        this.svg = ensureSvgLiteral(null);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    async __srcChanged(src, symbol) {\r\n      if (!src) {\r\n        this.svg = null;\r\n        return;\r\n      }\r\n\r\n      // Need to add the \"icon\" attribute to avoid issues as described in\r\n      // https://github.com/vaadin/web-components/issues/6301\r\n      this.icon = '';\r\n      if (!src.startsWith('data:') && (symbol || src.includes('#'))) {\r\n        const [path, iconId] = src.split('#');\r\n        this.__useRef = `${path}#${symbol || iconId}`;\r\n      } else {\r\n        try {\r\n          if (!srcCache.has(src)) {\r\n            srcCache.set(\r\n              src,\r\n              this.__fetch(src, {\r\n                mode: 'cors',\r\n              }).then((data) => {\r\n                if (!data.ok) {\r\n                  throw new Error('Error loading icon');\r\n                }\r\n                return data.text();\r\n              }),\r\n            );\r\n          }\r\n          const svgData = await srcCache.get(src);\r\n          if (!superClass.__domParser) {\r\n            superClass.__domParser = new DOMParser();\r\n          }\r\n          const parsedResponse = superClass.__domParser.parseFromString(svgData, 'text/html');\r\n          const svgElement = parsedResponse.querySelector('svg');\r\n          if (!svgElement) {\r\n            throw new Error(`SVG element not found on path: ${src}`);\r\n          }\r\n          this.svg = unsafeSvgLiteral(svgElement.innerHTML);\r\n          if (symbol) {\r\n            this.__useRef = `#${symbol}`;\r\n          }\r\n          this.__viewBox = svgElement.getAttribute('viewBox');\r\n          this.__fill = svgElement.getAttribute('fill');\r\n          this.__stroke = svgElement.getAttribute('stroke');\r\n          this.__strokeWidth = svgElement.getAttribute('stroke-width');\r\n          this.__strokeLinecap = svgElement.getAttribute('stroke-linecap');\r\n          this.__strokeLinejoin = svgElement.getAttribute('stroke-linejoin');\r\n        } catch (e) {\r\n          console.error(e);\r\n          this.svg = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __svgChanged(svg, svgElement) {\r\n      if (!svgElement) {\r\n        return;\r\n      }\r\n      renderSvg(svg, svgElement);\r\n    }\r\n\r\n    /** @private */\r\n    __computePAR(defaultPAR, preserveAspectRatio) {\r\n      return preserveAspectRatio || defaultPAR;\r\n    }\r\n\r\n    /** @private */\r\n    __computeVisibility(__useRef) {\r\n      return __useRef ? 'visible' : 'hidden';\r\n    }\r\n\r\n    /** @private */\r\n    __computeViewBox(size, viewBox) {\r\n      return viewBox || `0 0 ${size} ${size}`;\r\n    }\r\n\r\n    /** @private */\r\n    __fontChanged(iconClass, char, ligature) {\r\n      this.classList.remove(...(this.__addedIconClasses || []));\r\n      if (iconClass) {\r\n        this.__addedIconClasses = [...this.__iconClasses];\r\n        this.classList.add(...this.__addedIconClasses);\r\n      }\r\n      if (char) {\r\n        this.setAttribute('font-icon-content', char.length > 1 ? String.fromCodePoint(parseInt(char, 16)) : char);\r\n      } else if (ligature) {\r\n        this.setAttribute('font-icon-content', ligature);\r\n      } else {\r\n        this.removeAttribute('font-icon-content');\r\n      }\r\n      if ((iconClass || char || ligature) && !this.icon) {\r\n        // The \"icon\" attribute needs to be set on the host also when using font icons\r\n        // to avoid issues such as https://github.com/vaadin/web-components/issues/6301\r\n        this.icon = '';\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n      super.attributeChangedCallback(name, oldValue, newValue);\r\n\r\n      // Make sure class list always contains all the font class names\r\n      if (name === 'class' && this.__iconClasses.some((className) => !this.classList.contains(className))) {\r\n        this.classList.add(...this.__iconClasses);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __fontFamilyChanged(fontFamily) {\r\n      this.style.fontFamily = `'${fontFamily}'`;\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const iconStyles = css`\r\n  :host {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    box-sizing: border-box;\r\n    vertical-align: middle;\r\n    width: 24px;\r\n    height: 24px;\r\n    fill: currentColor;\r\n    container-type: size;\r\n  }\r\n\r\n  :host::after,\r\n  :host::before {\r\n    line-height: 1;\r\n    font-size: 100cqh;\r\n    -webkit-font-smoothing: antialiased;\r\n    text-rendering: optimizeLegibility;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  svg {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    /* prevent overflowing icon from clipping, see https://github.com/vaadin/flow-components/issues/5872 */\r\n    overflow: visible;\r\n  }\r\n\r\n  :host(:is([icon-class], [font-icon-content])) svg {\r\n    display: none;\r\n  }\r\n\r\n  :host([font-icon-content])::before {\r\n    content: attr(font-icon-content);\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-iconset.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { IconMixin } from './vaadin-icon-mixin.js';\r\nimport { iconStyles } from './vaadin-icon-styles.js';\r\n\r\nregisterStyles('vaadin-icon', iconStyles, { moduleId: 'vaadin-icon-styles' });\r\n\r\n/**\r\n * `<vaadin-icon>` is a Web Component for displaying SVG icons.\r\n *\r\n * ### Icon property\r\n *\r\n * The `<vaadin-icon>` component is designed to be used as a drop-in replacement for `<iron-icon>`.\r\n * For example, you can use it with `vaadin-icons` like this:\r\n *\r\n * ```html\r\n * <vaadin-icon icon=\"vaadin:angle-down\"></vaadin-icon>\r\n * ```\r\n *\r\n * Alternatively, you can also pick one of the Lumo icons:\r\n *\r\n * ```html\r\n * <vaadin-icon icon=\"lumo:user\"></vaadin-icon>\r\n * ```\r\n *\r\n * ### Custom SVG icon\r\n *\r\n * Alternatively, instead of selecting an icon from an iconset by name, you can pass any custom `svg`\r\n * literal using the [`svg`](#/elements/vaadin-icon#property-svg) property. In this case you can also\r\n * define the size of the SVG `viewBox` using the [`size`](#/elements/vaadin-icon#property-size) property:\r\n *\r\n * ```js\r\n * import { html, svg } from 'lit';\r\n *\r\n * // in your component\r\n * render() {\r\n *   const svgIcon = svg`<path d=\"M13 4v2l-5 5-5-5v-2l5 5z\"></path>`;\r\n *   return html`\r\n *     <vaadin-icon\r\n *       .svg=\"${svgIcon}\"\r\n *       size=\"16\"\r\n *     ></vaadin-icon>\r\n *   `;\r\n * }\r\n * ```\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes IconMixin\r\n * @mixes ControllerMixin\r\n * @mixes ThemableMixin\r\n * @mixes ElementMixin\r\n */\r\nclass Icon extends IconMixin(ControllerMixin(ElementMixin(ThemableMixin(PolymerElement)))) {\r\n  static get template() {\r\n    return html`\r\n      <svg\r\n        version=\"1.1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        viewBox=\"[[__computeViewBox(size, __viewBox)]]\"\r\n        preserveAspectRatio=\"[[__computePAR(__defaultPAR, __preserveAspectRatio)]]\"\r\n        fill$=\"[[__fill]]\"\r\n        stroke$=\"[[__stroke]]\"\r\n        stroke-width$=\"[[__strokeWidth]]\"\r\n        stroke-linecap$=\"[[__strokeLinecap]]\"\r\n        stroke-linejoin$=\"[[__strokeLinejoin]]\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <g id=\"svg-group\"></g>\r\n        <g id=\"use-group\" visibility$=\"[[__computeVisibility(__useRef, svg)]]\">\r\n          <use href$=\"[[__useRef]]\" />\r\n        </g>\r\n      </svg>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  static get is() {\r\n    return 'vaadin-icon';\r\n  }\r\n}\r\n\r\ndefineCustomElement(Icon);\r\n\r\nexport { Icon };\r\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/integer-field/src/vaadin-integer-field.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { NumberField } from '@vaadin/number-field/src/vaadin-number-field.js';\r\n\r\n/**\r\n * `<vaadin-integer-field>` is an input field web component that only accepts entering integer numbers.\r\n *\r\n * ```html\r\n * <vaadin-integer-field label=\"X\"></vaadin-integer-field>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * `<vaadin-integer-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\r\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\r\n *\r\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\r\n *\r\n * Part name         | Description\r\n * ------------------|-------------------------\r\n * `increase-button` | Increase (\"plus\") button\r\n * `decrease-button` | Decrease (\"minus\") button\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * ### Change events\r\n *\r\n * Depending on the nature of the value change that the user attempts to commit e.g. by pressing Enter,\r\n * the component can fire either a `change` event or an `unparsable-change` event:\r\n *\r\n * Value change             | Event\r\n * :------------------------|:------------------\r\n * empty => parsable        | change\r\n * empty => unparsable      | unparsable-change\r\n * parsable => empty        | change\r\n * parsable => parsable     | change\r\n * parsable => unparsable   | change\r\n * unparsable => empty      | unparsable-change\r\n * unparsable => parsable   | change\r\n * unparsable => unparsable | -\r\n *\r\n * Note, there is currently no way to detect unparsable => unparsable changes because the browser\r\n * doesn't provide access to unparsable values of native [type=number] inputs.\r\n *\r\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {Event} unparsable-change - Fired when the user commits an unparsable value change and there is no change event.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends NumberField\r\n */\r\nexport class IntegerField extends NumberField {\r\n  static get is() {\r\n    return 'vaadin-integer-field';\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.allowedCharPattern = '[-+\\\\d]';\r\n  }\r\n\r\n  /**\r\n   * Override an observer from `InputMixin` to clear the value\r\n   * when trying to type invalid characters.\r\n   * @param {string | undefined} newVal\r\n   * @param {string | undefined} oldVal\r\n   * @protected\r\n   * @override\r\n   */\r\n  _valueChanged(newVal, oldVal) {\r\n    if (newVal !== '' && !this.__isInteger(newVal)) {\r\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>. Clearing the value.`);\r\n      this.value = '';\r\n      return;\r\n    }\r\n    super._valueChanged(newVal, oldVal);\r\n  }\r\n\r\n  /**\r\n   * Override an observer from `NumberField` to reset the step\r\n   * property when an invalid step is set.\r\n   * @param {number} newVal\r\n   * @param {HTMLElement | undefined} inputElement\r\n   * @protected\r\n   * @override\r\n   */\r\n  _stepChanged(step, inputElement) {\r\n    if (step != null && !this.__hasOnlyDigits(step)) {\r\n      console.warn(\r\n        `<vaadin-integer-field> The \\`step\\` property must be a positive integer but \\`${step}\\` was provided, so the property was reset to \\`null\\`.`,\r\n      );\r\n      this.step = null;\r\n      return;\r\n    }\r\n\r\n    super._stepChanged(step, inputElement);\r\n  }\r\n\r\n  /** @private */\r\n  __isInteger(value) {\r\n    return /^(-\\d)?\\d*$/u.test(String(value));\r\n  }\r\n\r\n  /** @private */\r\n  __hasOnlyDigits(value) {\r\n    return /^\\d+$/u.test(String(value));\r\n  }\r\n}\r\n\r\ndefineCustomElement(IntegerField);\r\n"],
  "mappings": ";;;;;;;;AA0DO,IAAM,eAAN,cAA2B,YAAY;AAAA,EAC5C,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,qBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAc,QAAQ,QAAQ;AAC5B,QAAI,WAAW,MAAM,CAAC,KAAK,YAAY,MAAM,GAAG;AAC9C,cAAQ,KAAK,oCAAoC,MAAM,kDAAkD;AACzG,WAAK,QAAQ;AACb;AAAA,IACF;AACA,UAAM,cAAc,QAAQ,MAAM;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,MAAM,cAAc;AAC/B,QAAI,QAAQ,QAAQ,CAAC,KAAK,gBAAgB,IAAI,GAAG;AAC/C,cAAQ;AAAA,QACN,iFAAiF,IAAI;AAAA,MACvF;AACA,WAAK,OAAO;AACZ;AAAA,IACF;AAEA,UAAM,aAAa,MAAM,YAAY;AAAA,EACvC;AAAA;AAAA,EAGA,YAAY,OAAO;AACjB,WAAO,eAAe,KAAK,OAAO,KAAK,CAAC;AAAA,EAC1C;AAAA;AAAA,EAGA,gBAAgB,OAAO;AACrB,WAAO,SAAS,KAAK,OAAO,KAAK,CAAC;AAAA,EACpC;AACF;AAEA,oBAAoB,YAAY;",
  "names": []
}

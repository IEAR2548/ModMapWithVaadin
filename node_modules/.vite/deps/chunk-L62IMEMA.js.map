{
  "version": 3,
  "sources": ["../../ol/src/ViewProperty.js", "../../ol/src/centerconstraint.js", "../../ol/src/resolutionconstraint.js", "../../ol/src/rotationconstraint.js", "../../ol/src/geom/flat/closest.js", "../../ol/src/geom/flat/area.js", "../../ol/src/geom/LinearRing.js", "../../ol/src/geom/flat/contains.js", "../../ol/src/geom/flat/interiorpoint.js", "../../ol/src/geom/flat/segments.js", "../../ol/src/geom/flat/intersectsextent.js", "../../ol/src/geom/flat/reverse.js", "../../ol/src/geom/flat/orient.js", "../../ol/src/geom/Polygon.js", "../../ol/src/View.js"],
  "sourcesContent": ["/**\r\n * @module ol/ViewProperty\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  CENTER: 'center',\r\n  RESOLUTION: 'resolution',\r\n  ROTATION: 'rotation',\r\n};\r\n", "/**\r\n * @module ol/centerconstraint\r\n */\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\r\n */\r\n\r\n/**\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\r\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\r\n * (only during interaction and animation).\r\n * @return {Type} The constraint.\r\n */\r\nexport function createExtent(extent, onlyCenter, smooth) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @param {Array<number>} [opt_centerShift] Shift between map center and viewport center.\r\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\r\n     */\r\n    function (center, resolution, size, opt_isMoving, opt_centerShift) {\r\n      if (!center) {\r\n        return undefined;\r\n      }\r\n      if (!resolution && !onlyCenter) {\r\n        return center;\r\n      }\r\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\r\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\r\n      const shiftX = opt_centerShift ? opt_centerShift[0] : 0;\r\n      const shiftY = opt_centerShift ? opt_centerShift[1] : 0;\r\n      let minX = extent[0] + viewWidth / 2 + shiftX;\r\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\r\n      let minY = extent[1] + viewHeight / 2 + shiftY;\r\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\r\n\r\n      // note: when zooming out of bounds, min and max values for x and y may\r\n      // end up inverted (min > max); this has to be accounted for\r\n      if (minX > maxX) {\r\n        minX = (maxX + minX) / 2;\r\n        maxX = minX;\r\n      }\r\n      if (minY > maxY) {\r\n        minY = (maxY + minY) / 2;\r\n        maxY = minY;\r\n      }\r\n\r\n      let x = clamp(center[0], minX, maxX);\r\n      let y = clamp(center[1], minY, maxY);\r\n\r\n      // during an interaction, allow some overscroll\r\n      if (opt_isMoving && smooth && resolution) {\r\n        const ratio = 30 * resolution;\r\n        x +=\r\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\r\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\r\n        y +=\r\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\r\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\r\n      }\r\n\r\n      return [x, y];\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\r\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\r\n */\r\nexport function none(center) {\r\n  return center;\r\n}\r\n", "/**\r\n * @module ol/resolutionconstraint\r\n */\r\nimport {clamp} from './math.js';\r\nimport {getHeight, getWidth} from './extent.js';\r\nimport {linearFindNearest} from './array.js';\r\n\r\n/**\r\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\r\n */\r\n\r\n/**\r\n * Returns a modified resolution taking into account the viewport size and maximum\r\n * allowed extent.\r\n * @param {number} resolution Resolution\r\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\r\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\r\n * @param {boolean} showFullExtent Whether to show the full extent.\r\n * @return {number} Capped resolution.\r\n */\r\nfunction getViewportClampedResolution(\r\n  resolution,\r\n  maxExtent,\r\n  viewportSize,\r\n  showFullExtent\r\n) {\r\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\r\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\r\n\r\n  if (showFullExtent) {\r\n    return Math.min(resolution, Math.max(xResolution, yResolution));\r\n  }\r\n  return Math.min(resolution, Math.min(xResolution, yResolution));\r\n}\r\n\r\n/**\r\n * Returns a modified resolution to be between maxResolution and minResolution while\r\n * still allowing the value to be slightly out of bounds.\r\n * Note: the computation is based on the logarithm function (ln):\r\n *  - at 1, ln(x) is 0\r\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\r\n * The final result is clamped to prevent getting too far away from bounds.\r\n * @param {number} resolution Resolution.\r\n * @param {number} maxResolution Max resolution.\r\n * @param {number} minResolution Min resolution.\r\n * @return {number} Smoothed resolution.\r\n */\r\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\r\n  let result = Math.min(resolution, maxResolution);\r\n  const ratio = 50;\r\n\r\n  result *=\r\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\r\n    1;\r\n  if (minResolution) {\r\n    result = Math.max(result, minResolution);\r\n    result /=\r\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\r\n        ratio +\r\n      1;\r\n  }\r\n  return clamp(result, minResolution / 2, maxResolution * 2);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} resolutions Resolutions.\r\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\r\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createSnapToResolutions(\r\n  resolutions,\r\n  opt_smooth,\r\n  opt_maxExtent,\r\n  opt_showFullExtent\r\n) {\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, opt_isMoving) {\r\n      if (resolution !== undefined) {\r\n        const maxResolution = resolutions[0];\r\n        const minResolution = resolutions[resolutions.length - 1];\r\n        const cappedMaxRes = opt_maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              opt_maxExtent,\r\n              size,\r\n              opt_showFullExtent\r\n            )\r\n          : maxResolution;\r\n\r\n        // during interacting or animating, allow intermediary values\r\n        if (opt_isMoving) {\r\n          const smooth = opt_smooth !== undefined ? opt_smooth : true;\r\n          if (!smooth) {\r\n            return clamp(resolution, minResolution, cappedMaxRes);\r\n          }\r\n          return getSmoothClampedResolution(\r\n            resolution,\r\n            cappedMaxRes,\r\n            minResolution\r\n          );\r\n        }\r\n\r\n        const capped = Math.min(cappedMaxRes, resolution);\r\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\r\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\r\n          return resolutions[z + 1];\r\n        }\r\n        return resolutions[z];\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} power Power.\r\n * @param {number} maxResolution Maximum resolution.\r\n * @param {number} [opt_minResolution] Minimum resolution.\r\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\r\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createSnapToPower(\r\n  power,\r\n  maxResolution,\r\n  opt_minResolution,\r\n  opt_smooth,\r\n  opt_maxExtent,\r\n  opt_showFullExtent\r\n) {\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, opt_isMoving) {\r\n      if (resolution !== undefined) {\r\n        const cappedMaxRes = opt_maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              opt_maxExtent,\r\n              size,\r\n              opt_showFullExtent\r\n            )\r\n          : maxResolution;\r\n        const minResolution =\r\n          opt_minResolution !== undefined ? opt_minResolution : 0;\r\n\r\n        // during interacting or animating, allow intermediary values\r\n        if (opt_isMoving) {\r\n          const smooth = opt_smooth !== undefined ? opt_smooth : true;\r\n          if (!smooth) {\r\n            return clamp(resolution, minResolution, cappedMaxRes);\r\n          }\r\n          return getSmoothClampedResolution(\r\n            resolution,\r\n            cappedMaxRes,\r\n            minResolution\r\n          );\r\n        }\r\n\r\n        const tolerance = 1e-9;\r\n        const minZoomLevel = Math.ceil(\r\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance\r\n        );\r\n        const offset = -direction * (0.5 - tolerance) + 0.5;\r\n        const capped = Math.min(cappedMaxRes, resolution);\r\n        const cappedZoomLevel = Math.floor(\r\n          Math.log(maxResolution / capped) / Math.log(power) + offset\r\n        );\r\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\r\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\r\n        return clamp(newResolution, minResolution, cappedMaxRes);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} maxResolution Max resolution.\r\n * @param {number} minResolution Min resolution.\r\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\r\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createMinMaxResolution(\r\n  maxResolution,\r\n  minResolution,\r\n  opt_smooth,\r\n  opt_maxExtent,\r\n  opt_showFullExtent\r\n) {\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, opt_isMoving) {\r\n      if (resolution !== undefined) {\r\n        const cappedMaxRes = opt_maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              opt_maxExtent,\r\n              size,\r\n              opt_showFullExtent\r\n            )\r\n          : maxResolution;\r\n        const smooth = opt_smooth !== undefined ? opt_smooth : true;\r\n\r\n        if (!smooth || !opt_isMoving) {\r\n          return clamp(resolution, minResolution, cappedMaxRes);\r\n        }\r\n        return getSmoothClampedResolution(\r\n          resolution,\r\n          cappedMaxRes,\r\n          minResolution\r\n        );\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/rotationconstraint\r\n */\r\nimport {toRadians} from './math.js';\r\n\r\n/**\r\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\r\n */\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function disable(rotation) {\r\n  if (rotation !== undefined) {\r\n    return 0;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function none(rotation) {\r\n  if (rotation !== undefined) {\r\n    return rotation;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} n N.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToN(n) {\r\n  const theta = (2 * Math.PI) / n;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, opt_isMoving) {\r\n      if (opt_isMoving) {\r\n        return rotation;\r\n      }\r\n\r\n      if (rotation !== undefined) {\r\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\r\n        return rotation;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} [opt_tolerance] Tolerance.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToZero(opt_tolerance) {\r\n  const tolerance = opt_tolerance || toRadians(5);\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, opt_isMoving) {\r\n      if (opt_isMoving) {\r\n        return rotation;\r\n      }\r\n\r\n      if (rotation !== undefined) {\r\n        if (Math.abs(rotation) <= tolerance) {\r\n          return 0;\r\n        } else {\r\n          return rotation;\r\n        }\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/geom/flat/closest\r\n */\r\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\r\n\r\n/**\r\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\r\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\r\n * dimensions are linearly interpolated.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset1 Offset 1.\r\n * @param {number} offset2 Offset 2.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n */\r\nfunction assignClosest(\r\n  flatCoordinates,\r\n  offset1,\r\n  offset2,\r\n  stride,\r\n  x,\r\n  y,\r\n  closestPoint\r\n) {\r\n  const x1 = flatCoordinates[offset1];\r\n  const y1 = flatCoordinates[offset1 + 1];\r\n  const dx = flatCoordinates[offset2] - x1;\r\n  const dy = flatCoordinates[offset2 + 1] - y1;\r\n  let offset;\r\n  if (dx === 0 && dy === 0) {\r\n    offset = offset1;\r\n  } else {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      offset = offset2;\r\n    } else if (t > 0) {\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = lerp(\r\n          flatCoordinates[offset1 + i],\r\n          flatCoordinates[offset2 + i],\r\n          t\r\n        );\r\n      }\r\n      closestPoint.length = stride;\r\n      return;\r\n    } else {\r\n      offset = offset1;\r\n    }\r\n  }\r\n  for (let i = 0; i < stride; ++i) {\r\n    closestPoint[i] = flatCoordinates[offset + i];\r\n  }\r\n  closestPoint.length = stride;\r\n}\r\n\r\n/**\r\n * Return the squared of the largest distance between any pair of consecutive\r\n * coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  for (offset += stride; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\r\n    if (squaredDelta > max) {\r\n      max = squaredDelta;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function arrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  max\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\r\n    offset = end;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function multiArrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  max\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  opt_tmpPoint\r\n) {\r\n  if (offset == end) {\r\n    return minSquaredDistance;\r\n  }\r\n  let i, squaredDistance;\r\n  if (maxDelta === 0) {\r\n    // All points are identical, so just test the first point.\r\n    squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[offset],\r\n      flatCoordinates[offset + 1]\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[offset + i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    } else {\r\n      return minSquaredDistance;\r\n    }\r\n  }\r\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\r\n  let index = offset + stride;\r\n  while (index < end) {\r\n    assignClosest(\r\n      flatCoordinates,\r\n      index - stride,\r\n      index,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      index += stride;\r\n    } else {\r\n      // Skip ahead multiple points, because we know that all the skipped\r\n      // points cannot be any closer than the closest point we have found so\r\n      // far.  We know this because we know how close the current point is, how\r\n      // close the closest point we have found so far is, and the maximum\r\n      // distance between consecutive points.  For example, if we're currently\r\n      // at distance 10, the best we've found so far is 3, and that the maximum\r\n      // distance between consecutive points is 2, then we'll need to skip at\r\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\r\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\r\n      // always advance at least one point, to avoid an infinite loop.\r\n      index +=\r\n        stride *\r\n        Math.max(\r\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\r\n            maxDelta) |\r\n            0,\r\n          1\r\n        );\r\n    }\r\n  }\r\n  if (isRing) {\r\n    // Check the closing segment.\r\n    assignClosest(\r\n      flatCoordinates,\r\n      end - stride,\r\n      offset,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n    }\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  opt_tmpPoint\r\n) {\r\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    minSquaredDistance = assignClosestPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint\r\n    );\r\n    offset = end;\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestMultiArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  opt_tmpPoint\r\n) {\r\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    minSquaredDistance = assignClosestArrayPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/area\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRing(flatCoordinates, offset, end, stride) {\r\n  let twiceArea = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    twiceArea += y1 * x2 - x1 * y2;\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return twiceArea / 2;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRings(flatCoordinates, offset, ends, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    area += linearRing(flatCoordinates, offset, end, stride);\r\n    offset = end;\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    area += linearRings(flatCoordinates, offset, ends, stride);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return area;\r\n}\r\n", "/**\r\n * @module ol/geom/LinearRing\r\n */\r\nimport GeometryLayout from './GeometryLayout.js';\r\nimport GeometryType from './GeometryType.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {linearRing as linearRingArea} from './flat/area.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */\r\nclass LinearRing extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   */\r\n  constructor(coordinates, opt_layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        opt_layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        opt_layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingArea(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0\r\n    );\r\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.LINEAR_RING;\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LinearRing;\r\n", "/**\r\n * @module ol/geom/flat/contains\r\n */\r\nimport {forEachCorner} from '../../extent.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} Contains extent.\r\n */\r\nexport function linearRingContainsExtent(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  const outside = forEachCorner(\r\n    extent,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n     * @return {boolean} Contains (x, y).\r\n     */\r\n    function (coordinate) {\r\n      return !linearRingContainsXY(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        coordinate[0],\r\n        coordinate[1]\r\n      );\r\n    }\r\n  );\r\n  return !outside;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  // https://geomalgorithms.com/a03-_inclusion.html\r\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\r\n  // This code may be freely used and modified for any purpose\r\n  // providing that this copyright notice is included with it.\r\n  // SoftSurfer makes no warranty for this code, and cannot be held\r\n  // liable for any real or imagined damage resulting from its use.\r\n  // Users of this code must verify correctness for their application.\r\n  let wn = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    if (y1 <= y) {\r\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\r\n        wn++;\r\n      }\r\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\r\n      wn--;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return wn !== 0;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingsContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  if (ends.length === 0) {\r\n    return false;\r\n  }\r\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\r\n    return false;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingssContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  if (endss.length === 0) {\r\n    return false;\r\n  }\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/interiorpoint\r\n */\r\nimport {linearRingsContainsXY} from './contains.js';\r\nimport {numberSafeCompareFunction} from '../../array.js';\r\n\r\n/**\r\n * Calculates a point that is likely to lie in the interior of the linear rings.\r\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @param {number} flatCentersOffset Flat center offset.\r\n * @param {Array<number>} [opt_dest] Destination.\r\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointOfArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  flatCenters,\r\n  flatCentersOffset,\r\n  opt_dest\r\n) {\r\n  let i, ii, x, x1, x2, y1, y2;\r\n  const y = flatCenters[flatCentersOffset + 1];\r\n  /** @type {Array<number>} */\r\n  const intersections = [];\r\n  // Calculate intersections with the horizontal line\r\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\r\n    const end = ends[r];\r\n    x1 = flatCoordinates[end - stride];\r\n    y1 = flatCoordinates[end - stride + 1];\r\n    for (i = offset; i < end; i += stride) {\r\n      x2 = flatCoordinates[i];\r\n      y2 = flatCoordinates[i + 1];\r\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\r\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\r\n        intersections.push(x);\r\n      }\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n  }\r\n  // Find the longest segment of the horizontal line that has its center point\r\n  // inside the linear ring.\r\n  let pointX = NaN;\r\n  let maxSegmentLength = -Infinity;\r\n  intersections.sort(numberSafeCompareFunction);\r\n  x1 = intersections[0];\r\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\r\n    x2 = intersections[i];\r\n    const segmentLength = Math.abs(x2 - x1);\r\n    if (segmentLength > maxSegmentLength) {\r\n      x = (x1 + x2) / 2;\r\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n        pointX = x;\r\n        maxSegmentLength = segmentLength;\r\n      }\r\n    }\r\n    x1 = x2;\r\n  }\r\n  if (isNaN(pointX)) {\r\n    // There is no horizontal line that has its center point inside the linear\r\n    // ring.  Use the center of the the linear ring's extent.\r\n    pointX = flatCenters[flatCentersOffset];\r\n  }\r\n  if (opt_dest) {\r\n    opt_dest.push(pointX, y, maxSegmentLength);\r\n    return opt_dest;\r\n  } else {\r\n    return [pointX, y, maxSegmentLength];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointsOfMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  flatCenters\r\n) {\r\n  let interiorPoints = [];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    interiorPoints = getInteriorPointOfArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      flatCenters,\r\n      2 * i,\r\n      interiorPoints\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return interiorPoints;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/segments\r\n */\r\n\r\n/**\r\n * This function calls `callback` for each segment of the flat coordinates\r\n * array. If the callback returns a truthy value the function returns that\r\n * value immediately. Otherwise the function returns `false`.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\r\n *     called for each segment.\r\n * @return {T|boolean} Value.\r\n * @template T\r\n */\r\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\r\n  let ret;\r\n  offset += stride;\r\n  for (; offset < end; offset += stride) {\r\n    ret = callback(\r\n      flatCoordinates.slice(offset - stride, offset),\r\n      flatCoordinates.slice(offset, offset + stride)\r\n    );\r\n    if (ret) {\r\n      return ret;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/intersectsextent\r\n */\r\nimport {\r\n  containsExtent,\r\n  createEmpty,\r\n  extendFlatCoordinates,\r\n  intersects,\r\n  intersectsSegment,\r\n} from '../../extent.js';\r\nimport {forEach as forEachSegment} from './segments.js';\r\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineString(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  const coordinatesExtent = extendFlatCoordinates(\r\n    createEmpty(),\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride\r\n  );\r\n  if (!intersects(extent, coordinatesExtent)) {\r\n    return false;\r\n  }\r\n  if (containsExtent(extent, coordinatesExtent)) {\r\n    return true;\r\n  }\r\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\r\n    return true;\r\n  }\r\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\r\n    return true;\r\n  }\r\n  return forEachSegment(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\r\n     * @return {boolean} `true` if the segment and the extent intersect,\r\n     *     `false` otherwise.\r\n     */\r\n    function (point1, point2) {\r\n      return intersectsSegment(extent, point1, point2);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineStringArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[i];\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRing(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[1]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[3]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[1]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[3]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent\r\n) {\r\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\r\n    return false;\r\n  }\r\n  if (ends.length === 1) {\r\n    return true;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsExtent(\r\n        flatCoordinates,\r\n        ends[i - 1],\r\n        ends[i],\r\n        stride,\r\n        extent\r\n      )\r\n    ) {\r\n      if (\r\n        !intersectsLineString(\r\n          flatCoordinates,\r\n          ends[i - 1],\r\n          ends[i],\r\n          stride,\r\n          extent\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  extent\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (\r\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/reverse\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n */\r\nexport function coordinates(flatCoordinates, offset, end, stride) {\r\n  while (offset < end - stride) {\r\n    for (let i = 0; i < stride; ++i) {\r\n      const tmp = flatCoordinates[offset + i];\r\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\r\n      flatCoordinates[end - stride + i] = tmp;\r\n    }\r\n    offset += stride;\r\n    end -= stride;\r\n  }\r\n}\r\n", "/**\r\n * @module ol/geom/flat/orient\r\n */\r\nimport {coordinates as reverseCoordinates} from './reverse.js';\r\n\r\n/**\r\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\r\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\r\n * the ring's orientation is clockwise when this function returns false.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {boolean} Is clockwise.\r\n */\r\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\r\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\r\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\r\n  let edge = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    edge += (x2 - x1) * (y2 + y1);\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return edge === 0 ? undefined : edge > 0;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `opt_right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [opt_right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingsAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  opt_right\r\n) {\r\n  const right = opt_right !== undefined ? opt_right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride\r\n    );\r\n    if (i === 0) {\r\n      if ((right && isClockwise) || (!right && !isClockwise)) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if ((right && !isClockwise) || (!right && isClockwise)) {\r\n        return false;\r\n      }\r\n    }\r\n    offset = end;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `opt_right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [opt_right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingssAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  opt_right\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (\r\n      !linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)\r\n    ) {\r\n      return false;\r\n    }\r\n    if (ends.length) {\r\n      offset = ends[ends.length - 1];\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `opt_right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRings(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  opt_right\r\n) {\r\n  const right = opt_right !== undefined ? opt_right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride\r\n    );\r\n    const reverse =\r\n      i === 0\r\n        ? (right && isClockwise) || (!right && !isClockwise)\r\n        : (right && !isClockwise) || (!right && isClockwise);\r\n    if (reverse) {\r\n      reverseCoordinates(flatCoordinates, offset, end, stride);\r\n    }\r\n    offset = end;\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `opt_right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRingsArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  opt_right\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    offset = orientLinearRings(\r\n      flatCoordinates,\r\n      offset,\r\n      endss[i],\r\n      stride,\r\n      opt_right\r\n    );\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Return a two-dimensional endss\r\n * @param {Array<number>} flatCoordinates Flat coordinates\r\n * @param {Array<number>} ends Linear ring end indexes\r\n * @return {Array<Array<number>>} Two dimensional endss array that can\r\n * be used to contruct a MultiPolygon\r\n */\r\nexport function inflateEnds(flatCoordinates, ends) {\r\n  const endss = [];\r\n  let offset = 0;\r\n  let prevEndIndex = 0;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    // classifies an array of rings into polygons with outer rings and holes\r\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\r\n      endss.push(ends.slice(prevEndIndex, i + 1));\r\n    } else {\r\n      if (endss.length === 0) {\r\n        continue;\r\n      }\r\n      endss[endss.length - 1].push(ends[prevEndIndex]);\r\n    }\r\n    prevEndIndex = i + 1;\r\n    offset = end;\r\n  }\r\n  return endss;\r\n}\r\n", "/**\r\n * @module ol/geom/Polygon\r\n */\r\nimport GeometryLayout from './GeometryLayout.js';\r\nimport GeometryType from './GeometryType.js';\r\nimport LinearRing from './LinearRing.js';\r\nimport Point from './Point.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\r\nimport {deflateCoordinatesArray} from './flat/deflate.js';\r\nimport {extend} from '../array.js';\r\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\r\nimport {inflateCoordinatesArray} from './flat/inflate.js';\r\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\r\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\r\nimport {linearRings as linearRingsArea} from './flat/area.js';\r\nimport {linearRingsContainsXY} from './flat/contains.js';\r\nimport {modulo} from '../math.js';\r\nimport {quantizeArray} from './flat/simplify.js';\r\nimport {offset as sphereOffset} from '../sphere.js';\r\n\r\n/**\r\n * @classdesc\r\n * Polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass Polygon extends SimpleGeometry {\r\n  /**\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\r\n   *     Array of linear rings that define the polygon. The first linear ring of the\r\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\r\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\r\n   *     an array of vertices' coordinates where the first coordinate and the last are\r\n   *     equivalent. (For internal use, flat coordinates in combination with\r\n   *     `opt_layout` and `opt_ends` are also accepted.)\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   * @param {Array<number>} [opt_ends] Ends (for internal use with flat coordinates).\r\n   */\r\n  constructor(coordinates, opt_layout, opt_ends) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     */\r\n    this.flatInteriorPoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (opt_layout !== undefined && opt_ends) {\r\n      this.setFlatCoordinates(\r\n        opt_layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n      this.ends_ = opt_ends;\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\r\n          coordinates\r\n        ),\r\n        opt_layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed linear ring to this polygon.\r\n   * @param {LinearRing} linearRing Linear ring.\r\n   * @api\r\n   */\r\n  appendLinearRing(linearRing) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\r\n    } else {\r\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\r\n    }\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Polygon} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const polygon = new Polygon(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      this.ends_.slice()\r\n    );\r\n    polygon.applyProperties(this);\r\n    return polygon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        arrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingsContainsXY(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      x,\r\n      y\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the polygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingsArea(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for polygons.\r\n   *\r\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates(opt_right) {\r\n    let flatCoordinates;\r\n    if (opt_right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Interior point.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\r\n        this.getOrientedFlatCoordinates(),\r\n        0,\r\n        this.ends_,\r\n        this.stride,\r\n        flatCenter,\r\n        0\r\n      );\r\n      this.flatInteriorPointRevision_ = this.getRevision();\r\n    }\r\n    return this.flatInteriorPoint_;\r\n  }\r\n\r\n  /**\r\n   * Return an interior point of the polygon.\r\n   * @return {Point} Interior point as XYM coordinate, where M is the\r\n   * length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoint() {\r\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\r\n  }\r\n\r\n  /**\r\n   * Return the number of rings of the polygon,  this includes the exterior\r\n   * ring and any interior rings.\r\n   *\r\n   * @return {number} Number of rings.\r\n   * @api\r\n   */\r\n  getLinearRingCount() {\r\n    return this.ends_.length;\r\n  }\r\n\r\n  /**\r\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\r\n   * given index is out of range.\r\n   * The exterior linear ring is available at index `0` and the interior rings\r\n   * at index `1` and beyond.\r\n   *\r\n   * @param {number} index Index.\r\n   * @return {LinearRing|null} Linear ring.\r\n   * @api\r\n   */\r\n  getLinearRing(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LinearRing(\r\n      this.flatCoordinates.slice(\r\n        index === 0 ? 0 : this.ends_[index - 1],\r\n        this.ends_[index]\r\n      ),\r\n      this.layout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the linear rings of the polygon.\r\n   * @return {Array<LinearRing>} Linear rings.\r\n   * @api\r\n   */\r\n  getLinearRings() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const linearRings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const linearRing = new LinearRing(\r\n        flatCoordinates.slice(offset, end),\r\n        layout\r\n      );\r\n      linearRings.push(linearRing);\r\n      offset = end;\r\n    }\r\n    return linearRings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length = orientLinearRings(\r\n          this.orientedFlatCoordinates_,\r\n          0,\r\n          this.ends_,\r\n          this.stride\r\n        );\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return this.orientedFlatCoordinates_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Polygon} Simplified Polygon.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    const simplifiedFlatCoordinates = [];\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = quantizeArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEnds\r\n    );\r\n    return new Polygon(\r\n      simplifiedFlatCoordinates,\r\n      GeometryLayout.XY,\r\n      simplifiedEnds\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.POLYGON;\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingArray(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the polygon.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.ends_\r\n    );\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Polygon;\r\n\r\n/**\r\n * Create an approximation of a circle on the surface of a sphere.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\r\n * @param {number} radius The great-circle distance from the center to\r\n *     the polygon vertices in meters.\r\n * @param {number} [opt_n] Optional number of vertices for the resulting\r\n *     polygon. Default is `32`.\r\n * @param {number} [opt_sphereRadius] Optional radius for the sphere (defaults to\r\n *     the Earth's mean radius using the WGS84 ellipsoid).\r\n * @return {Polygon} The \"circular\" polygon.\r\n * @api\r\n */\r\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\r\n  const n = opt_n ? opt_n : 32;\r\n  /** @type {Array<number>} */\r\n  const flatCoordinates = [];\r\n  for (let i = 0; i < n; ++i) {\r\n    extend(\r\n      flatCoordinates,\r\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius)\r\n    );\r\n  }\r\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\r\n    flatCoordinates.length,\r\n  ]);\r\n}\r\n\r\n/**\r\n * Create a polygon from an extent. The layout used is `XY`.\r\n * @param {import(\"../extent.js\").Extent} extent The extent.\r\n * @return {Polygon} The polygon.\r\n * @api\r\n */\r\nexport function fromExtent(extent) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const flatCoordinates = [\r\n    minX,\r\n    minY,\r\n    minX,\r\n    maxY,\r\n    maxX,\r\n    maxY,\r\n    maxX,\r\n    minY,\r\n    minX,\r\n    minY,\r\n  ];\r\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\r\n    flatCoordinates.length,\r\n  ]);\r\n}\r\n\r\n/**\r\n * Create a regular polygon from a circle.\r\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\r\n * @param {number} [opt_sides] Number of sides of the polygon. Default is 32.\r\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n * @return {Polygon} Polygon geometry.\r\n * @api\r\n */\r\nexport function fromCircle(circle, opt_sides, opt_angle) {\r\n  const sides = opt_sides ? opt_sides : 32;\r\n  const stride = circle.getStride();\r\n  const layout = circle.getLayout();\r\n  const center = circle.getCenter();\r\n  const arrayLength = stride * (sides + 1);\r\n  const flatCoordinates = new Array(arrayLength);\r\n  for (let i = 0; i < arrayLength; i += stride) {\r\n    flatCoordinates[i] = 0;\r\n    flatCoordinates[i + 1] = 0;\r\n    for (let j = 2; j < stride; j++) {\r\n      flatCoordinates[i + j] = center[j];\r\n    }\r\n  }\r\n  const ends = [flatCoordinates.length];\r\n  const polygon = new Polygon(flatCoordinates, layout, ends);\r\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\r\n  return polygon;\r\n}\r\n\r\n/**\r\n * Modify the coordinates of a polygon to make it a regular polygon.\r\n * @param {Polygon} polygon Polygon geometry.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\r\n * @param {number} radius Radius of the regular polygon.\r\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n */\r\nexport function makeRegular(polygon, center, radius, opt_angle) {\r\n  const flatCoordinates = polygon.getFlatCoordinates();\r\n  const stride = polygon.getStride();\r\n  const sides = flatCoordinates.length / stride - 1;\r\n  const startAngle = opt_angle ? opt_angle : 0;\r\n  for (let i = 0; i <= sides; ++i) {\r\n    const offset = i * stride;\r\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\r\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\r\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\r\n  }\r\n  polygon.changed();\r\n}\r\n", "/**\r\n * @module ol/View\r\n */\r\nimport BaseObject from './Object.js';\r\nimport GeometryType from './geom/GeometryType.js';\r\nimport Units from './proj/Units.js';\r\nimport ViewHint from './ViewHint.js';\r\nimport ViewProperty from './ViewProperty.js';\r\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\r\nimport {\r\n  METERS_PER_UNIT,\r\n  createProjection,\r\n  disableCoordinateWarning,\r\n  fromUserCoordinate,\r\n  fromUserExtent,\r\n  getUserProjection,\r\n  toUserCoordinate,\r\n  toUserExtent,\r\n} from './proj.js';\r\nimport {VOID} from './functions.js';\r\nimport {\r\n  add as addCoordinate,\r\n  equals as coordinatesEqual,\r\n  equals,\r\n  rotate as rotateCoordinate,\r\n} from './coordinate.js';\r\nimport {assert} from './asserts.js';\r\nimport {assign} from './obj.js';\r\nimport {none as centerNone, createExtent} from './centerconstraint.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport {\r\n  createMinMaxResolution,\r\n  createSnapToPower,\r\n  createSnapToResolutions,\r\n} from './resolutionconstraint.js';\r\nimport {\r\n  createSnapToN,\r\n  createSnapToZero,\r\n  disable,\r\n  none as rotationNone,\r\n} from './rotationconstraint.js';\r\nimport {easeOut, inAndOut} from './easing.js';\r\nimport {\r\n  getCenter,\r\n  getForViewAndSize,\r\n  getHeight,\r\n  getWidth,\r\n  isEmpty,\r\n} from './extent.js';\r\nimport {linearFindNearest} from './array.js';\r\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\r\n\r\n/**\r\n * An animation configuration\r\n *\r\n * @typedef {Object} Animation\r\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\r\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\r\n * @property {number} [sourceResolution] Source resolution.\r\n * @property {number} [targetResolution] Target resolution.\r\n * @property {number} [sourceRotation] Source rotation.\r\n * @property {number} [targetRotation] Target rotation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\r\n * @property {number} start Start.\r\n * @property {number} duration Duration.\r\n * @property {boolean} complete Complete.\r\n * @property {function(number):number} easing Easing.\r\n * @property {function(boolean):void} callback Callback.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Constraints\r\n * @property {import(\"./centerconstraint.js\").Type} center Center.\r\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\r\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FitOptions\r\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\r\n * the extent into. Default is the current size of the first map in the DOM that\r\n * uses this view, or `[100, 100]` if no such map is found.\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\r\n * cleared inside the view. Values in the array are top, right, bottom and left\r\n * padding.\r\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\r\n * get the nearest extent instead of the closest that actually fits the view.\r\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\r\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\r\n * `minResolution` is given, this property is ignored.\r\n * @property {number} [duration] The duration of the animation in milliseconds.\r\n * By default, there is no animation to the target extent.\r\n * @property {function(number):number} [easing] The easing function used during\r\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n * @property {function(boolean):void} [callback] Function called when the view is in\r\n * its final position. The callback will be called with `true` if the animation\r\n * series completed on its own or `false` if it was cancelled.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ViewOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\r\n * the view. If a user projection is not set, the coordinate system for the center is\r\n * specified with the `projection` option. Layer sources will not be fetched if this\r\n * is not set, but the center can be set later with {@link #setCenter}.\r\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\r\n * `false` means no constraint. `true` means no constraint, but snap to zero\r\n * near zero. A number constrains the rotation to that number of values. For\r\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\r\n * @property {boolean} [enableRotation=true] Enable rotation.\r\n * If `false`, a rotation constraint that always sets the rotation to zero is\r\n * used. The `constrainRotation` option has no effect if `enableRotation` is\r\n * `false`.\r\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\r\n * view, in other words, nothing outside of this extent can be visible on the map.\r\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\r\n * constraint will only apply to the view center and not the whole extent.\r\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\r\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\r\n * of the given `extent`.\r\n * @property {number} [maxResolution] The maximum resolution used to determine\r\n * the resolution constraint. It is used together with `minResolution` (or\r\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\r\n * that the projection's validity extent fits in a 256x256 px tile. If the\r\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\r\n * to `40075016.68557849 / 256 = 156543.03392804097`.\r\n * @property {number} [minResolution] The minimum resolution used to determine\r\n * the resolution constraint.  It is used together with `maxResolution` (or\r\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\r\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\r\n * (the default) then `minResolution` defaults to\r\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\r\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\r\n * resolution constraint. It is used together with `minZoom` (or\r\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\r\n * provided, it is given precedence over `maxZoom`.\r\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\r\n * resolution constraint. It is used together with `maxZoom` (or\r\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\r\n * provided, it is given precedence over `minZoom`.\r\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\r\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\r\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\r\n * global.  Note that if `extent` is also provided it is given precedence.\r\n * @property {boolean} [constrainResolution=false] If true, the view will always\r\n * animate to the closest zoom level after an interaction; false means\r\n * intermediary zoom levels are allowed.\r\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\r\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\r\n * the given resolution or zoom bounds.\r\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\r\n * show the full configured extent. By default, when a view is configured with an\r\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\r\n * either dimension. This means the full extent may not be visible if the viewport\r\n * is taller or wider than the aspect ratio of the configured extent. If\r\n * showFullExtent is true, the user will be able to zoom out so that the viewport\r\n * exceeds the height or width of the configured extent, but not both, allowing the\r\n * full extent to be shown.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\r\n * projection. The default is Spherical Mercator.\r\n * @property {number} [resolution] The initial resolution for the view. The\r\n * units are `projection` units per pixel (e.g. meters per pixel). An\r\n * alternative to setting this is to set `zoom`. Layer sources will not be\r\n * fetched if neither this nor `zoom` are defined, but they can be set later\r\n * with {@link #setZoom} or {@link #setResolution}.\r\n * @property {Array<number>} [resolutions] Resolutions that determine the\r\n * zoom levels if specified. The index in the array corresponds to the zoom level,\r\n * therefore the resolution values have to be in descending order. It also constrains\r\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\r\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\r\n * @property {number} [rotation=0] The initial rotation for the view in radians\r\n * (positive rotation clockwise, 0 means North).\r\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\r\n * level used to calculate the initial resolution for the view.\r\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\r\n * corresponding resolution.\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\r\n * If the map viewport is partially covered with other content (overlays) along\r\n * its edges, this setting allows to shift the center of the viewport away from\r\n * that content. The order of the values is top, right, bottom, left.\r\n */\r\n\r\n/**\r\n * @typedef {Object} AnimationOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\r\n * the animation.\r\n * @property {number} [zoom] The zoom level of the view at the end of the\r\n * animation. This takes precedence over `resolution`.\r\n * @property {number} [resolution] The resolution of the view at the end\r\n * of the animation.  If `zoom` is also provided, this option will be ignored.\r\n * @property {number} [rotation] The rotation of the view at the end of\r\n * the animation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\r\n * during a rotation or resolution animation.\r\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\r\n * @property {function(number):number} [easing] The easing function used\r\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n */\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @property {number} resolution Resolution.\r\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\r\n * @property {number} [nextResolution] The next resolution during an animation series.\r\n * @property {number} [nextRotation] The next rotation during an animation series.\r\n * @property {number} rotation Rotation.\r\n * @property {number} zoom Zoom.\r\n */\r\n\r\n/**\r\n * Default min zoom level for the map view.\r\n * @type {number}\r\n */\r\nconst DEFAULT_MIN_ZOOM = 0;\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A View object represents a simple 2D view of the map.\r\n *\r\n * This is the object to act upon to change the center, resolution,\r\n * and rotation of the map.\r\n *\r\n * A View has a `projection`. The projection determines the\r\n * coordinate system of the center, and its units determine the units of the\r\n * resolution (projection units per pixel). The default projection is\r\n * Web Mercator (EPSG:3857).\r\n *\r\n * ### The view states\r\n *\r\n * A View is determined by three states: `center`, `resolution`,\r\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\r\n * `getCenter` and `setCenter` for the `center` state.\r\n *\r\n * The `zoom` state is actually not saved on the view: all computations\r\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\r\n * methods are available, as well as `getResolutionForZoom` and\r\n * `getZoomForResolution` to switch from one system to the other.\r\n *\r\n * ### The constraints\r\n *\r\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\r\n * states of the view, but any constraint defined in the constructor will\r\n * be applied along the way.\r\n *\r\n * A View object can have a *resolution constraint*, a *rotation constraint*\r\n * and a *center constraint*.\r\n *\r\n * The *resolution constraint* typically restricts min/max values and\r\n * snaps to specific resolutions. It is determined by the following\r\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\r\n * If `resolutions` is set, the other three options are ignored. See\r\n * documentation for each option for more information. By default, the view\r\n * only has a min/max restriction and allow intermediary zoom levels when\r\n * pinch-zooming for example.\r\n *\r\n * The *rotation constraint* snaps to specific angles. It is determined\r\n * by the following options: `enableRotation` and `constrainRotation`.\r\n * By default rotation is allowed and its value is snapped to zero when approaching the\r\n * horizontal.\r\n *\r\n * The *center constraint* is determined by the `extent` option. By\r\n * default the view center is not constrained at all.\r\n *\r\n * ### Changing the view state\r\n *\r\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\r\n * `setRotation` are subject to the above mentioned constraints. As such, it\r\n * may sometimes not be possible to know in advance the resulting state of the\r\n * View. For example, calling `setResolution(10)` does not guarantee that\r\n * `getResolution()` will return `10`.\r\n *\r\n * A consequence of this is that, when applying a delta on the view state, one\r\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\r\n * rather than the corresponding setters. This will let view do its internal\r\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\r\n * argument which allows specifying an origin for the transformation.\r\n *\r\n * ### Interacting with the view\r\n *\r\n * View constraints are usually only applied when the view is *at rest*, meaning that\r\n * no interaction or animation is ongoing. As such, if the user puts the view in a\r\n * state that is not equivalent to a constrained one (e.g. rotating the view when\r\n * the snap angle is 0), an animation will be triggered at the interaction end to\r\n * put back the view to a stable state;\r\n *\r\n * @api\r\n */\r\nclass View extends BaseObject {\r\n  /**\r\n   * @param {ViewOptions} [opt_options] View options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ViewOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    const options = assign({}, opt_options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.hints_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Array<Animation>>}\r\n     */\r\n    this.animations_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.updateAnimationKey_;\r\n\r\n    /**\r\n     * @private\r\n     * @const\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\r\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./size.js\").Size}\r\n     */\r\n    this.viewportSize_ = [100, 100];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */\r\n    this.targetCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.targetResolution_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.targetRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate}\r\n     */\r\n    this.nextCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.nextResolution_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.nextRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */\r\n    this.cancelAnchor_ = undefined;\r\n\r\n    if (options.center) {\r\n      options.center = fromUserCoordinate(options.center, this.projection_);\r\n    }\r\n    if (options.extent) {\r\n      options.extent = fromUserExtent(options.extent, this.projection_);\r\n    }\r\n    if (options.projection) {\r\n      disableCoordinateWarning();\r\n    }\r\n\r\n    this.applyOptions_(options);\r\n  }\r\n\r\n  /**\r\n   * Set up the view with the given options.\r\n   * @param {ViewOptions} options View options.\r\n   */\r\n  applyOptions_(options) {\r\n    const properties = assign({}, options);\r\n    for (const key in ViewProperty) {\r\n      delete properties[key];\r\n    }\r\n    this.setProperties(properties, true);\r\n\r\n    const resolutionConstraintInfo = createResolutionConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|undefined}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n\r\n    /**\r\n     * @type {Array<number>|undefined}\r\n     * @private\r\n     */\r\n    this.padding_ = options.padding;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\r\n\r\n    const centerConstraint = createCenterConstraint(options);\r\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\r\n    const rotationConstraint = createRotationConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Constraints}\r\n     */\r\n    this.constraints_ = {\r\n      center: centerConstraint,\r\n      resolution: resolutionConstraint,\r\n      rotation: rotationConstraint,\r\n    };\r\n\r\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\r\n    this.setCenterInternal(\r\n      options.center !== undefined ? options.center : null\r\n    );\r\n    if (options.resolution !== undefined) {\r\n      this.setResolution(options.resolution);\r\n    } else if (options.zoom !== undefined) {\r\n      this.setZoom(options.zoom);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Padding (in css pixels).\r\n   * If the map viewport is partially covered with other content (overlays) along\r\n   * its edges, this setting allows to shift the center of the viewport away from that\r\n   * content. The order of the values in the array is top, right, bottom, left.\r\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\r\n   * @type {Array<number>|undefined}\r\n   * @api\r\n   */\r\n  get padding() {\r\n    return this.padding_;\r\n  }\r\n  set padding(padding) {\r\n    let oldPadding = this.padding_;\r\n    this.padding_ = padding;\r\n    const center = this.getCenter();\r\n    if (center) {\r\n      const newPadding = padding || [0, 0, 0, 0];\r\n      oldPadding = oldPadding || [0, 0, 0, 0];\r\n      const resolution = this.getResolution();\r\n      const offsetX =\r\n        (resolution / 2) *\r\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\r\n      const offsetY =\r\n        (resolution / 2) *\r\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\r\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an updated version of the view options used to construct the view.  The\r\n   * current resolution (or zoom), center, and rotation are applied to any stored\r\n   * options.  The provided options can be used to apply new min/max zoom or\r\n   * resolution limits.\r\n   * @param {ViewOptions} newOptions New options to be applied.\r\n   * @return {ViewOptions} New options updated with the current view state.\r\n   */\r\n  getUpdatedOptions_(newOptions) {\r\n    const options = this.getProperties();\r\n\r\n    // preserve resolution (or zoom)\r\n    if (options.resolution !== undefined) {\r\n      options.resolution = this.getResolution();\r\n    } else {\r\n      options.zoom = this.getZoom();\r\n    }\r\n\r\n    // preserve center\r\n    options.center = this.getCenterInternal();\r\n\r\n    // preserve rotation\r\n    options.rotation = this.getRotation();\r\n\r\n    return assign({}, options, newOptions);\r\n  }\r\n\r\n  /**\r\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\r\n   * can be animated for smooth transitions between view states.  For example,\r\n   * to animate the view to a new zoom level:\r\n   *\r\n   *     view.animate({zoom: view.getZoom() + 1});\r\n   *\r\n   * By default, the animation lasts one second and uses in-and-out easing.  You\r\n   * can customize this behavior by including `duration` (in milliseconds) and\r\n   * `easing` options (see {@link module:ol/easing}).\r\n   *\r\n   * To chain together multiple animations, call the method with multiple\r\n   * animation objects.  For example, to first zoom and then pan:\r\n   *\r\n   *     view.animate({zoom: 10}, {center: [0, 0]});\r\n   *\r\n   * If you provide a function as the last argument to the animate method, it\r\n   * will get called at the end of an animation series.  The callback will be\r\n   * called with `true` if the animation series completed on its own or `false`\r\n   * if it was cancelled.\r\n   *\r\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\r\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\r\n   * (or another method that calls one of these).\r\n   *\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\r\n   *     options.  Multiple animations can be run in series by passing multiple\r\n   *     options objects.  To run multiple animations in parallel, call the method\r\n   *     multiple times.  An optional callback can be provided as a final\r\n   *     argument.  The callback will be called with a boolean indicating whether\r\n   *     the animation completed without being cancelled.\r\n   * @api\r\n   */\r\n  animate(var_args) {\r\n    if (this.isDef() && !this.getAnimating()) {\r\n      this.resolveConstraints(0);\r\n    }\r\n    const args = new Array(arguments.length);\r\n    for (let i = 0; i < args.length; ++i) {\r\n      let options = arguments[i];\r\n      if (options.center) {\r\n        options = assign({}, options);\r\n        options.center = fromUserCoordinate(\r\n          options.center,\r\n          this.getProjection()\r\n        );\r\n      }\r\n      if (options.anchor) {\r\n        options = assign({}, options);\r\n        options.anchor = fromUserCoordinate(\r\n          options.anchor,\r\n          this.getProjection()\r\n        );\r\n      }\r\n      args[i] = options;\r\n    }\r\n    this.animateInternal.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\r\n   */\r\n  animateInternal(var_args) {\r\n    let animationCount = arguments.length;\r\n    let callback;\r\n    if (\r\n      animationCount > 1 &&\r\n      typeof arguments[animationCount - 1] === 'function'\r\n    ) {\r\n      callback = arguments[animationCount - 1];\r\n      --animationCount;\r\n    }\r\n\r\n    let i = 0;\r\n    for (; i < animationCount && !this.isDef(); ++i) {\r\n      // if view properties are not yet set, shortcut to the final state\r\n      const state = arguments[i];\r\n      if (state.center) {\r\n        this.setCenterInternal(state.center);\r\n      }\r\n      if (state.zoom !== undefined) {\r\n        this.setZoom(state.zoom);\r\n      } else if (state.resolution) {\r\n        this.setResolution(state.resolution);\r\n      }\r\n      if (state.rotation !== undefined) {\r\n        this.setRotation(state.rotation);\r\n      }\r\n    }\r\n    if (i === animationCount) {\r\n      if (callback) {\r\n        animationCallback(callback, true);\r\n      }\r\n      return;\r\n    }\r\n\r\n    let start = Date.now();\r\n    let center = this.targetCenter_.slice();\r\n    let resolution = this.targetResolution_;\r\n    let rotation = this.targetRotation_;\r\n    const series = [];\r\n    for (; i < animationCount; ++i) {\r\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\r\n\r\n      const animation = {\r\n        start: start,\r\n        complete: false,\r\n        anchor: options.anchor,\r\n        duration: options.duration !== undefined ? options.duration : 1000,\r\n        easing: options.easing || inAndOut,\r\n        callback: callback,\r\n      };\r\n\r\n      if (options.center) {\r\n        animation.sourceCenter = center;\r\n        animation.targetCenter = options.center.slice();\r\n        center = animation.targetCenter;\r\n      }\r\n\r\n      if (options.zoom !== undefined) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\r\n        resolution = animation.targetResolution;\r\n      } else if (options.resolution) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = options.resolution;\r\n        resolution = animation.targetResolution;\r\n      }\r\n\r\n      if (options.rotation !== undefined) {\r\n        animation.sourceRotation = rotation;\r\n        const delta =\r\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\r\n        animation.targetRotation = rotation + delta;\r\n        rotation = animation.targetRotation;\r\n      }\r\n\r\n      // check if animation is a no-op\r\n      if (isNoopAnimation(animation)) {\r\n        animation.complete = true;\r\n        // we still push it onto the series for callback handling\r\n      } else {\r\n        start += animation.duration;\r\n      }\r\n      series.push(animation);\r\n    }\r\n    this.animations_.push(series);\r\n    this.setHint(ViewHint.ANIMATING, 1);\r\n    this.updateAnimations_();\r\n  }\r\n\r\n  /**\r\n   * Determine if the view is being animated.\r\n   * @return {boolean} The view is being animated.\r\n   * @api\r\n   */\r\n  getAnimating() {\r\n    return this.hints_[ViewHint.ANIMATING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Determine if the user is interacting with the view, such as panning or zooming.\r\n   * @return {boolean} The view is being interacted with.\r\n   * @api\r\n   */\r\n  getInteracting() {\r\n    return this.hints_[ViewHint.INTERACTING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Cancel any ongoing animations.\r\n   * @api\r\n   */\r\n  cancelAnimations() {\r\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\r\n    let anchor;\r\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\r\n      const series = this.animations_[i];\r\n      if (series[0].callback) {\r\n        animationCallback(series[0].callback, false);\r\n      }\r\n      if (!anchor) {\r\n        for (let j = 0, jj = series.length; j < jj; ++j) {\r\n          const animation = series[j];\r\n          if (!animation.complete) {\r\n            anchor = animation.anchor;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.animations_.length = 0;\r\n    this.cancelAnchor_ = anchor;\r\n    this.nextCenter_ = null;\r\n    this.nextResolution_ = NaN;\r\n    this.nextRotation_ = NaN;\r\n  }\r\n\r\n  /**\r\n   * Update all animations.\r\n   */\r\n  updateAnimations_() {\r\n    if (this.updateAnimationKey_ !== undefined) {\r\n      cancelAnimationFrame(this.updateAnimationKey_);\r\n      this.updateAnimationKey_ = undefined;\r\n    }\r\n    if (!this.getAnimating()) {\r\n      return;\r\n    }\r\n    const now = Date.now();\r\n    let more = false;\r\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\r\n      const series = this.animations_[i];\r\n      let seriesComplete = true;\r\n      for (let j = 0, jj = series.length; j < jj; ++j) {\r\n        const animation = series[j];\r\n        if (animation.complete) {\r\n          continue;\r\n        }\r\n        const elapsed = now - animation.start;\r\n        let fraction =\r\n          animation.duration > 0 ? elapsed / animation.duration : 1;\r\n        if (fraction >= 1) {\r\n          animation.complete = true;\r\n          fraction = 1;\r\n        } else {\r\n          seriesComplete = false;\r\n        }\r\n        const progress = animation.easing(fraction);\r\n        if (animation.sourceCenter) {\r\n          const x0 = animation.sourceCenter[0];\r\n          const y0 = animation.sourceCenter[1];\r\n          const x1 = animation.targetCenter[0];\r\n          const y1 = animation.targetCenter[1];\r\n          this.nextCenter_ = animation.targetCenter;\r\n          const x = x0 + progress * (x1 - x0);\r\n          const y = y0 + progress * (y1 - y0);\r\n          this.targetCenter_ = [x, y];\r\n        }\r\n        if (animation.sourceResolution && animation.targetResolution) {\r\n          const resolution =\r\n            progress === 1\r\n              ? animation.targetResolution\r\n              : animation.sourceResolution +\r\n                progress *\r\n                  (animation.targetResolution - animation.sourceResolution);\r\n          if (animation.anchor) {\r\n            const size = this.getViewportSize_(this.getRotation());\r\n            const constrainedResolution = this.constraints_.resolution(\r\n              resolution,\r\n              0,\r\n              size,\r\n              true\r\n            );\r\n            this.targetCenter_ = this.calculateCenterZoom(\r\n              constrainedResolution,\r\n              animation.anchor\r\n            );\r\n          }\r\n          this.nextResolution_ = animation.targetResolution;\r\n          this.targetResolution_ = resolution;\r\n          this.applyTargetState_(true);\r\n        }\r\n        if (\r\n          animation.sourceRotation !== undefined &&\r\n          animation.targetRotation !== undefined\r\n        ) {\r\n          const rotation =\r\n            progress === 1\r\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\r\n                Math.PI\r\n              : animation.sourceRotation +\r\n                progress *\r\n                  (animation.targetRotation - animation.sourceRotation);\r\n          if (animation.anchor) {\r\n            const constrainedRotation = this.constraints_.rotation(\r\n              rotation,\r\n              true\r\n            );\r\n            this.targetCenter_ = this.calculateCenterRotate(\r\n              constrainedRotation,\r\n              animation.anchor\r\n            );\r\n          }\r\n          this.nextRotation_ = animation.targetRotation;\r\n          this.targetRotation_ = rotation;\r\n        }\r\n        this.applyTargetState_(true);\r\n        more = true;\r\n        if (!animation.complete) {\r\n          break;\r\n        }\r\n      }\r\n      if (seriesComplete) {\r\n        this.animations_[i] = null;\r\n        this.setHint(ViewHint.ANIMATING, -1);\r\n        this.nextCenter_ = null;\r\n        this.nextResolution_ = NaN;\r\n        this.nextRotation_ = NaN;\r\n        const callback = series[0].callback;\r\n        if (callback) {\r\n          animationCallback(callback, true);\r\n        }\r\n      }\r\n    }\r\n    // prune completed series\r\n    this.animations_ = this.animations_.filter(Boolean);\r\n    if (more && this.updateAnimationKey_ === undefined) {\r\n      this.updateAnimationKey_ = requestAnimationFrame(\r\n        this.updateAnimations_.bind(this)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} rotation Target rotation.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\r\n   */\r\n  calculateCenterRotate(rotation, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenterInternal();\r\n    if (currentCenter !== undefined) {\r\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\r\n      rotateCoordinate(center, rotation - this.getRotation());\r\n      addCoordinate(center, anchor);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Target resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\r\n   */\r\n  calculateCenterZoom(resolution, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenterInternal();\r\n    const currentResolution = this.getResolution();\r\n    if (currentCenter !== undefined && currentResolution !== undefined) {\r\n      const x =\r\n        anchor[0] -\r\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\r\n      const y =\r\n        anchor[1] -\r\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\r\n      center = [x, y];\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Returns the current viewport size.\r\n   * @private\r\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\r\n   */\r\n  getViewportSize_(opt_rotation) {\r\n    const size = this.viewportSize_;\r\n    if (opt_rotation) {\r\n      const w = size[0];\r\n      const h = size[1];\r\n      return [\r\n        Math.abs(w * Math.cos(opt_rotation)) +\r\n          Math.abs(h * Math.sin(opt_rotation)),\r\n        Math.abs(w * Math.sin(opt_rotation)) +\r\n          Math.abs(h * Math.cos(opt_rotation)),\r\n      ];\r\n    } else {\r\n      return size;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\r\n   * to avoid performance hit and layout reflow.\r\n   * This should be done on map size change.\r\n   * Note: the constraints are not resolved during an animation to avoid stopping it\r\n   * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\r\n   */\r\n  setViewportSize(opt_size) {\r\n    this.viewportSize_ = Array.isArray(opt_size)\r\n      ? opt_size.slice()\r\n      : [100, 100];\r\n    if (!this.getAnimating()) {\r\n      this.resolveConstraints(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view center.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getCenter() {\r\n    const center = this.getCenterInternal();\r\n    if (!center) {\r\n      return center;\r\n    }\r\n    return toUserCoordinate(center, this.getProjection());\r\n  }\r\n\r\n  /**\r\n   * Get the view center without transforming to user projection.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   */\r\n  getCenterInternal() {\r\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\r\n      this.get(ViewProperty.CENTER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Constraints} Constraints.\r\n   */\r\n  getConstraints() {\r\n    return this.constraints_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Resolution constraint is set\r\n   */\r\n  getConstrainResolution() {\r\n    return this.get('constrainResolution');\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} [opt_hints] Destination array.\r\n   * @return {Array<number>} Hint.\r\n   */\r\n  getHints(opt_hints) {\r\n    if (opt_hints !== undefined) {\r\n      opt_hints[0] = this.hints_[0];\r\n      opt_hints[1] = this.hints_[1];\r\n      return opt_hints;\r\n    } else {\r\n      return this.hints_.slice();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the extent for the current view state and the passed size.\r\n   * The size is the pixel dimensions of the box into which the calculated extent\r\n   * should fit. In most cases you want to get the extent of the entire map,\r\n   * that is `map.getSize()`.\r\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\r\n   * of the map that uses this view will be used.\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  calculateExtent(opt_size) {\r\n    const extent = this.calculateExtentInternal(opt_size);\r\n    return toUserExtent(extent, this.getProjection());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\r\n   * the map's last known viewport size will be used.\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  calculateExtentInternal(opt_size) {\r\n    const size = opt_size || this.getViewportSizeMinusPadding_();\r\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\r\n      this.getCenterInternal()\r\n    );\r\n    assert(center, 1); // The view center is not defined\r\n    const resolution = /** @type {!number} */ (this.getResolution());\r\n    assert(resolution !== undefined, 2); // The view resolution is not defined\r\n    const rotation = /** @type {!number} */ (this.getRotation());\r\n    assert(rotation !== undefined, 3); // The view rotation is not defined\r\n\r\n    return getForViewAndSize(center, resolution, rotation, size);\r\n  }\r\n\r\n  /**\r\n   * Get the maximum resolution of the view.\r\n   * @return {number} The maximum resolution of the view.\r\n   * @api\r\n   */\r\n  getMaxResolution() {\r\n    return this.maxResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum resolution of the view.\r\n   * @return {number} The minimum resolution of the view.\r\n   * @api\r\n   */\r\n  getMinResolution() {\r\n    return this.minResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the view.\r\n   * @return {number} The maximum zoom level.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return /** @type {number} */ (\r\n      this.getZoomForResolution(this.minResolution_)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set a new maximum zoom level for the view.\r\n   * @param {number} zoom The maximum zoom level.\r\n   * @api\r\n   */\r\n  setMaxZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the view.\r\n   * @return {number} The minimum zoom level.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return /** @type {number} */ (\r\n      this.getZoomForResolution(this.maxResolution_)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set a new minimum zoom level for the view.\r\n   * @param {number} zoom The minimum zoom level.\r\n   * @api\r\n   */\r\n  setMinZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Set whether the view should allow intermediary zoom levels.\r\n   * @param {boolean} enabled Whether the resolution is constrained.\r\n   * @api\r\n   */\r\n  setConstrainResolution(enabled) {\r\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\r\n  }\r\n\r\n  /**\r\n   * Get the view projection.\r\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection_;\r\n  }\r\n\r\n  /**\r\n   * Get the view resolution.\r\n   * @return {number|undefined} The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getResolution() {\r\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\r\n  }\r\n\r\n  /**\r\n   * Get the resolutions for the view. This returns the array of resolutions\r\n   * passed to the constructor of the View, or undefined if none were given.\r\n   * @return {Array<number>|undefined} The resolutions of the view.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   * @api\r\n   */\r\n  getResolutionForExtent(extent, opt_size) {\r\n    return this.getResolutionForExtentInternal(\r\n      fromUserExtent(extent, this.getProjection()),\r\n      opt_size\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   */\r\n  getResolutionForExtentInternal(extent, opt_size) {\r\n    const size = opt_size || this.getViewportSizeMinusPadding_();\r\n    const xResolution = getWidth(extent) / size[0];\r\n    const yResolution = getHeight(extent) / size[1];\r\n    return Math.max(xResolution, yResolution);\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a value between 0 and 1 for a\r\n   * resolution. Exponential scaling is assumed.\r\n   * @param {number} [opt_power] Power.\r\n   * @return {function(number): number} Resolution for value function.\r\n   */\r\n  getResolutionForValueFunction(opt_power) {\r\n    const power = opt_power || 2;\r\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\r\n    return (\r\n      /**\r\n       * @param {number} value Value.\r\n       * @return {number} Resolution.\r\n       */\r\n      function (value) {\r\n        const resolution = maxResolution / Math.pow(power, value * max);\r\n        return resolution;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the view rotation.\r\n   * @return {number} The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a resolution for a value between\r\n   * 0 and 1. Exponential scaling is assumed.\r\n   * @param {number} [opt_power] Power.\r\n   * @return {function(number): number} Value for resolution function.\r\n   */\r\n  getValueForResolutionFunction(opt_power) {\r\n    const logPower = Math.log(opt_power || 2);\r\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / logPower;\r\n    return (\r\n      /**\r\n       * @param {number} resolution Resolution.\r\n       * @return {number} Value.\r\n       */\r\n      function (resolution) {\r\n        const value = Math.log(maxResolution / resolution) / logPower / max;\r\n        return value;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the viewport minus padding.\r\n   * @private\r\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\r\n   */\r\n  getViewportSizeMinusPadding_(opt_rotation) {\r\n    let size = this.getViewportSize_(opt_rotation);\r\n    const padding = this.padding_;\r\n    if (padding) {\r\n      size = [\r\n        size[0] - padding[1] - padding[3],\r\n        size[1] - padding[0] - padding[2],\r\n      ];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * @return {State} View state.\r\n   */\r\n  getState() {\r\n    const projection = this.getProjection();\r\n    const resolution = this.getResolution();\r\n    const rotation = this.getRotation();\r\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\r\n      this.getCenterInternal()\r\n    );\r\n    const padding = this.padding_;\r\n    if (padding) {\r\n      const reducedSize = this.getViewportSizeMinusPadding_();\r\n      center = calculateCenterOn(\r\n        center,\r\n        this.getViewportSize_(),\r\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\r\n        resolution,\r\n        rotation\r\n      );\r\n    }\r\n    return {\r\n      center: center.slice(0),\r\n      projection: projection !== undefined ? projection : null,\r\n      resolution: resolution,\r\n      nextCenter: this.nextCenter_,\r\n      nextResolution: this.nextResolution_,\r\n      nextRotation: this.nextRotation_,\r\n      rotation: rotation,\r\n      zoom: this.getZoom(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level. This method may return non-integer zoom levels\r\n   * if the view does not constrain the resolution, or if an interaction or\r\n   * animation is underway.\r\n   * @return {number|undefined} Zoom.\r\n   * @api\r\n   */\r\n  getZoom() {\r\n    let zoom;\r\n    const resolution = this.getResolution();\r\n    if (resolution !== undefined) {\r\n      zoom = this.getZoomForResolution(resolution);\r\n    }\r\n    return zoom;\r\n  }\r\n\r\n  /**\r\n   * Get the zoom level for a resolution.\r\n   * @param {number} resolution The resolution.\r\n   * @return {number|undefined} The zoom level for the provided resolution.\r\n   * @api\r\n   */\r\n  getZoomForResolution(resolution) {\r\n    let offset = this.minZoom_ || 0;\r\n    let max, zoomFactor;\r\n    if (this.resolutions_) {\r\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\r\n      offset = nearest;\r\n      max = this.resolutions_[nearest];\r\n      if (nearest == this.resolutions_.length - 1) {\r\n        zoomFactor = 2;\r\n      } else {\r\n        zoomFactor = max / this.resolutions_[nearest + 1];\r\n      }\r\n    } else {\r\n      max = this.maxResolution_;\r\n      zoomFactor = this.zoomFactor_;\r\n    }\r\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @return {number} The view resolution for the provided zoom level.\r\n   * @api\r\n   */\r\n  getResolutionForZoom(zoom) {\r\n    if (this.resolutions_) {\r\n      if (this.resolutions_.length <= 1) {\r\n        return 0;\r\n      }\r\n      const baseLevel = clamp(\r\n        Math.floor(zoom),\r\n        0,\r\n        this.resolutions_.length - 2\r\n      );\r\n      const zoomFactor =\r\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\r\n      return (\r\n        this.resolutions_[baseLevel] /\r\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\r\n      );\r\n    } else {\r\n      return (\r\n        this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fit the given geometry or extent based on the given map size and border.\r\n   * The size is pixel dimensions of the box to fit the extent into.\r\n   * In most cases you will want to use the map size, that is `map.getSize()`.\r\n   * Takes care of the map angle.\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\r\n   *     extent to fit the view to.\r\n   * @param {FitOptions} [opt_options] Options.\r\n   * @api\r\n   */\r\n  fit(geometryOrExtent, opt_options) {\r\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\r\n    let geometry;\r\n    assert(\r\n      Array.isArray(geometryOrExtent) ||\r\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\r\n          'function',\r\n      24\r\n    ); // Invalid extent or geometry provided as `geometry`\r\n    if (Array.isArray(geometryOrExtent)) {\r\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\r\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\r\n      geometry = polygonFromExtent(extent);\r\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\r\n      const extent = fromUserExtent(\r\n        geometryOrExtent.getExtent(),\r\n        this.getProjection()\r\n      );\r\n      geometry = polygonFromExtent(extent);\r\n      geometry.rotate(this.getRotation(), getCenter(extent));\r\n    } else {\r\n      const userProjection = getUserProjection();\r\n      if (userProjection) {\r\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n          geometryOrExtent\r\n            .clone()\r\n            .transform(userProjection, this.getProjection())\r\n        );\r\n      } else {\r\n        geometry = geometryOrExtent;\r\n      }\r\n    }\r\n\r\n    this.fitInternal(geometry, opt_options);\r\n  }\r\n\r\n  /**\r\n   * Calculate rotated extent\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\r\n   */\r\n  rotatedExtentForGeometry(geometry) {\r\n    const rotation = this.getRotation();\r\n    const cosAngle = Math.cos(rotation);\r\n    const sinAngle = Math.sin(-rotation);\r\n    const coords = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    let minRotX = +Infinity;\r\n    let minRotY = +Infinity;\r\n    let maxRotX = -Infinity;\r\n    let maxRotY = -Infinity;\r\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\r\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\r\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\r\n      minRotX = Math.min(minRotX, rotX);\r\n      minRotY = Math.min(minRotY, rotY);\r\n      maxRotX = Math.max(maxRotX, rotX);\r\n      maxRotY = Math.max(maxRotY, rotY);\r\n    }\r\n    return [minRotX, minRotY, maxRotX, maxRotY];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @param {FitOptions} [opt_options] Options.\r\n   */\r\n  fitInternal(geometry, opt_options) {\r\n    const options = opt_options || {};\r\n    let size = options.size;\r\n    if (!size) {\r\n      size = this.getViewportSizeMinusPadding_();\r\n    }\r\n    const padding =\r\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\r\n    const nearest = options.nearest !== undefined ? options.nearest : false;\r\n    let minResolution;\r\n    if (options.minResolution !== undefined) {\r\n      minResolution = options.minResolution;\r\n    } else if (options.maxZoom !== undefined) {\r\n      minResolution = this.getResolutionForZoom(options.maxZoom);\r\n    } else {\r\n      minResolution = 0;\r\n    }\r\n\r\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\r\n\r\n    // calculate resolution\r\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\r\n      size[0] - padding[1] - padding[3],\r\n      size[1] - padding[0] - padding[2],\r\n    ]);\r\n    resolution = isNaN(resolution)\r\n      ? minResolution\r\n      : Math.max(resolution, minResolution);\r\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\r\n\r\n    // calculate center\r\n    const rotation = this.getRotation();\r\n    const sinAngle = Math.sin(rotation);\r\n    const cosAngle = Math.cos(rotation);\r\n    const centerRot = getCenter(rotatedExtent);\r\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\r\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\r\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\r\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\r\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\r\n    const callback = options.callback ? options.callback : VOID;\r\n\r\n    if (options.duration !== undefined) {\r\n      this.animateInternal(\r\n        {\r\n          resolution: resolution,\r\n          center: center,\r\n          duration: options.duration,\r\n          easing: options.easing,\r\n        },\r\n        callback\r\n      );\r\n    } else {\r\n      this.targetResolution_ = resolution;\r\n      this.targetCenter_ = center;\r\n      this.applyTargetState_(false, true);\r\n      animationCallback(callback, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center on coordinate and view position.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   * @api\r\n   */\r\n  centerOn(coordinate, size, position) {\r\n    this.centerOnInternal(\r\n      fromUserCoordinate(coordinate, this.getProjection()),\r\n      size,\r\n      position\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   */\r\n  centerOnInternal(coordinate, size, position) {\r\n    this.setCenterInternal(\r\n      calculateCenterOn(\r\n        coordinate,\r\n        size,\r\n        position,\r\n        this.getResolution(),\r\n        this.getRotation()\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates the shift between map and viewport center.\r\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"./size.js\").Size} size Size.\r\n   * @return {Array<number>|undefined} Center shift.\r\n   */\r\n  calculateCenterShift(center, resolution, rotation, size) {\r\n    let centerShift;\r\n    const padding = this.padding_;\r\n    if (padding && center) {\r\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\r\n      const shiftedCenter = calculateCenterOn(\r\n        center,\r\n        size,\r\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\r\n        resolution,\r\n        rotation\r\n      );\r\n      centerShift = [\r\n        center[0] - shiftedCenter[0],\r\n        center[1] - shiftedCenter[1],\r\n      ];\r\n    }\r\n    return centerShift;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is defined.\r\n   */\r\n  isDef() {\r\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   * @api\r\n   */\r\n  adjustCenter(deltaCoordinates) {\r\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\r\n    this.setCenter([\r\n      center[0] + deltaCoordinates[0],\r\n      center[1] + deltaCoordinates[1],\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   */\r\n  adjustCenterInternal(deltaCoordinates) {\r\n    const center = this.targetCenter_;\r\n    this.setCenterInternal([\r\n      center[0] + deltaCoordinates[0],\r\n      center[1] + deltaCoordinates[1],\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  adjustResolution(ratio, opt_anchor) {\r\n    const anchor =\r\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\r\n    this.adjustResolutionInternal(ratio, anchor);\r\n  }\r\n\r\n  /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   */\r\n  adjustResolutionInternal(ratio, opt_anchor) {\r\n    const isMoving = this.getAnimating() || this.getInteracting();\r\n    const size = this.getViewportSize_(this.getRotation());\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_ * ratio,\r\n      0,\r\n      size,\r\n      isMoving\r\n    );\r\n\r\n    if (opt_anchor) {\r\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\r\n    }\r\n\r\n    this.targetResolution_ *= ratio;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom level.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  adjustZoom(delta, opt_anchor) {\r\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\r\n  }\r\n\r\n  /**\r\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\r\n   * @api\r\n   */\r\n  adjustRotation(delta, opt_anchor) {\r\n    if (opt_anchor) {\r\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\r\n    }\r\n    this.adjustRotationInternal(delta, opt_anchor);\r\n  }\r\n\r\n  /**\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\r\n   */\r\n  adjustRotationInternal(delta, opt_anchor) {\r\n    const isMoving = this.getAnimating() || this.getInteracting();\r\n    const newRotation = this.constraints_.rotation(\r\n      this.targetRotation_ + delta,\r\n      isMoving\r\n    );\r\n    if (opt_anchor) {\r\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\r\n    }\r\n    this.targetRotation_ += delta;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Set the center of the current view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setCenter(center) {\r\n    this.setCenterInternal(\r\n      center ? fromUserCoordinate(center, this.getProjection()) : center\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the center using the view projection (not the user projection).\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   */\r\n  setCenterInternal(center) {\r\n    this.targetCenter_ = center;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\r\n   * @param {number} delta Delta.\r\n   * @return {number} New value.\r\n   */\r\n  setHint(hint, delta) {\r\n    this.hints_[hint] += delta;\r\n    this.changed();\r\n    return this.hints_[hint];\r\n  }\r\n\r\n  /**\r\n   * Set the resolution for this view. Any resolution constraint will apply.\r\n   * @param {number|undefined} resolution The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setResolution(resolution) {\r\n    this.targetResolution_ = resolution;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Set the rotation for this view. Any rotation constraint will apply.\r\n   * @param {number} rotation The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.targetRotation_ = rotation;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\r\n   * @param {number} zoom Zoom level.\r\n   * @api\r\n   */\r\n  setZoom(zoom) {\r\n    this.setResolution(this.getResolutionForZoom(zoom));\r\n  }\r\n\r\n  /**\r\n   * Recompute rotation/resolution/center based on target values.\r\n   * Note: we have to compute rotation first, then resolution and center considering that\r\n   * parameters can influence one another in case a view extent constraint is present.\r\n   * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\r\n   * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\r\n   * @private\r\n   */\r\n  applyTargetState_(opt_doNotCancelAnims, opt_forceMoving) {\r\n    const isMoving =\r\n      this.getAnimating() || this.getInteracting() || opt_forceMoving;\r\n\r\n    // compute rotation\r\n    const newRotation = this.constraints_.rotation(\r\n      this.targetRotation_,\r\n      isMoving\r\n    );\r\n    const size = this.getViewportSize_(newRotation);\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_,\r\n      0,\r\n      size,\r\n      isMoving\r\n    );\r\n    const newCenter = this.constraints_.center(\r\n      this.targetCenter_,\r\n      newResolution,\r\n      size,\r\n      isMoving,\r\n      this.calculateCenterShift(\r\n        this.targetCenter_,\r\n        newResolution,\r\n        newRotation,\r\n        size\r\n      )\r\n    );\r\n\r\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\r\n      this.set(ViewProperty.ROTATION, newRotation);\r\n    }\r\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\r\n      this.set(ViewProperty.RESOLUTION, newResolution);\r\n      this.set('zoom', this.getZoom(), true);\r\n    }\r\n    if (\r\n      !newCenter ||\r\n      !this.get(ViewProperty.CENTER) ||\r\n      !equals(this.get(ViewProperty.CENTER), newCenter)\r\n    ) {\r\n      this.set(ViewProperty.CENTER, newCenter);\r\n    }\r\n\r\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\r\n      this.cancelAnimations();\r\n    }\r\n    this.cancelAnchor_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * If any constraints need to be applied, an animation will be triggered.\r\n   * This is typically done on interaction end.\r\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\r\n   * without animation.\r\n   * @param {number} [opt_duration] The animation duration in ms.\r\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   */\r\n  resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor) {\r\n    const duration = opt_duration !== undefined ? opt_duration : 200;\r\n    const direction = opt_resolutionDirection || 0;\r\n\r\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\r\n    const size = this.getViewportSize_(newRotation);\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_,\r\n      direction,\r\n      size\r\n    );\r\n    const newCenter = this.constraints_.center(\r\n      this.targetCenter_,\r\n      newResolution,\r\n      size,\r\n      false,\r\n      this.calculateCenterShift(\r\n        this.targetCenter_,\r\n        newResolution,\r\n        newRotation,\r\n        size\r\n      )\r\n    );\r\n\r\n    if (duration === 0 && !this.cancelAnchor_) {\r\n      this.targetResolution_ = newResolution;\r\n      this.targetRotation_ = newRotation;\r\n      this.targetCenter_ = newCenter;\r\n      this.applyTargetState_();\r\n      return;\r\n    }\r\n\r\n    const anchor =\r\n      opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\r\n    this.cancelAnchor_ = undefined;\r\n\r\n    if (\r\n      this.getResolution() !== newResolution ||\r\n      this.getRotation() !== newRotation ||\r\n      !this.getCenterInternal() ||\r\n      !equals(this.getCenterInternal(), newCenter)\r\n    ) {\r\n      if (this.getAnimating()) {\r\n        this.cancelAnimations();\r\n      }\r\n\r\n      this.animateInternal({\r\n        rotation: newRotation,\r\n        center: newCenter,\r\n        resolution: newResolution,\r\n        duration: duration,\r\n        easing: easeOut,\r\n        anchor: anchor,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has started.\r\n   * The view state will be resolved to a stable one if needed\r\n   * (depending on its constraints).\r\n   * @api\r\n   */\r\n  beginInteraction() {\r\n    this.resolveConstraints(0);\r\n\r\n    this.setHint(ViewHint.INTERACTING, 1);\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [opt_duration] Animation duration in ms.\r\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  endInteraction(opt_duration, opt_resolutionDirection, opt_anchor) {\r\n    const anchor =\r\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\r\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [opt_duration] Animation duration in ms.\r\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\r\n   */\r\n  endInteractionInternal(opt_duration, opt_resolutionDirection, opt_anchor) {\r\n    this.setHint(ViewHint.INTERACTING, -1);\r\n\r\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\r\n  }\r\n\r\n  /**\r\n   * Get a valid position for the view center according to the current constraints.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\r\n   * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\r\n   * This is useful to guess a valid center position at a different zoom level.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\r\n   */\r\n  getConstrainedCenter(targetCenter, opt_targetResolution) {\r\n    const size = this.getViewportSize_(this.getRotation());\r\n    return this.constraints_.center(\r\n      targetCenter,\r\n      opt_targetResolution || this.getResolution(),\r\n      size\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a valid zoom level according to the current view constraints.\r\n   * @param {number|undefined} targetZoom Target zoom.\r\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid zoom level.\r\n   */\r\n  getConstrainedZoom(targetZoom, opt_direction) {\r\n    const targetRes = this.getResolutionForZoom(targetZoom);\r\n    return this.getZoomForResolution(\r\n      this.getConstrainedResolution(targetRes, opt_direction)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a valid resolution according to the current view constraints.\r\n   * @param {number|undefined} targetResolution Target resolution.\r\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid resolution.\r\n   */\r\n  getConstrainedResolution(targetResolution, opt_direction) {\r\n    const direction = opt_direction || 0;\r\n    const size = this.getViewportSize_(this.getRotation());\r\n\r\n    return this.constraints_.resolution(targetResolution, direction, size);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Function} callback Callback.\r\n * @param {*} returnValue Return value.\r\n */\r\nfunction animationCallback(callback, returnValue) {\r\n  setTimeout(function () {\r\n    callback(returnValue);\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\r\n */\r\nexport function createCenterConstraint(options) {\r\n  if (options.extent !== undefined) {\r\n    const smooth =\r\n      options.smoothExtentConstraint !== undefined\r\n        ? options.smoothExtentConstraint\r\n        : true;\r\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\r\n  }\r\n\r\n  const projection = createProjection(options.projection, 'EPSG:3857');\r\n  if (options.multiWorld !== true && projection.isGlobal()) {\r\n    const extent = projection.getExtent().slice();\r\n    extent[0] = -Infinity;\r\n    extent[2] = Infinity;\r\n    return createExtent(extent, false, false);\r\n  }\r\n\r\n  return centerNone;\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\r\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\r\n */\r\nexport function createResolutionConstraint(options) {\r\n  let resolutionConstraint;\r\n  let maxResolution;\r\n  let minResolution;\r\n\r\n  // TODO: move these to be ol constants\r\n  // see https://github.com/openlayers/openlayers/issues/2076\r\n  const defaultMaxZoom = 28;\r\n  const defaultZoomFactor = 2;\r\n\r\n  let minZoom =\r\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\r\n\r\n  let maxZoom =\r\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\r\n\r\n  const zoomFactor =\r\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\r\n\r\n  const multiWorld =\r\n    options.multiWorld !== undefined ? options.multiWorld : false;\r\n\r\n  const smooth =\r\n    options.smoothResolutionConstraint !== undefined\r\n      ? options.smoothResolutionConstraint\r\n      : true;\r\n\r\n  const showFullExtent =\r\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\r\n\r\n  const projection = createProjection(options.projection, 'EPSG:3857');\r\n  const projExtent = projection.getExtent();\r\n  let constrainOnlyCenter = options.constrainOnlyCenter;\r\n  let extent = options.extent;\r\n  if (!multiWorld && !extent && projection.isGlobal()) {\r\n    constrainOnlyCenter = false;\r\n    extent = projExtent;\r\n  }\r\n\r\n  if (options.resolutions !== undefined) {\r\n    const resolutions = options.resolutions;\r\n    maxResolution = resolutions[minZoom];\r\n    minResolution =\r\n      resolutions[maxZoom] !== undefined\r\n        ? resolutions[maxZoom]\r\n        : resolutions[resolutions.length - 1];\r\n\r\n    if (options.constrainResolution) {\r\n      resolutionConstraint = createSnapToResolutions(\r\n        resolutions,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent\r\n      );\r\n    } else {\r\n      resolutionConstraint = createMinMaxResolution(\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent\r\n      );\r\n    }\r\n  } else {\r\n    // calculate the default min and max resolution\r\n    const size = !projExtent\r\n      ? // use an extent that can fit the whole world if need be\r\n        (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()\r\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\r\n\r\n    const defaultMaxResolution =\r\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\r\n\r\n    const defaultMinResolution =\r\n      defaultMaxResolution /\r\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\r\n\r\n    // user provided maxResolution takes precedence\r\n    maxResolution = options.maxResolution;\r\n    if (maxResolution !== undefined) {\r\n      minZoom = 0;\r\n    } else {\r\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\r\n    }\r\n\r\n    // user provided minResolution takes precedence\r\n    minResolution = options.minResolution;\r\n    if (minResolution === undefined) {\r\n      if (options.maxZoom !== undefined) {\r\n        if (options.maxResolution !== undefined) {\r\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\r\n        } else {\r\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\r\n        }\r\n      } else {\r\n        minResolution = defaultMinResolution;\r\n      }\r\n    }\r\n\r\n    // given discrete zoom levels, minResolution may be different than provided\r\n    maxZoom =\r\n      minZoom +\r\n      Math.floor(\r\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\r\n      );\r\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\r\n\r\n    if (options.constrainResolution) {\r\n      resolutionConstraint = createSnapToPower(\r\n        zoomFactor,\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent\r\n      );\r\n    } else {\r\n      resolutionConstraint = createMinMaxResolution(\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent\r\n      );\r\n    }\r\n  }\r\n  return {\r\n    constraint: resolutionConstraint,\r\n    maxResolution: maxResolution,\r\n    minResolution: minResolution,\r\n    minZoom: minZoom,\r\n    zoomFactor: zoomFactor,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\r\n */\r\nexport function createRotationConstraint(options) {\r\n  const enableRotation =\r\n    options.enableRotation !== undefined ? options.enableRotation : true;\r\n  if (enableRotation) {\r\n    const constrainRotation = options.constrainRotation;\r\n    if (constrainRotation === undefined || constrainRotation === true) {\r\n      return createSnapToZero();\r\n    } else if (constrainRotation === false) {\r\n      return rotationNone;\r\n    } else if (typeof constrainRotation === 'number') {\r\n      return createSnapToN(constrainRotation);\r\n    } else {\r\n      return rotationNone;\r\n    }\r\n  } else {\r\n    return disable;\r\n  }\r\n}\r\n\r\n/**\r\n * Determine if an animation involves no view change.\r\n * @param {Animation} animation The animation.\r\n * @return {boolean} The animation involves no view change.\r\n */\r\nexport function isNoopAnimation(animation) {\r\n  if (animation.sourceCenter && animation.targetCenter) {\r\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\r\n      return false;\r\n    }\r\n  }\r\n  if (animation.sourceResolution !== animation.targetResolution) {\r\n    return false;\r\n  }\r\n  if (animation.sourceRotation !== animation.targetRotation) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {import(\"./size.js\").Size} size Box pixel size.\r\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\r\n */\r\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\r\n  // calculate rotated position\r\n  const cosAngle = Math.cos(-rotation);\r\n  let sinAngle = Math.sin(-rotation);\r\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\r\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\r\n  rotX += (size[0] / 2 - position[0]) * resolution;\r\n  rotY += (position[1] - size[1] / 2) * resolution;\r\n\r\n  // go back to original angle\r\n  sinAngle = -sinAngle; // go back to original rotation\r\n  const centerX = rotX * cosAngle - rotY * sinAngle;\r\n  const centerY = rotY * cosAngle + rotX * sinAngle;\r\n\r\n  return [centerX, centerY];\r\n}\r\n\r\nexport default View;\r\n"],
  "mappings": "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",
  "names": ["offset", "none", "offset", "squaredDistance", "offset", "LinearRing", "coordinates", "offset", "offset", "offset", "offset", "offset", "offset", "__extends", "Polygon", "coordinates", "linearRing", "linearRings", "offset", "offset", "__extends", "View", "offset", "none"]
}

{
  "version": 3,
  "sources": ["../../@vaadin/text-field/src/vaadin-text-field-mixin.js", "../../@vaadin/text-field/src/vaadin-text-field.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\n\r\n/**\r\n * A mixin providing common text field functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes InputFieldMixin\r\n */\r\nexport const TextFieldMixin = (superClass) =>\r\n  class TextFieldMixinClass extends InputFieldMixin(superClass) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Maximum number of characters (in Unicode code points) that the user can enter.\r\n         */\r\n        maxlength: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * Minimum number of characters (in Unicode code points) that the user can enter.\r\n         */\r\n        minlength: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * A regular expression that the value is checked against.\r\n         * The pattern must match the entire value, not just some subset.\r\n         */\r\n        pattern: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get delegateAttrs() {\r\n      return [...super.delegateAttrs, 'maxlength', 'minlength', 'pattern'];\r\n    }\r\n\r\n    static get constraints() {\r\n      return [...super.constraints, 'maxlength', 'minlength', 'pattern'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this._setType('text');\r\n    }\r\n\r\n    /** @protected */\r\n    get clearElement() {\r\n      return this.$.clearButton;\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(\r\n        new InputController(this, (input) => {\r\n          this._setInputElement(input);\r\n          this._setFocusElement(input);\r\n          this.stateTarget = input;\r\n          this.ariaTarget = input;\r\n        }),\r\n      );\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport { html, PolymerElement } from '@polymer/polymer';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { TextFieldMixin } from './vaadin-text-field-mixin.js';\r\n\r\nregisterStyles('vaadin-text-field', inputFieldShared, { moduleId: 'vaadin-text-field-styles' });\r\n\r\n/**\r\n * `<vaadin-text-field>` is a web component that allows the user to input and edit text.\r\n *\r\n * ```html\r\n * <vaadin-text-field label=\"First Name\"></vaadin-text-field>\r\n * ```\r\n *\r\n * ### Prefixes and suffixes\r\n *\r\n * These are child elements of a `<vaadin-text-field>` that are displayed\r\n * inline with the input, before or after.\r\n * In order for an element to be considered as a prefix, it must have the slot\r\n * attribute set to `prefix` (and similarly for `suffix`).\r\n *\r\n * ```html\r\n * <vaadin-text-field label=\"Email address\">\r\n *   <div slot=\"prefix\">Sent to:</div>\r\n *   <div slot=\"suffix\">@vaadin.com</div>\r\n * </vaadin-text-field>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following custom properties are available for styling:\r\n *\r\n * Custom property                | Description                | Default\r\n * -------------------------------|----------------------------|---------\r\n * `--vaadin-field-default-width` | Default width of the field | `12em`\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name            | Description\r\n * ---------------------|----------------\r\n * `label`              | The label element\r\n * `input-field`        | The element that wraps prefix, value and suffix\r\n * `clear-button`       | The clear button\r\n * `error-message`      | The error message element\r\n * `helper-text`        | The helper text element wrapper\r\n * `required-indicator` | The `required` state indicator element\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute           | Description | Part name\r\n * --------------------|-------------|------------\r\n * `disabled`          | Set to a disabled text field | :host\r\n * `has-value`         | Set when the element has a value | :host\r\n * `has-label`         | Set when the element has a label | :host\r\n * `has-helper`        | Set when the element has helper text or slot | :host\r\n * `has-error-message` | Set when the element has an error message | :host\r\n * `invalid`           | Set when the element is invalid | :host\r\n * `input-prevented`   | Temporarily set when invalid input is prevented | :host\r\n * `focused`           | Set when the element is focused | :host\r\n * `focus-ring`        | Set when the element is keyboard focused | :host\r\n * `readonly`          | Set to a readonly text field | :host\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n * @mixes TextFieldMixin\r\n */\r\nexport class TextField extends TextFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-text-field';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-field-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-input-container\r\n          part=\"input-field\"\r\n          readonly=\"[[readonly]]\"\r\n          disabled=\"[[disabled]]\"\r\n          invalid=\"[[invalid]]\"\r\n          theme$=\"[[_theme]]\"\r\n        >\r\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n          <slot name=\"input\"></slot>\r\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n        </vaadin-input-container>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this._tooltipController = new TooltipController(this);\r\n    this._tooltipController.setPosition('top');\r\n    this._tooltipController.setAriaTarget(this.inputElement);\r\n    this.addController(this._tooltipController);\r\n  }\r\n}\r\n\r\ndefineCustomElement(TextField);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,IAAM,iBAAiB,CAAC,eAC7B,MAAM,4BAA4B,gBAAgB,UAAU,EAAE;AAAA,EAC5D,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,WAAW;AAAA,QACT,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA,MAKA,WAAW;AAAA,QACT,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe,aAAa,aAAa,SAAS;AAAA,EACrE;AAAA,EAEA,WAAW,cAAc;AACvB,WAAO,CAAC,GAAG,MAAM,aAAa,aAAa,aAAa,SAAS;AAAA,EACnE;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA;AAAA,EAGA,IAAI,eAAe;AACjB,WAAO,KAAK,EAAE;AAAA,EAChB;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK;AAAA,MACH,IAAI,gBAAgB,MAAM,CAAC,UAAU;AACnC,aAAK,iBAAiB,KAAK;AAC3B,aAAK,iBAAiB,KAAK;AAC3B,aAAK,cAAc;AACnB,aAAK,aAAa;AAAA,MACpB,CAAC;AAAA,IACH;AACA,SAAK,cAAc,IAAI,wBAAwB,KAAK,cAAc,KAAK,gBAAgB,CAAC;AAAA,EAC1F;AACF;;;AC7DF,eAAe,qBAAqB,kBAAkB,EAAE,UAAU,2BAA2B,CAAC;AAuEvF,IAAM,YAAN,cAAwB,eAAe,cAAc,aAAa,cAAc,CAAC,CAAC,EAAE;AAAA,EACzF,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BT;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,qBAAqB,IAAI,kBAAkB,IAAI;AACpD,SAAK,mBAAmB,YAAY,KAAK;AACzC,SAAK,mBAAmB,cAAc,KAAK,YAAY;AACvD,SAAK,cAAc,KAAK,kBAAkB;AAAA,EAC5C;AACF;AAEA,oBAAoB,SAAS;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/dir-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * Array of Vaadin custom element classes that have been subscribed to the dir changes.\r\n */\r\nconst directionSubscribers = [];\r\n\r\nfunction alignDirs(element, documentDir, elementDir = element.getAttribute('dir')) {\r\n  if (documentDir) {\r\n    element.setAttribute('dir', documentDir);\r\n  } else if (elementDir != null) {\r\n    element.removeAttribute('dir');\r\n  }\r\n}\r\n\r\nfunction getDocumentDir() {\r\n  return document.documentElement.getAttribute('dir');\r\n}\r\n\r\nfunction directionUpdater() {\r\n  const documentDir = getDocumentDir();\r\n  directionSubscribers.forEach((element) => {\r\n    alignDirs(element, documentDir);\r\n  });\r\n}\r\n\r\nconst directionObserver = new MutationObserver(directionUpdater);\r\ndirectionObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['dir'] });\r\n\r\n/**\r\n * A mixin to handle `dir` attribute based on the one set on the `<html>` element.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const DirMixin = (superClass) =>\r\n  class VaadinDirMixin extends superClass {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * @protected\r\n         */\r\n        dir: {\r\n          type: String,\r\n          value: '',\r\n          reflectToAttribute: true,\r\n          converter: {\r\n            fromAttribute: (attr) => {\r\n              return !attr ? '' : attr;\r\n            },\r\n            toAttribute: (prop) => {\r\n              return prop === '' ? null : prop;\r\n            },\r\n          },\r\n        },\r\n      };\r\n    }\r\n\r\n    /**\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    get __isRTL() {\r\n      return this.getAttribute('dir') === 'rtl';\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      if (!this.hasAttribute('dir') || this.__restoreSubscription) {\r\n        this.__subscribe();\r\n        alignDirs(this, getDocumentDir(), null);\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n      super.attributeChangedCallback(name, oldValue, newValue);\r\n      if (name !== 'dir') {\r\n        return;\r\n      }\r\n\r\n      const documentDir = getDocumentDir();\r\n\r\n      // New value equals to the document direction and the element is not subscribed to the changes\r\n      const newValueEqlDocDir = newValue === documentDir && directionSubscribers.indexOf(this) === -1;\r\n      // Value was emptied and the element is not subscribed to the changes\r\n      const newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1;\r\n      // New value is different and the old equals to document direction and the element is not subscribed to the changes\r\n      const newDiffValue = newValue !== documentDir && oldValue === documentDir;\r\n\r\n      if (newValueEqlDocDir || newValueEmptied) {\r\n        this.__subscribe();\r\n        alignDirs(this, documentDir, newValue);\r\n      } else if (newDiffValue) {\r\n        this.__unsubscribe();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      this.__restoreSubscription = directionSubscribers.includes(this);\r\n      this.__unsubscribe();\r\n    }\r\n\r\n    /** @protected */\r\n    _valueToNodeAttribute(node, value, attribute) {\r\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\r\n      // If the property contains an empty string then it should not create an empty attribute\r\n      if (attribute === 'dir' && value === '' && !node.hasAttribute('dir')) {\r\n        return;\r\n      }\r\n      super._valueToNodeAttribute(node, value, attribute);\r\n    }\r\n\r\n    /** @protected */\r\n    _attributeToProperty(attribute, value, type) {\r\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\r\n      // If the attribute is removed, then the dir property should contain an empty string instead of null\r\n      if (attribute === 'dir' && !value) {\r\n        this.dir = '';\r\n      } else {\r\n        super._attributeToProperty(attribute, value, type);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __subscribe() {\r\n      if (!directionSubscribers.includes(this)) {\r\n        directionSubscribers.push(this);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __unsubscribe() {\r\n      if (directionSubscribers.includes(this)) {\r\n        directionSubscribers.splice(directionSubscribers.indexOf(this), 1);\r\n      }\r\n    }\r\n  };\r\n"],
  "mappings": "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",
  "names": []
}

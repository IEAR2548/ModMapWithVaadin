{
  "version": 3,
  "sources": ["../../@vaadin/checkbox-group/theme/lumo/vaadin-checkbox-group-styles.js", "../../@vaadin/checkbox-group/src/vaadin-checkbox-group-mixin.js", "../../@vaadin/checkbox-group/src/vaadin-checkbox-group-styles.js", "../../@vaadin/checkbox-group/src/vaadin-checkbox-group.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { helper } from '@vaadin/vaadin-lumo-styles/mixins/helper.js';\r\nimport { requiredField } from '@vaadin/vaadin-lumo-styles/mixins/required-field.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst checkboxGroup = css`\r\n  :host {\r\n    color: var(--lumo-body-text-color);\r\n    font-size: var(--lumo-font-size-m);\r\n    font-family: var(--lumo-font-family);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-tap-highlight-color: transparent;\r\n    padding: var(--lumo-space-xs) 0;\r\n  }\r\n\r\n  :host::before {\r\n    /* Effective height of vaadin-checkbox */\r\n    height: var(--lumo-size-s);\r\n    box-sizing: border-box;\r\n    display: inline-flex;\r\n    align-items: center;\r\n  }\r\n\r\n  :host([theme~='vertical']) [part='group-field'] {\r\n    flex-direction: column;\r\n  }\r\n\r\n  :host([disabled]) [part='label'] {\r\n    color: var(--lumo-disabled-text-color);\r\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\r\n  }\r\n\r\n  :host([focused]:not([readonly])) [part='label'] {\r\n    color: var(--lumo-primary-text-color);\r\n  }\r\n\r\n  :host(:hover:not([readonly]):not([disabled]):not([focused])) [part='label'],\r\n  :host(:hover:not([readonly]):not([disabled]):not([focused])) [part='helper-text'] {\r\n    color: var(--lumo-body-text-color);\r\n  }\r\n\r\n  /* Touch device adjustment */\r\n  @media (pointer: coarse) {\r\n    :host(:hover:not([readonly]):not([disabled]):not([focused])) [part='label'] {\r\n      color: var(--lumo-secondary-text-color);\r\n    }\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-checkbox-group', [requiredField, helper, checkboxGroup], {\r\n  moduleId: 'lumo-checkbox-group',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\r\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\r\nimport { SlotObserver } from '@vaadin/component-base/src/slot-observer.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\r\n\r\n/**\r\n * A mixin providing common checkbox-group functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes DisabledMixin\r\n * @mixes FieldMixin\r\n * @mixes FocusMixin\r\n * @mixes KeyboardMixin\r\n */\r\nexport const CheckboxGroupMixin = (superclass) =>\r\n  class CheckboxGroupMixinClass extends FieldMixin(FocusMixin(DisabledMixin(superclass))) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * An array containing values of the currently checked checkboxes.\r\n         *\r\n         * The array is immutable so toggling checkboxes always results in\r\n         * creating a new array.\r\n         *\r\n         * @type {!Array<!string>}\r\n         */\r\n        value: {\r\n          type: Array,\r\n          value: () => [],\r\n          notify: true,\r\n          sync: true,\r\n          observer: '__valueChanged',\r\n        },\r\n\r\n        /**\r\n         * When true, the user cannot modify the value of the checkbox group.\r\n         * The difference between `disabled` and `readonly` is that in the\r\n         * read-only checkbox group, all the checkboxes are also read-only,\r\n         * and therefore remain focusable and announced by screen readers.\r\n         */\r\n        readonly: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n          observer: '__readonlyChanged',\r\n        },\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.__registerCheckbox = this.__registerCheckbox.bind(this);\r\n      this.__unregisterCheckbox = this.__unregisterCheckbox.bind(this);\r\n      this.__onCheckboxCheckedChanged = this.__onCheckboxCheckedChanged.bind(this);\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this._tooltipController.addEventListener('tooltip-changed', (event) => {\r\n        const tooltip = event.detail.node;\r\n        if (tooltip && tooltip.isConnected) {\r\n          // Tooltip element has been added to the DOM\r\n          const inputs = this.__checkboxes.map((checkbox) => checkbox.inputElement);\r\n          this._tooltipController.setAriaTarget(inputs);\r\n        } else {\r\n          // Tooltip element is no longer connected\r\n          this._tooltipController.setAriaTarget([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * A collection of the checkboxes.\r\n     *\r\n     * @return {!Array<!Checkbox>}\r\n     * @private\r\n     */\r\n    get __checkboxes() {\r\n      return this.__filterCheckboxes([...this.children]);\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.ariaTarget = this;\r\n\r\n      // See https://github.com/vaadin/vaadin-web-components/issues/94\r\n      this.setAttribute('role', 'group');\r\n\r\n      const slot = this.shadowRoot.querySelector('slot:not([name])');\r\n      this._observer = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\r\n        const addedCheckboxes = this.__filterCheckboxes(addedNodes);\r\n        const removedCheckboxes = this.__filterCheckboxes(removedNodes);\r\n\r\n        addedCheckboxes.forEach(this.__registerCheckbox);\r\n        removedCheckboxes.forEach(this.__unregisterCheckbox);\r\n\r\n        const inputs = this.__checkboxes.map((checkbox) => checkbox.inputElement);\r\n        this._tooltipController.setAriaTarget(inputs);\r\n\r\n        this.__warnOfCheckboxesWithoutValue(addedCheckboxes);\r\n      });\r\n\r\n      this.addController(this._tooltipController);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `ValidateMixin`\r\n     * to validate the value array.\r\n     *\r\n     * @override\r\n     * @return {boolean}\r\n     */\r\n    checkValidity() {\r\n      return !this.required || Boolean(this.value && this.value.length > 0);\r\n    }\r\n\r\n    /**\r\n     * @param {!Array<!Node>} nodes\r\n     * @return {!Array<!Checkbox>}\r\n     * @private\r\n     */\r\n    __filterCheckboxes(nodes) {\r\n      return nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE && node.localName === 'vaadin-checkbox');\r\n    }\r\n\r\n    /**\r\n     * @param {!Array<!Checkbox>} checkboxes\r\n     * @private\r\n     */\r\n    __warnOfCheckboxesWithoutValue(checkboxes) {\r\n      const hasCheckboxesWithoutValue = checkboxes.some((checkbox) => {\r\n        const { value } = checkbox;\r\n\r\n        return !checkbox.hasAttribute('value') && (!value || value === 'on');\r\n      });\r\n\r\n      if (hasCheckboxesWithoutValue) {\r\n        console.warn('Please provide the value attribute to all the checkboxes inside the checkbox group.');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Registers the checkbox after adding it to the group.\r\n     *\r\n     * @param {!Checkbox} checkbox\r\n     * @private\r\n     */\r\n    __registerCheckbox(checkbox) {\r\n      checkbox.addEventListener('checked-changed', this.__onCheckboxCheckedChanged);\r\n\r\n      if (this.disabled) {\r\n        checkbox.disabled = true;\r\n      }\r\n\r\n      if (this.readonly) {\r\n        checkbox.readonly = true;\r\n      }\r\n\r\n      if (checkbox.checked) {\r\n        this.__addCheckboxToValue(checkbox.value);\r\n      } else if (this.value && this.value.includes(checkbox.value)) {\r\n        checkbox.checked = true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Unregisters the checkbox before removing it from the group.\r\n     *\r\n     * @param {!Checkbox} checkbox\r\n     * @private\r\n     */\r\n    __unregisterCheckbox(checkbox) {\r\n      checkbox.removeEventListener('checked-changed', this.__onCheckboxCheckedChanged);\r\n\r\n      if (checkbox.checked) {\r\n        this.__removeCheckboxFromValue(checkbox.value);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `DisabledMixin`\r\n     * to propagate the `disabled` property to the checkboxes.\r\n     *\r\n     * @param {boolean} newValue\r\n     * @param {boolean} oldValue\r\n     * @override\r\n     * @protected\r\n     */\r\n    _disabledChanged(newValue, oldValue) {\r\n      super._disabledChanged(newValue, oldValue);\r\n\r\n      // Prevent updating the `disabled` property for the checkboxes at initialization.\r\n      // Otherwise, the checkboxes may end up enabled regardless the `disabled` attribute\r\n      // intentionally added by the user on some of them.\r\n      if (!newValue && oldValue === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (oldValue !== newValue) {\r\n        this.__checkboxes.forEach((checkbox) => {\r\n          checkbox.disabled = newValue;\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string} value\r\n     * @private\r\n     */\r\n    __addCheckboxToValue(value) {\r\n      if (!this.value) {\r\n        this.value = [value];\r\n      } else if (!this.value.includes(value)) {\r\n        this.value = [...this.value, value];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string} value\r\n     * @private\r\n     */\r\n    __removeCheckboxFromValue(value) {\r\n      if (this.value && this.value.includes(value)) {\r\n        this.value = this.value.filter((v) => v !== value);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!CustomEvent} event\r\n     * @private\r\n     */\r\n    __onCheckboxCheckedChanged(event) {\r\n      const checkbox = event.target;\r\n\r\n      if (checkbox.checked) {\r\n        this.__addCheckboxToValue(checkbox.value);\r\n      } else {\r\n        this.__removeCheckboxFromValue(checkbox.value);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {string[] | null | undefined} value\r\n     * @param {string[] | null | undefined} oldValue\r\n     * @private\r\n     */\r\n    __valueChanged(value, oldValue) {\r\n      // Setting initial value to empty array, skip validation\r\n      if (value && value.length === 0 && oldValue === undefined) {\r\n        return;\r\n      }\r\n\r\n      this.toggleAttribute('has-value', value && value.length > 0);\r\n\r\n      this.__checkboxes.forEach((checkbox) => {\r\n        checkbox.checked = value && value.includes(checkbox.value);\r\n      });\r\n\r\n      if (oldValue !== undefined) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __readonlyChanged(readonly, oldReadonly) {\r\n      if (readonly || oldReadonly) {\r\n        this.__checkboxes.forEach((checkbox) => {\r\n          checkbox.readonly = readonly;\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin`\r\n     * to prevent removing the `focused` attribute\r\n     * when focus moves between checkboxes inside the group.\r\n     *\r\n     * @param {!FocusEvent} event\r\n     * @return {boolean}\r\n     * @protected\r\n     */\r\n    _shouldRemoveFocus(event) {\r\n      return !this.contains(event.relatedTarget);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin`\r\n     * to run validation when the group loses focus.\r\n     *\r\n     * @param {boolean} focused\r\n     * @override\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      // Do not validate when focusout is caused by document\r\n      // losing focus, which happens on browser tab switch.\r\n      if (!focused && document.hasFocus()) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const checkboxGroupStyles = css`\r\n  :host {\r\n    display: inline-flex;\r\n  }\r\n\r\n  :host::before {\r\n    content: '\\\\2003';\r\n    width: 0;\r\n    display: inline-block;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  .vaadin-group-field-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  [part='group-field'] {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  :host(:not([has-label])) [part='label'] {\r\n    display: none;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2018 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/checkbox/src/vaadin-checkbox.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { CheckboxGroupMixin } from './vaadin-checkbox-group-mixin.js';\r\nimport { checkboxGroupStyles } from './vaadin-checkbox-group-styles.js';\r\n\r\nregisterStyles('vaadin-checkbox-group', checkboxGroupStyles, { moduleId: 'vaadin-checkbox-group-styles' });\r\n\r\n/**\r\n * `<vaadin-checkbox-group>` is a web component that allows the user to choose several items from a group of binary choices.\r\n *\r\n * ```html\r\n * <vaadin-checkbox-group label=\"Export data\">\r\n *   <vaadin-checkbox value=\"0\" label=\"Order ID\"></vaadin-checkbox>\r\n *   <vaadin-checkbox value=\"1\" label=\"Product name\"></vaadin-checkbox>\r\n *   <vaadin-checkbox value=\"2\" label=\"Customer\"></vaadin-checkbox>\r\n *   <vaadin-checkbox value=\"3\" label=\"Status\"></vaadin-checkbox>\r\n * </vaadin-checkbox-group>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name            | Description\r\n * ---------------------|----------------\r\n * `label`              | The slotted label element wrapper\r\n * `group-field`        | The checkbox elements wrapper\r\n * `helper-text`        | The slotted helper text element wrapper\r\n * `error-message`      | The slotted error message element wrapper\r\n * `required-indicator` | The `required` state indicator element\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute           | Description                               | Part name\r\n * --------------------|-------------------------------------------|------------\r\n * `disabled`          | Set when the element is disabled          | :host\r\n * `readonly`          | Set when the element is readonly          | :host\r\n * `invalid`           | Set when the element is invalid           | :host\r\n * `focused`           | Set when the element is focused           | :host\r\n * `has-label`         | Set when the element has a label          | :host\r\n * `has-value`         | Set when the element has a value          | :host\r\n * `has-helper`        | Set when the element has helper text      | :host\r\n * `has-error-message` | Set when the element has an error message | :host\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ThemableMixin\r\n * @mixes ElementMixin\r\n * @mixes CheckboxGroupMixin\r\n */\r\nclass CheckboxGroup extends CheckboxGroupMixin(ElementMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-checkbox-group';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-group-field-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\r\n        </div>\r\n\r\n        <div part=\"group-field\">\r\n          <slot></slot>\r\n        </div>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(CheckboxGroup);\r\n\r\nexport { CheckboxGroup };\r\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/html-tag.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\nimport './boot.js';\r\n\r\n/**\r\n * Our TrustedTypePolicy for HTML which is declared using the Polymer html\r\n * template tag function.\r\n *\r\n * That HTML is a developer-authored constant, and is parsed with innerHTML\r\n * before any untrusted expressions have been mixed in. Therefor it is\r\n * considered safe by construction.\r\n *\r\n * @type {!TrustedTypePolicy|undefined}\r\n */\r\nconst policy = window.trustedTypes &&\r\n    trustedTypes.createPolicy('polymer-html-literal', {createHTML: (s) => s});\r\n\r\n/**\r\n * Class representing a static string value which can be used to filter\r\n * strings by asseting that they have been created via this class. The\r\n * `value` property returns the string passed to the constructor.\r\n */\r\nclass LiteralString {\r\n  /**\r\n   * @param {!ITemplateArray} strings Constant parts of tagged template literal\r\n   * @param {!Array<*>} values Variable parts of tagged template literal\r\n   */\r\n  constructor(strings, values) {\r\n    assertValidTemplateStringParameters(strings, values);\r\n    const string = values.reduce(\r\n        (acc, v, idx) => acc + literalValue(v) + strings[idx + 1], strings[0]);\r\n    /** @type {string} */\r\n    this.value = string.toString();\r\n  }\r\n  /**\r\n   * @return {string} LiteralString string value\r\n   * @override\r\n   */\r\n  toString() {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} value Object to stringify into HTML\r\n * @return {string} HTML stringified form of `obj`\r\n */\r\nfunction literalValue(value) {\r\n  if (value instanceof LiteralString) {\r\n    return /** @type {!LiteralString} */(value).value;\r\n  } else {\r\n    throw new Error(\r\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} value Object to stringify into HTML\r\n * @return {string} HTML stringified form of `obj`\r\n */\r\nfunction htmlValue(value) {\r\n  if (value instanceof HTMLTemplateElement) {\r\n    // This might be an mXSS risk â€“ mainly in the case where this template\r\n    // contains untrusted content that was believed to be sanitized.\r\n    // However we can't just use the XMLSerializer here because it misencodes\r\n    // `>` characters inside style tags.\r\n    // For an example of an actual case that hit this encoding issue,\r\n    // see b/198592167\r\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\r\n  } else if (value instanceof LiteralString) {\r\n    return literalValue(value);\r\n  } else {\r\n    throw new Error(\r\n        `non-template value passed to Polymer's html function: ${value}`);\r\n  }\r\n}\r\n\r\n/**\r\n * A template literal tag that creates an HTML <template> element from the\r\n * contents of the string.\r\n *\r\n * This allows you to write a Polymer Template in JavaScript.\r\n *\r\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\r\n * expressions in the JavaScript template literal. The nested template's\r\n * `innerHTML` is included in the containing template.  The only other\r\n * values allowed in expressions are those returned from `htmlLiteral`\r\n * which ensures only literal values from JS source ever reach the HTML, to\r\n * guard against XSS risks.\r\n *\r\n * All other values are disallowed in expressions to help prevent XSS\r\n * attacks; however, `htmlLiteral` can be used to compose static\r\n * string values into templates. This is useful to compose strings into\r\n * places that do not accept html, like the css text of a `style`\r\n * element.\r\n *\r\n * Example:\r\n *\r\n *     static get template() {\r\n *       return html`\r\n *         <style>:host{ content:\"...\" }</style>\r\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\r\n *         ${super.template}\r\n *       `;\r\n *     }\r\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\r\n *\r\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\r\n * @param {...*} values Variable parts of tagged template literal\r\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\r\n */\r\nexport const html = function html(strings, ...values) {\r\n  assertValidTemplateStringParameters(strings, values);\r\n  const template =\r\n      /** @type {!HTMLTemplateElement} */ (document.createElement('template'));\r\n  let value = values.reduce(\r\n      (acc, v, idx) => acc + htmlValue(v) + strings[idx + 1], strings[0]);\r\n  if (policy) {\r\n    value = policy.createHTML(value);\r\n  }\r\n  template.innerHTML = value;\r\n  return template;\r\n};\r\n\r\n/**\r\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\r\n * @param {!Array<*>} values Array of values from quasis\r\n */\r\nconst assertValidTemplateStringParameters = (strings, values) => {\r\n  // Note: if/when https://github.com/tc39/proposal-array-is-template-object\r\n  // is standardized, use that instead when available, as it can perform an\r\n  // unforgable check (though of course, the function itself can be forged).\r\n  if (!Array.isArray(strings) || !Array.isArray(strings.raw) ||\r\n      (values.length !== strings.length - 1)) {\r\n    // This is either caused by a browser bug, a compiler bug, or someone\r\n    // calling the html template tag function as a regular function.\r\n    //\r\n    throw new TypeError('Invalid call to the html template tag');\r\n  }\r\n};\r\n\r\n/**\r\n * An html literal tag that can be used with `html` to compose.\r\n * a literal string.\r\n *\r\n * Example:\r\n *\r\n *     static get template() {\r\n *       return html`\r\n *         <style>\r\n *           :host { display: block; }\r\n *           ${this.styleTemplate()}\r\n *         </style>\r\n *         <div class=\"shadowed\">${staticValue}</div>\r\n *         ${super.template}\r\n *       `;\r\n *     }\r\n *     static get styleTemplate() {\r\n *        return htmlLiteral`.shadowed { background: gray; }`;\r\n *     }\r\n *\r\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\r\n * @param {...*} values Variable parts of tagged template literal\r\n * @return {!LiteralString} Constructed literal string\r\n */\r\nexport const htmlLiteral = function(strings, ...values) {\r\n  return new LiteralString(strings, values);\r\n};\r\n"],
  "mappings": ";AAqBA,IAAM,SAAS,OAAO,gBAClB,aAAa,aAAa,wBAAwB,EAAC,YAAY,CAAC,MAAM,EAAC,CAAC;AAO5E,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,YAAY,SAAS,QAAQ;AAC3B,wCAAoC,SAAS,MAAM;AACnD,UAAM,SAAS,OAAO;AAAA,MAClB,CAAC,KAAK,GAAG,QAAQ,MAAM,aAAa,CAAC,IAAI,QAAQ,MAAM,CAAC;AAAA,MAAG,QAAQ,CAAC;AAAA,IAAC;AAEzE,SAAK,QAAQ,OAAO,SAAS;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AACF;AAMA,SAAS,aAAa,OAAO;AAC3B,MAAI,iBAAiB,eAAe;AAClC;AAAA;AAAA,MAAqC,MAAO;AAAA;AAAA,EAC9C,OAAO;AACL,UAAM,IAAI;AAAA,MACN,+DAA+D,KAAK;AAAA,IACxE;AAAA,EACF;AACF;AAMA,SAAS,UAAU,OAAO;AACxB,MAAI,iBAAiB,qBAAqB;AAOxC;AAAA;AAAA,MAA4C,MAAO;AAAA;AAAA,EACrD,WAAW,iBAAiB,eAAe;AACzC,WAAO,aAAa,KAAK;AAAA,EAC3B,OAAO;AACL,UAAM,IAAI;AAAA,MACN,yDAAyD,KAAK;AAAA,IAAE;AAAA,EACtE;AACF;AAoCO,IAAM,OAAO,SAASA,MAAK,YAAY,QAAQ;AACpD,sCAAoC,SAAS,MAAM;AACnD,QAAM;AAAA;AAAA,IACmC,SAAS,cAAc,UAAU;AAAA;AAC1E,MAAI,QAAQ,OAAO;AAAA,IACf,CAAC,KAAK,GAAG,QAAQ,MAAM,UAAU,CAAC,IAAI,QAAQ,MAAM,CAAC;AAAA,IAAG,QAAQ,CAAC;AAAA,EAAC;AACtE,MAAI,QAAQ;AACV,YAAQ,OAAO,WAAW,KAAK;AAAA,EACjC;AACA,WAAS,YAAY;AACrB,SAAO;AACT;AAMA,IAAM,sCAAsC,CAAC,SAAS,WAAW;AAI/D,MAAI,CAAC,MAAM,QAAQ,OAAO,KAAK,CAAC,MAAM,QAAQ,QAAQ,GAAG,KACpD,OAAO,WAAW,QAAQ,SAAS,GAAI;AAI1C,UAAM,IAAI,UAAU,uCAAuC;AAAA,EAC7D;AACF;AA0BO,IAAM,cAAc,SAAS,YAAY,QAAQ;AACtD,SAAO,IAAI,cAAc,SAAS,MAAM;AAC1C;",
  "names": ["html"]
}

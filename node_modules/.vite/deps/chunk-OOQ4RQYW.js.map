{
  "version": 3,
  "sources": ["../../ol/src/style/Stroke.js"],
  "sourcesContent": ["/**\r\n * @module ol/style/Stroke\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\r\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\r\nclass Stroke {\r\n  /**\r\n   * @param {Options} [opt_options] Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\r\n    this.lineCap_ = options.lineCap;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lineDashOffset_ = options.lineDashOffset;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\r\n    this.lineJoin_ = options.lineJoin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.miterLimit_ = options.miterLimit;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Stroke({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n      lineCap: this.getLineCap(),\r\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\r\n      lineDashOffset: this.getLineDashOffset(),\r\n      lineJoin: this.getLineJoin(),\r\n      miterLimit: this.getMiterLimit(),\r\n      width: this.getWidth(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\r\n  getLineCap() {\r\n    return this.lineCap_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>} Line dash.\r\n   * @api\r\n   */\r\n  getLineDash() {\r\n    return this.lineDash_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\r\n  getLineDashOffset() {\r\n    return this.lineDashOffset_;\r\n  }\r\n\r\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\r\n  getLineJoin() {\r\n    return this.lineJoin_;\r\n  }\r\n\r\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\r\n  getMiterLimit() {\r\n    return this.miterLimit_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\r\n  setLineCap(lineCap) {\r\n    this.lineCap_ = lineCap;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\r\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\r\n   * property will have no visual effect in these browsers.\r\n   *\r\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\r\n   *\r\n   * @param {Array<number>} lineDash Line dash.\r\n   * @api\r\n   */\r\n  setLineDash(lineDash) {\r\n    this.lineDash_ = lineDash;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\r\n  setLineDashOffset(lineDashOffset) {\r\n    this.lineDashOffset_ = lineDashOffset;\r\n  }\r\n\r\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\r\n  setLineJoin(lineJoin) {\r\n    this.lineJoin_ = lineJoin;\r\n  }\r\n\r\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\r\n  setMiterLimit(miterLimit) {\r\n    this.miterLimit_ = miterLimit;\r\n  }\r\n\r\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n  }\r\n}\r\n\r\nexport default Stroke;\r\n"],
  "mappings": ";AA2BA,IAAA;;EAAA,WAAA;AAIE,aAAAA,QAAY,aAAW;AACrB,UAAM,UAAU,eAAe,CAAA;AAM/B,WAAK,SAAS,QAAQ,UAAU,SAAY,QAAQ,QAAQ;AAM5D,WAAK,WAAW,QAAQ;AAMxB,WAAK,YAAY,QAAQ,aAAa,SAAY,QAAQ,WAAW;AAMrE,WAAK,kBAAkB,QAAQ;AAM/B,WAAK,YAAY,QAAQ;AAMzB,WAAK,cAAc,QAAQ;AAM3B,WAAK,SAAS,QAAQ;IACxB;AAOA,IAAAA,QAAA,UAAA,QAAA,WAAA;AACE,UAAM,QAAQ,KAAK,SAAQ;AAC3B,aAAO,IAAIA,QAAO;QAChB,OAAO,MAAM,QAAQ,KAAK,IAAI,MAAM,MAAK,IAAK,SAAS;QACvD,SAAS,KAAK,WAAU;QACxB,UAAU,KAAK,YAAW,IAAK,KAAK,YAAW,EAAG,MAAK,IAAK;QAC5D,gBAAgB,KAAK,kBAAiB;QACtC,UAAU,KAAK,YAAW;QAC1B,YAAY,KAAK,cAAa;QAC9B,OAAO,KAAK,SAAQ;OACrB;IACH;AAOA,IAAAA,QAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,aAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,cAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,oBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,cAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,gBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAQA,IAAAA,QAAA,UAAA,WAAA,SAAS,OAAK;AACZ,WAAK,SAAS;IAChB;AAQA,IAAAA,QAAA,UAAA,aAAA,SAAW,SAAO;AAChB,WAAK,WAAW;IAClB;AAcA,IAAAA,QAAA,UAAA,cAAA,SAAY,UAAQ;AAClB,WAAK,YAAY;IACnB;AAQA,IAAAA,QAAA,UAAA,oBAAA,SAAkB,gBAAc;AAC9B,WAAK,kBAAkB;IACzB;AAQA,IAAAA,QAAA,UAAA,cAAA,SAAY,UAAQ;AAClB,WAAK,YAAY;IACnB;AAQA,IAAAA,QAAA,UAAA,gBAAA,SAAc,YAAU;AACtB,WAAK,cAAc;IACrB;AAQA,IAAAA,QAAA,UAAA,WAAA,SAAS,OAAK;AACZ,WAAK,SAAS;IAChB;AACF,WAAAA;EAAA,EA9MA;;AAgNA,IAAA,iBAAe;",
  "names": ["Stroke"]
}

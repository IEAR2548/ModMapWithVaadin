{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/labelled-input-controller.js", "../../@vaadin/field-base/src/input-mixin.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * A controller for linking a `<label>` element with an `<input>` element.\r\n */\r\nexport class LabelledInputController {\r\n  constructor(input, labelController) {\r\n    this.input = input;\r\n    this.__preventDuplicateLabelClick = this.__preventDuplicateLabelClick.bind(this);\r\n\r\n    labelController.addEventListener('slot-content-changed', (event) => {\r\n      this.__initLabel(event.detail.node);\r\n    });\r\n\r\n    // Initialize the default label element\r\n    this.__initLabel(labelController.node);\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} label\r\n   * @private\r\n   */\r\n  __initLabel(label) {\r\n    if (label) {\r\n      label.addEventListener('click', this.__preventDuplicateLabelClick);\r\n\r\n      if (this.input) {\r\n        label.setAttribute('for', this.input.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The native platform fires an event for both the click on the label, and also\r\n   * the subsequent click on the native input element caused by label click.\r\n   * This results in two click events arriving at the host, but we only want one.\r\n   * This method prevents the duplicate click and ensures the correct isTrusted event\r\n   * with the correct event.target arrives at the host.\r\n   * @private\r\n   */\r\n  __preventDuplicateLabelClick() {\r\n    const inputClickHandler = (e) => {\r\n      e.stopImmediatePropagation();\r\n      this.input.removeEventListener('click', inputClickHandler);\r\n    };\r\n    this.input.addEventListener('click', inputClickHandler);\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\r\n\r\n/**\r\n * A mixin to store the reference to an input element\r\n * and add input and change event listeners to it.\r\n *\r\n * @polymerMixin\r\n */\r\nexport const InputMixin = dedupingMixin(\r\n  (superclass) =>\r\n    class InputMixinClass extends superclass {\r\n      static get properties() {\r\n        return {\r\n          /**\r\n           * A reference to the input element controlled by the mixin.\r\n           * Any component implementing this mixin is expected to provide it\r\n           * by using `this._setInputElement(input)` Polymer API.\r\n           *\r\n           * A typical case is using `InputController` that does this automatically.\r\n           * However, the input element does not have to always be native <input>:\r\n           * as an example, <vaadin-combo-box-light> accepts other components.\r\n           *\r\n           * @protected\r\n           * @type {!HTMLElement}\r\n           */\r\n          inputElement: {\r\n            type: Object,\r\n            readOnly: true,\r\n            observer: '_inputElementChanged',\r\n            sync: true,\r\n          },\r\n\r\n          /**\r\n           * String used to define input type.\r\n           * @protected\r\n           */\r\n          type: {\r\n            type: String,\r\n            readOnly: true,\r\n          },\r\n\r\n          /**\r\n           * The value of the field.\r\n           */\r\n          value: {\r\n            type: String,\r\n            value: '',\r\n            observer: '_valueChanged',\r\n            notify: true,\r\n            sync: true,\r\n          },\r\n        };\r\n      }\r\n\r\n      constructor() {\r\n        super();\r\n\r\n        this._boundOnInput = this._onInput.bind(this);\r\n        this._boundOnChange = this._onChange.bind(this);\r\n      }\r\n\r\n      /**\r\n       * Indicates whether the value is different from the default one.\r\n       * Override if the `value` property has a type other than `string`.\r\n       *\r\n       * @protected\r\n       */\r\n      get _hasValue() {\r\n        return this.value != null && this.value !== '';\r\n      }\r\n\r\n      /**\r\n       * A property for accessing the input element's value.\r\n       *\r\n       * Override this getter if the property is different from the default `value` one.\r\n       *\r\n       * @protected\r\n       * @return {string}\r\n       */\r\n      get _inputElementValueProperty() {\r\n        return 'value';\r\n      }\r\n\r\n      /**\r\n       * The input element's value.\r\n       *\r\n       * @protected\r\n       * @return {string}\r\n       */\r\n      get _inputElementValue() {\r\n        return this.inputElement ? this.inputElement[this._inputElementValueProperty] : undefined;\r\n      }\r\n\r\n      /**\r\n       * The input element's value.\r\n       *\r\n       * @protected\r\n       */\r\n      set _inputElementValue(value) {\r\n        if (this.inputElement) {\r\n          this.inputElement[this._inputElementValueProperty] = value;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Clear the value of the field.\r\n       */\r\n      clear() {\r\n        this.value = '';\r\n\r\n        // Clear the input immediately without waiting for the observer.\r\n        // Otherwise, when using Lit, the old value would be restored.\r\n        this._inputElementValue = '';\r\n      }\r\n\r\n      /**\r\n       * Add event listeners to the input element instance.\r\n       * Override this method to add custom listeners.\r\n       * @param {!HTMLElement} input\r\n       * @protected\r\n       */\r\n      _addInputListeners(input) {\r\n        input.addEventListener('input', this._boundOnInput);\r\n        input.addEventListener('change', this._boundOnChange);\r\n      }\r\n\r\n      /**\r\n       * Remove event listeners from the input element instance.\r\n       * @param {!HTMLElement} input\r\n       * @protected\r\n       */\r\n      _removeInputListeners(input) {\r\n        input.removeEventListener('input', this._boundOnInput);\r\n        input.removeEventListener('change', this._boundOnChange);\r\n      }\r\n\r\n      /**\r\n       * A method to forward the value property set on the field\r\n       * programmatically back to the input element value.\r\n       * Override this method to perform additional checks,\r\n       * for example to skip this in certain conditions.\r\n       * @param {string} value\r\n       * @protected\r\n       */\r\n      _forwardInputValue(value) {\r\n        // Value might be set before an input element is initialized.\r\n        // This case should be handled separately by a component that\r\n        // implements this mixin, for example in `connectedCallback`.\r\n        if (!this.inputElement) {\r\n          return;\r\n        }\r\n\r\n        this._inputElementValue = value != null ? value : '';\r\n      }\r\n\r\n      /**\r\n       * @param {HTMLElement | undefined} input\r\n       * @param {HTMLElement | undefined} oldInput\r\n       * @protected\r\n       */\r\n      _inputElementChanged(input, oldInput) {\r\n        if (input) {\r\n          this._addInputListeners(input);\r\n        } else if (oldInput) {\r\n          this._removeInputListeners(oldInput);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * An input event listener used to update the field value.\r\n       *\r\n       * @param {Event} event\r\n       * @protected\r\n       */\r\n      _onInput(event) {\r\n        // In the case a custom web component is passed as `inputElement`,\r\n        // the actual native input element, on which the event occurred,\r\n        // can be inside shadow trees.\r\n        const target = event.composedPath()[0];\r\n        // Ignore fake input events e.g. used by clear button.\r\n        this.__userInput = event.isTrusted;\r\n        this.value = target.value;\r\n        this.__userInput = false;\r\n      }\r\n\r\n      /**\r\n       * A change event listener.\r\n       * Override this method with an actual implementation.\r\n       * @param {Event} _event\r\n       * @protected\r\n       */\r\n      _onChange(_event) {}\r\n\r\n      /**\r\n       * Toggle the has-value attribute based on the value property.\r\n       *\r\n       * @param {boolean} hasValue\r\n       * @protected\r\n       */\r\n      _toggleHasValue(hasValue) {\r\n        this.toggleAttribute('has-value', hasValue);\r\n      }\r\n\r\n      /**\r\n       * Observer called when a value property changes.\r\n       * @param {string | undefined} newVal\r\n       * @param {string | undefined} oldVal\r\n       * @protected\r\n       */\r\n      _valueChanged(newVal, oldVal) {\r\n        this._toggleHasValue(this._hasValue);\r\n\r\n        // Setting initial value to empty string, do nothing.\r\n        if (newVal === '' && oldVal === undefined) {\r\n          return;\r\n        }\r\n\r\n        // Value is set by the user, no need to sync it back to input.\r\n        if (this.__userInput) {\r\n          return;\r\n        }\r\n\r\n        // Setting a value programmatically, sync it to input element.\r\n        this._forwardInputValue(newVal);\r\n      }\r\n    },\r\n);\r\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@vaadin/tooltip/src/vaadin-tooltip-overlay-styles.js", "../../@vaadin/tooltip/src/vaadin-tooltip-overlay.js", "../../@vaadin/tooltip/src/vaadin-tooltip-mixin.js", "../../@vaadin/tooltip/src/vaadin-tooltip.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const tooltipOverlayStyles = css`\r\n  [part='overlay'] {\r\n    max-width: 40ch;\r\n  }\r\n\r\n  [part='content'] {\r\n    white-space: pre-wrap;\r\n  }\r\n\r\n  :host([position^='top'][top-aligned]) [part='overlay'],\r\n  :host([position^='bottom'][top-aligned]) [part='overlay'] {\r\n    margin-top: var(--vaadin-tooltip-offset-top, 0);\r\n  }\r\n\r\n  :host([position^='top'][bottom-aligned]) [part='overlay'],\r\n  :host([position^='bottom'][bottom-aligned]) [part='overlay'] {\r\n    margin-bottom: var(--vaadin-tooltip-offset-bottom, 0);\r\n  }\r\n\r\n  :host([position^='start'][start-aligned]) [part='overlay'],\r\n  :host([position^='end'][start-aligned]) [part='overlay'] {\r\n    margin-inline-start: var(--vaadin-tooltip-offset-start, 0);\r\n  }\r\n\r\n  :host([position^='start'][end-aligned]) [part='overlay'],\r\n  :host([position^='end'][end-aligned]) [part='overlay'] {\r\n    margin-inline-end: var(--vaadin-tooltip-offset-end, 0);\r\n  }\r\n\r\n  @media (forced-colors: active) {\r\n    [part='overlay'] {\r\n      outline: 1px dashed;\r\n    }\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\r\nimport { PopoverOverlayMixin } from '@vaadin/popover/src/vaadin-popover-overlay-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { tooltipOverlayStyles } from './vaadin-tooltip-overlay-styles.js';\r\n\r\nregisterStyles('vaadin-tooltip-overlay', [overlayStyles, tooltipOverlayStyles], {\r\n  moduleId: 'vaadin-tooltip-overlay-styles',\r\n});\r\n\r\n/**\r\n * An element used internally by `<vaadin-tooltip>`. Not intended to be used separately.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes DirMixin\r\n * @mixes ThemableMixin\r\n * @mixes PopoverOverlayMixin\r\n * @private\r\n */\r\nclass TooltipOverlay extends PopoverOverlayMixin(DirMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-tooltip-overlay';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div id=\"backdrop\" part=\"backdrop\" hidden></div>\r\n      <div part=\"overlay\" id=\"overlay\">\r\n        <div part=\"content\" id=\"content\"><slot></slot></div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Tag name prefix used by custom properties.\r\n   * @protected\r\n   * @return {string}\r\n   */\r\n  get _tagNamePrefix() {\r\n    return 'vaadin-tooltip';\r\n  }\r\n\r\n  requestContentUpdate() {\r\n    super.requestContentUpdate();\r\n\r\n    this.toggleAttribute('hidden', this.textContent.trim() === '');\r\n  }\r\n}\r\n\r\ndefineCustomElement(TooltipOverlay);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { isKeyboardActive } from '@vaadin/a11y-base/src/focus-utils.js';\r\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\r\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\r\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\r\nimport { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';\r\nimport { PopoverPositionMixin } from '@vaadin/popover/src/vaadin-popover-position-mixin.js';\r\nimport { PopoverTargetMixin } from '@vaadin/popover/src/vaadin-popover-target-mixin.js';\r\n\r\nconst DEFAULT_DELAY = 500;\r\n\r\nlet defaultFocusDelay = DEFAULT_DELAY;\r\nlet defaultHoverDelay = DEFAULT_DELAY;\r\nlet defaultHideDelay = DEFAULT_DELAY;\r\n\r\nconst closing = new Set();\r\n\r\nlet warmedUp = false;\r\nlet warmUpTimeout = null;\r\nlet cooldownTimeout = null;\r\n\r\n/**\r\n * Resets the global tooltip warmup and cooldown state.\r\n * Only for internal use in tests.\r\n * @private\r\n */\r\nexport function resetGlobalTooltipState() {\r\n  warmedUp = false;\r\n  clearTimeout(warmUpTimeout);\r\n  clearTimeout(cooldownTimeout);\r\n  warmUpTimeout = null;\r\n  cooldownTimeout = null;\r\n  closing.clear();\r\n}\r\n\r\n/**\r\n * Controller for handling tooltip opened state.\r\n */\r\nclass TooltipStateController {\r\n  constructor(host) {\r\n    this.host = host;\r\n  }\r\n\r\n  /** @private */\r\n  get openedProp() {\r\n    return this.host.manual ? 'opened' : '_autoOpened';\r\n  }\r\n\r\n  /** @private */\r\n  get focusDelay() {\r\n    const tooltip = this.host;\r\n    return tooltip.focusDelay != null && tooltip.focusDelay >= 0 ? tooltip.focusDelay : defaultFocusDelay;\r\n  }\r\n\r\n  /** @private */\r\n  get hoverDelay() {\r\n    const tooltip = this.host;\r\n    return tooltip.hoverDelay != null && tooltip.hoverDelay >= 0 ? tooltip.hoverDelay : defaultHoverDelay;\r\n  }\r\n\r\n  /** @private */\r\n  get hideDelay() {\r\n    const tooltip = this.host;\r\n    return tooltip.hideDelay != null && tooltip.hideDelay >= 0 ? tooltip.hideDelay : defaultHideDelay;\r\n  }\r\n\r\n  /**\r\n   * Whether closing is currently in progress.\r\n   * @return {boolean}\r\n   */\r\n  get isClosing() {\r\n    return closing.has(this.host);\r\n  }\r\n\r\n  /**\r\n   * Schedule opening the tooltip.\r\n   * @param {Object} options\r\n   */\r\n  open(options = { immediate: false }) {\r\n    const { immediate, hover, focus } = options;\r\n    const isHover = hover && this.hoverDelay > 0;\r\n    const isFocus = focus && this.focusDelay > 0;\r\n\r\n    if (!immediate && (isHover || isFocus) && !this.__closeTimeout) {\r\n      this.__warmupTooltip(isFocus);\r\n    } else {\r\n      this.__showTooltip();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule closing the tooltip.\r\n   * @param {boolean} immediate\r\n   */\r\n  close(immediate) {\r\n    if (!immediate && this.hideDelay > 0) {\r\n      this.__scheduleClose();\r\n    } else {\r\n      this.__abortClose();\r\n      this._setOpened(false);\r\n    }\r\n\r\n    this.__abortWarmUp();\r\n\r\n    if (warmedUp) {\r\n      // Re-start cooldown timer on each tooltip closing.\r\n      this.__abortCooldown();\r\n      this.__scheduleCooldown();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _isOpened() {\r\n    return this.host[this.openedProp];\r\n  }\r\n\r\n  /** @private */\r\n  _setOpened(opened) {\r\n    this.host[this.openedProp] = opened;\r\n  }\r\n\r\n  /** @private */\r\n  __flushClosingTooltips() {\r\n    closing.forEach((tooltip) => {\r\n      tooltip._stateController.close(true);\r\n      closing.delete(tooltip);\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  __showTooltip() {\r\n    this.__abortClose();\r\n    this.__flushClosingTooltips();\r\n\r\n    this._setOpened(true);\r\n    warmedUp = true;\r\n\r\n    // Abort previously scheduled timers.\r\n    this.__abortWarmUp();\r\n    this.__abortCooldown();\r\n  }\r\n\r\n  /** @private */\r\n  __warmupTooltip(isFocus) {\r\n    if (!this._isOpened()) {\r\n      if (warmedUp) {\r\n        // Warmed up, show the tooltip.\r\n        this.__showTooltip();\r\n      } else if (warmUpTimeout == null) {\r\n        // Ensure there is no duplicate warm up.\r\n        this.__scheduleWarmUp(isFocus);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __abortClose() {\r\n    if (this.__closeTimeout) {\r\n      clearTimeout(this.__closeTimeout);\r\n      this.__closeTimeout = null;\r\n    }\r\n\r\n    // Remove the tooltip from the closing queue.\r\n    if (this.isClosing) {\r\n      closing.delete(this.host);\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __abortCooldown() {\r\n    if (cooldownTimeout) {\r\n      clearTimeout(cooldownTimeout);\r\n      cooldownTimeout = null;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __abortWarmUp() {\r\n    if (warmUpTimeout) {\r\n      clearTimeout(warmUpTimeout);\r\n      warmUpTimeout = null;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __scheduleClose() {\r\n    // Do not schedule closing if it was already scheduled\r\n    // to avoid overriding reference to the close timeout.\r\n    if (this._isOpened() && !this.isClosing) {\r\n      closing.add(this.host);\r\n\r\n      this.__closeTimeout = setTimeout(() => {\r\n        closing.delete(this.host);\r\n        this.__closeTimeout = null;\r\n        this._setOpened(false);\r\n      }, this.hideDelay);\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __scheduleCooldown() {\r\n    cooldownTimeout = setTimeout(() => {\r\n      cooldownTimeout = null;\r\n      warmedUp = false;\r\n    }, this.hideDelay);\r\n  }\r\n\r\n  /** @private */\r\n  __scheduleWarmUp(isFocus) {\r\n    const delay = isFocus ? this.focusDelay : this.hoverDelay;\r\n    warmUpTimeout = setTimeout(() => {\r\n      warmUpTimeout = null;\r\n      warmedUp = true;\r\n      this.__showTooltip();\r\n    }, delay);\r\n  }\r\n}\r\n\r\n/**\r\n * A mixin providing common tooltip functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes OverlayClassMixin\r\n * @mixes PopoverPositionMixin\r\n * @mixes PopoverTargetMixin\r\n */\r\nexport const TooltipMixin = (superClass) =>\r\n  class TooltipMixinClass extends PopoverPositionMixin(PopoverTargetMixin(OverlayClassMixin(superClass))) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * Element used to link with the `aria-describedby`\r\n         * attribute. Supports array of multiple elements.\r\n         * When not set, defaults to `target`.\r\n         */\r\n        ariaTarget: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * Object with properties passed to `generator` and\r\n         * `shouldShow` functions for generating tooltip text\r\n         * or detecting whether to show the tooltip or not.\r\n         */\r\n        context: {\r\n          type: Object,\r\n          value: () => {\r\n            return {};\r\n          },\r\n        },\r\n\r\n        /**\r\n         * The delay in milliseconds before the tooltip\r\n         * is opened on keyboard focus, when not in manual mode.\r\n         * @attr {number} focus-delay\r\n         */\r\n        focusDelay: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * Function used to generate the tooltip content.\r\n         * When provided, it overrides the `text` property.\r\n         * Use the `context` property to provide argument\r\n         * that can be passed to the generator function.\r\n         */\r\n        generator: {\r\n          type: Object,\r\n        },\r\n\r\n        /**\r\n         * The delay in milliseconds before the tooltip\r\n         * is closed on losing hover, when not in manual mode.\r\n         * On blur, the tooltip is closed immediately.\r\n         * @attr {number} hide-delay\r\n         */\r\n        hideDelay: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * The delay in milliseconds before the tooltip\r\n         * is opened on hover, when not in manual mode.\r\n         * @attr {number} hover-delay\r\n         */\r\n        hoverDelay: {\r\n          type: Number,\r\n        },\r\n\r\n        /**\r\n         * When true, the tooltip is controlled programmatically\r\n         * instead of reacting to focus and mouse events.\r\n         */\r\n        manual: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * When true, the tooltip is opened programmatically.\r\n         * Only works if `manual` is set to `true`.\r\n         */\r\n        opened: {\r\n          type: Boolean,\r\n          value: false,\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Function used to detect whether to show the tooltip based on a condition,\r\n         * called every time the tooltip is about to be shown on hover and focus.\r\n         * The function takes two parameters: `target` and `context`, which contain\r\n         * values of the corresponding tooltip properties at the time of calling.\r\n         * The tooltip is only shown when the function invocation returns `true`.\r\n         */\r\n        shouldShow: {\r\n          type: Object,\r\n          value: () => {\r\n            return (_target, _context) => true;\r\n          },\r\n        },\r\n\r\n        /**\r\n         * String used as a tooltip content.\r\n         */\r\n        text: {\r\n          type: String,\r\n          observer: '__textChanged',\r\n        },\r\n\r\n        /**\r\n         * Set to true when the overlay is opened using auto-added\r\n         * event listeners: mouseenter and focusin (keyboard only).\r\n         * @protected\r\n         */\r\n        _autoOpened: {\r\n          type: Boolean,\r\n          observer: '__autoOpenedChanged',\r\n          sync: true,\r\n        },\r\n\r\n        /**\r\n         * Element used to link with the `aria-describedby`\r\n         * attribute. When not set, defaults to `target`.\r\n         * @protected\r\n         */\r\n        _effectiveAriaTarget: {\r\n          type: Object,\r\n          computed: '__computeAriaTarget(ariaTarget, target)',\r\n          observer: '__effectiveAriaTargetChanged',\r\n        },\r\n\r\n        /** @private */\r\n        __isTargetHidden: {\r\n          type: Boolean,\r\n          value: false,\r\n        },\r\n\r\n        /** @private */\r\n        _isConnected: {\r\n          type: Boolean,\r\n          sync: true,\r\n        },\r\n\r\n        /** @private */\r\n        _srLabel: {\r\n          type: Object,\r\n        },\r\n\r\n        /** @private */\r\n        _overlayContent: {\r\n          type: String,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return [\r\n        '__generatorChanged(_overlayElement, generator, context)',\r\n        '__updateSrLabelText(_srLabel, _overlayContent)',\r\n      ];\r\n    }\r\n\r\n    /**\r\n     * Sets the default focus delay to be used by all tooltip instances,\r\n     * except for those that have focus delay configured using property.\r\n     *\r\n     * @param {number} focusDelay\r\n     */\r\n    static setDefaultFocusDelay(focusDelay) {\r\n      defaultFocusDelay = focusDelay != null && focusDelay >= 0 ? focusDelay : DEFAULT_DELAY;\r\n    }\r\n\r\n    /**\r\n     * Sets the default hide delay to be used by all tooltip instances,\r\n     * except for those that have hide delay configured using property.\r\n     *\r\n     * @param {number} hideDelay\r\n     */\r\n    static setDefaultHideDelay(hideDelay) {\r\n      defaultHideDelay = hideDelay != null && hideDelay >= 0 ? hideDelay : DEFAULT_DELAY;\r\n    }\r\n\r\n    /**\r\n     * Sets the default hover delay to be used by all tooltip instances,\r\n     * except for those that have hover delay configured using property.\r\n     *\r\n     * @param {number} hoverDelay\r\n     */\r\n    static setDefaultHoverDelay(hoverDelay) {\r\n      defaultHoverDelay = hoverDelay != null && hoverDelay >= 0 ? hoverDelay : DEFAULT_DELAY;\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this._uniqueId = `vaadin-tooltip-${generateUniqueId()}`;\r\n      this._renderer = this.__tooltipRenderer.bind(this);\r\n\r\n      this.__onFocusin = this.__onFocusin.bind(this);\r\n      this.__onFocusout = this.__onFocusout.bind(this);\r\n      this.__onMouseDown = this.__onMouseDown.bind(this);\r\n      this.__onMouseEnter = this.__onMouseEnter.bind(this);\r\n      this.__onMouseLeave = this.__onMouseLeave.bind(this);\r\n      this.__onKeyDown = this.__onKeyDown.bind(this);\r\n      this.__onOverlayOpen = this.__onOverlayOpen.bind(this);\r\n\r\n      this.__targetVisibilityObserver = new IntersectionObserver(\r\n        (entries) => {\r\n          entries.forEach((entry) => this.__onTargetVisibilityChange(entry.isIntersecting));\r\n        },\r\n        { threshold: 0 },\r\n      );\r\n\r\n      this._stateController = new TooltipStateController(this);\r\n    }\r\n\r\n    /** @protected */\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n\r\n      this._isConnected = true;\r\n\r\n      document.body.addEventListener('vaadin-overlay-open', this.__onOverlayOpen);\r\n    }\r\n\r\n    /** @protected */\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n\r\n      if (this._autoOpened) {\r\n        this._stateController.close(true);\r\n      }\r\n      this._isConnected = false;\r\n\r\n      document.body.removeEventListener('vaadin-overlay-open', this.__onOverlayOpen);\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this._overlayElement = this.$.overlay;\r\n\r\n      this._srLabelController = new SlotController(this, 'sr-label', 'div', {\r\n        initializer: (element) => {\r\n          element.id = this._uniqueId;\r\n          element.setAttribute('role', 'tooltip');\r\n          this._srLabel = element;\r\n        },\r\n      });\r\n      this.addController(this._srLabelController);\r\n    }\r\n\r\n    /** @private */\r\n    __computeOpened(manual, opened, autoOpened, connected) {\r\n      return connected && (manual ? opened : autoOpened);\r\n    }\r\n\r\n    /** @private */\r\n    __autoOpenedChanged(opened, oldOpened) {\r\n      if (opened) {\r\n        document.addEventListener('keydown', this.__onKeyDown, true);\r\n      } else if (oldOpened) {\r\n        document.removeEventListener('keydown', this.__onKeyDown, true);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} target\r\n     * @protected\r\n     * @override\r\n     */\r\n    _addTargetListeners(target) {\r\n      target.addEventListener('mouseenter', this.__onMouseEnter);\r\n      target.addEventListener('mouseleave', this.__onMouseLeave);\r\n      target.addEventListener('focusin', this.__onFocusin);\r\n      target.addEventListener('focusout', this.__onFocusout);\r\n      target.addEventListener('mousedown', this.__onMouseDown);\r\n\r\n      // Wait before observing to avoid Chrome issue.\r\n      requestAnimationFrame(() => {\r\n        this.__targetVisibilityObserver.observe(target);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} target\r\n     * @protected\r\n     * @override\r\n     */\r\n    _removeTargetListeners(target) {\r\n      target.removeEventListener('mouseenter', this.__onMouseEnter);\r\n      target.removeEventListener('mouseleave', this.__onMouseLeave);\r\n      target.removeEventListener('focusin', this.__onFocusin);\r\n      target.removeEventListener('focusout', this.__onFocusout);\r\n      target.removeEventListener('mousedown', this.__onMouseDown);\r\n\r\n      this.__targetVisibilityObserver.unobserve(target);\r\n    }\r\n\r\n    /** @private */\r\n    __onFocusin(event) {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      // Only open on keyboard focus.\r\n      if (!isKeyboardActive()) {\r\n        return;\r\n      }\r\n\r\n      // Do not re-open while focused if closed on Esc or mousedown.\r\n      if (this.target.contains(event.relatedTarget)) {\r\n        return;\r\n      }\r\n\r\n      if (!this.__isShouldShow()) {\r\n        return;\r\n      }\r\n\r\n      this.__focusInside = true;\r\n\r\n      if (!this.__isTargetHidden && (!this.__hoverInside || !this._autoOpened)) {\r\n        this._stateController.open({ focus: true });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onFocusout(event) {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      // Do not close when moving focus within a component.\r\n      if (this.target.contains(event.relatedTarget)) {\r\n        return;\r\n      }\r\n\r\n      this.__focusInside = false;\r\n\r\n      if (!this.__hoverInside) {\r\n        this._stateController.close(true);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onKeyDown(event) {\r\n      if (event.key === 'Escape') {\r\n        event.stopPropagation();\r\n        this._stateController.close(true);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onMouseDown() {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      this._stateController.close(true);\r\n    }\r\n\r\n    /** @private */\r\n    __onMouseEnter() {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      if (!this.__isShouldShow()) {\r\n        return;\r\n      }\r\n\r\n      if (this.__hoverInside) {\r\n        // Already hovering inside the element, do nothing.\r\n        return;\r\n      }\r\n\r\n      this.__hoverInside = true;\r\n\r\n      if (!this.__isTargetHidden && (!this.__focusInside || !this._autoOpened)) {\r\n        this._stateController.open({ hover: true });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onMouseLeave(event) {\r\n      if (event.relatedTarget !== this._overlayElement) {\r\n        this.__handleMouseLeave();\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    __onOverlayMouseEnter() {\r\n      // Retain opened state when moving pointer over the overlay.\r\n      // Closing can start due to an offset between the target and\r\n      // the overlay itself. If that's the case, re-open overlay.\r\n      // See https://github.com/vaadin/web-components/issues/6316\r\n      if (this._stateController.isClosing) {\r\n        this._stateController.open({ immediate: true });\r\n      }\r\n    }\r\n\r\n    /** @protected */\r\n    __onOverlayMouseLeave(event) {\r\n      if (event.relatedTarget !== this.target) {\r\n        this.__handleMouseLeave();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __handleMouseLeave() {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      this.__hoverInside = false;\r\n\r\n      if (!this.__focusInside) {\r\n        this._stateController.close();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onOverlayOpen() {\r\n      if (this.manual) {\r\n        return;\r\n      }\r\n\r\n      // Close tooltip if another overlay is opened on top of the tooltip's overlay\r\n      if (this._overlayElement.opened && !this._overlayElement._last) {\r\n        this._stateController.close(true);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __onTargetVisibilityChange(isVisible) {\r\n      const oldHidden = this.__isTargetHidden;\r\n      this.__isTargetHidden = !isVisible;\r\n\r\n      // Open the overlay when the target becomes visible and has focus or hover.\r\n      if (oldHidden && isVisible && (this.__focusInside || this.__hoverInside)) {\r\n        this._stateController.open({ immediate: true });\r\n        return;\r\n      }\r\n\r\n      // Close the overlay when the target is no longer fully visible.\r\n      if (!isVisible && this._autoOpened) {\r\n        this._stateController.close(true);\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __isShouldShow() {\r\n      if (typeof this.shouldShow === 'function' && this.shouldShow(this.target, this.context) !== true) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /** @private */\r\n    __textChanged(text, oldText) {\r\n      if (this._overlayElement && (text || oldText)) {\r\n        this._overlayElement.requestContentUpdate();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __tooltipRenderer(root) {\r\n      root.textContent = typeof this.generator === 'function' ? this.generator(this.context) : this.text;\r\n\r\n      // Update the sr-only label text content\r\n      this._overlayContent = root.textContent;\r\n    }\r\n\r\n    /** @private */\r\n    __computeAriaTarget(ariaTarget, target) {\r\n      const isElementNode = (el) => el && el.nodeType === Node.ELEMENT_NODE;\r\n      const isAriaTargetSet = Array.isArray(ariaTarget) ? ariaTarget.some(isElementNode) : ariaTarget;\r\n      return isAriaTargetSet ? ariaTarget : target;\r\n    }\r\n\r\n    /** @private */\r\n    __effectiveAriaTargetChanged(ariaTarget, oldAriaTarget) {\r\n      if (oldAriaTarget) {\r\n        [oldAriaTarget].flat().forEach((target) => {\r\n          removeValueFromAttribute(target, 'aria-describedby', this._uniqueId);\r\n        });\r\n      }\r\n\r\n      if (ariaTarget) {\r\n        [ariaTarget].flat().forEach((target) => {\r\n          addValueToAttribute(target, 'aria-describedby', this._uniqueId);\r\n        });\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __generatorChanged(overlayElement, generator, context) {\r\n      if (overlayElement) {\r\n        if (generator !== this.__oldTextGenerator || context !== this.__oldContext) {\r\n          overlayElement.requestContentUpdate();\r\n        }\r\n\r\n        this.__oldTextGenerator = generator;\r\n        this.__oldContext = context;\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __updateSrLabelText(srLabel, textContent) {\r\n      if (srLabel) {\r\n        srLabel.textContent = textContent;\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2022 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-tooltip-overlay.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\r\nimport { TooltipMixin } from './vaadin-tooltip-mixin.js';\r\n\r\n/**\r\n * `<vaadin-tooltip>` is a Web Component for creating tooltips.\r\n *\r\n * ```html\r\n * <button id=\"confirm\">Confirm</button>\r\n * <vaadin-tooltip text=\"Click to save changes\" for=\"confirm\"></vaadin-tooltip>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * `<vaadin-tooltip>` uses `<vaadin-tooltip-overlay>` internal\r\n * themable component as the actual visible overlay.\r\n *\r\n * See [`<vaadin-overlay>`](#/elements/vaadin-overlay) documentation\r\n * for `<vaadin-tooltip-overlay>` parts.\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute        | Description\r\n * -----------------|----------------------------------------\r\n * `position`       | Reflects the `position` property value.\r\n *\r\n * Note: the `theme` attribute value set on `<vaadin-tooltip>` is\r\n * propagated to the internal `<vaadin-tooltip-overlay>` component.\r\n *\r\n * ### Custom CSS Properties\r\n *\r\n * The following custom CSS properties are available on the `<vaadin-tooltip>` element:\r\n *\r\n * Custom CSS property              | Description\r\n * ---------------------------------|-------------\r\n * `--vaadin-tooltip-offset-top`    | Used as an offset when the tooltip is aligned vertically below the target\r\n * `--vaadin-tooltip-offset-bottom` | Used as an offset when the tooltip is aligned vertically above the target\r\n * `--vaadin-tooltip-offset-start`  | Used as an offset when the tooltip is aligned horizontally after the target\r\n * `--vaadin-tooltip-offset-end`    | Used as an offset when the tooltip is aligned horizontally before the target\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ControllerMixin\r\n * @mixes ElementMixin\r\n * @mixes ThemePropertyMixin\r\n * @mixes TooltipMixin\r\n */\r\nclass Tooltip extends TooltipMixin(ThemePropertyMixin(ElementMixin(ControllerMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-tooltip';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: none;\r\n        }\r\n      </style>\r\n      <vaadin-tooltip-overlay\r\n        id=\"overlay\"\r\n        owner=\"[[__overlayOwner]]\"\r\n        renderer=\"[[_renderer]]\"\r\n        theme$=\"[[_theme]]\"\r\n        opened=\"[[__computeOpened(manual, opened, _autoOpened, _isConnected)]]\"\r\n        position-target=\"[[target]]\"\r\n        position=\"[[__effectivePosition]]\"\r\n        no-horizontal-overlap$=\"[[__computeNoHorizontalOverlap(__effectivePosition)]]\"\r\n        no-vertical-overlap$=\"[[__computeNoVerticalOverlap(__effectivePosition)]]\"\r\n        horizontal-align=\"[[__computeHorizontalAlign(__effectivePosition)]]\"\r\n        vertical-align=\"[[__computeVerticalAlign(__effectivePosition)]]\"\r\n        on-mouseenter=\"__onOverlayMouseEnter\"\r\n        on-mouseleave=\"__onOverlayMouseLeave\"\r\n        modeless\r\n      ></vaadin-tooltip-overlay>\r\n\r\n      <slot name=\"sr-label\"></slot>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /** @private */\r\n      __overlayOwner: {\r\n        value() {\r\n          return this;\r\n        },\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\ndefineCustomElement(Tooltip);\r\n\r\nexport { Tooltip };\r\n"],
  "mappings": "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",
  "names": []
}

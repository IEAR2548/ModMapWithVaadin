{
  "version": 3,
  "sources": ["../../ol/src/layer/BaseVector.js", "../../ol/src/render/canvas/Instruction.js", "../../ol/src/render/VectorContext.js", "../../ol/src/render/canvas/Builder.js", "../../ol/src/render/canvas/ImageBuilder.js", "../../ol/src/render/canvas/LineStringBuilder.js", "../../ol/src/render/canvas/PolygonBuilder.js", "../../ol/src/geom/flat/straightchunk.js", "../../ol/src/render/canvas/TextBuilder.js", "../../ol/src/render/canvas/BuilderGroup.js", "../../ol/src/render/canvas/BuilderType.js", "../../ol/src/geom/flat/textpath.js", "../../ol/src/geom/flat/length.js", "../../ol/src/render/canvas/Executor.js", "../../ol/src/render/canvas/ExecutorGroup.js", "../../ol/src/render/canvas/Immediate.js", "../../ol/src/render/canvas/hitdetect.js", "../../ol/src/renderer/vector.js", "../../ol/src/renderer/canvas/VectorLayer.js", "../../ol/src/layer/Vector.js"],
  "sourcesContent": ["/**\r\n * @module ol/layer/BaseVector\r\n */\r\nimport Layer from './Layer.js';\r\nimport RBush from 'rbush';\r\nimport {assign} from '../obj.js';\r\nimport {\r\n  createDefaultStyle,\r\n  toFunction as toStyleFunction,\r\n} from '../style/Style.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\r\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\r\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\r\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\r\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\r\n * higher priority.\r\n *\r\n * As an optimization decluttered features from layers with the same `className` are rendered above\r\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\r\n * behavior and place declutterd features with their own layer configure the layer with a `className`\r\n * other than `ol-layer`.\r\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  RENDER_ORDER: 'renderOrder',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseVectorLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} [opt_options] Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    const baseOptions = assign({}, options);\r\n\r\n    delete baseOptions.style;\r\n    delete baseOptions.renderBuffer;\r\n    delete baseOptions.updateWhileAnimating;\r\n    delete baseOptions.updateWhileInteracting;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.declutter_ =\r\n      options.declutter !== undefined ? options.declutter : false;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderBuffer_ =\r\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\r\n\r\n    /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike}\r\n     * @private\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    this.setStyle(options.style);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileAnimating_ =\r\n      options.updateWhileAnimating !== undefined\r\n        ? options.updateWhileAnimating\r\n        : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileInteracting_ =\r\n      options.updateWhileInteracting !== undefined\r\n        ? options.updateWhileInteracting\r\n        : false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Declutter.\r\n   */\r\n  getDeclutter() {\r\n    return this.declutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in {@link import(\"../PluggableMap.js\").default#getFeaturesAtPixel}: Text\r\n   * is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with an array of features.\r\n   * @api\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @return {number|undefined} Render buffer.\r\n   */\r\n  getRenderBuffer() {\r\n    return this.renderBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\r\n   *     order.\r\n   */\r\n  getRenderOrder() {\r\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\r\n      this.get(Property.RENDER_ORDER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */\r\n  getUpdateWhileAnimating() {\r\n    return this.updateWhileAnimating_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */\r\n  getUpdateWhileInteracting() {\r\n    return this.updateWhileInteracting_;\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (!frameState.declutterTree) {\r\n      frameState.declutterTree = new RBush(9);\r\n    }\r\n    /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */\r\n  setRenderOrder(renderOrder) {\r\n    this.set(Property.RENDER_ORDER, renderOrder);\r\n  }\r\n\r\n  /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * {@link module:ol/style/Style~Style} for information on the default style.\r\n   * @param {import(\"../style/Style.js\").StyleLike|null} [opt_style] Layer style.\r\n   * @api\r\n   */\r\n  setStyle(opt_style) {\r\n    this.style_ = opt_style !== undefined ? opt_style : createDefaultStyle;\r\n    this.styleFunction_ =\r\n      opt_style === null ? undefined : toStyleFunction(this.style_);\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default BaseVectorLayer;\r\n", "/**\r\n * @module ol/render/canvas/Instruction\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nconst Instruction = {\r\n  BEGIN_GEOMETRY: 0,\r\n  BEGIN_PATH: 1,\r\n  CIRCLE: 2,\r\n  CLOSE_PATH: 3,\r\n  CUSTOM: 4,\r\n  DRAW_CHARS: 5,\r\n  DRAW_IMAGE: 6,\r\n  END_GEOMETRY: 7,\r\n  FILL: 8,\r\n  MOVE_TO_LINE_TO: 9,\r\n  SET_FILL_STYLE: 10,\r\n  SET_STROKE_STYLE: 11,\r\n  STROKE: 12,\r\n};\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const fillInstruction = [Instruction.FILL];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const strokeInstruction = [Instruction.STROKE];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\r\n\r\nexport default Instruction;\r\n", "/**\r\n * @module ol/render/VectorContext\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */\r\nclass VectorContext {\r\n  /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}\r\n\r\n  /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */\r\n  drawGeometry(geometry) {}\r\n\r\n  /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */\r\n  setStyle(style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\r\n  drawCircle(circleGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   */\r\n  drawFeature(feature, style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\r\n  drawGeometryCollection(geometryCollectionGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawLineString(lineStringGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPoint(pointGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPolygon(polygonGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawText(geometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with a text style.\r\n   */\r\n  setImageStyle(imageStyle, opt_declutterImageWithText) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with an image style.\r\n   */\r\n  setTextStyle(textStyle, opt_declutterImageWithText) {}\r\n}\r\n\r\nexport default VectorContext;\r\n", "/**\r\n * @module ol/render/canvas/Builder\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport GeometryType from '../../geom/GeometryType.js';\r\nimport Relationship from '../../extent/Relationship.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  buffer,\r\n  clone,\r\n  containsCoordinate,\r\n  coordinateRelationship,\r\n} from '../../extent.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../canvas.js';\r\nimport {equals, reverseSubArray} from '../../array.js';\r\nimport {\r\n  inflateCoordinates,\r\n  inflateCoordinatesArray,\r\n  inflateMultiCoordinatesArray,\r\n} from '../../geom/flat/inflate.js';\r\n\r\nclass CanvasBuilder extends VectorContext {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.tolerance = tolerance;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent = maxExtent;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxLineWidth = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction1_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction2_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.bufferedMaxExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate.js\").Coordinate}\r\n     */\r\n    this.tmpCoordinate_ = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../canvas.js\").FillStrokeState}\r\n     */\r\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Array<number>} dashArray Dash array.\r\n   * @return {Array<number>} Dash array with pixel ratio applied\r\n   */\r\n  applyPixelRatio(dashArray) {\r\n    const pixelRatio = this.pixelRatio;\r\n    return pixelRatio == 1\r\n      ? dashArray\r\n      : dashArray.map(function (dash) {\r\n          return dash * pixelRatio;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} stride Stride.\r\n   * @protected\r\n   * @return {number} My end\r\n   */\r\n  appendFlatPointCoordinates(flatCoordinates, stride) {\r\n    const extent = this.getBufferedMaxExtent();\r\n    const tmpCoord = this.tmpCoordinate_;\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      tmpCoord[0] = flatCoordinates[i];\r\n      tmpCoord[1] = flatCoordinates[i + 1];\r\n      if (containsCoordinate(extent, tmpCoord)) {\r\n        coordinates[myEnd++] = tmpCoord[0];\r\n        coordinates[myEnd++] = tmpCoord[1];\r\n      }\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} closed Last input coordinate equals first.\r\n   * @param {boolean} skipFirst Skip first coordinate.\r\n   * @protected\r\n   * @return {number} My end.\r\n   */\r\n  appendFlatLineCoordinates(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    closed,\r\n    skipFirst\r\n  ) {\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    const extent = this.getBufferedMaxExtent();\r\n    if (skipFirst) {\r\n      offset += stride;\r\n    }\r\n    let lastXCoord = flatCoordinates[offset];\r\n    let lastYCoord = flatCoordinates[offset + 1];\r\n    const nextCoord = this.tmpCoordinate_;\r\n    let skipped = true;\r\n\r\n    let i, lastRel, nextRel;\r\n    for (i = offset + stride; i < end; i += stride) {\r\n      nextCoord[0] = flatCoordinates[i];\r\n      nextCoord[1] = flatCoordinates[i + 1];\r\n      nextRel = coordinateRelationship(extent, nextCoord);\r\n      if (nextRel !== lastRel) {\r\n        if (skipped) {\r\n          coordinates[myEnd++] = lastXCoord;\r\n          coordinates[myEnd++] = lastYCoord;\r\n          skipped = false;\r\n        }\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n      } else if (nextRel === Relationship.INTERSECTING) {\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n        skipped = false;\r\n      } else {\r\n        skipped = true;\r\n      }\r\n      lastXCoord = nextCoord[0];\r\n      lastYCoord = nextCoord[1];\r\n      lastRel = nextRel;\r\n    }\r\n\r\n    // Last coordinate equals first or only one point to append:\r\n    if ((closed && skipped) || i === offset + stride) {\r\n      coordinates[myEnd++] = lastXCoord;\r\n      coordinates[myEnd++] = lastYCoord;\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Array<number>} builderEnds Builder ends.\r\n   * @return {number} Offset.\r\n   */\r\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const builderEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        false,\r\n        false\r\n      );\r\n      builderEnds.push(builderEnd);\r\n      offset = end;\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\r\n    this.beginGeometry(geometry, feature);\r\n\r\n    const type = geometry.getType();\r\n    const stride = geometry.getStride();\r\n    const builderBegin = this.coordinates.length;\r\n\r\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\r\n    let offset;\r\n\r\n    switch (type) {\r\n      case GeometryType.MULTI_POLYGON:\r\n        flatCoordinates =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getOrientedFlatCoordinates();\r\n        builderEndss = [];\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        offset = 0;\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          const myEnds = [];\r\n          offset = this.drawCustomCoordinates_(\r\n            flatCoordinates,\r\n            offset,\r\n            endss[i],\r\n            stride,\r\n            myEnds\r\n          );\r\n          builderEndss.push(myEnds);\r\n        }\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          renderer,\r\n          inflateMultiCoordinatesArray,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateMultiCoordinatesArray,\r\n        ]);\r\n        break;\r\n      case GeometryType.POLYGON:\r\n      case GeometryType.MULTI_LINE_STRING:\r\n        builderEnds = [];\r\n        flatCoordinates =\r\n          type == GeometryType.POLYGON\r\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n                geometry\r\n              ).getOrientedFlatCoordinates()\r\n            : geometry.getFlatCoordinates();\r\n        offset = this.drawCustomCoordinates_(\r\n          flatCoordinates,\r\n          0,\r\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ).getEnds(),\r\n          stride,\r\n          builderEnds\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinatesArray,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinatesArray,\r\n        ]);\r\n        break;\r\n      case GeometryType.LINE_STRING:\r\n      case GeometryType.CIRCLE:\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatLineCoordinates(\r\n          flatCoordinates,\r\n          0,\r\n          flatCoordinates.length,\r\n          stride,\r\n          false,\r\n          false\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinates,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinates,\r\n        ]);\r\n        break;\r\n      case GeometryType.MULTI_POINT:\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n\r\n        if (builderEnd > builderBegin) {\r\n          this.instructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            renderer,\r\n            inflateCoordinates,\r\n          ]);\r\n          this.hitDetectionInstructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            hitDetectionRenderer || renderer,\r\n            inflateCoordinates,\r\n          ]);\r\n        }\r\n        break;\r\n      case GeometryType.POINT:\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n        builderEnd = this.coordinates.length;\r\n\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n        ]);\r\n        break;\r\n      default:\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  beginGeometry(geometry, feature) {\r\n    this.beginGeometryInstruction1_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n    ];\r\n    this.instructions.push(this.beginGeometryInstruction1_);\r\n    this.beginGeometryInstruction2_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n    ];\r\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    return {\r\n      instructions: this.instructions,\r\n      hitDetectionInstructions: this.hitDetectionInstructions,\r\n      coordinates: this.coordinates,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reverse the hit detection instructions.\r\n   */\r\n  reverseHitDetectionInstructions() {\r\n    const hitDetectionInstructions = this.hitDetectionInstructions;\r\n    // step 1 - reverse array\r\n    hitDetectionInstructions.reverse();\r\n    // step 2 - reverse instructions within geometry blocks\r\n    let i;\r\n    const n = hitDetectionInstructions.length;\r\n    let instruction;\r\n    let type;\r\n    let begin = -1;\r\n    for (i = 0; i < n; ++i) {\r\n      instruction = hitDetectionInstructions[i];\r\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\r\n      if (type == CanvasInstruction.END_GEOMETRY) {\r\n        begin = i;\r\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\r\n        instruction[2] = i;\r\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\r\n        begin = -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    const state = this.state;\r\n    if (fillStyle) {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      state.fillStyle = asColorLike(\r\n        fillStyleColor ? fillStyleColor : defaultFillStyle\r\n      );\r\n    } else {\r\n      state.fillStyle = undefined;\r\n    }\r\n    if (strokeStyle) {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      state.strokeStyle = asColorLike(\r\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\r\n      );\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      state.lineCap =\r\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      state.lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash.slice()\r\n        : defaultLineDash;\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      state.lineDashOffset = strokeStyleLineDashOffset\r\n        ? strokeStyleLineDashOffset\r\n        : defaultLineDashOffset;\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      state.lineJoin =\r\n        strokeStyleLineJoin !== undefined\r\n          ? strokeStyleLineJoin\r\n          : defaultLineJoin;\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      state.lineWidth =\r\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      state.miterLimit =\r\n        strokeStyleMiterLimit !== undefined\r\n          ? strokeStyleMiterLimit\r\n          : defaultMiterLimit;\r\n\r\n      if (state.lineWidth > this.maxLineWidth) {\r\n        this.maxLineWidth = state.lineWidth;\r\n        // invalidate the buffered max extent cache\r\n        this.bufferedMaxExtent_ = null;\r\n      }\r\n    } else {\r\n      state.strokeStyle = undefined;\r\n      state.lineCap = undefined;\r\n      state.lineDash = null;\r\n      state.lineDashOffset = undefined;\r\n      state.lineJoin = undefined;\r\n      state.lineWidth = undefined;\r\n      state.miterLimit = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Fill instruction.\r\n   */\r\n  createFill(state) {\r\n    const fillStyle = state.fillStyle;\r\n    /** @type {Array<*>} */\r\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\r\n    if (typeof fillStyle !== 'string') {\r\n      // Fill is a pattern or gradient - align it!\r\n      fillInstruction.push(true);\r\n    }\r\n    return fillInstruction;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    this.instructions.push(this.createStroke(state));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Stroke instruction.\r\n   */\r\n  createStroke(state) {\r\n    return [\r\n      CanvasInstruction.SET_STROKE_STYLE,\r\n      state.strokeStyle,\r\n      state.lineWidth * this.pixelRatio,\r\n      state.lineCap,\r\n      state.lineJoin,\r\n      state.miterLimit,\r\n      this.applyPixelRatio(state.lineDash),\r\n      state.lineDashOffset * this.pixelRatio,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\r\n   */\r\n  updateFillStyle(state, createFill) {\r\n    const fillStyle = state.fillStyle;\r\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\r\n      if (fillStyle !== undefined) {\r\n        this.instructions.push(createFill.call(this, state));\r\n      }\r\n      state.currentFillStyle = fillStyle;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\r\n   */\r\n  updateStrokeStyle(state, applyStroke) {\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineCap = state.lineCap;\r\n    const lineDash = state.lineDash;\r\n    const lineDashOffset = state.lineDashOffset;\r\n    const lineJoin = state.lineJoin;\r\n    const lineWidth = state.lineWidth;\r\n    const miterLimit = state.miterLimit;\r\n    if (\r\n      state.currentStrokeStyle != strokeStyle ||\r\n      state.currentLineCap != lineCap ||\r\n      (lineDash != state.currentLineDash &&\r\n        !equals(state.currentLineDash, lineDash)) ||\r\n      state.currentLineDashOffset != lineDashOffset ||\r\n      state.currentLineJoin != lineJoin ||\r\n      state.currentLineWidth != lineWidth ||\r\n      state.currentMiterLimit != miterLimit\r\n    ) {\r\n      if (strokeStyle !== undefined) {\r\n        applyStroke.call(this, state);\r\n      }\r\n      state.currentStrokeStyle = strokeStyle;\r\n      state.currentLineCap = lineCap;\r\n      state.currentLineDash = lineDash;\r\n      state.currentLineDashOffset = lineDashOffset;\r\n      state.currentLineJoin = lineJoin;\r\n      state.currentLineWidth = lineWidth;\r\n      state.currentMiterLimit = miterLimit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  endGeometry(feature) {\r\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\r\n    this.beginGeometryInstruction1_ = null;\r\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\r\n    this.beginGeometryInstruction2_ = null;\r\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\r\n    this.instructions.push(endGeometryInstruction);\r\n    this.hitDetectionInstructions.push(endGeometryInstruction);\r\n  }\r\n\r\n  /**\r\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\r\n   * provided to the constructor.  To account for symbolizers that may intersect\r\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\r\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\r\n   * @protected\r\n   */\r\n  getBufferedMaxExtent() {\r\n    if (!this.bufferedMaxExtent_) {\r\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\r\n      if (this.maxLineWidth > 0) {\r\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\r\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\r\n      }\r\n    }\r\n    return this.bufferedMaxExtent_;\r\n  }\r\n}\r\n\r\nexport default CanvasBuilder;\r\n", "/**\r\n * @module ol/render/canvas/ImageBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\n\r\nclass CanvasImageBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.imagePixelRatio_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.height_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.opacity_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = undefined;\r\n\r\n    /**\r\n     * Data shared with a text builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPoint(pointGeometry, feature) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(pointGeometry, feature);\r\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\r\n    const stride = pointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      this.opacity_,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(multiPointGeometry, feature);\r\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\r\n    const stride = multiPointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      this.opacity_,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\r\n    this.anchorX_ = undefined;\r\n    this.anchorY_ = undefined;\r\n    this.hitDetectionImage_ = null;\r\n    this.image_ = null;\r\n    this.imagePixelRatio_ = undefined;\r\n    this.height_ = undefined;\r\n    this.scale_ = undefined;\r\n    this.opacity_ = undefined;\r\n    this.originX_ = undefined;\r\n    this.originY_ = undefined;\r\n    this.rotateWithView_ = undefined;\r\n    this.rotation_ = undefined;\r\n    this.width_ = undefined;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @param {Object} [opt_sharedData] Shared data.\r\n   */\r\n  setImageStyle(imageStyle, opt_sharedData) {\r\n    const anchor = imageStyle.getAnchor();\r\n    const size = imageStyle.getSize();\r\n    const hitDetectionImage = imageStyle.getHitDetectionImage();\r\n    const image = imageStyle.getImage(this.pixelRatio);\r\n    const origin = imageStyle.getOrigin();\r\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\r\n    this.anchorX_ = anchor[0];\r\n    this.anchorY_ = anchor[1];\r\n    this.hitDetectionImage_ = hitDetectionImage;\r\n    this.image_ = image;\r\n    this.height_ = size[1];\r\n    this.opacity_ = imageStyle.getOpacity();\r\n    this.originX_ = origin[0] * this.imagePixelRatio_;\r\n    this.originY_ = origin[1] * this.imagePixelRatio_;\r\n    this.rotateWithView_ = imageStyle.getRotateWithView();\r\n    this.rotation_ = imageStyle.getRotation();\r\n    this.scale_ = imageStyle.getScaleArray();\r\n    this.width_ = size[0];\r\n    this.declutterImageWithText_ = opt_sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasImageBuilder;\r\n", "/**\r\n * @module ol/render/canvas/LineStringBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\r\n\r\nclass CanvasLineStringBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} end.\r\n   */\r\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      false,\r\n      false\r\n    );\r\n    const moveToLineToInstruction = [\r\n      CanvasInstruction.MOVE_TO_LINE_TO,\r\n      myBegin,\r\n      myEnd,\r\n    ];\r\n    this.instructions.push(moveToLineToInstruction);\r\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawLineString(lineStringGeometry, feature) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(lineStringGeometry, feature);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction\r\n    );\r\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\r\n    const stride = lineStringGeometry.getStride();\r\n    this.drawFlatCoordinates_(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride\r\n    );\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(multiLineStringGeometry, feature);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        state.lineDash,\r\n        state.lineDashOffset,\r\n      ],\r\n      beginPathInstruction\r\n    );\r\n    const ends = multiLineStringGeometry.getEnds();\r\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\r\n    const stride = multiLineStringGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinates_(\r\n        flatCoordinates,\r\n        offset,\r\n        /** @type {number} */ (ends[i]),\r\n        stride\r\n      );\r\n    }\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const state = this.state;\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n    }\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n      state.lastStroke = this.coordinates.length;\r\n    }\r\n    state.lastStroke = 0;\r\n    super.applyStroke(state);\r\n    this.instructions.push(beginPathInstruction);\r\n  }\r\n}\r\n\r\nexport default CanvasLineStringBuilder;\r\n", "/**\r\n * @module ol/render/canvas/PolygonBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  closePathInstruction,\r\n  fillInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {defaultFillStyle} from '../canvas.js';\r\nimport {snap} from '../../geom/flat/simplify.js';\r\n\r\nclass CanvasPolygonBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\r\n    const state = this.state;\r\n    const fill = state.fillStyle !== undefined;\r\n    const stroke = state.strokeStyle !== undefined;\r\n    const numEnds = ends.length;\r\n    this.instructions.push(beginPathInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction);\r\n    for (let i = 0; i < numEnds; ++i) {\r\n      const end = ends[i];\r\n      const myBegin = this.coordinates.length;\r\n      const myEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        true,\r\n        !stroke\r\n      );\r\n      const moveToLineToInstruction = [\r\n        CanvasInstruction.MOVE_TO_LINE_TO,\r\n        myBegin,\r\n        myEnd,\r\n      ];\r\n      this.instructions.push(moveToLineToInstruction);\r\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n      if (stroke) {\r\n        // Performance optimization: only call closePath() when we have a stroke.\r\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\r\n        this.instructions.push(closePathInstruction);\r\n        this.hitDetectionInstructions.push(closePathInstruction);\r\n      }\r\n      offset = end;\r\n    }\r\n    if (fill) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (stroke) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   */\r\n  drawCircle(circleGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(circleGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        state.lineDash,\r\n        state.lineDashOffset,\r\n      ]);\r\n    }\r\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\r\n    const stride = circleGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      false,\r\n      false\r\n    );\r\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\r\n    this.instructions.push(beginPathInstruction, circleInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\r\n    if (state.fillStyle !== undefined) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPolygon(polygonGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(polygonGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        state.lineDash,\r\n        state.lineDashOffset,\r\n      ]);\r\n    }\r\n    const ends = polygonGeometry.getEnds();\r\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = polygonGeometry.getStride();\r\n    this.drawFlatCoordinatess_(\r\n      flatCoordinates,\r\n      0,\r\n      /** @type {Array<number>} */ (ends),\r\n      stride\r\n    );\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(multiPolygonGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        state.lineDash,\r\n        state.lineDashOffset,\r\n      ]);\r\n    }\r\n    const endss = multiPolygonGeometry.getEndss();\r\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = multiPolygonGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinatess_(\r\n        flatCoordinates,\r\n        offset,\r\n        endss[i],\r\n        stride\r\n      );\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    // We want to preserve topology when drawing polygons.  Polygons are\r\n    // simplified using quantization and point elimination. However, we might\r\n    // have received a mix of quantized and non-quantized geometries, so ensure\r\n    // that all are quantized by quantizing all coordinates in the batch.\r\n    const tolerance = this.tolerance;\r\n    if (tolerance !== 0) {\r\n      const coordinates = this.coordinates;\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = snap(coordinates[i], tolerance);\r\n      }\r\n    }\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setFillStrokeStyles_() {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    if (fillStyle !== undefined) {\r\n      this.updateFillStyle(state, this.createFill);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.updateStrokeStyle(state, this.applyStroke);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasPolygonBuilder;\r\n", "/**\r\n * @module ol/geom/flat/straightchunk\r\n */\r\n\r\n/**\r\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Start and end of the first suitable chunk of the\r\n * given `flatCoordinates`.\r\n */\r\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\r\n  let chunkStart = offset;\r\n  let chunkEnd = offset;\r\n  let chunkM = 0;\r\n  let m = 0;\r\n  let start = offset;\r\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\r\n  for (i = offset; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    if (x1 !== undefined) {\r\n      x23 = x2 - x1;\r\n      y23 = y2 - y1;\r\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\r\n      if (x12 !== undefined) {\r\n        m += m12;\r\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\r\n        if (acos > maxAngle) {\r\n          if (m > chunkM) {\r\n            chunkM = m;\r\n            chunkStart = start;\r\n            chunkEnd = i;\r\n          }\r\n          m = 0;\r\n          start = i - stride;\r\n        }\r\n      }\r\n      m12 = m23;\r\n      x12 = x23;\r\n      y12 = y23;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  m += m23;\r\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\r\n}\r\n", "/**\r\n * @module ol/render/canvas/TextBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\nimport GeometryType from '../../geom/GeometryType.js';\r\nimport TextPlacement from '../../style/TextPlacement.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultPadding,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  registerFont,\r\n} from '../canvas.js';\r\nimport {getUid} from '../../util.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nexport const TEXT_ALIGN = {\r\n  'left': 0,\r\n  'end': 0,\r\n  'center': 0.5,\r\n  'right': 1,\r\n  'start': 1,\r\n  'top': 0,\r\n  'middle': 0.5,\r\n  'hanging': 0.2,\r\n  'alphabetic': 0.8,\r\n  'ideographic': 0.8,\r\n  'bottom': 1,\r\n};\r\n\r\nclass CanvasTextBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<HTMLCanvasElement>}\r\n     */\r\n    this.labels_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.textRotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.textKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.fillKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.strokeKey_ = '';\r\n\r\n    /**\r\n     * Data shared with an image builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const instructions = super.finish();\r\n    instructions.textStates = this.textStates;\r\n    instructions.fillStates = this.fillStates;\r\n    instructions.strokeStates = this.strokeStates;\r\n    return instructions;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawText(geometry, feature) {\r\n    const fillState = this.textFillState_;\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\r\n      return;\r\n    }\r\n\r\n    const coordinates = this.coordinates;\r\n    let begin = coordinates.length;\r\n\r\n    const geometryType = geometry.getType();\r\n    let flatCoordinates = null;\r\n    let stride = geometry.getStride();\r\n\r\n    if (\r\n      textState.placement === TextPlacement.LINE &&\r\n      (geometryType == GeometryType.LINE_STRING ||\r\n        geometryType == GeometryType.MULTI_LINE_STRING ||\r\n        geometryType == GeometryType.POLYGON ||\r\n        geometryType == GeometryType.MULTI_POLYGON)\r\n    ) {\r\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\r\n        return;\r\n      }\r\n      let ends;\r\n      flatCoordinates = geometry.getFlatCoordinates();\r\n      if (geometryType == GeometryType.LINE_STRING) {\r\n        ends = [flatCoordinates.length];\r\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\r\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry\r\n        ).getEnds();\r\n      } else if (geometryType == GeometryType.POLYGON) {\r\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n          .getEnds()\r\n          .slice(0, 1);\r\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        ends = [];\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          ends.push(endss[i][0]);\r\n        }\r\n      }\r\n      this.beginGeometry(geometry, feature);\r\n      const textAlign = textState.textAlign;\r\n      let flatOffset = 0;\r\n      let flatEnd;\r\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\r\n        if (textAlign == undefined) {\r\n          const range = matchingChunk(\r\n            textState.maxAngle,\r\n            flatCoordinates,\r\n            flatOffset,\r\n            ends[o],\r\n            stride\r\n          );\r\n          flatOffset = range[0];\r\n          flatEnd = range[1];\r\n        } else {\r\n          flatEnd = ends[o];\r\n        }\r\n        for (let i = flatOffset; i < flatEnd; i += stride) {\r\n          coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\r\n        }\r\n        const end = coordinates.length;\r\n        flatOffset = ends[o];\r\n        this.drawChars_(begin, end);\r\n        begin = end;\r\n      }\r\n      this.endGeometry(feature);\r\n    } else {\r\n      let geometryWidths = textState.overflow ? null : [];\r\n      switch (geometryType) {\r\n        case GeometryType.POINT:\r\n        case GeometryType.MULTI_POINT:\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n              geometry\r\n            ).getFlatCoordinates();\r\n          break;\r\n        case GeometryType.LINE_STRING:\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoint();\r\n          break;\r\n        case GeometryType.CIRCLE:\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n              geometry\r\n            ).getCenter();\r\n          break;\r\n        case GeometryType.MULTI_LINE_STRING:\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoints();\r\n          stride = 2;\r\n          break;\r\n        case GeometryType.POLYGON:\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoint();\r\n          if (!textState.overflow) {\r\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\r\n          }\r\n          stride = 3;\r\n          break;\r\n        case GeometryType.MULTI_POLYGON:\r\n          const interiorPoints =\r\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoints();\r\n          flatCoordinates = [];\r\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\r\n            if (!textState.overflow) {\r\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\r\n            }\r\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\r\n          }\r\n          if (flatCoordinates.length === 0) {\r\n            return;\r\n          }\r\n          stride = 2;\r\n          break;\r\n        default:\r\n      }\r\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n      if (end === begin) {\r\n        return;\r\n      }\r\n      if (\r\n        geometryWidths &&\r\n        (end - begin) / 2 !== flatCoordinates.length / stride\r\n      ) {\r\n        let beg = begin / 2;\r\n        geometryWidths = geometryWidths.filter((w, i) => {\r\n          const keep =\r\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\r\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\r\n          if (!keep) {\r\n            --beg;\r\n          }\r\n          return keep;\r\n        });\r\n      }\r\n\r\n      this.saveTextStates_();\r\n\r\n      if (textState.backgroundFill || textState.backgroundStroke) {\r\n        this.setFillStrokeStyle(\r\n          textState.backgroundFill,\r\n          textState.backgroundStroke\r\n        );\r\n        if (textState.backgroundFill) {\r\n          this.updateFillStyle(this.state, this.createFill);\r\n          this.hitDetectionInstructions.push(this.createFill(this.state));\r\n        }\r\n        if (textState.backgroundStroke) {\r\n          this.updateStrokeStyle(this.state, this.applyStroke);\r\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\r\n        }\r\n      }\r\n\r\n      this.beginGeometry(geometry, feature);\r\n\r\n      // adjust padding for negative scale\r\n      let padding = textState.padding;\r\n      if (\r\n        padding != defaultPadding &&\r\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\r\n      ) {\r\n        let p0 = textState.padding[0];\r\n        let p1 = textState.padding[1];\r\n        let p2 = textState.padding[2];\r\n        let p3 = textState.padding[3];\r\n        if (textState.scale[0] < 0) {\r\n          p1 = -p1;\r\n          p3 = -p3;\r\n        }\r\n        if (textState.scale[1] < 0) {\r\n          p0 = -p0;\r\n          p2 = -p2;\r\n        }\r\n        padding = [p0, p1, p2, p3];\r\n      }\r\n\r\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\r\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\r\n      // render time.\r\n      const pixelRatio = this.pixelRatio;\r\n      this.instructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [1, 1],\r\n        NaN,\r\n        this.declutterImageWithText_,\r\n        padding == defaultPadding\r\n          ? defaultPadding\r\n          : padding.map(function (p) {\r\n              return p * pixelRatio;\r\n            }),\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      const scale = 1 / pixelRatio;\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [scale, scale],\r\n        NaN,\r\n        this.declutterImageWithText_,\r\n        padding,\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n\r\n      this.endGeometry(feature);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  saveTextStates_() {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    const fillState = this.textFillState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    if (strokeState) {\r\n      if (!(strokeKey in this.strokeStates)) {\r\n        this.strokeStates[strokeKey] = {\r\n          strokeStyle: strokeState.strokeStyle,\r\n          lineCap: strokeState.lineCap,\r\n          lineDashOffset: strokeState.lineDashOffset,\r\n          lineWidth: strokeState.lineWidth,\r\n          lineJoin: strokeState.lineJoin,\r\n          miterLimit: strokeState.miterLimit,\r\n          lineDash: strokeState.lineDash,\r\n        };\r\n      }\r\n    }\r\n    const textKey = this.textKey_;\r\n    if (!(textKey in this.textStates)) {\r\n      this.textStates[textKey] = {\r\n        font: textState.font,\r\n        textAlign: textState.textAlign || defaultTextAlign,\r\n        textBaseline: textState.textBaseline || defaultTextBaseline,\r\n        scale: textState.scale,\r\n      };\r\n    }\r\n    const fillKey = this.fillKey_;\r\n    if (fillState) {\r\n      if (!(fillKey in this.fillStates)) {\r\n        this.fillStates[fillKey] = {\r\n          fillStyle: fillState.fillStyle,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} begin Begin.\r\n   * @param {number} end End.\r\n   */\r\n  drawChars_(begin, end) {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    const textKey = this.textKey_;\r\n    const fillKey = this.fillKey_;\r\n    this.saveTextStates_();\r\n\r\n    const pixelRatio = this.pixelRatio;\r\n    const baseline = TEXT_ALIGN[textState.textBaseline];\r\n\r\n    const offsetY = this.textOffsetY_ * pixelRatio;\r\n    const text = this.text_;\r\n    const strokeWidth = strokeState\r\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\r\n      : 0;\r\n\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey,\r\n      textState.maxAngle,\r\n      1,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth,\r\n      text,\r\n      textKey,\r\n      1 / pixelRatio,\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @param {Object} [opt_sharedData] Shared data.\r\n   */\r\n  setTextStyle(textStyle, opt_sharedData) {\r\n    let textState, fillState, strokeState;\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        fillState = null;\r\n        this.textFillState_ = fillState;\r\n      } else {\r\n        fillState = this.textFillState_;\r\n        if (!fillState) {\r\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\r\n          this.textFillState_ = fillState;\r\n        }\r\n        fillState.fillStyle = asColorLike(\r\n          textFillStyle.getColor() || defaultFillStyle\r\n        );\r\n      }\r\n\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        strokeState = null;\r\n        this.textStrokeState_ = strokeState;\r\n      } else {\r\n        strokeState = this.textStrokeState_;\r\n        if (!strokeState) {\r\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\r\n          this.textStrokeState_ = strokeState;\r\n        }\r\n        const lineDash = textStrokeStyle.getLineDash();\r\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\r\n        const lineWidth = textStrokeStyle.getWidth();\r\n        const miterLimit = textStrokeStyle.getMiterLimit();\r\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\r\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\r\n        strokeState.lineDashOffset =\r\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\r\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\r\n        strokeState.lineWidth =\r\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\r\n        strokeState.miterLimit =\r\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\r\n        strokeState.strokeStyle = asColorLike(\r\n          textStrokeStyle.getColor() || defaultStrokeStyle\r\n        );\r\n      }\r\n\r\n      textState = this.textState_;\r\n      const font = textStyle.getFont() || defaultFont;\r\n      registerFont(font);\r\n      const textScale = textStyle.getScaleArray();\r\n      textState.overflow = textStyle.getOverflow();\r\n      textState.font = font;\r\n      textState.maxAngle = textStyle.getMaxAngle();\r\n      textState.placement = textStyle.getPlacement();\r\n      textState.textAlign = textStyle.getTextAlign();\r\n      textState.textBaseline =\r\n        textStyle.getTextBaseline() || defaultTextBaseline;\r\n      textState.backgroundFill = textStyle.getBackgroundFill();\r\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\r\n      textState.padding = textStyle.getPadding() || defaultPadding;\r\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\r\n\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      this.text_ = textStyle.getText() || '';\r\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\r\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView === undefined ? false : textRotateWithView;\r\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\r\n\r\n      this.strokeKey_ = strokeState\r\n        ? (typeof strokeState.strokeStyle == 'string'\r\n            ? strokeState.strokeStyle\r\n            : getUid(strokeState.strokeStyle)) +\r\n          strokeState.lineCap +\r\n          strokeState.lineDashOffset +\r\n          '|' +\r\n          strokeState.lineWidth +\r\n          strokeState.lineJoin +\r\n          strokeState.miterLimit +\r\n          '[' +\r\n          strokeState.lineDash.join() +\r\n          ']'\r\n        : '';\r\n      this.textKey_ =\r\n        textState.font +\r\n        textState.scale +\r\n        (textState.textAlign || '?') +\r\n        (textState.textBaseline || '?');\r\n      this.fillKey_ = fillState\r\n        ? typeof fillState.fillStyle == 'string'\r\n          ? fillState.fillStyle\r\n          : '|' + getUid(fillState.fillStyle)\r\n        : '';\r\n    }\r\n    this.declutterImageWithText_ = opt_sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasTextBuilder;\r\n", "/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */\r\n\r\nimport Builder from './Builder.js';\r\nimport ImageBuilder from './ImageBuilder.js';\r\nimport LineStringBuilder from './LineStringBuilder.js';\r\nimport PolygonBuilder from './PolygonBuilder.js';\r\nimport TextBuilder from './TextBuilder.js';\r\n\r\n/**\r\n * @type {Object<import(\"./BuilderType\").default, typeof Builder>}\r\n */\r\nconst BATCH_CONSTRUCTORS = {\r\n  'Circle': PolygonBuilder,\r\n  'Default': Builder,\r\n  'Image': ImageBuilder,\r\n  'LineString': LineStringBuilder,\r\n  'Polygon': PolygonBuilder,\r\n  'Text': TextBuilder,\r\n};\r\n\r\nclass BuilderGroup {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tolerance_ = tolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"./BuilderType\").default, Builder>>}\r\n     */\r\n    this.buildersByZIndex_ = {};\r\n  }\r\n\r\n  /**\r\n   * @return {!Object<string, !Object<import(\"./BuilderType\").default, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */\r\n  finish() {\r\n    const builderInstructions = {};\r\n    for (const zKey in this.buildersByZIndex_) {\r\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\r\n      const builders = this.buildersByZIndex_[zKey];\r\n      for (const builderKey in builders) {\r\n        const builderInstruction = builders[builderKey].finish();\r\n        builderInstructions[zKey][builderKey] = builderInstruction;\r\n      }\r\n    }\r\n    return builderInstructions;\r\n  }\r\n\r\n  /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"./BuilderType.js\").default} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */\r\n  getBuilder(zIndex, builderType) {\r\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\r\n    let replays = this.buildersByZIndex_[zIndexKey];\r\n    if (replays === undefined) {\r\n      replays = {};\r\n      this.buildersByZIndex_[zIndexKey] = replays;\r\n    }\r\n    let replay = replays[builderType];\r\n    if (replay === undefined) {\r\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\r\n      replay = new Constructor(\r\n        this.tolerance_,\r\n        this.maxExtent_,\r\n        this.resolution_,\r\n        this.pixelRatio_\r\n      );\r\n      replays[builderType] = replay;\r\n    }\r\n    return replay;\r\n  }\r\n}\r\n\r\nexport default BuilderGroup;\r\n", "/**\r\n * @module ol/render/canvas/BuilderType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  CIRCLE: 'Circle',\r\n  DEFAULT: 'Default',\r\n  IMAGE: 'Image',\r\n  LINE_STRING: 'LineString',\r\n  POLYGON: 'Polygon',\r\n  TEXT: 'Text',\r\n};\r\n", "/**\r\n * @module ol/geom/flat/textpath\r\n */\r\nimport {lerp} from '../../math.js';\r\nimport {rotate} from './transform.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Path to put text on.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @param {string} text Text to place on the path.\r\n * @param {number} startM m along the path where the text starts.\r\n * @param {number} maxAngle Max angle between adjacent chars in radians.\r\n * @param {number} scale The product of the text scale and the device pixel ratio.\r\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\r\n * @param {string} font The font.\r\n * @param {Object<string, number>} cache A cache of measured widths.\r\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\r\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\r\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\r\n */\r\nexport function drawTextOnPath(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  text,\r\n  startM,\r\n  maxAngle,\r\n  scale,\r\n  measureAndCacheTextWidth,\r\n  font,\r\n  cache,\r\n  rotation\r\n) {\r\n  let x2 = flatCoordinates[offset];\r\n  let y2 = flatCoordinates[offset + 1];\r\n  let x1 = 0;\r\n  let y1 = 0;\r\n  let segmentLength = 0;\r\n  let segmentM = 0;\r\n\r\n  function advance() {\r\n    x1 = x2;\r\n    y1 = y2;\r\n    offset += stride;\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    segmentM += segmentLength;\r\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  }\r\n  do {\r\n    advance();\r\n  } while (offset < end - stride && segmentM + segmentLength < startM);\r\n\r\n  let interpolate =\r\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\r\n  const beginX = lerp(x1, x2, interpolate);\r\n  const beginY = lerp(y1, y2, interpolate);\r\n\r\n  const startOffset = offset - stride;\r\n  const startLength = segmentM;\r\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\r\n  while (offset < end - stride && segmentM + segmentLength < endM) {\r\n    advance();\r\n  }\r\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\r\n  const endX = lerp(x1, x2, interpolate);\r\n  const endY = lerp(y1, y2, interpolate);\r\n\r\n  // Keep text upright\r\n  let reverse;\r\n  if (rotation) {\r\n    const flat = [beginX, beginY, endX, endY];\r\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\r\n    reverse = flat[0] > flat[2];\r\n  } else {\r\n    reverse = beginX > endX;\r\n  }\r\n\r\n  const PI = Math.PI;\r\n  const result = [];\r\n  const singleSegment = startOffset + stride === offset;\r\n\r\n  offset = startOffset;\r\n  segmentLength = 0;\r\n  segmentM = startLength;\r\n  x2 = flatCoordinates[offset];\r\n  y2 = flatCoordinates[offset + 1];\r\n\r\n  let previousAngle;\r\n  // All on the same segment\r\n  if (singleSegment) {\r\n    advance();\r\n\r\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      previousAngle += previousAngle > 0 ? -PI : PI;\r\n    }\r\n    const x = (endX + beginX) / 2;\r\n    const y = (endY + beginY) / 2;\r\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\r\n    return result;\r\n  }\r\n\r\n  for (let i = 0, ii = text.length; i < ii; ) {\r\n    advance();\r\n    let angle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      angle += angle > 0 ? -PI : PI;\r\n    }\r\n    if (previousAngle !== undefined) {\r\n      let delta = angle - previousAngle;\r\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\r\n      if (Math.abs(delta) > maxAngle) {\r\n        return null;\r\n      }\r\n    }\r\n    previousAngle = angle;\r\n\r\n    const iStart = i;\r\n    let charLength = 0;\r\n    for (; i < ii; ++i) {\r\n      const index = reverse ? ii - i - 1 : i;\r\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\r\n      if (\r\n        offset + stride < end &&\r\n        segmentM + segmentLength < startM + charLength + len / 2\r\n      ) {\r\n        break;\r\n      }\r\n      charLength += len;\r\n    }\r\n    if (i === iStart) {\r\n      continue;\r\n    }\r\n    const chars = reverse\r\n      ? text.substring(ii - iStart, ii - i)\r\n      : text.substring(iStart, i);\r\n    interpolate =\r\n      segmentLength === 0\r\n        ? 0\r\n        : (startM + charLength / 2 - segmentM) / segmentLength;\r\n    const x = lerp(x1, x2, interpolate);\r\n    const y = lerp(y1, y2, interpolate);\r\n    result.push([x, y, charLength / 2, angle, chars]);\r\n    startM += charLength;\r\n  }\r\n  return result;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/length\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Length.\r\n */\r\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  let length = 0;\r\n  for (let i = offset + stride; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Perimeter.\r\n */\r\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\r\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\r\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\r\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\r\n  perimeter += Math.sqrt(dx * dx + dy * dy);\r\n  return perimeter;\r\n}\r\n", "/**\r\n * @module ol/render/canvas/Executor\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {TEXT_ALIGN} from './TextBuilder.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../../has.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n  setFromArray as transformSetFromArray,\r\n} from '../../transform.js';\r\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\r\nimport {\r\n  defaultPadding,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  drawImageOrLabel,\r\n  getTextDimensions,\r\n  measureAndCacheTextWidth,\r\n} from '../canvas.js';\r\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\r\nimport {equals} from '../../array.js';\r\nimport {lineStringLength} from '../../geom/flat/length.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @typedef {Object} BBox\r\n * @property {number} minX Minimal x.\r\n * @property {number} minY Minimal y.\r\n * @property {number} maxX Maximal x.\r\n * @property {number} maxY Maximal y\r\n * @property {*} value Value.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageOrLabelDimensions\r\n * @property {number} drawImageX DrawImageX.\r\n * @property {number} drawImageY DrawImageY.\r\n * @property {number} drawImageW DrawImageW.\r\n * @property {number} drawImageH DrawImageH.\r\n * @property {number} originX OriginX.\r\n * @property {number} originY OriginY.\r\n * @property {Array<number>} scale Scale.\r\n * @property {BBox} declutterBox DeclutterBox.\r\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\r\n */\r\n\r\n/**\r\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * @type {import(\"../../extent.js\").Extent}\r\n */\r\nconst tmpExtent = createEmpty();\r\n\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p1 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p2 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p3 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p4 = [];\r\n\r\n/**\r\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\r\n * @return {BBox} Declutter bbox.\r\n */\r\nfunction getDeclutterBox(replayImageOrLabelArgs) {\r\n  return replayImageOrLabelArgs[3].declutterBox;\r\n}\r\n\r\nconst rtlRegEx = new RegExp(\r\n  /* eslint-disable prettier/prettier */\r\n  '[' +\r\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\r\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\r\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\r\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\r\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\r\n  ']'\r\n  /* eslint-enable prettier/prettier */\r\n);\r\n\r\n/**\r\n * @param {string} text Text.\r\n * @param {string} align Alignment.\r\n * @return {number} Text alignment.\r\n */\r\nfunction horizontalTextAlign(text, align) {\r\n  if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {\r\n    align = align === 'start' ? 'left' : 'right';\r\n  }\r\n  return TEXT_ALIGN[align];\r\n}\r\n\r\n/**\r\n * @param {Array<string>} acc Accumulator.\r\n * @param {string} line Line of text.\r\n * @param {number} i Index\r\n * @return {Array<string>} Accumulator.\r\n */\r\nfunction createTextChunks(acc, line, i) {\r\n  if (i > 0) {\r\n    acc.push('\\n', '');\r\n  }\r\n  acc.push(line, '');\r\n  return acc;\r\n}\r\n\r\nclass Executor {\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The replay can have overlapping geometries.\r\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\r\n   */\r\n  constructor(resolution, pixelRatio, overlaps, instructions) {\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps = overlaps;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.alignFill_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = instructions.instructions;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = instructions.coordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\r\n     */\r\n    this.coordinateCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedTransform_ = createTransform();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = 0;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = instructions.fillStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = instructions.strokeStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = instructions.textStates || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.widths_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, import(\"../canvas.js\").Label>}\r\n     */\r\n    this.labels_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} text Text.\r\n   * @param {string} textKey Text style key.\r\n   * @param {string} fillKey Fill style key.\r\n   * @param {string} strokeKey Stroke style key.\r\n   * @return {import(\"../canvas.js\").Label} Label.\r\n   */\r\n  createLabel(text, textKey, fillKey, strokeKey) {\r\n    const key = text + textKey + fillKey + strokeKey;\r\n    if (this.labels_[key]) {\r\n      return this.labels_[key];\r\n    }\r\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\r\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\r\n    const textState = this.textStates[textKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const scale = [\r\n      textState.scale[0] * pixelRatio,\r\n      textState.scale[1] * pixelRatio,\r\n    ];\r\n    const textIsArray = Array.isArray(text);\r\n    const align = horizontalTextAlign(\r\n      textIsArray ? text[0] : text,\r\n      textState.textAlign || defaultTextAlign\r\n    );\r\n    const strokeWidth =\r\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    const chunks = textIsArray\r\n      ? text\r\n      : text.split('\\n').reduce(createTextChunks, []);\r\n\r\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\r\n      textState,\r\n      chunks\r\n    );\r\n    const renderWidth = width + strokeWidth;\r\n    const contextInstructions = [];\r\n    // make canvas 2 pixels wider to account for italic text width measurement errors\r\n    const w = (renderWidth + 2) * scale[0];\r\n    const h = (height + strokeWidth) * scale[1];\r\n    /** @type {import(\"../canvas.js\").Label} */\r\n    const label = {\r\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\r\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\r\n      contextInstructions: contextInstructions,\r\n    };\r\n    if (scale[0] != 1 || scale[1] != 1) {\r\n      contextInstructions.push('scale', scale);\r\n    }\r\n    if (strokeKey) {\r\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\r\n      contextInstructions.push('lineWidth', strokeWidth);\r\n      contextInstructions.push('lineCap', strokeState.lineCap);\r\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\r\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\r\n      // eslint-disable-next-line\r\n      const Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;\r\n      if (Context.prototype.setLineDash) {\r\n        contextInstructions.push('setLineDash', [strokeState.lineDash]);\r\n        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\r\n      }\r\n    }\r\n    if (fillKey) {\r\n      contextInstructions.push('fillStyle', fillState.fillStyle);\r\n    }\r\n    contextInstructions.push('textBaseline', 'middle');\r\n    contextInstructions.push('textAlign', 'center');\r\n    const leftRight = 0.5 - align;\r\n    let x = align * renderWidth + leftRight * strokeWidth;\r\n    const strokeInstructions = [];\r\n    const fillInstructions = [];\r\n    let lineHeight = 0;\r\n    let lineOffset = 0;\r\n    let widthHeightIndex = 0;\r\n    let lineWidthIndex = 0;\r\n    let previousFont;\r\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\r\n      const text = chunks[i];\r\n      if (text === '\\n') {\r\n        lineOffset += lineHeight;\r\n        lineHeight = 0;\r\n        x = align * renderWidth + leftRight * strokeWidth;\r\n        ++lineWidthIndex;\r\n        continue;\r\n      }\r\n      const font = chunks[i + 1] || textState.font;\r\n      if (font !== previousFont) {\r\n        if (strokeKey) {\r\n          strokeInstructions.push('font', font);\r\n        }\r\n        if (fillKey) {\r\n          fillInstructions.push('font', font);\r\n        }\r\n        previousFont = font;\r\n      }\r\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\r\n      const fillStrokeArgs = [\r\n        text,\r\n        x +\r\n          leftRight * widths[widthHeightIndex] +\r\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\r\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\r\n      ];\r\n      x += widths[widthHeightIndex];\r\n      if (strokeKey) {\r\n        strokeInstructions.push('strokeText', fillStrokeArgs);\r\n      }\r\n      if (fillKey) {\r\n        fillInstructions.push('fillText', fillStrokeArgs);\r\n      }\r\n      ++widthHeightIndex;\r\n    }\r\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\r\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\r\n    this.labels_[key] = label;\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   */\r\n  replayTextBackground_(\r\n    context,\r\n    p1,\r\n    p2,\r\n    p3,\r\n    p4,\r\n    fillInstruction,\r\n    strokeInstruction\r\n  ) {\r\n    context.beginPath();\r\n    context.moveTo.apply(context, p1);\r\n    context.lineTo.apply(context, p2);\r\n    context.lineTo.apply(context, p3);\r\n    context.lineTo.apply(context, p4);\r\n    context.lineTo.apply(context, p1);\r\n    if (fillInstruction) {\r\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\r\n      this.fill_(context);\r\n    }\r\n    if (strokeInstruction) {\r\n      this.setStrokeStyle_(\r\n        context,\r\n        /** @type {Array<*>} */ (strokeInstruction)\r\n      );\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} sheetWidth Width of the sprite sheet.\r\n   * @param {number} sheetHeight Height of the sprite sheet.\r\n   * @param {number} centerX X.\r\n   * @param {number} centerY Y.\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number} anchorX Anchor X.\r\n   * @param {number} anchorY Anchor Y.\r\n   * @param {number} originX Origin X.\r\n   * @param {number} originY Origin Y.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"../../size.js\").Size} scale Scale.\r\n   * @param {boolean} snapToPixel Snap to pixel.\r\n   * @param {Array<number>} padding Padding.\r\n   * @param {boolean} fillStroke Background fill or stroke.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\r\n   */\r\n  calculateImageOrLabelDimensions_(\r\n    sheetWidth,\r\n    sheetHeight,\r\n    centerX,\r\n    centerY,\r\n    width,\r\n    height,\r\n    anchorX,\r\n    anchorY,\r\n    originX,\r\n    originY,\r\n    rotation,\r\n    scale,\r\n    snapToPixel,\r\n    padding,\r\n    fillStroke,\r\n    feature\r\n  ) {\r\n    anchorX *= scale[0];\r\n    anchorY *= scale[1];\r\n    let x = centerX - anchorX;\r\n    let y = centerY - anchorY;\r\n\r\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\r\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\r\n    const boxW = padding[3] + w * scale[0] + padding[1];\r\n    const boxH = padding[0] + h * scale[1] + padding[2];\r\n    const boxX = x - padding[3];\r\n    const boxY = y - padding[0];\r\n\r\n    if (fillStroke || rotation !== 0) {\r\n      p1[0] = boxX;\r\n      p4[0] = boxX;\r\n      p1[1] = boxY;\r\n      p2[1] = boxY;\r\n      p2[0] = boxX + boxW;\r\n      p3[0] = p2[0];\r\n      p3[1] = boxY + boxH;\r\n      p4[1] = p3[1];\r\n    }\r\n\r\n    let transform;\r\n    if (rotation !== 0) {\r\n      transform = composeTransform(\r\n        createTransform(),\r\n        centerX,\r\n        centerY,\r\n        1,\r\n        1,\r\n        rotation,\r\n        -centerX,\r\n        -centerY\r\n      );\r\n\r\n      applyTransform(transform, p1);\r\n      applyTransform(transform, p2);\r\n      applyTransform(transform, p3);\r\n      applyTransform(transform, p4);\r\n      createOrUpdate(\r\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\r\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\r\n        tmpExtent\r\n      );\r\n    } else {\r\n      createOrUpdate(\r\n        Math.min(boxX, boxX + boxW),\r\n        Math.min(boxY, boxY + boxH),\r\n        Math.max(boxX, boxX + boxW),\r\n        Math.max(boxY, boxY + boxH),\r\n        tmpExtent\r\n      );\r\n    }\r\n    if (snapToPixel) {\r\n      x = Math.round(x);\r\n      y = Math.round(y);\r\n    }\r\n    return {\r\n      drawImageX: x,\r\n      drawImageY: y,\r\n      drawImageW: w,\r\n      drawImageH: h,\r\n      originX: originX,\r\n      originY: originY,\r\n      declutterBox: {\r\n        minX: tmpExtent[0],\r\n        minY: tmpExtent[1],\r\n        maxX: tmpExtent[2],\r\n        maxY: tmpExtent[3],\r\n        value: feature,\r\n      },\r\n      canvasTransform: transform,\r\n      scale: scale,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\r\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\r\n   * @param {number} opacity Opacity.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   * @return {boolean} The image or label was rendered.\r\n   */\r\n  replayImageOrLabel_(\r\n    context,\r\n    contextScale,\r\n    imageOrLabel,\r\n    dimensions,\r\n    opacity,\r\n    fillInstruction,\r\n    strokeInstruction\r\n  ) {\r\n    const fillStroke = !!(fillInstruction || strokeInstruction);\r\n\r\n    const box = dimensions.declutterBox;\r\n    const canvas = context.canvas;\r\n    const strokePadding = strokeInstruction\r\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\r\n      : 0;\r\n    const intersects =\r\n      box.minX - strokePadding <= canvas.width / contextScale &&\r\n      box.maxX + strokePadding >= 0 &&\r\n      box.minY - strokePadding <= canvas.height / contextScale &&\r\n      box.maxY + strokePadding >= 0;\r\n\r\n    if (intersects) {\r\n      if (fillStroke) {\r\n        this.replayTextBackground_(\r\n          context,\r\n          p1,\r\n          p2,\r\n          p3,\r\n          p4,\r\n          /** @type {Array<*>} */ (fillInstruction),\r\n          /** @type {Array<*>} */ (strokeInstruction)\r\n        );\r\n      }\r\n      drawImageOrLabel(\r\n        context,\r\n        dimensions.canvasTransform,\r\n        opacity,\r\n        imageOrLabel,\r\n        dimensions.originX,\r\n        dimensions.originY,\r\n        dimensions.drawImageW,\r\n        dimensions.drawImageH,\r\n        dimensions.drawImageX,\r\n        dimensions.drawImageY,\r\n        dimensions.scale\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */\r\n  fill_(context) {\r\n    if (this.alignFill_) {\r\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\r\n      const repeatSize = 512 * this.pixelRatio;\r\n      context.save();\r\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\r\n      context.rotate(this.viewRotation_);\r\n    }\r\n    context.fill();\r\n    if (this.alignFill_) {\r\n      context.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {Array<*>} instruction Instruction.\r\n   */\r\n  setStrokeStyle_(context, instruction) {\r\n    context['strokeStyle'] =\r\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\r\n    context.lineWidth = /** @type {number} */ (instruction[2]);\r\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\r\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\r\n    context.miterLimit = /** @type {number} */ (instruction[5]);\r\n    if (context.setLineDash) {\r\n      context.lineDashOffset = /** @type {number} */ (instruction[7]);\r\n      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {string|Array<string>} text The text to draw.\r\n   * @param {string} textKey The key of the text state.\r\n   * @param {string} strokeKey The key for the stroke state.\r\n   * @param {string} fillKey The key for the fill state.\r\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\r\n   */\r\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\r\n    const textState = this.textStates[textKey];\r\n\r\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\r\n\r\n    const strokeState = this.strokeStates[strokeKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const align = horizontalTextAlign(\r\n      Array.isArray(text) ? text[0] : text,\r\n      textState.textAlign || defaultTextAlign\r\n    );\r\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\r\n    const strokeWidth =\r\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    // Remove the 2 pixels we added in createLabel() for the anchor\r\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\r\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\r\n    const anchorY =\r\n      (baseline * label.height) / pixelRatio +\r\n      2 * (0.5 - baseline) * strokeWidth;\r\n\r\n    return {\r\n      label: label,\r\n      anchorX: anchorX,\r\n      anchorY: anchorY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {Array<*>} instructions Instructions array.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  execute_(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    instructions,\r\n    snapToPixel,\r\n    opt_featureCallback,\r\n    opt_hitExtent,\r\n    opt_declutterTree\r\n  ) {\r\n    /** @type {Array<number>} */\r\n    let pixelCoordinates;\r\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\r\n      pixelCoordinates = this.pixelCoordinates_;\r\n    } else {\r\n      if (!this.pixelCoordinates_) {\r\n        this.pixelCoordinates_ = [];\r\n      }\r\n      pixelCoordinates = transform2D(\r\n        this.coordinates,\r\n        0,\r\n        this.coordinates.length,\r\n        2,\r\n        transform,\r\n        this.pixelCoordinates_\r\n      );\r\n      transformSetFromArray(this.renderedTransform_, transform);\r\n    }\r\n    let i = 0; // instruction index\r\n    const ii = instructions.length; // end of instructions\r\n    let d = 0; // data index\r\n    let dd; // end of per-instruction data\r\n    let anchorX,\r\n      anchorY,\r\n      prevX,\r\n      prevY,\r\n      roundX,\r\n      roundY,\r\n      image,\r\n      text,\r\n      textKey,\r\n      strokeKey,\r\n      fillKey;\r\n    let pendingFill = 0;\r\n    let pendingStroke = 0;\r\n    let lastFillInstruction = null;\r\n    let lastStrokeInstruction = null;\r\n    const coordinateCache = this.coordinateCache_;\r\n    const viewRotation = this.viewRotation_;\r\n    const viewRotationFromTransform =\r\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\r\n\r\n    const state = /** @type {import(\"../../render.js\").State} */ ({\r\n      context: context,\r\n      pixelRatio: this.pixelRatio,\r\n      resolution: this.resolution,\r\n      rotation: viewRotation,\r\n    });\r\n\r\n    // When the batch size gets too big, performance decreases. 200 is a good\r\n    // balance between batch size and number of fill/stroke instructions.\r\n    const batchSize =\r\n      this.instructions != instructions || this.overlaps ? 0 : 200;\r\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\r\n    let x, y, currentGeometry;\r\n    while (i < ii) {\r\n      const instruction = instructions[i];\r\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\r\n        instruction[0]\r\n      );\r\n      switch (type) {\r\n        case CanvasInstruction.BEGIN_GEOMETRY:\r\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n            instruction[1]\r\n          );\r\n          currentGeometry = instruction[3];\r\n          if (!feature.getGeometry()) {\r\n            i = /** @type {number} */ (instruction[2]);\r\n          } else if (\r\n            opt_hitExtent !== undefined &&\r\n            !intersects(opt_hitExtent, currentGeometry.getExtent())\r\n          ) {\r\n            i = /** @type {number} */ (instruction[2]) + 1;\r\n          } else {\r\n            ++i;\r\n          }\r\n          break;\r\n        case CanvasInstruction.BEGIN_PATH:\r\n          if (pendingFill > batchSize) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n          }\r\n          if (pendingStroke > batchSize) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          if (!pendingFill && !pendingStroke) {\r\n            context.beginPath();\r\n            prevX = NaN;\r\n            prevY = NaN;\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CIRCLE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          const x1 = pixelCoordinates[d];\r\n          const y1 = pixelCoordinates[d + 1];\r\n          const x2 = pixelCoordinates[d + 2];\r\n          const y2 = pixelCoordinates[d + 3];\r\n          const dx = x2 - x1;\r\n          const dy = y2 - y1;\r\n          const r = Math.sqrt(dx * dx + dy * dy);\r\n          context.moveTo(x1 + r, y1);\r\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CLOSE_PATH:\r\n          context.closePath();\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CUSTOM:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = instruction[2];\r\n          const geometry =\r\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\r\n              instruction[3]\r\n            );\r\n          const renderer = instruction[4];\r\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\r\n          state.geometry = geometry;\r\n          state.feature = feature;\r\n          if (!(i in coordinateCache)) {\r\n            coordinateCache[i] = [];\r\n          }\r\n          const coords = coordinateCache[i];\r\n          if (fn) {\r\n            fn(pixelCoordinates, d, dd, 2, coords);\r\n          } else {\r\n            coords[0] = pixelCoordinates[d];\r\n            coords[1] = pixelCoordinates[d + 1];\r\n            coords.length = 2;\r\n          }\r\n          renderer(coords, state);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_IMAGE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          image =\r\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\r\n              instruction[3]\r\n            );\r\n\r\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\r\n          anchorX = /** @type {number} */ (instruction[4]);\r\n          anchorY = /** @type {number} */ (instruction[5]);\r\n          let height = /** @type {number} */ (instruction[6]);\r\n          const opacity = /** @type {number} */ (instruction[7]);\r\n          const originX = /** @type {number} */ (instruction[8]);\r\n          const originY = /** @type {number} */ (instruction[9]);\r\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\r\n          let rotation = /** @type {number} */ (instruction[11]);\r\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\r\n            instruction[12]\r\n          );\r\n          let width = /** @type {number} */ (instruction[13]);\r\n          const declutterImageWithText =\r\n            /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ (\r\n              instruction[14]\r\n            );\r\n\r\n          if (!image && instruction.length >= 19) {\r\n            // create label images\r\n            text = /** @type {string} */ (instruction[18]);\r\n            textKey = /** @type {string} */ (instruction[19]);\r\n            strokeKey = /** @type {string} */ (instruction[20]);\r\n            fillKey = /** @type {string} */ (instruction[21]);\r\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\r\n              text,\r\n              textKey,\r\n              strokeKey,\r\n              fillKey\r\n            );\r\n            image = labelWithAnchor.label;\r\n            instruction[3] = image;\r\n            const textOffsetX = /** @type {number} */ (instruction[22]);\r\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\r\n            instruction[4] = anchorX;\r\n            const textOffsetY = /** @type {number} */ (instruction[23]);\r\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\r\n            instruction[5] = anchorY;\r\n            height = image.height;\r\n            instruction[6] = height;\r\n            width = image.width;\r\n            instruction[13] = width;\r\n          }\r\n\r\n          let geometryWidths;\r\n          if (instruction.length > 24) {\r\n            geometryWidths = /** @type {number} */ (instruction[24]);\r\n          }\r\n\r\n          let padding, backgroundFill, backgroundStroke;\r\n          if (instruction.length > 16) {\r\n            padding = /** @type {Array<number>} */ (instruction[15]);\r\n            backgroundFill = /** @type {boolean} */ (instruction[16]);\r\n            backgroundStroke = /** @type {boolean} */ (instruction[17]);\r\n          } else {\r\n            padding = defaultPadding;\r\n            backgroundFill = false;\r\n            backgroundStroke = false;\r\n          }\r\n\r\n          if (rotateWithView && viewRotationFromTransform) {\r\n            // Canvas is expected to be rotated to reverse view rotation.\r\n            rotation += viewRotation;\r\n          } else if (!rotateWithView && !viewRotationFromTransform) {\r\n            // Canvas is not rotated, images need to be rotated back to be north-up.\r\n            rotation -= viewRotation;\r\n          }\r\n          let widthIndex = 0;\r\n          for (; d < dd; d += 2) {\r\n            if (\r\n              geometryWidths &&\r\n              geometryWidths[widthIndex++] < width / this.pixelRatio\r\n            ) {\r\n              continue;\r\n            }\r\n            const dimensions = this.calculateImageOrLabelDimensions_(\r\n              image.width,\r\n              image.height,\r\n              pixelCoordinates[d],\r\n              pixelCoordinates[d + 1],\r\n              width,\r\n              height,\r\n              anchorX,\r\n              anchorY,\r\n              originX,\r\n              originY,\r\n              rotation,\r\n              scale,\r\n              snapToPixel,\r\n              padding,\r\n              backgroundFill || backgroundStroke,\r\n              feature\r\n            );\r\n            /** @type {ReplayImageOrLabelArgs} */\r\n            const args = [\r\n              context,\r\n              contextScale,\r\n              image,\r\n              dimensions,\r\n              opacity,\r\n              backgroundFill\r\n                ? /** @type {Array<*>} */ (lastFillInstruction)\r\n                : null,\r\n              backgroundStroke\r\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\r\n                : null,\r\n            ];\r\n            let imageArgs;\r\n            let imageDeclutterBox;\r\n            if (opt_declutterTree && declutterImageWithText) {\r\n              const index = dd - d;\r\n              if (!declutterImageWithText[index]) {\r\n                // We now have the image for an image+text combination.\r\n                declutterImageWithText[index] = args;\r\n                // Don't render anything for now, wait for the text.\r\n                continue;\r\n              }\r\n              imageArgs = declutterImageWithText[index];\r\n              delete declutterImageWithText[index];\r\n              imageDeclutterBox = getDeclutterBox(imageArgs);\r\n              if (opt_declutterTree.collides(imageDeclutterBox)) {\r\n                continue;\r\n              }\r\n            }\r\n            if (\r\n              opt_declutterTree &&\r\n              opt_declutterTree.collides(dimensions.declutterBox)\r\n            ) {\r\n              continue;\r\n            }\r\n            if (imageArgs) {\r\n              // We now have image and text for an image+text combination.\r\n              if (opt_declutterTree) {\r\n                opt_declutterTree.insert(imageDeclutterBox);\r\n              }\r\n              // Render the image before we render the text.\r\n              this.replayImageOrLabel_.apply(this, imageArgs);\r\n            }\r\n            if (opt_declutterTree) {\r\n              opt_declutterTree.insert(dimensions.declutterBox);\r\n            }\r\n            this.replayImageOrLabel_.apply(this, args);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_CHARS:\r\n          const begin = /** @type {number} */ (instruction[1]);\r\n          const end = /** @type {number} */ (instruction[2]);\r\n          const baseline = /** @type {number} */ (instruction[3]);\r\n          const overflow = /** @type {number} */ (instruction[4]);\r\n          fillKey = /** @type {string} */ (instruction[5]);\r\n          const maxAngle = /** @type {number} */ (instruction[6]);\r\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\r\n          const offsetY = /** @type {number} */ (instruction[8]);\r\n          strokeKey = /** @type {string} */ (instruction[9]);\r\n          const strokeWidth = /** @type {number} */ (instruction[10]);\r\n          text = /** @type {string} */ (instruction[11]);\r\n          textKey = /** @type {string} */ (instruction[12]);\r\n          const pixelRatioScale = [\r\n            /** @type {number} */ (instruction[13]),\r\n            /** @type {number} */ (instruction[13]),\r\n          ];\r\n\r\n          const textState = this.textStates[textKey];\r\n          const font = textState.font;\r\n          const textScale = [\r\n            textState.scale[0] * measurePixelRatio,\r\n            textState.scale[1] * measurePixelRatio,\r\n          ];\r\n\r\n          let cachedWidths;\r\n          if (font in this.widths_) {\r\n            cachedWidths = this.widths_[font];\r\n          } else {\r\n            cachedWidths = {};\r\n            this.widths_[font] = cachedWidths;\r\n          }\r\n\r\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\r\n          const textLength =\r\n            Math.abs(textScale[0]) *\r\n            measureAndCacheTextWidth(font, text, cachedWidths);\r\n          if (overflow || textLength <= pathLength) {\r\n            const textAlign = this.textStates[textKey].textAlign;\r\n            const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\r\n            const parts = drawTextOnPath(\r\n              pixelCoordinates,\r\n              begin,\r\n              end,\r\n              2,\r\n              text,\r\n              startM,\r\n              maxAngle,\r\n              Math.abs(textScale[0]),\r\n              measureAndCacheTextWidth,\r\n              font,\r\n              cachedWidths,\r\n              viewRotationFromTransform ? 0 : this.viewRotation_\r\n            );\r\n            drawChars: if (parts) {\r\n              /** @type {Array<ReplayImageOrLabelArgs>} */\r\n              const replayImageOrLabelArgs = [];\r\n              let c, cc, chars, label, part;\r\n              if (strokeKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, '', strokeKey);\r\n                  anchorX =\r\n                    /** @type {number} */ (part[2]) +\r\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\r\n                  anchorY =\r\n                    baseline * label.height +\r\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\r\n                      textScale[0] -\r\n                    offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature\r\n                  );\r\n                  if (\r\n                    opt_declutterTree &&\r\n                    opt_declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    contextScale,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (fillKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, fillKey, '');\r\n                  anchorX = /** @type {number} */ (part[2]);\r\n                  anchorY = baseline * label.height - offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature\r\n                  );\r\n                  if (\r\n                    opt_declutterTree &&\r\n                    opt_declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    contextScale,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (opt_declutterTree) {\r\n                opt_declutterTree.load(\r\n                  replayImageOrLabelArgs.map(getDeclutterBox)\r\n                );\r\n              }\r\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\r\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\r\n              }\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.END_GEOMETRY:\r\n          if (opt_featureCallback !== undefined) {\r\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n              instruction[1]\r\n            );\r\n            const result = opt_featureCallback(feature, currentGeometry);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.FILL:\r\n          if (batchSize) {\r\n            pendingFill++;\r\n          } else {\r\n            this.fill_(context);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.MOVE_TO_LINE_TO:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          x = pixelCoordinates[d];\r\n          y = pixelCoordinates[d + 1];\r\n          roundX = (x + 0.5) | 0;\r\n          roundY = (y + 0.5) | 0;\r\n          if (roundX !== prevX || roundY !== prevY) {\r\n            context.moveTo(x, y);\r\n            prevX = roundX;\r\n            prevY = roundY;\r\n          }\r\n          for (d += 2; d < dd; d += 2) {\r\n            x = pixelCoordinates[d];\r\n            y = pixelCoordinates[d + 1];\r\n            roundX = (x + 0.5) | 0;\r\n            roundY = (y + 0.5) | 0;\r\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\r\n              context.lineTo(x, y);\r\n              prevX = roundX;\r\n              prevY = roundY;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_FILL_STYLE:\r\n          lastFillInstruction = instruction;\r\n          this.alignFill_ = instruction[2];\r\n\r\n          if (pendingFill) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n            if (pendingStroke) {\r\n              context.stroke();\r\n              pendingStroke = 0;\r\n            }\r\n          }\r\n\r\n          context.fillStyle =\r\n            /** @type {import(\"../../colorlike.js\").ColorLike} */ (\r\n              instruction[1]\r\n            );\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_STROKE_STYLE:\r\n          lastStrokeInstruction = instruction;\r\n          if (pendingStroke) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.STROKE:\r\n          if (batchSize) {\r\n            pendingStroke++;\r\n          } else {\r\n            context.stroke();\r\n          }\r\n          ++i;\r\n          break;\r\n        default:\r\n          ++i; // consume the instruction anyway, to avoid an infinite loop\r\n          break;\r\n      }\r\n    }\r\n    if (pendingFill) {\r\n      this.fill_(context);\r\n    }\r\n    if (pendingStroke) {\r\n      context.stroke();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    opt_declutterTree\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    this.execute_(\r\n      context,\r\n      contextScale,\r\n      transform,\r\n      this.instructions,\r\n      snapToPixel,\r\n      undefined,\r\n      undefined,\r\n      opt_declutterTree\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  executeHitDetection(\r\n    context,\r\n    transform,\r\n    viewRotation,\r\n    opt_featureCallback,\r\n    opt_hitExtent\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    return this.execute_(\r\n      context,\r\n      1,\r\n      transform,\r\n      this.hitDetectionInstructions,\r\n      true,\r\n      opt_featureCallback,\r\n      opt_hitExtent\r\n    );\r\n  }\r\n}\r\n\r\nexport default Executor;\r\n", "/**\r\n * @module ol/render/canvas/ExecutorGroup\r\n */\r\n\r\nimport BuilderType from './BuilderType.js';\r\nimport Executor from './Executor.js';\r\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {isEmpty} from '../../obj.js';\r\nimport {numberSafeCompareFunction} from '../../array.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"./BuilderType.js\").default>}\r\n */\r\nconst ORDER = [\r\n  BuilderType.POLYGON,\r\n  BuilderType.CIRCLE,\r\n  BuilderType.LINE_STRING,\r\n  BuilderType.IMAGE,\r\n  BuilderType.TEXT,\r\n  BuilderType.DEFAULT,\r\n];\r\n\r\nclass ExecutorGroup {\r\n  /**\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\r\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\r\n   * should be set here, unless the target context does not exceed that extent (which\r\n   * can be the case when rendering to tiles).\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\r\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\r\n   * The serializable instructions.\r\n   * @param {number} [opt_renderBuffer] Optional rendering buffer.\r\n   */\r\n  constructor(\r\n    maxExtent,\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    allInstructions,\r\n    opt_renderBuffer\r\n  ) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.renderBuffer_ = opt_renderBuffer;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"./Executor\").default>>}\r\n     */\r\n    this.executorsByZIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.hitDetectionContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.hitDetectionTransform_ = createTransform();\r\n\r\n    this.createExecutors_(allInstructions);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  clip(context, transform) {\r\n    const flatClipCoords = this.getClipCoords(transform);\r\n    context.beginPath();\r\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\r\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\r\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\r\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * Create executors and populate them using the provided instructions.\r\n   * @private\r\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\r\n   */\r\n  createExecutors_(allInstructions) {\r\n    for (const zIndex in allInstructions) {\r\n      let executors = this.executorsByZIndex_[zIndex];\r\n      if (executors === undefined) {\r\n        executors = {};\r\n        this.executorsByZIndex_[zIndex] = executors;\r\n      }\r\n      const instructionByZindex = allInstructions[zIndex];\r\n      for (const builderType in instructionByZindex) {\r\n        const instructions = instructionByZindex[builderType];\r\n        executors[builderType] = new Executor(\r\n          this.resolution_,\r\n          this.pixelRatio_,\r\n          this.overlaps_,\r\n          instructions\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"./BuilderType.js\").default>} executors Executors.\r\n   * @return {boolean} Has executors of the provided types.\r\n   */\r\n  hasExecutors(executors) {\r\n    for (const zIndex in this.executorsByZIndex_) {\r\n      const candidates = this.executorsByZIndex_[zIndex];\r\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\r\n        if (executors[i] in candidates) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\r\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    resolution,\r\n    rotation,\r\n    hitTolerance,\r\n    callback,\r\n    declutteredFeatures\r\n  ) {\r\n    hitTolerance = Math.round(hitTolerance);\r\n    const contextSize = hitTolerance * 2 + 1;\r\n    const transform = composeTransform(\r\n      this.hitDetectionTransform_,\r\n      hitTolerance + 0.5,\r\n      hitTolerance + 0.5,\r\n      1 / resolution,\r\n      -1 / resolution,\r\n      -rotation,\r\n      -coordinate[0],\r\n      -coordinate[1]\r\n    );\r\n\r\n    const newContext = !this.hitDetectionContext_;\r\n    if (newContext) {\r\n      this.hitDetectionContext_ = createCanvasContext2D(\r\n        contextSize,\r\n        contextSize\r\n      );\r\n    }\r\n    const context = this.hitDetectionContext_;\r\n\r\n    if (\r\n      context.canvas.width !== contextSize ||\r\n      context.canvas.height !== contextSize\r\n    ) {\r\n      context.canvas.width = contextSize;\r\n      context.canvas.height = contextSize;\r\n    } else if (!newContext) {\r\n      context.clearRect(0, 0, contextSize, contextSize);\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    let hitExtent;\r\n    if (this.renderBuffer_ !== undefined) {\r\n      hitExtent = createEmpty();\r\n      extendCoordinate(hitExtent, coordinate);\r\n      buffer(\r\n        hitExtent,\r\n        resolution * (this.renderBuffer_ + hitTolerance),\r\n        hitExtent\r\n      );\r\n    }\r\n\r\n    const indexes = getPixelIndexArray(hitTolerance);\r\n\r\n    let builderType;\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    function featureCallback(feature, geometry) {\r\n      const imageData = context.getImageData(\r\n        0,\r\n        0,\r\n        contextSize,\r\n        contextSize\r\n      ).data;\r\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\r\n        if (imageData[indexes[i]] > 0) {\r\n          if (\r\n            !declutteredFeatures ||\r\n            (builderType !== BuilderType.IMAGE &&\r\n              builderType !== BuilderType.TEXT) ||\r\n            declutteredFeatures.indexOf(feature) !== -1\r\n          ) {\r\n            const idx = (indexes[i] - 3) / 4;\r\n            const x = hitTolerance - (idx % contextSize);\r\n            const y = hitTolerance - ((idx / contextSize) | 0);\r\n            const result = callback(feature, geometry, x * x + y * y);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          context.clearRect(0, 0, contextSize, contextSize);\r\n          break;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(numberSafeCompareFunction);\r\n\r\n    let i, j, executors, executor, result;\r\n    for (i = zs.length - 1; i >= 0; --i) {\r\n      const zIndexKey = zs[i].toString();\r\n      executors = this.executorsByZIndex_[zIndexKey];\r\n      for (j = ORDER.length - 1; j >= 0; --j) {\r\n        builderType = ORDER[j];\r\n        executor = executors[builderType];\r\n        if (executor !== undefined) {\r\n          result = executor.executeHitDetection(\r\n            context,\r\n            transform,\r\n            rotation,\r\n            featureCallback,\r\n            hitExtent\r\n          );\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @return {Array<number>} Clip coordinates.\r\n   */\r\n  getClipCoords(transform) {\r\n    const maxExtent = this.maxExtent_;\r\n    if (!maxExtent) {\r\n      return null;\r\n    }\r\n    const minX = maxExtent[0];\r\n    const minY = maxExtent[1];\r\n    const maxX = maxExtent[2];\r\n    const maxY = maxExtent[3];\r\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\r\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\r\n    return flatClipCoords;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.executorsByZIndex_);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\r\n   * @param {Array<import(\"./BuilderType.js\").default>} [opt_builderTypes] Ordered replay types to replay.\r\n   *     Default is {@link module:ol/render/replay~ORDER}\r\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    opt_builderTypes,\r\n    opt_declutterTree\r\n  ) {\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(numberSafeCompareFunction);\r\n\r\n    // setup clipping so that the parts of over-simplified geometries are not\r\n    // visible outside the current extent when panning\r\n    if (this.maxExtent_) {\r\n      context.save();\r\n      this.clip(context, transform);\r\n    }\r\n\r\n    const builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\r\n    let i, ii, j, jj, replays, replay;\r\n    if (opt_declutterTree) {\r\n      zs.reverse();\r\n    }\r\n    for (i = 0, ii = zs.length; i < ii; ++i) {\r\n      const zIndexKey = zs[i].toString();\r\n      replays = this.executorsByZIndex_[zIndexKey];\r\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\r\n        const builderType = builderTypes[j];\r\n        replay = replays[builderType];\r\n        if (replay !== undefined) {\r\n          replay.execute(\r\n            context,\r\n            contextScale,\r\n            transform,\r\n            viewRotation,\r\n            snapToPixel,\r\n            opt_declutterTree\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.maxExtent_) {\r\n      context.restore();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This cache is used to store arrays of indexes for calculated pixel circles\r\n * to increase performance.\r\n * It is a static property to allow each Replaygroup to access it.\r\n * @type {Object<number, Array<number>>}\r\n */\r\nconst circlePixelIndexArrayCache = {};\r\n\r\n/**\r\n * This methods creates an array with indexes of all pixels within a circle,\r\n * ordered by how close they are to the center.\r\n * A cache is used to increase performance.\r\n * @param {number} radius Radius.\r\n * @return {Array<number>} An array with indexes within a circle.\r\n */\r\nexport function getPixelIndexArray(radius) {\r\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\r\n    return circlePixelIndexArrayCache[radius];\r\n  }\r\n\r\n  const size = radius * 2 + 1;\r\n  const maxDistanceSq = radius * radius;\r\n  const distances = new Array(maxDistanceSq + 1);\r\n  for (let i = 0; i <= radius; ++i) {\r\n    for (let j = 0; j <= radius; ++j) {\r\n      const distanceSq = i * i + j * j;\r\n      if (distanceSq > maxDistanceSq) {\r\n        break;\r\n      }\r\n      let distance = distances[distanceSq];\r\n      if (!distance) {\r\n        distance = [];\r\n        distances[distanceSq] = distance;\r\n      }\r\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\r\n      if (i > 0) {\r\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\r\n      }\r\n      if (j > 0) {\r\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\r\n        if (i > 0) {\r\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const pixelIndex = [];\r\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\r\n    if (distances[i]) {\r\n      pixelIndex.push(...distances[i]);\r\n    }\r\n  }\r\n\r\n  circlePixelIndexArrayCache[radius] = pixelIndex;\r\n  return pixelIndex;\r\n}\r\n\r\nexport default ExecutorGroup;\r\n", "/**\r\n * @module ol/render/canvas/Immediate\r\n */\r\n// FIXME test, especially polygons with holes and multipolygons\r\n// FIXME need to handle large thick features (where pixel size matters)\r\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\r\n\r\nimport GeometryType from '../../geom/GeometryType.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n} from '../canvas.js';\r\nimport {equals} from '../../array.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\r\n\r\n/**\r\n * @classdesc\r\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext VectorContext} that implements\r\n * direct rendering of features and geometries to an HTML5 Canvas context.\r\n * Instances of this class are created internally by the library and\r\n * provided to application code as vectorContext member of the\r\n * {@link module:ol/render/Event~RenderEvent RenderEvent} object associated with postcompose, precompose and\r\n * render events emitted by layers and maps.\r\n */\r\nclass CanvasImmediateRenderer extends VectorContext {\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {number} [opt_squaredTolerance] Optional squared tolerance for simplification.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_userTransform] Transform from user to view projection.\r\n   */\r\n  constructor(\r\n    context,\r\n    pixelRatio,\r\n    extent,\r\n    transform,\r\n    viewRotation,\r\n    opt_squaredTolerance,\r\n    opt_userTransform\r\n  ) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = context;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.transform_ = transform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = viewRotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_ = opt_squaredTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj.js\").TransformFunction}\r\n     */\r\n    this.userTransform_ = opt_userTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.contextFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.contextStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.contextTextState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.fillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.strokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageHeight_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOpacity_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.imageRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.imageScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageWidth_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.textRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.textScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpLocalTransform_ = createTransform();\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawImages_(flatCoordinates, offset, end, stride) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    const context = this.context_;\r\n    const localTransform = this.tmpLocalTransform_;\r\n    const alpha = context.globalAlpha;\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha * this.imageOpacity_;\r\n    }\r\n    let rotation = this.imageRotation_;\r\n    if (this.imageRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\r\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\r\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.imageScale_[0] != 1 ||\r\n        this.imageScale_[1] != 1\r\n      ) {\r\n        const centerX = x + this.imageAnchorX_;\r\n        const centerY = y + this.imageAnchorY_;\r\n        composeTransform(\r\n          localTransform,\r\n          centerX,\r\n          centerY,\r\n          1,\r\n          1,\r\n          rotation,\r\n          -centerX,\r\n          -centerY\r\n        );\r\n        context.setTransform.apply(context, localTransform);\r\n        context.translate(centerX, centerY);\r\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          -this.imageAnchorX_,\r\n          -this.imageAnchorY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_\r\n        );\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          x,\r\n          y,\r\n          this.imageWidth_,\r\n          this.imageHeight_\r\n        );\r\n      }\r\n    }\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawText_(flatCoordinates, offset, end, stride) {\r\n    if (!this.textState_ || this.text_ === '') {\r\n      return;\r\n    }\r\n    if (this.textFillState_) {\r\n      this.setContextFillState_(this.textFillState_);\r\n    }\r\n    if (this.textStrokeState_) {\r\n      this.setContextStrokeState_(this.textStrokeState_);\r\n    }\r\n    this.setContextTextState_(this.textState_);\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    const context = this.context_;\r\n    let rotation = this.textRotation_;\r\n    if (this.textRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (; offset < end; offset += stride) {\r\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\r\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.textScale_[0] != 1 ||\r\n        this.textScale_[1] != 1\r\n      ) {\r\n        const localTransform = composeTransform(\r\n          this.tmpLocalTransform_,\r\n          x,\r\n          y,\r\n          1,\r\n          1,\r\n          rotation,\r\n          -x,\r\n          -y\r\n        );\r\n        context.setTransform.apply(context, localTransform);\r\n        context.translate(x, y);\r\n        context.scale(this.textScale_[0], this.textScale_[1]);\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, 0, 0);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, 0, 0);\r\n        }\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, x, y);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, x, y);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} close Close.\r\n   * @private\r\n   * @return {number} end End.\r\n   */\r\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\r\n    const context = this.context_;\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\r\n    let length = pixelCoordinates.length;\r\n    if (close) {\r\n      length -= 2;\r\n    }\r\n    for (let i = 2; i < length; i += 2) {\r\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\r\n    }\r\n    if (close) {\r\n      context.closePath();\r\n    }\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawRings_(flatCoordinates, offset, ends, stride) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.moveToLineTo_(\r\n        flatCoordinates,\r\n        offset,\r\n        ends[i],\r\n        stride,\r\n        true\r\n      );\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\r\n   * the current fill and stroke styles.\r\n   *\r\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\r\n   * @api\r\n   */\r\n  drawCircle(geometry) {\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.fillState_ || this.strokeState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const pixelCoordinates = transformGeom2D(\r\n        geometry,\r\n        this.transform_,\r\n        this.pixelCoordinates_\r\n      );\r\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\r\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\r\n      const radius = Math.sqrt(dx * dx + dy * dy);\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      context.arc(\r\n        pixelCoordinates[0],\r\n        pixelCoordinates[1],\r\n        radius,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the rendering style.  Note that since this is an immediate rendering API,\r\n   * any `zIndex` on the provided style will be ignored.\r\n   *\r\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\r\n    this.setImageStyle(style.getImage());\r\n    this.setTextStyle(style.getText());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  setTransform(transform) {\r\n    this.transform_ = transform;\r\n  }\r\n\r\n  /**\r\n   * Render a geometry into the canvas.  Call\r\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\r\n   *\r\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\r\n   * @api\r\n   */\r\n  drawGeometry(geometry) {\r\n    const type = geometry.getType();\r\n    switch (type) {\r\n      case GeometryType.POINT:\r\n        this.drawPoint(\r\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case GeometryType.LINE_STRING:\r\n        this.drawLineString(\r\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case GeometryType.POLYGON:\r\n        this.drawPolygon(\r\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case GeometryType.MULTI_POINT:\r\n        this.drawMultiPoint(\r\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case GeometryType.MULTI_LINE_STRING:\r\n        this.drawMultiLineString(\r\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          )\r\n        );\r\n        break;\r\n      case GeometryType.MULTI_POLYGON:\r\n        this.drawMultiPolygon(\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case GeometryType.GEOMETRY_COLLECTION:\r\n        this.drawGeometryCollection(\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          )\r\n        );\r\n        break;\r\n      case GeometryType.CIRCLE:\r\n        this.drawCircle(\r\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\r\n   * style will be ignored - features are rendered immediately in the order that\r\n   * this method is called.  If you need `zIndex` support, you should be using an\r\n   * {@link module:ol/layer/Vector~VectorLayer VectorLayer} instead.\r\n   *\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../../style/Style.js\").default} style Style.\r\n   * @api\r\n   */\r\n  drawFeature(feature, style) {\r\n    const geometry = style.getGeometryFunction()(feature);\r\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    this.setStyle(style);\r\n    this.drawGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\r\n   * uses the current styles appropriate for each geometry in the collection.\r\n   *\r\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\r\n   */\r\n  drawGeometryCollection(geometry) {\r\n    const geometries = geometry.getGeometriesArray();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      this.drawGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\r\n   */\r\n  drawPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\r\n   */\r\n  drawMultiPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a LineString into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\r\n   */\r\n  drawLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      context.beginPath();\r\n      this.moveToLineTo_(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        geometry.getStride(),\r\n        false\r\n      );\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoint = geometry.getFlatMidpoint();\r\n      this.drawText_(flatMidpoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\r\n   * and uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\r\n   */\r\n  drawMultiLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry =\r\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry.simplifyTransformed(\r\n            this.squaredTolerance_,\r\n            this.userTransform_\r\n          )\r\n        );\r\n    }\r\n    const geometryExtent = geometry.getExtent();\r\n    if (!intersects(this.extent_, geometryExtent)) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        offset = this.moveToLineTo_(\r\n          flatCoordinates,\r\n          offset,\r\n          ends[i],\r\n          stride,\r\n          false\r\n        );\r\n      }\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoints = geometry.getFlatMidpoints();\r\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\r\n   */\r\n  drawPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      this.drawRings_(\r\n        geometry.getOrientedFlatCoordinates(),\r\n        0,\r\n        /** @type {Array<number>} */ (geometry.getEnds()),\r\n        geometry.getStride()\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\r\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   */\r\n  drawMultiPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\r\n      let offset = 0;\r\n      const endss = geometry.getEndss();\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n        const ends = endss[i];\r\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\r\n      }\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\r\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\r\n   * @private\r\n   */\r\n  setContextFillState_(fillState) {\r\n    const context = this.context_;\r\n    const contextFillState = this.contextFillState_;\r\n    if (!contextFillState) {\r\n      context.fillStyle = fillState.fillStyle;\r\n      this.contextFillState_ = {\r\n        fillStyle: fillState.fillStyle,\r\n      };\r\n    } else {\r\n      if (contextFillState.fillStyle != fillState.fillStyle) {\r\n        contextFillState.fillStyle = fillState.fillStyle;\r\n        context.fillStyle = fillState.fillStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\r\n   * @private\r\n   */\r\n  setContextStrokeState_(strokeState) {\r\n    const context = this.context_;\r\n    const contextStrokeState = this.contextStrokeState_;\r\n    if (!contextStrokeState) {\r\n      context.lineCap = strokeState.lineCap;\r\n      if (context.setLineDash) {\r\n        context.setLineDash(strokeState.lineDash);\r\n        context.lineDashOffset = strokeState.lineDashOffset;\r\n      }\r\n      context.lineJoin = strokeState.lineJoin;\r\n      context.lineWidth = strokeState.lineWidth;\r\n      context.miterLimit = strokeState.miterLimit;\r\n      context.strokeStyle = strokeState.strokeStyle;\r\n      this.contextStrokeState_ = {\r\n        lineCap: strokeState.lineCap,\r\n        lineDash: strokeState.lineDash,\r\n        lineDashOffset: strokeState.lineDashOffset,\r\n        lineJoin: strokeState.lineJoin,\r\n        lineWidth: strokeState.lineWidth,\r\n        miterLimit: strokeState.miterLimit,\r\n        strokeStyle: strokeState.strokeStyle,\r\n      };\r\n    } else {\r\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\r\n        contextStrokeState.lineCap = strokeState.lineCap;\r\n        context.lineCap = strokeState.lineCap;\r\n      }\r\n      if (context.setLineDash) {\r\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\r\n          context.setLineDash(\r\n            (contextStrokeState.lineDash = strokeState.lineDash)\r\n          );\r\n        }\r\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\r\n          contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\r\n          context.lineDashOffset = strokeState.lineDashOffset;\r\n        }\r\n      }\r\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\r\n        contextStrokeState.lineJoin = strokeState.lineJoin;\r\n        context.lineJoin = strokeState.lineJoin;\r\n      }\r\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\r\n        contextStrokeState.lineWidth = strokeState.lineWidth;\r\n        context.lineWidth = strokeState.lineWidth;\r\n      }\r\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\r\n        contextStrokeState.miterLimit = strokeState.miterLimit;\r\n        context.miterLimit = strokeState.miterLimit;\r\n      }\r\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\r\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\r\n        context.strokeStyle = strokeState.strokeStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\r\n   * @private\r\n   */\r\n  setContextTextState_(textState) {\r\n    const context = this.context_;\r\n    const contextTextState = this.contextTextState_;\r\n    const textAlign = textState.textAlign\r\n      ? textState.textAlign\r\n      : defaultTextAlign;\r\n    if (!contextTextState) {\r\n      context.font = textState.font;\r\n      context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\r\n      context.textBaseline = /** @type {CanvasTextBaseline} */ (\r\n        textState.textBaseline\r\n      );\r\n      this.contextTextState_ = {\r\n        font: textState.font,\r\n        textAlign: textAlign,\r\n        textBaseline: textState.textBaseline,\r\n      };\r\n    } else {\r\n      if (contextTextState.font != textState.font) {\r\n        contextTextState.font = textState.font;\r\n        context.font = textState.font;\r\n      }\r\n      if (contextTextState.textAlign != textAlign) {\r\n        contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\r\n        context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\r\n      }\r\n      if (contextTextState.textBaseline != textState.textBaseline) {\r\n        contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (\r\n          textState.textBaseline\r\n        );\r\n        context.textBaseline = /** @type {CanvasTextBaseline} */ (\r\n          textState.textBaseline\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the fill and stroke style for subsequent draw operations.  To clear\r\n   * either fill or stroke styles, pass null for the appropriate parameter.\r\n   *\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    if (!fillStyle) {\r\n      this.fillState_ = null;\r\n    } else {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      this.fillState_ = {\r\n        fillStyle: asColorLike(\r\n          fillStyleColor ? fillStyleColor : defaultFillStyle\r\n        ),\r\n      };\r\n    }\r\n    if (!strokeStyle) {\r\n      this.strokeState_ = null;\r\n    } else {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      const lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash\r\n        : defaultLineDash;\r\n      this.strokeState_ = {\r\n        lineCap:\r\n          strokeStyleLineCap !== undefined\r\n            ? strokeStyleLineCap\r\n            : defaultLineCap,\r\n        lineDash:\r\n          this.pixelRatio_ === 1\r\n            ? lineDash\r\n            : lineDash.map((n) => n * this.pixelRatio_),\r\n        lineDashOffset:\r\n          (strokeStyleLineDashOffset\r\n            ? strokeStyleLineDashOffset\r\n            : defaultLineDashOffset) * this.pixelRatio_,\r\n        lineJoin:\r\n          strokeStyleLineJoin !== undefined\r\n            ? strokeStyleLineJoin\r\n            : defaultLineJoin,\r\n        lineWidth:\r\n          (strokeStyleWidth !== undefined\r\n            ? strokeStyleWidth\r\n            : defaultLineWidth) * this.pixelRatio_,\r\n        miterLimit:\r\n          strokeStyleMiterLimit !== undefined\r\n            ? strokeStyleMiterLimit\r\n            : defaultMiterLimit,\r\n        strokeStyle: asColorLike(\r\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the image style for subsequent draw operations.  Pass null to remove\r\n   * the image style.\r\n   *\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   */\r\n  setImageStyle(imageStyle) {\r\n    let imageSize;\r\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\r\n      this.image_ = null;\r\n      return;\r\n    }\r\n    const imageAnchor = imageStyle.getAnchor();\r\n    const imageOrigin = imageStyle.getOrigin();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\r\n    this.imageAnchorX_ = imageAnchor[0] * this.pixelRatio_;\r\n    this.imageAnchorY_ = imageAnchor[1] * this.pixelRatio_;\r\n    this.imageHeight_ = imageSize[1] * this.pixelRatio_;\r\n    this.imageOpacity_ = imageStyle.getOpacity();\r\n    this.imageOriginX_ = imageOrigin[0];\r\n    this.imageOriginY_ = imageOrigin[1];\r\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\r\n    this.imageRotation_ = imageStyle.getRotation();\r\n    this.imageScale_ = imageStyle.getScaleArray();\r\n    this.imageWidth_ = imageSize[0] * this.pixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style for subsequent draw operations.  Pass null to\r\n   * remove the text style.\r\n   *\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   */\r\n  setTextStyle(textStyle) {\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        this.textFillState_ = null;\r\n      } else {\r\n        const textFillStyleColor = textFillStyle.getColor();\r\n        this.textFillState_ = {\r\n          fillStyle: asColorLike(\r\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle\r\n          ),\r\n        };\r\n      }\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        this.textStrokeState_ = null;\r\n      } else {\r\n        const textStrokeStyleColor = textStrokeStyle.getColor();\r\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\r\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\r\n        const textStrokeStyleLineDashOffset =\r\n          textStrokeStyle.getLineDashOffset();\r\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\r\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\r\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\r\n        this.textStrokeState_ = {\r\n          lineCap:\r\n            textStrokeStyleLineCap !== undefined\r\n              ? textStrokeStyleLineCap\r\n              : defaultLineCap,\r\n          lineDash: textStrokeStyleLineDash\r\n            ? textStrokeStyleLineDash\r\n            : defaultLineDash,\r\n          lineDashOffset: textStrokeStyleLineDashOffset\r\n            ? textStrokeStyleLineDashOffset\r\n            : defaultLineDashOffset,\r\n          lineJoin:\r\n            textStrokeStyleLineJoin !== undefined\r\n              ? textStrokeStyleLineJoin\r\n              : defaultLineJoin,\r\n          lineWidth:\r\n            textStrokeStyleWidth !== undefined\r\n              ? textStrokeStyleWidth\r\n              : defaultLineWidth,\r\n          miterLimit:\r\n            textStrokeStyleMiterLimit !== undefined\r\n              ? textStrokeStyleMiterLimit\r\n              : defaultMiterLimit,\r\n          strokeStyle: asColorLike(\r\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle\r\n          ),\r\n        };\r\n      }\r\n      const textFont = textStyle.getFont();\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      const textScale = textStyle.getScaleArray();\r\n      const textText = textStyle.getText();\r\n      const textTextAlign = textStyle.getTextAlign();\r\n      const textTextBaseline = textStyle.getTextBaseline();\r\n      this.textState_ = {\r\n        font: textFont !== undefined ? textFont : defaultFont,\r\n        textAlign:\r\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\r\n        textBaseline:\r\n          textTextBaseline !== undefined\r\n            ? textTextBaseline\r\n            : defaultTextBaseline,\r\n      };\r\n      this.text_ =\r\n        textText !== undefined\r\n          ? Array.isArray(textText)\r\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\r\n            : textText\r\n          : '';\r\n      this.textOffsetX_ =\r\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\r\n      this.textOffsetY_ =\r\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView !== undefined ? textRotateWithView : false;\r\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\r\n      this.textScale_ = [\r\n        this.pixelRatio_ * textScale[0],\r\n        this.pixelRatio_ * textScale[1],\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasImmediateRenderer;\r\n", "/**\r\n * @module ol/render/canvas/hitdetect\r\n */\r\n\r\nimport CanvasImmediateRenderer from './Immediate.js';\r\nimport GeometryType from '../../geom/GeometryType.js';\r\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\r\nimport {Icon} from '../../style.js';\r\nimport {clamp} from '../../math.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {numberSafeCompareFunction} from '../../array.js';\r\n\r\nexport const HIT_DETECT_RESOLUTION = 0.5;\r\n\r\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @return {ImageData} Hit detection image data.\r\n */\r\nexport function createHitDetectionImageData(\r\n  size,\r\n  transforms,\r\n  features,\r\n  styleFunction,\r\n  extent,\r\n  resolution,\r\n  rotation\r\n) {\r\n  const width = size[0] * HIT_DETECT_RESOLUTION;\r\n  const height = size[1] * HIT_DETECT_RESOLUTION;\r\n  const context = createCanvasContext2D(width, height);\r\n  context.imageSmoothingEnabled = false;\r\n  const canvas = context.canvas;\r\n  const renderer = new CanvasImmediateRenderer(\r\n    context,\r\n    HIT_DETECT_RESOLUTION,\r\n    extent,\r\n    null,\r\n    rotation\r\n  );\r\n  const featureCount = features.length;\r\n  // Stretch hit detection index to use the whole available color range\r\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\r\n  const featuresByZIndex = {};\r\n  for (let i = 1; i <= featureCount; ++i) {\r\n    const feature = features[i - 1];\r\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\r\n    if (!styleFunction) {\r\n      continue;\r\n    }\r\n    let styles = featureStyleFunction(feature, resolution);\r\n    if (!styles) {\r\n      continue;\r\n    }\r\n    if (!Array.isArray(styles)) {\r\n      styles = [styles];\r\n    }\r\n    const index = i * indexFactor;\r\n    const color = '#' + ('000000' + index.toString(16)).slice(-6);\r\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\r\n      const originalStyle = styles[j];\r\n      const geometry = originalStyle.getGeometryFunction()(feature);\r\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\r\n        continue;\r\n      }\r\n      const style = originalStyle.clone();\r\n      const fill = style.getFill();\r\n      if (fill) {\r\n        fill.setColor(color);\r\n      }\r\n      const stroke = style.getStroke();\r\n      if (stroke) {\r\n        stroke.setColor(color);\r\n        stroke.setLineDash(null);\r\n      }\r\n      style.setText(undefined);\r\n      const image = originalStyle.getImage();\r\n      if (image && image.getOpacity() !== 0) {\r\n        const imgSize = image.getImageSize();\r\n        if (!imgSize) {\r\n          continue;\r\n        }\r\n\r\n        const imgContext = createCanvasContext2D(\r\n          imgSize[0],\r\n          imgSize[1],\r\n          undefined,\r\n          {alpha: false}\r\n        );\r\n        const img = imgContext.canvas;\r\n        imgContext.fillStyle = color;\r\n        imgContext.fillRect(0, 0, img.width, img.height);\r\n        style.setImage(\r\n          new Icon({\r\n            img: img,\r\n            imgSize: imgSize,\r\n            anchor: image.getAnchor(),\r\n            anchorXUnits: IconAnchorUnits.PIXELS,\r\n            anchorYUnits: IconAnchorUnits.PIXELS,\r\n            offset: image.getOrigin(),\r\n            opacity: 1,\r\n            size: image.getSize(),\r\n            scale: image.getScale(),\r\n            rotation: image.getRotation(),\r\n            rotateWithView: image.getRotateWithView(),\r\n          })\r\n        );\r\n      }\r\n      const zIndex = style.getZIndex() || 0;\r\n      let byGeometryType = featuresByZIndex[zIndex];\r\n      if (!byGeometryType) {\r\n        byGeometryType = {};\r\n        featuresByZIndex[zIndex] = byGeometryType;\r\n        byGeometryType[GeometryType.POLYGON] = [];\r\n        byGeometryType[GeometryType.CIRCLE] = [];\r\n        byGeometryType[GeometryType.LINE_STRING] = [];\r\n        byGeometryType[GeometryType.POINT] = [];\r\n      }\r\n      byGeometryType[geometry.getType().replace('Multi', '')].push(\r\n        geometry,\r\n        style\r\n      );\r\n    }\r\n  }\r\n\r\n  const zIndexKeys = Object.keys(featuresByZIndex)\r\n    .map(Number)\r\n    .sort(numberSafeCompareFunction);\r\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\r\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\r\n    for (const type in byGeometryType) {\r\n      const geomAndStyle = byGeometryType[type];\r\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\r\n        renderer.setStyle(geomAndStyle[j + 1]);\r\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\r\n          renderer.setTransform(transforms[k]);\r\n          renderer.drawGeometry(geomAndStyle[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\r\n */\r\nexport function hitDetect(pixel, features, imageData) {\r\n  const resultFeatures = [];\r\n  if (imageData) {\r\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\r\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\r\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\r\n    // for browsers returning coordinates slightly larger than the actual canvas size\r\n    // due to a non-integer pixel ratio.\r\n    const index =\r\n      (clamp(x, 0, imageData.width - 1) +\r\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\r\n      4;\r\n    const r = imageData.data[index];\r\n    const g = imageData.data[index + 1];\r\n    const b = imageData.data[index + 2];\r\n    const i = b + 256 * (g + 256 * r);\r\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\r\n    if (i && i % indexFactor === 0) {\r\n      resultFeatures.push(features[i / indexFactor - 1]);\r\n    }\r\n  }\r\n  return resultFeatures;\r\n}\r\n", "/**\r\n * @module ol/renderer/vector\r\n */\r\nimport BuilderType from '../render/canvas/BuilderType.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * Feature callback. The callback will be called with three arguments. The first\r\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\r\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\r\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\r\n * @template T\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * Tolerance for geometry simplification in device pixels.\r\n * @type {number}\r\n */\r\nconst SIMPLIFY_TOLERANCE = 0.5;\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/GeometryType.js\").default,\r\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\r\n *                         import(\"../style/Style.js\").default, Object): void>}\r\n */\r\nconst GEOMETRY_RENDERERS = {\r\n  'Point': renderPointGeometry,\r\n  'LineString': renderLineStringGeometry,\r\n  'Polygon': renderPolygonGeometry,\r\n  'MultiPoint': renderMultiPointGeometry,\r\n  'MultiLineString': renderMultiLineStringGeometry,\r\n  'MultiPolygon': renderMultiPolygonGeometry,\r\n  'GeometryCollection': renderGeometryCollectionGeometry,\r\n  'Circle': renderCircleGeometry,\r\n};\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\r\n * @return {number} Order.\r\n */\r\nexport function defaultOrder(feature1, feature2) {\r\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Squared pixel tolerance.\r\n */\r\nexport function getSquaredTolerance(resolution, pixelRatio) {\r\n  const tolerance = getTolerance(resolution, pixelRatio);\r\n  return tolerance * tolerance;\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Pixel tolerance.\r\n */\r\nexport function getTolerance(resolution, pixelRatio) {\r\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderCircleGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const circleReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.CIRCLE\r\n    );\r\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    circleReplay.drawCircle(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n * @return {boolean} `true` if style is loading.\r\n */\r\nexport function renderFeature(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  listener,\r\n  opt_transform,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  let loading = false;\r\n  const imageStyle = style.getImage();\r\n  if (imageStyle) {\r\n    let imageState = imageStyle.getImageState();\r\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\r\n      imageStyle.unlistenImageChange(listener);\r\n    } else {\r\n      if (imageState == ImageState.IDLE) {\r\n        imageStyle.load();\r\n      }\r\n      imageState = imageStyle.getImageState();\r\n      imageStyle.listenImageChange(listener);\r\n      loading = true;\r\n    }\r\n  }\r\n  renderFeatureInternal(\r\n    replayGroup,\r\n    feature,\r\n    style,\r\n    squaredTolerance,\r\n    opt_transform,\r\n    opt_declutterBuilderGroup\r\n  );\r\n\r\n  return loading;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderFeatureInternal(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  opt_transform,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const geometry = style.getGeometryFunction()(feature);\r\n  if (!geometry) {\r\n    return;\r\n  }\r\n  const simplifiedGeometry = geometry.simplifyTransformed(\r\n    squaredTolerance,\r\n    opt_transform\r\n  );\r\n  const renderer = style.getRenderer();\r\n  if (renderer) {\r\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\r\n  } else {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      simplifiedGeometry,\r\n      style,\r\n      feature,\r\n      opt_declutterBuilderGroup\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n */\r\nfunction renderGeometry(replayGroup, geometry, style, feature) {\r\n  if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\r\n    const geometries =\r\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n        geometry\r\n      ).getGeometries();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      renderGeometry(replayGroup, geometries[i], style, feature);\r\n    }\r\n    return;\r\n  }\r\n  const replay = replayGroup.getBuilder(style.getZIndex(), BuilderType.DEFAULT);\r\n  replay.drawCustom(\r\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\r\n    feature,\r\n    style.getRenderer(),\r\n    style.getHitDetectionRenderer()\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderGeometryCollectionGeometry(\r\n  replayGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const geometries = geometry.getGeometriesArray();\r\n  let i, ii;\r\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      geometries[i],\r\n      style,\r\n      feature,\r\n      opt_declutterBuilderGroup\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.LINE_STRING\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawLineString(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.LINE_STRING\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawMultiLineString(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle || fillStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.POLYGON\r\n    );\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawMultiPolygon(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  let declutterImageWithText;\r\n  if (opt_declutterBuilderGroup) {\r\n    builderGroup = opt_declutterBuilderGroup;\r\n    declutterImageWithText =\r\n      imageStyle && textStyle && textStyle.getText() ? {} : undefined;\r\n  }\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.IMAGE\r\n    );\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawPoint(geometry, feature);\r\n  }\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  let declutterImageWithText;\r\n  if (opt_declutterBuilderGroup) {\r\n    builderGroup = opt_declutterBuilderGroup;\r\n    declutterImageWithText =\r\n      imageStyle && textStyle && textStyle.getText() ? {} : undefined;\r\n  }\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.IMAGE\r\n    );\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawMultiPoint(geometry, feature);\r\n  }\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  opt_declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.POLYGON\r\n    );\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawPolygon(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      BuilderType.TEXT\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/renderer/canvas/VectorLayer\r\n */\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport CanvasLayerRenderer from './Layer.js';\r\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {\r\n  apply,\r\n  makeInverse,\r\n  makeScale,\r\n  toString as transformToString,\r\n} from '../../transform.js';\r\nimport {\r\n  buffer,\r\n  containsExtent,\r\n  createEmpty,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  wrapX as wrapExtentX,\r\n} from '../../extent.js';\r\nimport {cssOpacity} from '../../css.js';\r\nimport {\r\n  defaultOrder as defaultRenderOrder,\r\n  getTolerance as getRenderTolerance,\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport {equals} from '../../array.js';\r\nimport {\r\n  fromUserExtent,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n  toUserResolution,\r\n} from '../../proj.js';\r\nimport {getUid} from '../../util.js';\r\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector layers.\r\n * @api\r\n */\r\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\r\n   */\r\n  constructor(vectorLayer) {\r\n    super(vectorLayer);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.animatingOrInteracting_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.dirty_ = false;\r\n\r\n    /**\r\n     * @type {ImageData}\r\n     */\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    /**\r\n     * @type {Array<import(\"../../Feature.js\").default>}\r\n     */\r\n    this.renderedFeatures_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.wrappedRenderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate\").Coordinate}\r\n     */\r\n    this.renderedCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection\").default}\r\n     */\r\n    this.renderedProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\r\n     */\r\n    this.renderedRenderOrder_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.replayGroup_ = null;\r\n\r\n    /**\r\n     * A new replay group had to be created by `prepareFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.replayGroupChanged = true;\r\n\r\n    /**\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.declutterExecutorGroup = null;\r\n\r\n    /**\r\n     * Clipping to be performed by `renderFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.clipping = true;\r\n  }\r\n\r\n  /**\r\n   * @param {ExecutorGroup} executorGroup Executor group.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\r\n   */\r\n  renderWorlds(executorGroup, frameState, opt_declutterTree) {\r\n    const extent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const projection = viewState.projection;\r\n    const rotation = viewState.rotation;\r\n    const projectionExtent = projection.getExtent();\r\n    const vectorSource = this.getLayer().getSource();\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewHints = frameState.viewHints;\r\n    const snapToPixel = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const context = this.context;\r\n    const width = Math.round(frameState.size[0] * pixelRatio);\r\n    const height = Math.round(frameState.size[1] * pixelRatio);\r\n\r\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n    const endWorld = multiWorld\r\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n      : 1;\r\n    let world = multiWorld\r\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n      : 0;\r\n    do {\r\n      const transform = this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        rotation,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        world * worldWidth\r\n      );\r\n      executorGroup.execute(\r\n        context,\r\n        1,\r\n        transform,\r\n        rotation,\r\n        snapToPixel,\r\n        undefined,\r\n        opt_declutterTree\r\n      );\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (this.declutterExecutorGroup) {\r\n      this.renderWorlds(\r\n        this.declutterExecutorGroup,\r\n        frameState,\r\n        frameState.declutterTree\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n\r\n    // set forward and inverse pixel transforms\r\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    const canvasTransform = transformToString(this.pixelTransform);\r\n\r\n    this.useContainer(\r\n      target,\r\n      canvasTransform,\r\n      layerState.opacity,\r\n      this.getBackground(frameState)\r\n    );\r\n    const context = this.context;\r\n    const canvas = context.canvas;\r\n\r\n    const replayGroup = this.replayGroup_;\r\n    const declutterExecutorGroup = this.declutterExecutorGroup;\r\n    if (\r\n      (!replayGroup || replayGroup.isEmpty()) &&\r\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    // resize and clear\r\n    const width = Math.round(frameState.size[0] * pixelRatio);\r\n    const height = Math.round(frameState.size[1] * pixelRatio);\r\n    if (canvas.width != width || canvas.height != height) {\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      if (canvas.style.transform !== canvasTransform) {\r\n        canvas.style.transform = canvasTransform;\r\n      }\r\n    } else if (!this.containerReused) {\r\n      context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n\r\n    // clipped rendering if layer extent is set\r\n    let clipped = false;\r\n    let render = true;\r\n    if (layerState.extent && this.clipping) {\r\n      const layerExtent = fromUserExtent(layerState.extent, projection);\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (clipped) {\r\n        this.clipUnrotated(context, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    if (render) {\r\n      this.renderWorlds(replayGroup, frameState);\r\n    }\r\n\r\n    if (clipped) {\r\n      context.restore();\r\n    }\r\n\r\n    this.postRender(context, frameState);\r\n\r\n    const opacity = cssOpacity(layerState.opacity);\r\n    const container = this.container;\r\n    if (opacity !== container.style.opacity) {\r\n      container.style.opacity = opacity;\r\n    }\r\n\r\n    if (this.renderedRotation_ !== viewState.rotation) {\r\n      this.renderedRotation_ = viewState.rotation;\r\n      this.hitDetectionImageData_ = null;\r\n    }\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return new Promise(\r\n      /**\r\n       * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\r\n       * @this {CanvasVectorLayerRenderer}\r\n       */\r\n      function (resolve) {\r\n        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\r\n          const size = [this.context.canvas.width, this.context.canvas.height];\r\n          apply(this.pixelTransform, size);\r\n          const center = this.renderedCenter_;\r\n          const resolution = this.renderedResolution_;\r\n          const rotation = this.renderedRotation_;\r\n          const projection = this.renderedProjection_;\r\n          const extent = this.wrappedRenderedExtent_;\r\n          const layer = this.getLayer();\r\n          const transforms = [];\r\n          const width = size[0] * HIT_DETECT_RESOLUTION;\r\n          const height = size[1] * HIT_DETECT_RESOLUTION;\r\n          transforms.push(\r\n            this.getRenderTransform(\r\n              center,\r\n              resolution,\r\n              rotation,\r\n              HIT_DETECT_RESOLUTION,\r\n              width,\r\n              height,\r\n              0\r\n            ).slice()\r\n          );\r\n          const source = layer.getSource();\r\n          const projectionExtent = projection.getExtent();\r\n          if (\r\n            source.getWrapX() &&\r\n            projection.canWrapX() &&\r\n            !containsExtent(projectionExtent, extent)\r\n          ) {\r\n            let startX = extent[0];\r\n            const worldWidth = getWidth(projectionExtent);\r\n            let world = 0;\r\n            let offsetX;\r\n            while (startX < projectionExtent[0]) {\r\n              --world;\r\n              offsetX = worldWidth * world;\r\n              transforms.push(\r\n                this.getRenderTransform(\r\n                  center,\r\n                  resolution,\r\n                  rotation,\r\n                  HIT_DETECT_RESOLUTION,\r\n                  width,\r\n                  height,\r\n                  offsetX\r\n                ).slice()\r\n              );\r\n              startX += worldWidth;\r\n            }\r\n            world = 0;\r\n            startX = extent[2];\r\n            while (startX > projectionExtent[2]) {\r\n              ++world;\r\n              offsetX = worldWidth * world;\r\n              transforms.push(\r\n                this.getRenderTransform(\r\n                  center,\r\n                  resolution,\r\n                  rotation,\r\n                  HIT_DETECT_RESOLUTION,\r\n                  width,\r\n                  height,\r\n                  offsetX\r\n                ).slice()\r\n              );\r\n              startX -= worldWidth;\r\n            }\r\n          }\r\n\r\n          this.hitDetectionImageData_ = createHitDetectionImageData(\r\n            size,\r\n            transforms,\r\n            this.renderedFeatures_,\r\n            layer.getStyleFunction(),\r\n            extent,\r\n            resolution,\r\n            rotation\r\n          );\r\n        }\r\n        resolve(\r\n          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\r\n        );\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    if (!this.replayGroup_) {\r\n      return undefined;\r\n    }\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    const layer = this.getLayer();\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      const key = getUid(feature);\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          })\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    let result;\r\n    const executorGroups = [this.replayGroup_];\r\n    if (this.declutterExecutorGroup) {\r\n      executorGroups.push(this.declutterExecutorGroup);\r\n    }\r\n    executorGroups.some((executorGroup) => {\r\n      return (result = executorGroup.forEachFeatureAtCoordinate(\r\n        coordinate,\r\n        resolution,\r\n        rotation,\r\n        hitTolerance,\r\n        featureCallback,\r\n        executorGroup === this.declutterExecutorGroup &&\r\n          frameState.declutterTree\r\n          ? frameState.declutterTree.all().map((item) => item.value)\r\n          : null\r\n      ));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.replayGroup_) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const vectorLayer = this.getLayer();\r\n    const vectorSource = vectorLayer.getSource();\r\n    if (!vectorSource) {\r\n      return false;\r\n    }\r\n\r\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\r\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\r\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\r\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\r\n\r\n    if (\r\n      (!this.dirty_ && !updateWhileAnimating && animating) ||\r\n      (!updateWhileInteracting && interacting)\r\n    ) {\r\n      this.animatingOrInteracting_ = true;\r\n      return true;\r\n    }\r\n    this.animatingOrInteracting_ = false;\r\n\r\n    const frameStateExtent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const resolution = viewState.resolution;\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const vectorLayerRevision = vectorLayer.getRevision();\r\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\r\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\r\n\r\n    if (vectorLayerRenderOrder === undefined) {\r\n      vectorLayerRenderOrder = defaultRenderOrder;\r\n    }\r\n\r\n    const center = viewState.center.slice();\r\n    const extent = buffer(\r\n      frameStateExtent,\r\n      vectorLayerRenderBuffer * resolution\r\n    );\r\n    const renderedExtent = extent.slice();\r\n    const loadExtents = [extent.slice()];\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (\r\n      vectorSource.getWrapX() &&\r\n      projection.canWrapX() &&\r\n      !containsExtent(projectionExtent, frameState.extent)\r\n    ) {\r\n      // For the replay group, we need an extent that intersects the real world\r\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\r\n      // to +540°, we add at least 1 world width on each side of the projection\r\n      // extent. If the viewport is wider than the world, we need to add half of\r\n      // the viewport width to make sure we cover the whole viewport.\r\n      const worldWidth = getWidth(projectionExtent);\r\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\r\n      extent[0] = projectionExtent[0] - gutter;\r\n      extent[2] = projectionExtent[2] + gutter;\r\n      wrapCoordinateX(center, projection);\r\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\r\n      // If the extent crosses the date line, we load data for both edges of the worlds\r\n      if (\r\n        loadExtent[0] < projectionExtent[0] &&\r\n        loadExtent[2] < projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] + worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] + worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      } else if (\r\n        loadExtent[0] > projectionExtent[0] &&\r\n        loadExtent[2] > projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] - worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] - worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (\r\n      !this.dirty_ &&\r\n      this.renderedResolution_ == resolution &&\r\n      this.renderedRevision_ == vectorLayerRevision &&\r\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\r\n      containsExtent(this.wrappedRenderedExtent_, extent)\r\n    ) {\r\n      if (!equals(this.renderedExtent_, renderedExtent)) {\r\n        this.hitDetectionImageData_ = null;\r\n        this.renderedExtent_ = renderedExtent;\r\n      }\r\n      this.renderedCenter_ = center;\r\n      this.replayGroupChanged = false;\r\n      return true;\r\n    }\r\n\r\n    this.replayGroup_ = null;\r\n\r\n    this.dirty_ = false;\r\n\r\n    const replayGroup = new CanvasBuilderGroup(\r\n      getRenderTolerance(resolution, pixelRatio),\r\n      extent,\r\n      resolution,\r\n      pixelRatio\r\n    );\r\n\r\n    let declutterBuilderGroup;\r\n    if (this.getLayer().getDeclutter()) {\r\n      declutterBuilderGroup = new CanvasBuilderGroup(\r\n        getRenderTolerance(resolution, pixelRatio),\r\n        extent,\r\n        resolution,\r\n        pixelRatio\r\n      );\r\n    }\r\n\r\n    const userProjection = getUserProjection();\r\n    let userTransform;\r\n    if (userProjection) {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        const extent = loadExtents[i];\r\n        const userExtent = toUserExtent(extent, projection);\r\n        vectorSource.loadFeatures(\r\n          userExtent,\r\n          toUserResolution(resolution, projection),\r\n          userProjection\r\n        );\r\n      }\r\n      userTransform = getTransformFromProjections(userProjection, projection);\r\n    } else {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\r\n      }\r\n    }\r\n\r\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\r\n\r\n    const render =\r\n      /**\r\n       * @param {import(\"../../Feature.js\").default} feature Feature.\r\n       * @this {CanvasVectorLayerRenderer}\r\n       */\r\n      function (feature) {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            replayGroup,\r\n            userTransform,\r\n            declutterBuilderGroup\r\n          );\r\n          this.dirty_ = this.dirty_ || dirty;\r\n        }\r\n      }.bind(this);\r\n\r\n    const userExtent = toUserExtent(extent, projection);\r\n    /** @type {Array<import(\"../../Feature.js\").default>} */\r\n    const features = vectorSource.getFeaturesInExtent(userExtent);\r\n    if (vectorLayerRenderOrder) {\r\n      features.sort(vectorLayerRenderOrder);\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      render(features[i]);\r\n    }\r\n    this.renderedFeatures_ = features;\r\n\r\n    const replayGroupInstructions = replayGroup.finish();\r\n    const executorGroup = new ExecutorGroup(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      vectorSource.getOverlaps(),\r\n      replayGroupInstructions,\r\n      vectorLayer.getRenderBuffer()\r\n    );\r\n\r\n    if (declutterBuilderGroup) {\r\n      this.declutterExecutorGroup = new ExecutorGroup(\r\n        extent,\r\n        resolution,\r\n        pixelRatio,\r\n        vectorSource.getOverlaps(),\r\n        declutterBuilderGroup.finish(),\r\n        vectorLayer.getRenderBuffer()\r\n      );\r\n    }\r\n\r\n    this.renderedResolution_ = resolution;\r\n    this.renderedRevision_ = vectorLayerRevision;\r\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\r\n    this.renderedExtent_ = renderedExtent;\r\n    this.wrappedRenderedExtent_ = extent;\r\n    this.renderedCenter_ = center;\r\n    this.renderedProjection_ = projection;\r\n    this.replayGroup_ = executorGroup;\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    this.replayGroupChanged = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} squaredTolerance Squared render tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    opt_transform,\r\n    opt_declutterBuilderGroup\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            opt_transform,\r\n            opt_declutterBuilderGroup\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        opt_transform,\r\n        opt_declutterBuilderGroup\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Vector\r\n */\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\r\n * even during animations. Points and labels stay upright on rotated views. For very large\r\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\r\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\r\n * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {import(\"./BaseVector.js\").Options<VectorSourceType>} [opt_options] Options.\r\n   */\r\n  constructor(opt_options) {\r\n    super(opt_options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasVectorLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorLayer;\r\n"],
  "mappings": "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",
  "names": ["BaseVectorLayer", "VectorContext", "__extends", "CanvasBuilder", "fillInstruction", "__extends", "CanvasImageBuilder", "__extends", "CanvasLineStringBuilder", "__extends", "CanvasPolygonBuilder", "__extends", "CanvasTextBuilder", "i", "p1", "p2", "p3", "BuilderGroup", "measureAndCacheTextWidth", "Executor", "p1", "p2", "p3", "p4", "fillInstruction", "strokeInstruction", "intersects", "ExecutorGroup", "__extends", "CanvasImmediateRenderer", "__extends", "CanvasVectorLayerRenderer", "wrapX", "Layer_default", "__extends", "VectorLayer"]
}

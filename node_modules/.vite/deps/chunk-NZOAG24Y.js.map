{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/mixin.js"],
  "sourcesContent": ["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\nimport './boot.js';\r\n\r\n// unique global id for deduping mixins.\r\nlet dedupeId = 0;\r\n\r\n/**\r\n * @constructor\r\n * @extends {Function}\r\n * @private\r\n */\r\nfunction MixinFunction(){}\r\n/** @type {(WeakMap | undefined)} */\r\nMixinFunction.prototype.__mixinApplications;\r\n/** @type {(Object | undefined)} */\r\nMixinFunction.prototype.__mixinSet;\r\n\r\n/* eslint-disable valid-jsdoc */\r\n/**\r\n * Wraps an ES6 class expression mixin such that the mixin is only applied\r\n * if it has not already been applied its base argument. Also memoizes mixin\r\n * applications.\r\n *\r\n * @template T\r\n * @param {T} mixin ES6 class expression mixin to wrap\r\n * @return {T}\r\n * @suppress {invalidCasts}\r\n */\r\nexport const dedupingMixin = function(mixin) {\r\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\r\n  if (!mixinApplications) {\r\n    mixinApplications = new WeakMap();\r\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\r\n  }\r\n  // maintain a unique id for each mixin\r\n  let mixinDedupeId = dedupeId++;\r\n  function dedupingMixin(base) {\r\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\r\n    if (baseSet && baseSet[mixinDedupeId]) {\r\n      return base;\r\n    }\r\n    let map = mixinApplications;\r\n    let extended = map.get(base);\r\n    if (!extended) {\r\n      extended = /** @type {!Function} */(mixin)(base);\r\n      map.set(base, extended);\r\n      // copy inherited mixin set from the extended class, or the base class\r\n      // NOTE: we avoid use of Set here because some browser (IE11)\r\n      // cannot extend a base Set via the constructor.\r\n      let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\r\n      mixinSet[mixinDedupeId] = true;\r\n      /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\r\n    }\r\n    return extended;\r\n  }\r\n\r\n  return dedupingMixin;\r\n};\r\n/* eslint-enable valid-jsdoc */\r\n"],
  "mappings": ";AAYA,IAAI,WAAW;AAOf,SAAS,gBAAe;AAAC;AAEzB,cAAc,UAAU;AAExB,cAAc,UAAU;AAajB,IAAM,gBAAgB,SAAS,OAAO;AAC3C,MAAI;AAAA;AAAA,IAAkD,MAAO;AAAA;AAC7D,MAAI,CAAC,mBAAmB;AACtB,wBAAoB,oBAAI,QAAQ;AACH,IAAC,MAAO,sBAAsB;AAAA,EAC7D;AAEA,MAAI,gBAAgB;AACpB,WAASA,eAAc,MAAM;AAC3B,QAAI;AAAA;AAAA,MAAwC,KAAM;AAAA;AAClD,QAAI,WAAW,QAAQ,aAAa,GAAG;AACrC,aAAO;AAAA,IACT;AACA,QAAI,MAAM;AACV,QAAI,WAAW,IAAI,IAAI,IAAI;AAC3B,QAAI,CAAC,UAAU;AACb;AAAA,MAAoC,MAAO,IAAI;AAC/C,UAAI,IAAI,MAAM,QAAQ;AAItB,UAAI,WAAW,OAAO;AAAA;AAAA,QAAqC,SAAU,cAAc,WAAW;AAAA,MAAI;AAClG,eAAS,aAAa,IAAI;AACG,MAAC,SAAU,aAAa;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAEA,SAAOA;AACT;",
  "names": ["dedupingMixin"]
}

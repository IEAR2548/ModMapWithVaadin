{
  "version": 3,
  "sources": ["../../@vaadin/checkbox/theme/lumo/vaadin-checkbox-styles.js", "../../@vaadin/checkbox/src/vaadin-checkbox-mixin.js", "../../@vaadin/checkbox/src/vaadin-checkbox-styles.js", "../../@vaadin/checkbox/src/vaadin-checkbox.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-checkbox',\r\n  css`\r\n    :host {\r\n      color: var(--vaadin-checkbox-label-color, var(--lumo-body-text-color));\r\n      font-size: var(--vaadin-checkbox-label-font-size, var(--lumo-font-size-m));\r\n      font-family: var(--lumo-font-family);\r\n      line-height: var(--lumo-line-height-s);\r\n      -webkit-font-smoothing: antialiased;\r\n      -moz-osx-font-smoothing: grayscale;\r\n      -webkit-tap-highlight-color: transparent;\r\n      -webkit-user-select: none;\r\n      user-select: none;\r\n      cursor: default;\r\n      outline: none;\r\n      --_checkbox-size: var(--vaadin-checkbox-size, calc(var(--lumo-size-m) / 2));\r\n      --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));\r\n      --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);\r\n      --_selection-color: var(--vaadin-selection-color, var(--lumo-primary-color));\r\n      --_invalid-background: var(--vaadin-input-field-invalid-background, var(--lumo-error-color-10pct));\r\n      --_disabled-checkmark-color: var(--vaadin-checkbox-disabled-checkmark-color, var(--lumo-contrast-30pct));\r\n    }\r\n\r\n    [part='label'] {\r\n      display: flex;\r\n      position: relative;\r\n      max-width: max-content;\r\n    }\r\n\r\n    :host([has-label]) ::slotted(label) {\r\n      padding: var(\r\n        --vaadin-checkbox-label-padding,\r\n        var(--lumo-space-xs) var(--lumo-space-s) var(--lumo-space-xs) var(--lumo-space-xs)\r\n      );\r\n    }\r\n\r\n    :host([dir='rtl'][has-label]) ::slotted(label) {\r\n      padding: var(--lumo-space-xs) var(--lumo-space-xs) var(--lumo-space-xs) var(--lumo-space-s);\r\n    }\r\n\r\n    :host([has-label][required]) ::slotted(label) {\r\n      padding-inline-end: var(--lumo-space-m);\r\n    }\r\n\r\n    [part='checkbox'] {\r\n      width: var(--_checkbox-size);\r\n      height: var(--_checkbox-size);\r\n      margin: var(--lumo-space-xs);\r\n      position: relative;\r\n      border-radius: var(--vaadin-checkbox-border-radius, var(--lumo-border-radius-s));\r\n      background: var(--vaadin-checkbox-background, var(--lumo-contrast-20pct));\r\n      transition:\r\n        transform 0.2s cubic-bezier(0.12, 0.32, 0.54, 2),\r\n        background-color 0.15s;\r\n      cursor: var(--lumo-clickable-cursor);\r\n      /* Default field border color */\r\n      --_input-border-color: var(--vaadin-input-field-border-color, var(--lumo-contrast-50pct));\r\n    }\r\n\r\n    :host([indeterminate]),\r\n    :host([checked]) {\r\n      --vaadin-input-field-border-color: transparent;\r\n    }\r\n\r\n    :host([indeterminate]) [part='checkbox'],\r\n    :host([checked]) [part='checkbox'] {\r\n      background-color: var(--_selection-color);\r\n    }\r\n\r\n    /* Checkmark */\r\n    [part='checkbox']::after {\r\n      pointer-events: none;\r\n      font-family: 'lumo-icons';\r\n      content: var(--vaadin-checkbox-checkmark-char, var(--lumo-icons-checkmark));\r\n      color: var(--vaadin-checkbox-checkmark-color, var(--lumo-primary-contrast-color));\r\n      font-size: var(--vaadin-checkbox-checkmark-size, calc(var(--_checkbox-size) + 2px));\r\n      line-height: 1;\r\n      position: absolute;\r\n      top: -1px;\r\n      left: -1px;\r\n      contain: content;\r\n      opacity: 0;\r\n    }\r\n\r\n    :host([checked]) [part='checkbox']::after {\r\n      opacity: 1;\r\n    }\r\n\r\n    :host([readonly]:not([checked]):not([indeterminate])) {\r\n      color: var(--lumo-secondary-text-color);\r\n    }\r\n\r\n    :host([readonly]:not([checked]):not([indeterminate])) [part='checkbox'] {\r\n      background: transparent;\r\n      box-shadow: none;\r\n    }\r\n\r\n    :host([readonly]:not([checked]):not([indeterminate])) [part='checkbox']::after {\r\n      content: '';\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: inherit;\r\n      top: 0;\r\n      left: 0;\r\n      opacity: 1;\r\n      border: var(--vaadin-input-field-readonly-border, 1px dashed var(--lumo-contrast-50pct));\r\n    }\r\n\r\n    /* Indeterminate checkmark */\r\n    :host([indeterminate]) [part='checkbox']::after {\r\n      content: var(--vaadin-checkbox-checkmark-char-indeterminate, '');\r\n      opacity: 1;\r\n      top: 45%;\r\n      height: 10%;\r\n      left: 22%;\r\n      right: 22%;\r\n      width: auto;\r\n      border: 0;\r\n      background-color: var(--lumo-primary-contrast-color);\r\n    }\r\n\r\n    /* Focus ring */\r\n    :host([focus-ring]) [part='checkbox'] {\r\n      box-shadow:\r\n        0 0 0 1px var(--lumo-base-color),\r\n        0 0 0 calc(var(--_focus-ring-width) + 1px) var(--_focus-ring-color),\r\n        inset 0 0 0 var(--_input-border-width, 0) var(--_input-border-color);\r\n    }\r\n\r\n    :host([focus-ring][readonly]:not([checked]):not([indeterminate])) [part='checkbox'] {\r\n      box-shadow:\r\n        0 0 0 1px var(--lumo-base-color),\r\n        0 0 0 calc(var(--_focus-ring-width) + 1px) var(--_focus-ring-color);\r\n    }\r\n\r\n    /* Disabled */\r\n    :host([disabled]) {\r\n      pointer-events: none;\r\n      --vaadin-input-field-border-color: var(--lumo-contrast-20pct);\r\n    }\r\n\r\n    :host([disabled]) ::slotted(label) {\r\n      color: inherit;\r\n    }\r\n\r\n    :host([disabled]) [part='checkbox'] {\r\n      background-color: var(--vaadin-checkbox-disabled-background, var(--lumo-contrast-10pct));\r\n    }\r\n\r\n    :host([disabled]) [part='checkbox']::after {\r\n      color: var(--_disabled-checkmark-color);\r\n    }\r\n\r\n    :host([disabled]) [part='label'],\r\n    :host([disabled]) [part='helper-text'] {\r\n      color: var(--lumo-disabled-text-color);\r\n      -webkit-text-fill-color: var(--lumo-disabled-text-color);\r\n    }\r\n\r\n    :host([indeterminate][disabled]) [part='checkbox']::after {\r\n      background-color: var(--_disabled-checkmark-color);\r\n    }\r\n\r\n    :host([readonly][checked]:not([disabled])) [part='checkbox'],\r\n    :host([readonly][indeterminate]:not([disabled])) [part='checkbox'] {\r\n      background-color: var(--vaadin-checkbox-readonly-checked-background, var(--lumo-contrast-70pct));\r\n    }\r\n\r\n    /* Used for activation \"halo\" */\r\n    [part='checkbox']::before {\r\n      pointer-events: none;\r\n      color: transparent;\r\n      width: 100%;\r\n      height: 100%;\r\n      line-height: var(--_checkbox-size);\r\n      border-radius: inherit;\r\n      background-color: inherit;\r\n      transform: scale(1.4);\r\n      opacity: 0;\r\n      transition:\r\n        transform 0.1s,\r\n        opacity 0.8s;\r\n    }\r\n\r\n    /* Hover */\r\n    :host(:not([checked]):not([indeterminate]):not([disabled]):not([readonly]):not([invalid]):hover) [part='checkbox'] {\r\n      background: var(--vaadin-checkbox-background-hover, var(--lumo-contrast-30pct));\r\n    }\r\n\r\n    /* Disable hover for touch devices */\r\n    @media (pointer: coarse) {\r\n      /* prettier-ignore */\r\n      :host(:not([checked]):not([indeterminate]):not([disabled]):not([readonly]):not([invalid]):hover) [part='checkbox'] {\r\n        background: var(--vaadin-checkbox-background, var(--lumo-contrast-20pct));\r\n      }\r\n    }\r\n\r\n    /* Active */\r\n    :host([active]) [part='checkbox'] {\r\n      transform: scale(0.9);\r\n      transition-duration: 0.05s;\r\n    }\r\n\r\n    :host([active][checked]) [part='checkbox'] {\r\n      transform: scale(1.1);\r\n    }\r\n\r\n    :host([active]:not([checked])) [part='checkbox']::before {\r\n      transition-duration: 0.01s, 0.01s;\r\n      transform: scale(0);\r\n      opacity: 0.4;\r\n    }\r\n\r\n    /* Required */\r\n    :host([required]) [part='required-indicator'] {\r\n      position: absolute;\r\n      top: var(--lumo-space-xs);\r\n      right: var(--lumo-space-xs);\r\n    }\r\n\r\n    :host([required][dir='rtl']) [part='required-indicator'] {\r\n      right: auto;\r\n      left: var(--lumo-space-xs);\r\n    }\r\n\r\n    :host([required]) [part='required-indicator']::after {\r\n      content: var(--lumo-required-field-indicator, '\\\\2022');\r\n      transition: opacity 0.2s;\r\n      color: var(--lumo-required-field-indicator-color, var(--lumo-primary-text-color));\r\n      width: 1em;\r\n      text-align: center;\r\n    }\r\n\r\n    :host(:not([has-label])) [part='required-indicator'] {\r\n      display: none;\r\n    }\r\n\r\n    /* Invalid */\r\n    :host([invalid]) {\r\n      --vaadin-input-field-border-color: var(--lumo-error-color);\r\n    }\r\n\r\n    :host([invalid]) [part='checkbox'] {\r\n      background: var(--_invalid-background);\r\n      background-image: linear-gradient(var(--_invalid-background) 0%, var(--_invalid-background) 100%);\r\n    }\r\n\r\n    :host([invalid]:hover) [part='checkbox'] {\r\n      background-image: linear-gradient(var(--_invalid-background) 0%, var(--_invalid-background) 100%),\r\n        linear-gradient(var(--_invalid-background) 0%, var(--_invalid-background) 100%);\r\n    }\r\n\r\n    :host([invalid][focus-ring]) {\r\n      --_focus-ring-color: var(--lumo-error-color-50pct);\r\n    }\r\n\r\n    :host([invalid]) [part='required-indicator']::after {\r\n      color: var(--lumo-required-field-indicator-color, var(--lumo-error-text-color));\r\n    }\r\n\r\n    /* Error message */\r\n    [part='error-message'] {\r\n      font-size: var(--vaadin-input-field-error-font-size, var(--lumo-font-size-xs));\r\n      line-height: var(--lumo-line-height-xs);\r\n      font-weight: var(--vaadin-input-field-error-font-weight, 400);\r\n      color: var(--vaadin-input-field-error-color, var(--lumo-error-text-color));\r\n      will-change: max-height;\r\n      transition: 0.4s max-height;\r\n      max-height: 5em;\r\n      padding-inline-start: var(--lumo-space-xs);\r\n    }\r\n\r\n    :host([has-error-message]) [part='error-message']::after,\r\n    :host([has-helper]) [part='helper-text']::after {\r\n      content: '';\r\n      display: block;\r\n      height: 0.4em;\r\n    }\r\n\r\n    :host(:not([invalid])) [part='error-message'] {\r\n      max-height: 0;\r\n      overflow: hidden;\r\n    }\r\n\r\n    /* Helper */\r\n    [part='helper-text'] {\r\n      display: block;\r\n      color: var(--vaadin-input-field-helper-color, var(--lumo-secondary-text-color));\r\n      font-size: var(--vaadin-input-field-helper-font-size, var(--lumo-font-size-xs));\r\n      line-height: var(--lumo-line-height-xs);\r\n      font-weight: var(--vaadin-input-field-helper-font-weight, 400);\r\n      margin-left: calc(var(--lumo-border-radius-m) / 4);\r\n      transition: color 0.2s;\r\n      padding-inline-start: var(--lumo-space-xs);\r\n    }\r\n\r\n    :host(:hover:not([readonly])) [part='helper-text'] {\r\n      color: var(--lumo-body-text-color);\r\n    }\r\n\r\n    :host([has-error-message]) ::slotted(label),\r\n    :host([has-helper]) ::slotted(label) {\r\n      padding-bottom: 0;\r\n    }\r\n  `,\r\n  { moduleId: 'lumo-checkbox' },\r\n);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\r\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\r\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\r\nimport { CheckedMixin } from '@vaadin/field-base/src/checked-mixin.js';\r\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\n\r\n/**\r\n * A mixin providing common checkbox functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes ActiveMixin\r\n * @mixes CheckedMixin\r\n * @mixes DelegateFocusMixin\r\n * @mixes FieldMixin\r\n * @mixes SlotStylesMixin\r\n */\r\nexport const CheckboxMixin = (superclass) =>\r\n  class CheckboxMixinClass extends SlotStylesMixin(\r\n    FieldMixin(CheckedMixin(DelegateFocusMixin(ActiveMixin(superclass)))),\r\n  ) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * True if the checkbox is in the indeterminate state which means\r\n         * it is not possible to say whether it is checked or unchecked.\r\n         * The state is reset once the user switches the checkbox by hand.\r\n         *\r\n         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        indeterminate: {\r\n          type: Boolean,\r\n          notify: true,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n\r\n        /**\r\n         * The name of the checkbox.\r\n         *\r\n         * @type {string}\r\n         */\r\n        name: {\r\n          type: String,\r\n          value: '',\r\n        },\r\n\r\n        /**\r\n         * When true, the user cannot modify the value of the checkbox.\r\n         * The difference between `disabled` and `readonly` is that the\r\n         * read-only checkbox remains focusable, is announced by screen\r\n         * readers and its value can be submitted as part of the form.\r\n         */\r\n        readonly: {\r\n          type: Boolean,\r\n          value: false,\r\n          reflectToAttribute: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__readonlyChanged(readonly, inputElement)'];\r\n    }\r\n\r\n    /** @override */\r\n    static get delegateProps() {\r\n      return [...super.delegateProps, 'indeterminate'];\r\n    }\r\n\r\n    /** @override */\r\n    static get delegateAttrs() {\r\n      return [...super.delegateAttrs, 'name', 'invalid', 'required'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this._setType('checkbox');\r\n\r\n      this._boundOnInputClick = this._onInputClick.bind(this);\r\n\r\n      // Set the string \"on\" as the default value for the checkbox following the HTML specification:\r\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\r\n      this.value = 'on';\r\n\r\n      // Set tabindex to 0 by default to not lose focus on click in Safari\r\n      // See https://github.com/vaadin/web-components/pull/6780\r\n      this.tabindex = 0;\r\n    }\r\n\r\n    /** @protected */\r\n    get slotStyles() {\r\n      const tag = this.localName;\r\n\r\n      // Needed to override `opacity: 1` set on `input` by Tailwind CSS.\r\n      // See https://github.com/vaadin/web-components/issues/8881\r\n      return [\r\n        `\r\n          ${tag} > input[slot='input'] {\r\n            opacity: 0;\r\n          }\r\n        `,\r\n      ];\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(\r\n        new InputController(this, (input) => {\r\n          this._setInputElement(input);\r\n          this._setFocusElement(input);\r\n          this.stateTarget = input;\r\n          this.ariaTarget = input;\r\n        }),\r\n      );\r\n      this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n\r\n      this._createMethodObserver('_checkedChanged(checked)');\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `ActiveMixin` to prevent setting `active`\r\n     * attribute when readonly, or when clicking a link placed inside the label,\r\n     * or when clicking slotted helper or error message element.\r\n     *\r\n     * @param {Event} event\r\n     * @return {boolean}\r\n     * @protected\r\n     * @override\r\n     */\r\n    _shouldSetActive(event) {\r\n      if (\r\n        this.readonly ||\r\n        event.target.localName === 'a' ||\r\n        event.target === this._helperNode ||\r\n        event.target === this._errorNode\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      return super._shouldSetActive(event);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin`.\r\n     * @param {!HTMLElement} input\r\n     * @protected\r\n     * @override\r\n     */\r\n    _addInputListeners(input) {\r\n      super._addInputListeners(input);\r\n\r\n      input.addEventListener('click', this._boundOnInputClick);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `InputMixin`.\r\n     * @param {!HTMLElement} input\r\n     * @protected\r\n     * @override\r\n     */\r\n    _removeInputListeners(input) {\r\n      super._removeInputListeners(input);\r\n\r\n      input.removeEventListener('click', this._boundOnInputClick);\r\n    }\r\n\r\n    /** @private */\r\n    _onInputClick(event) {\r\n      // Prevent native checkbox checked change\r\n      if (this.readonly) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    __readonlyChanged(readonly, inputElement) {\r\n      if (!inputElement) {\r\n        return;\r\n      }\r\n\r\n      // Use aria-readonly since native checkbox doesn't support readonly\r\n      if (readonly) {\r\n        inputElement.setAttribute('aria-readonly', 'true');\r\n      } else {\r\n        inputElement.removeAttribute('aria-readonly');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `CheckedMixin` to reset\r\n     * `indeterminate` state checkbox is toggled by the user.\r\n     *\r\n     * @param {boolean} checked\r\n     * @protected\r\n     * @override\r\n     */\r\n    _toggleChecked(checked) {\r\n      if (this.indeterminate) {\r\n        this.indeterminate = false;\r\n      }\r\n\r\n      super._toggleChecked(checked);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @return {boolean}\r\n     */\r\n    checkValidity() {\r\n      return !this.required || !!this.checked;\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `FocusMixin` to validate on blur.\r\n     * @param {boolean} focused\r\n     * @protected\r\n     */\r\n    _setFocused(focused) {\r\n      super._setFocused(focused);\r\n\r\n      // Do not validate when focusout is caused by document\r\n      // losing focus, which happens on browser tab switch.\r\n      if (!focused && document.hasFocus()) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _checkedChanged(checked) {\r\n      if (checked || this.__oldChecked) {\r\n        this._requestValidation();\r\n      }\r\n\r\n      this.__oldChecked = checked;\r\n    }\r\n\r\n    /**\r\n     * Override an observer from `FieldMixin`\r\n     * to validate when required is removed.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _requiredChanged(required) {\r\n      super._requiredChanged(required);\r\n\r\n      if (required === false) {\r\n        this._requestValidation();\r\n      }\r\n    }\r\n\r\n    /** @private */\r\n    _onRequiredIndicatorClick() {\r\n      this._labelNode.click();\r\n    }\r\n\r\n    /**\r\n     * Fired when the checkbox is checked or unchecked by the user.\r\n     *\r\n     * @event change\r\n     */\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nexport const checkboxStyles = css`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  :host([disabled]) {\r\n    -webkit-tap-highlight-color: transparent;\r\n  }\r\n\r\n  .vaadin-checkbox-container {\r\n    display: grid;\r\n    grid-template-columns: auto 1fr;\r\n    align-items: baseline;\r\n  }\r\n\r\n  [part='checkbox'],\r\n  ::slotted(input),\r\n  [part='label'] {\r\n    grid-row: 1;\r\n  }\r\n\r\n  [part='checkbox'],\r\n  ::slotted(input) {\r\n    grid-column: 1;\r\n  }\r\n\r\n  [part='helper-text'],\r\n  [part='error-message'] {\r\n    grid-column: 2;\r\n  }\r\n\r\n  :host(:not([has-helper])) [part='helper-text'],\r\n  :host(:not([has-error-message])) [part='error-message'] {\r\n    display: none;\r\n  }\r\n\r\n  [part='checkbox'] {\r\n    width: var(--vaadin-checkbox-size, 1em);\r\n    height: var(--vaadin-checkbox-size, 1em);\r\n    --_input-border-width: var(--vaadin-input-field-border-width, 0);\r\n    --_input-border-color: var(--vaadin-input-field-border-color, transparent);\r\n    box-shadow: inset 0 0 0 var(--_input-border-width, 0) var(--_input-border-color);\r\n  }\r\n\r\n  [part='checkbox']::before {\r\n    display: block;\r\n    content: '\\\\202F';\r\n    line-height: var(--vaadin-checkbox-size, 1em);\r\n    contain: paint;\r\n  }\r\n\r\n  /* visually hidden */\r\n  ::slotted(input) {\r\n    cursor: inherit;\r\n    margin: 0;\r\n    align-self: stretch;\r\n    -webkit-appearance: none;\r\n    width: initial;\r\n    height: initial;\r\n  }\r\n\r\n  @media (forced-colors: active) {\r\n    [part='checkbox'] {\r\n      outline: 1px solid;\r\n      outline-offset: -1px;\r\n    }\r\n\r\n    :host([disabled]) [part='checkbox'],\r\n    :host([disabled]) [part='checkbox']::after {\r\n      outline-color: GrayText;\r\n    }\r\n\r\n    :host(:is([checked], [indeterminate])) [part='checkbox']::after {\r\n      outline: 1px solid;\r\n      outline-offset: -1px;\r\n      border-radius: inherit;\r\n    }\r\n\r\n    :host([focused]) [part='checkbox'],\r\n    :host([focused]) [part='checkbox']::after {\r\n      outline-width: 2px;\r\n    }\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2017 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { CheckboxMixin } from './vaadin-checkbox-mixin.js';\r\nimport { checkboxStyles } from './vaadin-checkbox-styles.js';\r\n\r\nregisterStyles('vaadin-checkbox', checkboxStyles, { moduleId: 'vaadin-checkbox-styles' });\r\n\r\n/**\r\n * `<vaadin-checkbox>` is an input field representing a binary choice.\r\n *\r\n * ```html\r\n * <vaadin-checkbox label=\"I accept the terms and conditions\"></vaadin-checkbox>\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name            | Description\r\n * ---------------------|-------------\r\n * `checkbox`           | The element representing a stylable custom checkbox\r\n * `label`              | The slotted label element wrapper\r\n * `helper-text`        | The slotted helper text element wrapper\r\n * `error-message`      | The slotted error message element wrapper\r\n * `required-indicator` | The `required` state indicator element\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute            | Description\r\n * ---------------------|-------------\r\n * `active`             | Set when the checkbox is activated with mouse, touch or the keyboard.\r\n * `checked`            | Set when the checkbox is checked.\r\n * `disabled`           | Set when the checkbox is disabled.\r\n * `readonly`           | Set when the checkbox is readonly.\r\n * `focus-ring`         | Set when the checkbox is focused using the keyboard.\r\n * `focused`            | Set when the checkbox is focused.\r\n * `indeterminate`      | Set when the checkbox is in the indeterminate state.\r\n * `invalid`            | Set when the checkbox is invalid.\r\n * `has-label`          | Set when the checkbox has a label.\r\n * `has-helper`         | Set when the checkbox has helper text.\r\n * `has-error-message`  | Set when the checkbox has an error message.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {Event} change - Fired when the checkbox is checked or unchecked by the user.\r\n * @fires {CustomEvent} checked-changed - Fired when the `checked` property changes.\r\n * @fires {CustomEvent} indeterminate-changed - Fired when the `indeterminate` property changes.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes CheckboxMixin\r\n * @mixes ThemableMixin\r\n * @mixes ElementMixin\r\n */\r\nexport class Checkbox extends CheckboxMixin(ElementMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-checkbox';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-checkbox-container\">\r\n        <div part=\"checkbox\" aria-hidden=\"true\"></div>\r\n        <slot name=\"input\"></slot>\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <div part=\"required-indicator\" on-click=\"_onRequiredIndicatorClick\"></div>\r\n        </div>\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this._tooltipController = new TooltipController(this);\r\n    this._tooltipController.setAriaTarget(this.inputElement);\r\n    this.addController(this._tooltipController);\r\n  }\r\n}\r\n\r\ndefineCustomElement(Checkbox);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA,EACE;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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",
  "names": []
}

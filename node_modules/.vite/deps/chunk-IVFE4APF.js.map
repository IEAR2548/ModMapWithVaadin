{
  "version": 3,
  "sources": ["../../@vaadin/accordion/theme/lumo/vaadin-accordion-heading-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-heading-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-heading.js", "../../@vaadin/accordion/theme/lumo/vaadin-accordion-panel-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-panel-mixin.js", "../../@vaadin/accordion/src/vaadin-accordion-panel-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-panel.js"],
  "sourcesContent": ["import { detailsSummary } from '@vaadin/details/theme/lumo/vaadin-details-summary-styles.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst accordionHeading = css`\r\n  :host {\r\n    padding: 0;\r\n  }\r\n\r\n  [part='content'] {\r\n    padding: var(--lumo-space-s) 0;\r\n  }\r\n\r\n  :host([theme~='filled']) {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-accordion-heading', [detailsSummary, accordionHeading], { moduleId: 'lumo-accordion-heading' });\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const accordionHeading = css`\r\n  :host {\r\n    display: block;\r\n    outline: none;\r\n    -webkit-user-select: none;\r\n    user-select: none;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: inherit;\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: initial;\r\n    color: inherit;\r\n    border: initial;\r\n    outline: none;\r\n    font: inherit;\r\n    text-align: inherit;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { accordionHeading } from './vaadin-accordion-heading-styles.js';\r\n\r\nregisterStyles('vaadin-accordion-heading', accordionHeading, { moduleId: 'vaadin-accordion-heading-styles' });\r\n\r\n/**\r\n * The accordion heading element.\r\n *\r\n * `vaadin-accordion-heading` is the element for the headings in the accordion.\r\n * As recommended by the WAI ARIA Best Practices, each heading needs to wrap a\r\n * `<button>`. This element puts that button in the Shadow DOM, as it is more\r\n * convenient to use and doesn't make styling of the heading more problematic.\r\n *\r\n * The WAI ARIA Best Practices also recommend setting `aria-level` depending\r\n * on what level the headings are. It is hard to determine the level of a heading\r\n * algorithmically, and setting it is not strictly required to have an accessible\r\n * accordion. To keep things easier to use, this element does not set `aria-level`\r\n * attribute but leaves that to the developer creating an accordion.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are exposed for styling:\r\n *\r\n * Part name  | Description\r\n * -----------|-------------------\r\n * `toggle`   | The icon element\r\n * `content`  | The content wrapper\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute    | Description\r\n * -------------| -----------\r\n * `active`     | Set when the element is pressed down, either with mouse, touch or the keyboard.\r\n * `opened`     | Set when the collapsible content is expanded and visible.\r\n * `disabled`   | Set when the element is disabled.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes ActiveMixin\r\n * @mixes DirMixin\r\n * @mixes ThemableMixin\r\n */\r\nclass AccordionHeading extends ActiveMixin(DirMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-accordion-heading';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <button id=\"button\" part=\"content\" disabled$=\"[[disabled]]\" aria-expanded$=\"[[__updateAriaExpanded(opened)]]\">\r\n        <span part=\"toggle\" aria-hidden=\"true\"></span>\r\n        <slot></slot>\r\n      </button>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /**\r\n       * When true, the element is opened.\r\n       */\r\n      opened: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n        value: false,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {DocumentFragment} dom\r\n   * @return {null}\r\n   * @protected\r\n   * @override\r\n   */\r\n  _attachDom(dom) {\r\n    const root = this.attachShadow({ mode: 'open', delegatesFocus: true });\r\n    root.appendChild(dom);\r\n    return root;\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    // By default, if the user hasn't provided a custom role,\r\n    // the role attribute is set to \"heading\".\r\n    if (!this.hasAttribute('role')) {\r\n      this.setAttribute('role', 'heading');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  __updateAriaExpanded(opened) {\r\n    return opened ? 'true' : 'false';\r\n  }\r\n}\r\n\r\ndefineCustomElement(AccordionHeading);\r\n\r\nexport { AccordionHeading };\r\n", "import '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport { details } from '@vaadin/details/theme/lumo/vaadin-details-styles.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst accordionPanel = css`\r\n  :host {\r\n    margin: 0;\r\n    border-bottom: solid 1px var(--lumo-contrast-10pct);\r\n  }\r\n\r\n  :host(:last-child) {\r\n    border-bottom: none;\r\n  }\r\n\r\n  :host([theme~='filled']) {\r\n    border-bottom: none;\r\n  }\r\n\r\n  :host([theme~='filled']:not(:last-child)) {\r\n    margin-bottom: 2px;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-accordion-panel', [details, accordionPanel], { moduleId: 'lumo-accordion-panel' });\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\r\nimport { DelegateStateMixin } from '@vaadin/component-base/src/delegate-state-mixin.js';\r\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\r\nimport { CollapsibleMixin } from '@vaadin/details/src/collapsible-mixin.js';\r\nimport { SummaryController } from '@vaadin/details/src/summary-controller.js';\r\n\r\n/**\r\n * A mixin providing common accordion panel functionality.\r\n *\r\n * @polymerMixin\r\n * @mixes CollapsibleMixin\r\n * @mixes DelegateFocusMixin\r\n * @mixes DelegateStateMixin\r\n */\r\nexport const AccordionPanelMixin = (superClass) =>\r\n  class AccordionPanelMixinClass extends CollapsibleMixin(DelegateFocusMixin(DelegateStateMixin(superClass))) {\r\n    static get properties() {\r\n      return {\r\n        /**\r\n         * A text that is displayed in the heading, if no\r\n         * element is assigned to the `summary` slot.\r\n         */\r\n        summary: {\r\n          type: String,\r\n          observer: '_summaryChanged',\r\n        },\r\n      };\r\n    }\r\n\r\n    static get observers() {\r\n      return ['__updateAriaAttributes(focusElement, _contentElements)'];\r\n    }\r\n\r\n    static get delegateProps() {\r\n      return ['disabled', 'opened', '_theme'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this._summaryController = new SummaryController(this, 'vaadin-accordion-heading');\r\n      this._summaryController.addEventListener('slot-content-changed', (event) => {\r\n        const { node } = event.target;\r\n\r\n        this._setFocusElement(node);\r\n        this.stateTarget = node;\r\n\r\n        this._tooltipController.setTarget(node);\r\n      });\r\n\r\n      this._tooltipController = new TooltipController(this);\r\n      this._tooltipController.setPosition('bottom-start');\r\n    }\r\n\r\n    /** @protected */\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.addController(this._summaryController);\r\n      this.addController(this._tooltipController);\r\n    }\r\n\r\n    /**\r\n     * Override method from `DelegateStateMixin` to set delegate `theme`\r\n     * using attribute instead of property (needed for the Lit version).\r\n     * @protected\r\n     * @override\r\n     */\r\n    _delegateProperty(name, value) {\r\n      if (!this.stateTarget) {\r\n        return;\r\n      }\r\n\r\n      if (name === '_theme') {\r\n        this._delegateAttribute('theme', value);\r\n        return;\r\n      }\r\n\r\n      super._delegateProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Override method inherited from `DisabledMixin`\r\n     * to not set `aria-disabled` on the host element.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    _setAriaDisabled() {\r\n      // The `aria-disabled` is set on the details summary.\r\n    }\r\n\r\n    /** @private */\r\n    _summaryChanged(summary) {\r\n      this._summaryController.setSummary(summary);\r\n    }\r\n\r\n    /** @private */\r\n    __updateAriaAttributes(focusElement, contentElements) {\r\n      if (focusElement && contentElements) {\r\n        const node = contentElements[0];\r\n\r\n        if (node) {\r\n          node.setAttribute('role', 'region');\r\n          node.setAttribute('aria-labelledby', focusElement.id);\r\n        }\r\n\r\n        if (node && node.id) {\r\n          focusElement.setAttribute('aria-controls', node.id);\r\n        } else {\r\n          focusElement.removeAttribute('aria-controls');\r\n        }\r\n      }\r\n    }\r\n  };\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { css } from 'lit';\r\n\r\nexport const accordionPanel = css`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  :host([hidden]) {\r\n    display: none !important;\r\n  }\r\n\r\n  [part='content'] {\r\n    display: none;\r\n    overflow: hidden;\r\n  }\r\n\r\n  :host([opened]) [part='content'] {\r\n    display: block;\r\n    overflow: visible;\r\n  }\r\n`;\r\n", "/**\r\n * @license\r\n * Copyright (c) 2019 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-accordion-heading.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\r\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\r\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\nimport { AccordionPanelMixin } from './vaadin-accordion-panel-mixin.js';\r\nimport { accordionPanel } from './vaadin-accordion-panel-styles.js';\r\n\r\nregisterStyles('vaadin-accordion-panel', accordionPanel, { moduleId: 'vaadin-accordion-panel-styles' });\r\n\r\n/**\r\n * The accordion panel element.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are exposed for styling:\r\n *\r\n * Part name        | Description\r\n * -----------------|----------------\r\n * `content`        | The wrapper for the collapsible panel content.\r\n *\r\n * The following attributes are exposed for styling:\r\n *\r\n * Attribute    | Description\r\n * -------------| -----------\r\n * `opened`     | Set when the collapsible content is expanded and visible.\r\n * `disabled`   | Set when the element is disabled.\r\n * `focus-ring` | Set when the element is focused using the keyboard.\r\n * `focused`    | Set when the element is focused.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\r\n *\r\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\r\n *\r\n * @customElement\r\n * @extends HTMLElement\r\n * @mixes AccordionPanelMixin\r\n * @mixes ControllerMixin\r\n * @mixes ThemableMixin\r\n */\r\nclass AccordionPanel extends AccordionPanelMixin(ThemableMixin(ControllerMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-accordion-panel';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <slot name=\"summary\"></slot>\r\n\r\n      <div part=\"content\">\r\n        <slot></slot>\r\n      </div>\r\n\r\n      <slot name=\"tooltip\"></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ndefineCustomElement(AccordionPanel);\r\n\r\nexport { AccordionPanel };\r\n"],
  "mappings": "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",
  "names": ["accordionHeading", "accordionHeading", "accordionPanel", "accordionPanel"]
}

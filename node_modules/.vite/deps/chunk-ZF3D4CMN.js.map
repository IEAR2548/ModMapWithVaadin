{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/data-provider-controller/helpers.js", "../../@vaadin/component-base/src/data-provider-controller/cache.js", "../../@vaadin/component-base/src/data-provider-controller/data-provider-controller.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\n\r\n/**\r\n * @typedef {import('./cache.js').Cache} Cache\r\n */\r\n\r\n/**\r\n * Returns context for the given flattened index, including:\r\n * - the corresponding cache\r\n * - the cache level\r\n * - the corresponding item (if loaded)\r\n * - the item's index in the cache's items array\r\n * - the page containing the item\r\n *\r\n * @param {Cache} cache\r\n * @param {number} flatIndex\r\n */\r\nexport function getFlatIndexContext(cache, flatIndex, level = 0) {\r\n  let levelIndex = flatIndex;\r\n\r\n  for (const subCache of cache.subCaches) {\r\n    const index = subCache.parentCacheIndex;\r\n    if (levelIndex <= index) {\r\n      break;\r\n    } else if (levelIndex <= index + subCache.flatSize) {\r\n      return getFlatIndexContext(subCache, levelIndex - index - 1, level + 1);\r\n    }\r\n    levelIndex -= subCache.flatSize;\r\n  }\r\n\r\n  return {\r\n    cache,\r\n    item: cache.items[levelIndex],\r\n    index: levelIndex,\r\n    page: Math.floor(levelIndex / cache.pageSize),\r\n    level,\r\n  };\r\n}\r\n\r\n/**\r\n * Returns context for the given item, including:\r\n * - the cache containing the item\r\n * - the cache level\r\n * - the item\r\n * - the item's index in the cache's items array\r\n * - the item's flattened index\r\n * - the item's sub-cache (if exists)\r\n * - the page containing the item\r\n *\r\n * If the item isn't found, the method returns undefined.\r\n *\r\n * @param {Cache} cache\r\n * @param {{ getItemId: (item: unknown) => unknown}} context\r\n * @param {Cache} cache\r\n * @param {unknown} targetItem\r\n * @param {number} level\r\n * @param {number} levelFlatIndex\r\n */\r\nexport function getItemContext({ getItemId }, cache, targetItem, level = 0, levelFlatIndex = 0) {\r\n  // Start looking in this cache\r\n  for (let index = 0; index < cache.items.length; index++) {\r\n    const item = cache.items[index];\r\n    if (!!item && getItemId(item) === getItemId(targetItem)) {\r\n      return {\r\n        cache,\r\n        level,\r\n        item,\r\n        index,\r\n        page: Math.floor(index / cache.pageSize),\r\n        subCache: cache.getSubCache(index),\r\n        flatIndex: levelFlatIndex + cache.getFlatIndex(index),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Look through sub-caches\r\n  for (const subCache of cache.subCaches) {\r\n    const parentItemFlatIndex = levelFlatIndex + cache.getFlatIndex(subCache.parentCacheIndex);\r\n    const result = getItemContext({ getItemId }, subCache, targetItem, level + 1, parentItemFlatIndex + 1);\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Recursively returns the globally flat index of the item the given indexes point to.\r\n * Each index in the array points to a sub-item of the previous index.\r\n * Using `Infinity` as an index will point to the last item on the level.\r\n *\r\n * @param {Cache} cache\r\n * @param {number[]} path\r\n * @param {number} flatIndex\r\n * @return {number}\r\n */\r\nexport function getFlatIndexByPath(cache, [levelIndex, ...subIndexes], flatIndex = 0) {\r\n  if (levelIndex === Infinity) {\r\n    // Treat Infinity as the last index on the level\r\n    levelIndex = cache.size - 1;\r\n  }\r\n\r\n  const flatIndexOnLevel = cache.getFlatIndex(levelIndex);\r\n  const subCache = cache.getSubCache(levelIndex);\r\n  if (subCache && subCache.flatSize > 0 && subIndexes.length) {\r\n    return getFlatIndexByPath(subCache, subIndexes, flatIndex + flatIndexOnLevel + 1);\r\n  }\r\n  return flatIndex + flatIndexOnLevel;\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { getFlatIndexContext } from './helpers.js';\r\n\r\n/**\r\n * A class that stores items with their associated sub-caches.\r\n */\r\nexport class Cache {\r\n  /**\r\n   * A context object.\r\n   *\r\n   * @type {{ isExpanded: (item: unknown) => boolean }}\r\n   */\r\n  context;\r\n\r\n  /**\r\n   * The number of items to display per page.\r\n   *\r\n   * @type {number}\r\n   */\r\n  pageSize;\r\n\r\n  /**\r\n   * An array of cached items.\r\n   *\r\n   * @type {object[]}\r\n   */\r\n  items = [];\r\n\r\n  /**\r\n   * A map where the key is a requested page and the value is a callback\r\n   * that will be called with data once the request is complete.\r\n   *\r\n   * @type {Record<number, Function>}\r\n   */\r\n  pendingRequests = {};\r\n\r\n  /**\r\n   * A map where the key is the index of an item in the `items` array\r\n   * and the value is a sub-cache associated with that item.\r\n   *\r\n   * Note, it's intentionally defined as an object instead of a Map\r\n   * to ensure that Object.entries() returns an array with keys sorted\r\n   * in alphabetical order, rather than the order they were added.\r\n   *\r\n   * @type {Record<number, Cache>}\r\n   * @private\r\n   */\r\n  __subCacheByIndex = {};\r\n\r\n  /**\r\n   * The number of items.\r\n   *\r\n   * @type {number}\r\n   * @private\r\n   */\r\n  __size = 0;\r\n\r\n  /**\r\n   * The total number of items, including items from expanded sub-caches.\r\n   *\r\n   * @type {number}\r\n   * @private\r\n   */\r\n  __flatSize = 0;\r\n\r\n  /**\r\n   * @param {Cache['context']} context\r\n   * @param {number} pageSize\r\n   * @param {number | undefined} size\r\n   * @param {Cache | undefined} parentCache\r\n   * @param {number | undefined} parentCacheIndex\r\n   */\r\n  constructor(context, pageSize, size, parentCache, parentCacheIndex) {\r\n    this.context = context;\r\n    this.pageSize = pageSize;\r\n    this.size = size;\r\n    this.parentCache = parentCache;\r\n    this.parentCacheIndex = parentCacheIndex;\r\n    this.__flatSize = size || 0;\r\n  }\r\n\r\n  /**\r\n   * An item in the parent cache that the current cache is associated with.\r\n   *\r\n   * @return {object | undefined}\r\n   */\r\n  get parentItem() {\r\n    return this.parentCache && this.parentCache.items[this.parentCacheIndex];\r\n  }\r\n\r\n  /**\r\n   * An array of sub-caches sorted in the same order as their associated items\r\n   * appear in the `items` array.\r\n   *\r\n   * @return {Cache[]}\r\n   */\r\n  get subCaches() {\r\n    return Object.values(this.__subCacheByIndex);\r\n  }\r\n\r\n  /**\r\n   * Whether the cache or any of its descendant caches have pending requests.\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  get isLoading() {\r\n    if (Object.keys(this.pendingRequests).length > 0) {\r\n      return true;\r\n    }\r\n\r\n    return this.subCaches.some((subCache) => subCache.isLoading);\r\n  }\r\n\r\n  /**\r\n   * The total number of items, including items from expanded sub-caches.\r\n   *\r\n   * @return {number}\r\n   */\r\n  get flatSize() {\r\n    return this.__flatSize;\r\n  }\r\n\r\n  /**\r\n   * The total number of items, including items from expanded sub-caches.\r\n   *\r\n   * @protected\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  get effectiveSize() {\r\n    console.warn(\r\n      '<vaadin-grid> The `effectiveSize` property of ItemCache is deprecated and will be removed in Vaadin 25.',\r\n    );\r\n    return this.flatSize;\r\n  }\r\n\r\n  /**\r\n   * The number of items.\r\n   *\r\n   * @return {number}\r\n   */\r\n  get size() {\r\n    return this.__size;\r\n  }\r\n\r\n  /**\r\n   * Sets the number of items.\r\n   *\r\n   * @param {number} size\r\n   */\r\n  set size(size) {\r\n    const oldSize = this.__size;\r\n    if (oldSize === size) {\r\n      return;\r\n    }\r\n\r\n    this.__size = size;\r\n\r\n    if (this.context.placeholder !== undefined) {\r\n      this.items.length = size || 0;\r\n      for (let i = 0; i < size || 0; i++) {\r\n        this.items[i] ||= this.context.placeholder;\r\n      }\r\n    }\r\n\r\n    Object.keys(this.pendingRequests).forEach((page) => {\r\n      const startIndex = parseInt(page) * this.pageSize;\r\n      if (startIndex >= this.size || 0) {\r\n        delete this.pendingRequests[page];\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the flattened size for the cache and its descendant caches recursively.\r\n   */\r\n  recalculateFlatSize() {\r\n    this.__flatSize =\r\n      !this.parentItem || this.context.isExpanded(this.parentItem)\r\n        ? this.size +\r\n          this.subCaches.reduce((total, subCache) => {\r\n            subCache.recalculateFlatSize();\r\n            return total + subCache.flatSize;\r\n          }, 0)\r\n        : 0;\r\n  }\r\n\r\n  /**\r\n   * Adds an array of items corresponding to the given page\r\n   * to the `items` array.\r\n   *\r\n   * @param {number} page\r\n   * @param {object[]} items\r\n   */\r\n  setPage(page, items) {\r\n    const startIndex = page * this.pageSize;\r\n    items.forEach((item, i) => {\r\n      const itemIndex = startIndex + i;\r\n      if (this.size === undefined || itemIndex < this.size) {\r\n        this.items[itemIndex] = item;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the sub-cache associated with the item at the given index\r\n   * in the `items` array.\r\n   *\r\n   * @param {number} index\r\n   * @return {Cache | undefined}\r\n   */\r\n  getSubCache(index) {\r\n    return this.__subCacheByIndex[index];\r\n  }\r\n\r\n  /**\r\n   * Removes the sub-cache associated with the item at the given index\r\n   * in the `items` array.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeSubCache(index) {\r\n    delete this.__subCacheByIndex[index];\r\n  }\r\n\r\n  /**\r\n   * Removes all sub-caches.\r\n   */\r\n  removeSubCaches() {\r\n    this.__subCacheByIndex = {};\r\n  }\r\n\r\n  /**\r\n   * Creates and associates a sub-cache for the item at the given index\r\n   * in the `items` array.\r\n   *\r\n   * @param {number} index\r\n   * @return {Cache}\r\n   */\r\n  createSubCache(index) {\r\n    const subCache = new Cache(this.context, this.pageSize, 0, this, index);\r\n    this.__subCacheByIndex[index] = subCache;\r\n    return subCache;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the flattened index corresponding to the given index\r\n   * of an item in the `items` array.\r\n   *\r\n   * @param {number} index\r\n   * @return {number}\r\n   */\r\n  getFlatIndex(index) {\r\n    const clampedIndex = Math.max(0, Math.min(this.size - 1, index));\r\n\r\n    return this.subCaches.reduce((prev, subCache) => {\r\n      const index = subCache.parentCacheIndex;\r\n      return clampedIndex > index ? prev + subCache.flatSize : prev;\r\n    }, clampedIndex);\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  getItemForIndex(index) {\r\n    console.warn(\r\n      '<vaadin-grid> The `getItemForIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\r\n    );\r\n    const { item } = getFlatIndexContext(this, index);\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  getCacheAndIndex(index) {\r\n    console.warn(\r\n      '<vaadin-grid> The `getCacheAndIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\r\n    );\r\n    const { cache, index: scaledIndex } = getFlatIndexContext(this, index);\r\n    return { cache, scaledIndex };\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  updateSize() {\r\n    console.warn('<vaadin-grid> The `updateSize` method of ItemCache is deprecated and will be removed in Vaadin 25.');\r\n    this.recalculateFlatSize();\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  ensureSubCacheForScaledIndex(scaledIndex) {\r\n    console.warn(\r\n      '<vaadin-grid> The `ensureSubCacheForScaledIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\r\n    );\r\n\r\n    if (!this.getSubCache(scaledIndex)) {\r\n      const subCache = this.createSubCache(scaledIndex);\r\n      this.context.__controller.__loadCachePage(subCache, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  get grid() {\r\n    console.warn('<vaadin-grid> The `grid` property of ItemCache is deprecated and will be removed in Vaadin 25.');\r\n    return this.context.__controller.host;\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\r\n   */\r\n  get itemCaches() {\r\n    console.warn(\r\n      '<vaadin-grid> The `itemCaches` property of ItemCache is deprecated and will be removed in Vaadin 25.',\r\n    );\r\n    return this.__subCacheByIndex;\r\n  }\r\n}\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2025 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { Cache } from './cache.js';\r\nimport { getFlatIndexByPath, getFlatIndexContext, getItemContext } from './helpers.js';\r\n\r\n/**\r\n * A controller that stores and manages items loaded with a data provider.\r\n */\r\nexport class DataProviderController extends EventTarget {\r\n  /**\r\n   * The controller host element.\r\n   *\r\n   * @param {HTMLElement}\r\n   */\r\n  host;\r\n\r\n  /**\r\n   * A callback that returns data based on the passed params such as\r\n   * `page`, `pageSize`, `parentItem`, etc.\r\n   */\r\n  dataProvider;\r\n\r\n  /**\r\n   * A callback that returns additional params that need to be passed\r\n   * to the data provider callback with every request.\r\n   */\r\n  dataProviderParams;\r\n\r\n  /**\r\n   * A number of items to display per page.\r\n   *\r\n   * @type {number}\r\n   */\r\n  pageSize;\r\n\r\n  /**\r\n   * A callback that returns whether the given item is expanded.\r\n   *\r\n   * @type {(item: unknown) => boolean}\r\n   */\r\n  isExpanded;\r\n\r\n  /**\r\n   * A callback that returns the id for the given item and that\r\n   * is used when checking object items for equality.\r\n   *\r\n   * @type { (item: unknown) => unknown}\r\n   */\r\n  getItemId;\r\n\r\n  /**\r\n   * A reference to the root cache instance.\r\n   *\r\n   * @param {Cache}\r\n   */\r\n  rootCache;\r\n\r\n  /**\r\n   * A placeholder item that is used to indicate that the item is not loaded yet.\r\n   *\r\n   * @type {unknown}\r\n   */\r\n  placeholder;\r\n\r\n  /**\r\n   * A callback that returns whether the given item is a placeholder.\r\n   *\r\n   * @type {(item: unknown) => boolean}\r\n   */\r\n  isPlaceholder;\r\n\r\n  constructor(\r\n    host,\r\n    { size, pageSize, isExpanded, getItemId, isPlaceholder, placeholder, dataProvider, dataProviderParams },\r\n  ) {\r\n    super();\r\n    this.host = host;\r\n    this.pageSize = pageSize;\r\n    this.getItemId = getItemId;\r\n    this.isExpanded = isExpanded;\r\n    this.placeholder = placeholder;\r\n    this.isPlaceholder = isPlaceholder;\r\n    this.dataProvider = dataProvider;\r\n    this.dataProviderParams = dataProviderParams;\r\n    this.rootCache = this.__createRootCache(size);\r\n  }\r\n\r\n  /**\r\n   * The total number of items, including items from expanded sub-caches.\r\n   */\r\n  get flatSize() {\r\n    return this.rootCache.flatSize;\r\n  }\r\n\r\n  /** @private */\r\n  get __cacheContext() {\r\n    return {\r\n      isExpanded: this.isExpanded,\r\n      placeholder: this.placeholder,\r\n      // The controller instance is needed to ensure deprecated cache methods work.\r\n      __controller: this,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Whether the root cache or any of its decendant caches have pending requests.\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  isLoading() {\r\n    return this.rootCache.isLoading;\r\n  }\r\n\r\n  /**\r\n   * Sets the page size and clears the cache.\r\n   *\r\n   * @param {number} pageSize\r\n   */\r\n  setPageSize(pageSize) {\r\n    this.pageSize = pageSize;\r\n    this.clearCache();\r\n  }\r\n\r\n  /**\r\n   * Sets the data provider callback and clears the cache.\r\n   *\r\n   * @type {Function}\r\n   */\r\n  setDataProvider(dataProvider) {\r\n    this.dataProvider = dataProvider;\r\n    this.clearCache();\r\n  }\r\n\r\n  /**\r\n   * Recalculates the flattened size.\r\n   */\r\n  recalculateFlatSize() {\r\n    this.rootCache.recalculateFlatSize();\r\n  }\r\n\r\n  /**\r\n   * Clears the cache.\r\n   */\r\n  clearCache() {\r\n    this.rootCache = this.__createRootCache(this.rootCache.size);\r\n  }\r\n\r\n  /**\r\n   * Returns context for the given flattened index, including:\r\n   * - the corresponding cache\r\n   * - the cache level\r\n   * - the corresponding item (if loaded)\r\n   * - the item's index in the cache's items array\r\n   * - the page containing the item\r\n   *\r\n   * @param {number} flatIndex\r\n   */\r\n  getFlatIndexContext(flatIndex) {\r\n    return getFlatIndexContext(this.rootCache, flatIndex);\r\n  }\r\n\r\n  /**\r\n   * Returns context for the given item, including:\r\n   * - the cache containing the item\r\n   * - the cache level\r\n   * - the item\r\n   * - the item's index in the cache's items array\r\n   * - the item's flattened index\r\n   * - the item's sub-cache (if exists)\r\n   * - the page containing the item\r\n   *\r\n   * If the item isn't found, the method returns undefined.\r\n   */\r\n  getItemContext(item) {\r\n    return getItemContext({ getItemId: this.getItemId }, this.rootCache, item);\r\n  }\r\n\r\n  /**\r\n   * Returns the flattened index for the item that the given indexes point to.\r\n   * Each index in the path array points to a sub-item of the previous index.\r\n   * Using `Infinity` as an index will point to the last item on the level.\r\n   *\r\n   * @param {number[]} path\r\n   * @return {number}\r\n   */\r\n  getFlatIndexByPath(path) {\r\n    return getFlatIndexByPath(this.rootCache, path);\r\n  }\r\n\r\n  /**\r\n   * Requests the data provider to load the page with the item corresponding\r\n   * to the given flattened index. If the item is already loaded, the method\r\n   * returns immediatelly.\r\n   *\r\n   * @param {number} flatIndex\r\n   */\r\n  ensureFlatIndexLoaded(flatIndex) {\r\n    const { cache, page, item } = this.getFlatIndexContext(flatIndex);\r\n\r\n    if (!this.__isItemLoaded(item)) {\r\n      this.__loadCachePage(cache, page);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a sub-cache for the item corresponding to the given flattened index and\r\n   * requests the data provider to load the first page into the created sub-cache.\r\n   * If the sub-cache already exists, the method returns immediatelly.\r\n   *\r\n   * @param {number} flatIndex\r\n   */\r\n  ensureFlatIndexHierarchy(flatIndex) {\r\n    const { cache, item, index } = this.getFlatIndexContext(flatIndex);\r\n\r\n    if (this.__isItemLoaded(item) && this.isExpanded(item) && !cache.getSubCache(index)) {\r\n      const subCache = cache.createSubCache(index);\r\n      this.__loadCachePage(subCache, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the first page into the root cache.\r\n   */\r\n  loadFirstPage() {\r\n    this.__loadCachePage(this.rootCache, 0);\r\n  }\r\n\r\n  /** @private */\r\n  __createRootCache(size) {\r\n    return new Cache(this.__cacheContext, this.pageSize, size);\r\n  }\r\n\r\n  /** @private */\r\n  __loadCachePage(cache, page) {\r\n    if (!this.dataProvider || cache.pendingRequests[page]) {\r\n      return;\r\n    }\r\n\r\n    let params = {\r\n      page,\r\n      pageSize: this.pageSize,\r\n      parentItem: cache.parentItem,\r\n    };\r\n\r\n    if (this.dataProviderParams) {\r\n      params = { ...params, ...this.dataProviderParams() };\r\n    }\r\n\r\n    const callback = (items, size) => {\r\n      if (cache.pendingRequests[page] !== callback) {\r\n        return;\r\n      }\r\n\r\n      if (size !== undefined) {\r\n        cache.size = size;\r\n      } else if (params.parentItem) {\r\n        cache.size = items.length;\r\n      }\r\n\r\n      cache.setPage(page, items);\r\n\r\n      this.recalculateFlatSize();\r\n\r\n      this.dispatchEvent(new CustomEvent('page-received'));\r\n\r\n      delete cache.pendingRequests[page];\r\n\r\n      this.dispatchEvent(new CustomEvent('page-loaded'));\r\n    };\r\n\r\n    cache.pendingRequests[page] = callback;\r\n\r\n    this.dispatchEvent(new CustomEvent('page-requested'));\r\n\r\n    this.dataProvider(params, callback);\r\n  }\r\n\r\n  /** @private */\r\n  __isItemLoaded(item) {\r\n    if (this.isPlaceholder) {\r\n      return !this.isPlaceholder(item);\r\n    } else if (this.placeholder) {\r\n      return item !== this.placeholder;\r\n    }\r\n    return !!item;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["index"]
}
